<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Autodesk Fusion 360</title>
      <link href="2021/03/fusion-360/"/>
      <url>2021/03/fusion-360/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>I decided to have a hoon with Fusion 360 following free tutorials from <a href="https://www.youtube.com/playlist?list=PLWLtHp5rnDuTFa2CpkuF_eYK8-aCMMID1">RC CAD-2-VR</a></p><h3 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h3><ul><li><a href="https://www.rccad2vr.com/rc-airplane-design-build-episodes/how-i-designed-a-rc-airplane-in-fusion-360">Working images (L-1011 Footprint Diagram, L-1011 Profile Diagam, L-1011 Front Elevation Diagram)</a></li><li><a href="https://www.autodesk.com/products/fusion-360/personal">Fusion 360, its free for personal and hobby use.</a></li></ul><h3 id="How-To-Start-Designing-RC-Airplanes-in-Fusion-360-Tutorial"><a href="#How-To-Start-Designing-RC-Airplanes-in-Fusion-360-Tutorial" class="headerlink" title="How To Start Designing RC Airplanes in Fusion 360 Tutorial"></a>How To Start Designing RC Airplanes in Fusion 360 Tutorial</h3><p>How To Start Designing RC Airplanes in Fusion 360 Tutorial [Episode 1]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/_7vmUEARiYE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Part 1 | How To Design Airplane Wings in Fusion 360 - Airfoils [Episode 2]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/r2uzPa9xtaw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Part 2 | Design Airplane Wings in Fusion 360 - Spars &amp; Ribs [Episode 3]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/t5zMI34ZE6I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Part 3 | Design Airplane Wings in Fusion 360 - Joints, Spar Caps &amp; Wing Mount [Episode 4]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/OIBXSqw_frM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>How to 3D Model an Airplane Fuselage Nose in Fusion 360 [Episode 5]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/aG9bX2T9o1Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>How to 3D Model an Airplane Empennage “Tail” in Fusion 360 [Episode 6]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Ii1llR3i7o4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Completing our Fusion 360 Airplane Model with Longerons &amp; Stringers [Episode 7]</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VkqpWPg2X-w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> cad </tag>
            
            <tag> cam </tag>
            
            <tag> cnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNC Machine Scratch Build</title>
      <link href="2021/03/cnc-machine-scratch-build/"/>
      <url>2021/03/cnc-machine-scratch-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Following on the <a href="/2021/03/cnc-machine/">CMC Machine</a> post where I tried to understand the flow from <code>Computer Aided Design (CAD)</code> to <code>Computer Aided Manufacturing (CAM)</code> and finally to <code>Computer Numerical Control (CNC)</code> I felt I was in a good space to look at scratch building a Machine. Although it is possible to purchase a kit, its a lot more expensive and I was inspired by <a href="https://www.youtube.com/channel/UCnRwrrMKMCvcHhY5hhE3YZw">Gökmen ALTUNTAŞ</a> to build a CNC Machine with a wood frame.</p><p>These are some of the DIY Kits I looked at, the cost was just too high for my pocket!</p><ul><li><a href="https://www.inventables.com/technologies/x-carve">Inventables X-Carve</a> - USD2999</li><li><a href="https://www.aliexpress.com/item/1005001689987581.html">QueenBee PRO</a> - USD1000 (approx ex import duty, shipping and GTS)</li></ul><h3 id="Gokmen-Altuntas-CNC-Machine-Scratch-Build"><a href="#Gokmen-Altuntas-CNC-Machine-Scratch-Build" class="headerlink" title="Gokmen Altuntas CNC Machine Scratch Build"></a>Gokmen Altuntas CNC Machine Scratch Build</h3><p>I thought a good place to start is watch and understand the two part Youtube series, then document the steps and finally cost it. At 600mm by 400mm working bed area I felt this is a pretty good first machine.</p><p>DIY CNC Router Part 1 // Building a Small CNC Router</p><iframe width="560" height="315" src="https://www.youtube.com/embed/qab0aceb7uw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>DIY CNC Router Part 2 // Building a Small CNC Router</p><iframe width="560" height="315" src="https://www.youtube.com/embed/TTEhwzCbWMA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Building-the-machine"><a href="#Building-the-machine" class="headerlink" title="Building the machine"></a>Building the machine</h3><p>Trying to un-pack the videos into steps I can follow.</p><p><img src="/d/cnc-machine/xyz-axis.png" alt="XYZ Axis - Cartesian Coordinate System"></p><h4 id="Base-Frame-Y-Axis"><a href="#Base-Frame-Y-Axis" class="headerlink" title="Base Frame / Y-Axis"></a>Base Frame / Y-Axis</h4><p>The base frame is just a rectangle with the 12mm Linear Rail for the <code>Y Axis</code>. </p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-01.png" alt="CNC Machine base"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-07.png" alt="Y-Axis lead screw mount"></p><h4 id="X-Axis"><a href="#X-Axis" class="headerlink" title="X-Axis"></a>X-Axis</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-03.png" alt="CNC Machine router bracket mount"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-02.png" alt="CNC Machine with bed removed"></p><h4 id="Z-Axis"><a href="#Z-Axis" class="headerlink" title="Z-Axis"></a>Z-Axis</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-06.png" alt="Building up the gantry height"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-router-bracket.png" alt="CNC Machine router bracket"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-10.png" alt="Foo"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-11.png" alt="Foo"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-12.png" alt="Foo"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-08.png" alt="Z-Axis Router Mount"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-09.png" alt="Foo"></p><h4 id="Bed"><a href="#Bed" class="headerlink" title="Bed"></a>Bed</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-04.png" alt="CNC Machine with bed"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-13.png" alt="Raw bed with keyhole/T-slot grooves"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-14.png" alt="Sacrificial masonite wood"></p><h4 id="CNC-Machine-in-action"><a href="#CNC-Machine-in-action" class="headerlink" title="CNC Machine in action"></a>CNC Machine in action</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-05.png" alt="CNC Machine in action"></p><h3 id="Shopping-List"><a href="#Shopping-List" class="headerlink" title="Shopping List"></a>Shopping List</h3><p>Details on each of these <a href="/2021/03/cnc-machine/">parts is in this post</a>.</p><table><thead><tr><th>Group</th><th>Details</th><th>Link</th></tr></thead><tbody><tr><td>Linear Guide Rail</td><td>2x 600mm SBR12 Linear Guide Rail</td><td></td></tr><tr><td></td><td>2x 400mm SBR12 Linear Guide Rail</td><td><a href="https://bit.ly/2GSWhDv%E2%80%8B">Ali Express</a></td></tr><tr><td>Rods</td><td>2x 12mm by 18cm rods</td><td></td></tr><tr><td>Coupling Bore</td><td>x3 Aluminum Alloy 5x8</td><td><a href="https://bit.ly/3mbvvGN%E2%80%8B">Ali Express</a></td></tr><tr><td>Linear Bearing</td><td>8x SBR12UU</td><td><a href="https://bit.ly/3kdXNym%E2%80%8B">Ali Express</a></td></tr><tr><td></td><td>4x SCE12</td><td><a href="http://www.makershop.co.nz/Bearings/10mmLinear/SCS10UU">makershop.co.nz ~ SCS10UU :(</a></td></tr><tr><td>Lead Screw &amp; Nuts</td><td>1x 600mm T8 Lead Screw with lead 4mm</td><td></td></tr><tr><td></td><td>1x 400mm T8 Lead Screw with lead 4mm</td><td></td></tr><tr><td></td><td>1x 200mm T8 Lead Screw with lead 4mm</td><td><a href="https://bit.ly/2FqdGTB%E2%80%8B">Ali Express</a></td></tr><tr><td></td><td>x3 T8 Nut for lead screw with lead 4mm</td><td><a href="https://bit.ly/33pJAYA">Ali Express</a></td></tr><tr><td>Bearings</td><td>x3 698 zz bearing</td><td><a href="https://nzminiaturebearings.com/product/8x19x6-mm-698-ZZ-Bearing.html">nzminiaturebearings.com</a></td></tr><tr><td>Stepper Motors</td><td>x3 NEMA 17 17HS4401</td><td><a href="https://www.trademe.co.nz/3024612797">trademe.co.nz</a></td></tr><tr><td></td><td></td><td><a href="https://bit.ly/2ZP308n%E2%80%8B">Ali Express</a></td></tr><tr><td></td><td>or x3 NEMA 17 High torque</td><td><a href="https://www.trademe.co.nz/3025910539">trademe.co.nz</a></td></tr><tr><td>Mounting Plate</td><td>x2 NEMA 17 42-Series</td><td><a href="https://bit.ly/2RondwS%E2%80%8B">Ali Express</a></td></tr><tr><td>Drivers</td><td>x3 L298N Stepper Motor Driver</td><td><a href="https://www.trademe.co.nz/3025327682">trademe.co.nz</a></td></tr><tr><td>Micro Controller</td><td>Arduino Uno + 4pcs DRV8825 Stepper-Motor Driver + CNC Shield v3</td><td><a href="https://www.trademe.co.nz/3023322576">trademe.co.nz</a></td></tr><tr><td></td><td>Arduino Uno + 4pcs A4988 Stepper-Motor Driver + CNC Shield v3</td><td><a href="https://www.trademe.co.nz/3023102863">trademe.co.nz</a></td></tr><tr><td></td><td>Original 3018 CNC Control Board</td><td><a href="https://bit.ly/2ZurTpl%E2%80%8B">Ali Express</a></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
            <tag> wood work </tag>
            
            <tag> arduino </tag>
            
            <tag> cnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNC Machine</title>
      <link href="2021/03/cnc-machine/"/>
      <url>2021/03/cnc-machine/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/cnc-machine/cnc-machine.png" alt="CNC Machines"></p><p>I want to understand how these machines work, what they can do and how to build a hobbyist machine. Something with 3 axis that can do 2D cuts. A lot of my research below is based on <a href="https://www.youtube.com/watch?v=lQ-MYnyxh7M">CNC Basics - What You Need To Get Started</a> from <a href="https://www.youtube.com/channel/UCooViVfi0DaWk_eqxIXXiOQ">Product Design Online</a>. There are many use cases such as water-jet and laser cutting but from a cost and simplicity point and my own personal use case I felt a CNC Router is an achievable / realistic goal. </p><p><img src="/d/cnc-machine/xyz-axis.png" alt="XYZ Axis - Cartesian Coordinate System"></p><p>CNC workflows can grouped as follows:</p><table><thead><tr><th>Computer Aided Design (CAD)</th><th>Computer Aided Manufacturing (CAM)</th><th>Computer Numerical Control (CNC)</th></tr></thead><tbody><tr><td>Design your item on the computer</td><td>Create instructions how to carve the item</td><td>Pass instructions via a digital interface to the machine</td></tr><tr><td>2D File</td><td>Material</td><td>G-Code</td></tr><tr><td>2.5D File</td><td>Tool</td><td>Control Box</td></tr><tr><td>3D File</td><td>Speeds &amp; Feeds</td><td></td></tr><tr><td></td><td>Toolpath</td><td></td></tr></tbody></table><h2 id="Computer-Aided-Design-CAD"><a href="#Computer-Aided-Design-CAD" class="headerlink" title="Computer Aided Design (CAD)"></a>Computer Aided Design (CAD)</h2><p>Software to design your item on the computer. Often the for personal / hobby use these are free with basic functionality.</p><p>Some like <a href="https://www.autodesk.com/products/fusion-360/personal">Fusion 360</a> combine CAD and CAM features and <a href="https://www.youtube.com/c/ProductDesignOnline/playlists">Product Design Online</a> have MANY Fusion tutorials.</p><ul><li><a href="https://www.autodesk.com/products/fusion-360/personal">Autodesk Fusion 360</a> | <a href="/2021/03/fusion-360/">RC CAD-2-VR Fusion 360 Tutorial</a></li><li><a href="http://camlab.sienci.com/camlab">CAMLab - runs entirely within your browser</a></li><li><a href="https://carbide3d.com/carbidecreate/">Carbide Create - download and install</a></li><li><a href="https://www.inventables.com/technologies/easel">Easel</a></li><li>Inkscape</li><li>Adobe Illustrator</li><li><a href="https://www.solidsolutions.co.uk/blog/2009/10/solidworks-2010-available-to-download-now/#.YGGA_q8zZPY">Solid Works 2010</a></li></ul><p><strong>Cutting strategies</strong></p><p>Cuts can be before the line, on the line or past the line.</p><table><thead><tr><th>2D</th><th>2.5D</th><th>3D</th></tr></thead><tbody><tr><td>The machine will trace an object to cut it out, things like letters and basic shapes.</td><td>Simple 2D cut shapes but the machine cuts deeper in certain areas.</td><td>The machine will use X,Y and Z axis at the same time. These are for complex projects.</td></tr></tbody></table><p><img src="/d/cnc-machine/cutting-strategies.png" alt="Cutting strategies"></p><h2 id="Computer-Aided-Manufacturing-CAM"><a href="#Computer-Aided-Manufacturing-CAM" class="headerlink" title="Computer Aided Manufacturing (CAM)"></a>Computer Aided Manufacturing (CAM)</h2><p>Using a computer to control a machine that can manufacture things, the flow here would be</p><ol><li>Material: Define the material, this is at a high level the dimensions (width and breadth)</li><li>Tool: The cutting tool must be smaller than the object we are going to cut.</li><li>Speeds &amp; Feeds: Cutting speed is how fast the cutting tool spins in relation to the material. The feed rate is the distance the tool travels during one revolution of the tool.</li><li>Toolpath: The body of instructions, this is where we tell the machine what shape to cut out. (This is the path though space that our cutting tool follows). CAM software can simulate the cut before sending it to the machine.</li></ol><p>At step 3 above we can just use the ideal numbers from an online cheat sheet:</p><p><img src="/d/cnc-machine/speeds-and-feeds.png" alt="Speeds &amp; Feeds"></p><h2 id="Computer-Numerical-Control-CNC"><a href="#Computer-Numerical-Control-CNC" class="headerlink" title="Computer Numerical Control (CNC)"></a>Computer Numerical Control (CNC)</h2><p>At a high level the physical machine flow would be</p><ol><li>Stap down material (clamps, double sided tape or vacuum)</li><li>Place appropriate bit in collet, this needs to be the same as what was defined in the CAM software.</li><li>Place machine in starting position, this is manual with a hobbyist machine.</li><li>Set speed of router and turn it on (this would be manual for a hobbyist machine)</li><li>Hit Run/Play and the machine will start to cut.</li></ol><p>Before we get to that we would need to:</p><ul><li>We need to export the instructions to a langauge the machine can understand. This is nomally G-Code (Geometric Code). </li><li>G-Code simply tells the machine where to travel to.</li><li>The toolpaths would dictate what the software includes in the G-Code.</li></ul><blockquote><p>“G-codes, also called preparatory codes, are any word in a CNC program that begins with the letter G. Generally it is a code telling the machine tool what type of action to perform, such as: Rapid movement (transport the tool as quickly as possible in between cuts) Controlled feed in a straight line or arc.”</p></blockquote><ul><li><a href="https://www.youtube.com/watch?v=iMx_UYrvuos">What is G-Code? – Haas Automation Tip of the Day</a></li><li><a href="https://listoffreeware.com/free-image-to-gcode-converter-software-windows/">https://listoffreeware.com/free-image-to-gcode-converter-software-windows/</a></li></ul><p>A shopping list of these parts are at the <a href="/2021/03/cnc-machine-scratch-build/">bottom of this post</a>.</p><h3 id="Micro-Controller"><a href="#Micro-Controller" class="headerlink" title="Micro Controller"></a>Micro Controller</h3><p>A post processor for <a href="https://github.com/grbl/grbl">GRBL</a> will take the G-Code as an input, these are some controllers that can be used:</p><ul><li><code>Arduino Uno</code>- cheap, simple and comes with some driver kits.</li><li><code>Original 3018 CNC Control Board</code>- little more expensive option. </li></ul><blockquote><p>“GRBL is an open source software or firmware which enables motion control for CNC machines.”</p></blockquote><blockquote><p>“GRBL is a firmware for arduino boards(uno,nano,Duemillanove) that controls stepper motors and spindles/lasers. GRBL uses gcode as input and outputs signals via the arduino pins. Most industrial cnc machines uses parallel port controller that requires Those big purple connectors.”</p></blockquote><p><img src="/d/cnc-machine/arduino-uno.jpg" alt="Arduino Uno"><br><img src="/d/cnc-machine/original-3018-cnc-control-board.jpg" alt="Original 3018 CNC Control Board"></p><h3 id="Raspberry-Pi-Controller"><a href="#Raspberry-Pi-Controller" class="headerlink" title="Raspberry Pi Controller"></a>Raspberry Pi Controller</h3><p>All of this is based on <a href="https://www.youtube.com/watch?v=u35L0jGCqFc">Raspberry Pi as a CNC Controller</a> from <a href="https://www.youtube.com/channel/UChtY6O8Ahw2cz05PS2GhUbg">Make:</a>. The Raspberry Pi would run <a href="https://github.com/winder/Universal-G-Code-Sender">Universal GCode Sender which was developed by Will Winder</a>. It essentially controls the micro controller which will be an Arduino.</p><p>After installing the <a href="2019/10/raspberry-pi-cluster-setup-os/">full raspbian image</a> and setting up the Wifi &amp; SSH the following setup would be needed on the Pi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install maven</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;winder&#x2F;Universal-G-Code-Sender</span><br><span class="line">cd Universal-G-Code-Sender</span><br><span class="line">.&#x2F;run_platform.sh</span><br></pre></td></tr></table></figure><p><img src="/d/cnc-machine/raspberry-pi.jpg" alt="Raspberry Pi v4"></p><h3 id="Drivers"><a href="#Drivers" class="headerlink" title="Drivers"></a>Drivers</h3><ul><li><a href="https://qqtrading.com.my/blog/key-differences-between-the-drv8825-and-a4988">https://qqtrading.com.my/blog/key-differences-between-the-drv8825-and-a4988</a></li><li><a href="https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/">https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/</a></li></ul><p><img src="/d/cnc-machine/shield-with-4-drivers.png" alt="Shield with 4 Drivers"></p><p>Alternatively you can use drivers like the TB6560 3A, Im not 100% sure on the difference - perhaps higher Amp draw/quality.</p><p><img src="/d/cnc-machine/tb6560-driver.png" alt="TB6560 3.5A Driver"></p><h3 id="Stepper-Motors-amp-Mounting-Plate"><a href="#Stepper-Motors-amp-Mounting-Plate" class="headerlink" title="Stepper Motors &amp; Mounting Plate"></a>Stepper Motors &amp; Mounting Plate</h3><p>These have 2 coils to allow them to run backwards or forwards. Atleast 1 is needed for each axis <code>X,Y</code> and <code>Z</code>. An additional motor can be added on <code>A</code> for more power/control. Some machines have this along side their <code>Y</code> - I would guess its for milling harder materials.</p><p><img src="/d/cnc-machine/stepper-motor.png" alt="Stepper Motor"></p><p><img src="/d/cnc-machine/mounting-plate.png" alt="Mounting Plate"></p><h3 id="Coupling-Bore"><a href="#Coupling-Bore" class="headerlink" title="Coupling Bore"></a>Coupling Bore</h3><p>Aluminum Alloy Coupling Bore 5x8. The <code>5x8</code> means the stepper motor shaft is 5mm and the lead screw is 8mm.</p><p><img src="/d/cnc-machine/coupling-bore.png" alt="Coupling Bore"></p><h3 id="Linear-Guide-Rail"><a href="#Linear-Guide-Rail" class="headerlink" title="Linear Guide Rail"></a>Linear Guide Rail</h3><p><img src="/d/cnc-machine/linear-guide-rail.png" alt="Linear Guide Rail"></p><p>Alternative guide rails include</p><ul><li>maker slide</li></ul><p><img src="/d/cnc-machine/maker-slide-01.jpg" alt="Maker slide"></p><ul><li>V-Rail</li></ul><p><img src="/d/cnc-machine/v-rail.jpg" alt="V-Rail"></p><h3 id="Linear-Rods"><a href="#Linear-Rods" class="headerlink" title="Linear Rods"></a>Linear Rods</h3><p><img src="/d/cnc-machine/linear-rods-and-SCE12-linear-bearing.png" alt="Linear Rods and SCE12 Linear Bearing"></p><h3 id="Linear-Bearing"><a href="#Linear-Bearing" class="headerlink" title="Linear Bearing"></a>Linear Bearing</h3><p><img src="/d/cnc-machine/linear-bearing-01.png" alt="SBR12UU Linear Bearing"></p><p><img src="/d/cnc-machine/linear-bearing-02.png" alt="SCE12 Linear Bearing"></p><h3 id="Lead-Screw-and-Nuts"><a href="#Lead-Screw-and-Nuts" class="headerlink" title="Lead Screw and Nuts"></a>Lead Screw and Nuts</h3><ul><li><a href="https://www.blanch.org/belts-vs-screws-in-cnc-design/">https://www.blanch.org/belts-vs-screws-in-cnc-design/</a></li></ul><p><img src="/d/cnc-machine/lead-screw-and-nut.png" alt="Lead Screw and Nuts"></p><p>Alternative to lead screw/nuts are</p><ul><li>Belt systems</li></ul><p><img src="/d/cnc-machine/belt-system.png" alt="Belt system"></p><h3 id="Bearings"><a href="#Bearings" class="headerlink" title="Bearings"></a>Bearings</h3><p>The 698-ZZ inner diameter is 8 mm, the 698-ZZ outer diameter is 19 mm, the 698-ZZ width is 6 mm and <code>zz</code> means both sides have a metal shield.</p><p><img src="/d/cnc-machine/bearings.png" alt="698-ZZ Bearings"></p><h1 id="Other-use-cases"><a href="#Other-use-cases" class="headerlink" title="Other use cases"></a>Other use cases</h1><h2 id="Plotter"><a href="#Plotter" class="headerlink" title="Plotter"></a>Plotter</h2><p>I found these plotter examples of stepper motor from a CD-ROM really cool, not what I want to build but worth having a look at.</p><ul><li><a href="https://www.youtube.com/watch?v=-XhMT4wXSG4">Plotter made of two old CD drives, a servo and a Raspberry Pi</a></li><li><a href="https://homofaciens.de/bilder/technik/plotter-cdrom_010.htm">https://homofaciens.de/bilder/technik/plotter-cdrom_010.htm</a></li><li><a href="https://www.raspberrypi.org/blog/we-love-a-good-pen-plotter/">https://www.raspberrypi.org/blog/we-love-a-good-pen-plotter/</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.instructables.com/Arduino-Controlled-CNC-3D-Printer/">https://www.instructables.com/Arduino-Controlled-CNC-3D-Printer/</a></li></ul><p><strong>4th Axis</strong></p><ul><li><a href="https://hackaday.com/2017/09/03/rolling-around-a-4th-axis/">https://hackaday.com/2017/09/03/rolling-around-a-4th-axis/</a></li><li><a href="https://www.youtube.com/watch?v=2ZVmKiehGnU">DIY CNC 4th Axis Testing</a></li></ul><p><strong>Makerslide.co.za</strong></p><ul><li><a href="https://www.makerslide.co.za/">https://www.makerslide.co.za/</a></li><li><a href="https://www.youtube.com/watch?v=Gzs53Y0-pCo">Makerslide.co.za CNC Machine Assembly Part 1</a></li><li><a href="https://www.youtube.com/watch?v=VVDBCZhRTkM">Makerslide.co.za CNC Machine Assembly Part 2</a></li><li><a href="https://www.youtube.com/watch?v=LrgjOvMdp08">Makerslide.co.za CNC Machine Assembly Part 3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
            <tag> wood work </tag>
            
            <tag> arduino </tag>
            
            <tag> cad </tag>
            
            <tag> cam </tag>
            
            <tag> cnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Hosted Service</title>
      <link href="2021/03/c-sharp-hosted-service/"/>
      <url>2021/03/c-sharp-hosted-service/</url>
      
        <content type="html"><![CDATA[<p>This will create a worker that does some background work. The complete code for these snippets is at <a href="https://github.com/carlpaton/ThreadingDemo/tree/main/src/HostedService.Ca">https://github.com/carlpaton/ThreadingDemo/tree/main/src/HostedService.Ca</a></p><ol><li>Create the empty console application</li><li>Add <code>Microsoft.Extensions.Hosting</code></li><li>Create <code>FooService</code> which inherits and implements <code>BackgroundService</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Update <code>Program.cs</code> to add your worker/service to as a hosted service with <code>.AddHostedService</code>. My service below is <code>FooService</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CreateHostBuilder(args).Build().Run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            services.AddHostedService&lt;FooService&gt;();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>Update <code>FooService</code> to do something, here we just write to the console every 2 seconds. Microsoft suggest the following things you could use this for</li></ol><ul><li>A background task polling a database looking for changes.</li><li>A scheduled task updating some cache periodically.</li><li>An implementation of QueueBackgroundWorkItem that allows a task to be executed on a background thread.</li><li>Processing messages from a message queue in the background of a web app while sharing common services such as ILogger.</li><li>A background task started with Task.Run().</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">int</span> _millisecondsTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooService</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _millisecondsTimeout = <span class="number">2000</span>; <span class="comment">// the value would have been injected with IOptions/Settings</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//_logger.LogDebug($&quot;FooService is starting.&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stoppingToken.IsCancellationRequested)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//_logger.LogDebug($&quot;FooService task doing background work.&quot;);</span></span><br><span class="line"></span><br><span class="line">            SimulateSomeWorker();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//await Task.Delay(_settings.CheckUpdateTime, stoppingToken);</span></span><br><span class="line">            <span class="keyword">await</span> Task.Delay(_millisecondsTimeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//_logger.LogDebug($&quot;GracePeriod background task is stopping.&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SimulateSomeWorker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Worker was run &#123;0&#125;&quot;</span>, DateTime.Now);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>“By default, the cancellation token is set with a 5 seconds timeout, although you can change that value when building your WebHost using the UseShutdownTimeout extension of the IWebHostBuilder. This means that our service is expected to cancel within 5 seconds otherwise it will be more abruptly killed.”</p></blockquote><ul><li><a href="https://github.com/dotnet-architecture/eShopOnContainers/blob/df93807677a9871dba38264459c258cf532af5a8/src/Services/Ordering/Ordering.BackgroundTasks/Services/GracePeriodManagerService.cs">https://github.com/dotnet-architecture/eShopOnContainers/blob/df93807677a9871dba38264459c258cf532af5a8/src/Services/Ordering/Ordering.BackgroundTasks/Services/GracePeriodManagerService.cs</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> threading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core on Raspberry Pi</title>
      <link href="2021/03/dot-net-core-paspberry-pi/"/>
      <url>2021/03/dot-net-core-paspberry-pi/</url>
      
        <content type="html"><![CDATA[<p>Raspberry Pi’s can run <a href="http://localhost:4000/tags/c/">C#</a> controlling the <a href="/2019/12/pi-resources/">GPIO</a> with the librarys below. I had a hoon at <a href="https://github.com/carlpaton/SweetPi">https://github.com/carlpaton/SweetPi</a>.</p><ul><li><a href="https://www.nuget.org/packages/System.Device.Gpio">System.Device.Gpio</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.device.gpio">System.Device.Gpio</a> Namespace</li><li><a href="https://www.nuget.org/packages/Iot.Device.Bindings">Iot.Device.Bindings</a></li></ul><h3 id="Install-Net-Core"><a href="#Install-Net-Core" class="headerlink" title="Install .Net Core"></a>Install .Net Core</h3><p>I tried to use the <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script">dotnet-install scripts</a> and even after manually adding to path it didnt work. So I did it manually:</p><p>Update the OS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>Check for dotnet and install it</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet --info                      ~ fails: &#39;dotnet1&#39; is not recognized as an internal or external command, operable program or batch file.</span><br><span class="line">echo $0                            ~ expect &#96;bash&#96;</span><br></pre></td></tr></table></figure><p>At the time these were latest but always check <a href="https://dotnet.microsoft.com/download/dotnet/3.1">dotnet.microsoft.com/download</a> for the latest versions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir dev</span><br><span class="line">cd dev</span><br><span class="line">wget https:&#x2F;&#x2F;download.visualstudio.microsoft.com&#x2F;download&#x2F;pr&#x2F;349f13f0-400e-476c-ba10-fe284b35b932&#x2F;44a5863469051c5cf103129f1423ddb8&#x2F;dotnet-sdk-3.1.102-linux-arm.tar.gz</span><br><span class="line">wget https:&#x2F;&#x2F;download.visualstudio.microsoft.com&#x2F;download&#x2F;pr&#x2F;8ccacf09-e5eb-481b-a407-2398b08ac6ac&#x2F;1cef921566cb9d1ca8c742c9c26a521c&#x2F;aspnetcore-runtime-3.1.2-linux-arm.tar.gz</span><br></pre></td></tr></table></figure><p>The tar command is also used to extract tar archives: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir dotnet-arm32</span><br><span class="line">tar zxf dotnet-sdk-3.1.102-linux-arm.tar.gz -C $HOME&#x2F;dev&#x2F;dotnet-arm32</span><br><span class="line">tar zxf aspnetcore-runtime-3.1.2-linux-arm.tar.gz -C $HOME&#x2F;dev&#x2F;dotnet-arm32</span><br><span class="line"></span><br><span class="line">export DOTNET_ROOT&#x3D;$HOME&#x2F;dev&#x2F;dotnet-arm32</span><br><span class="line">export PATH&#x3D;$PATH:$HOME&#x2F;dev&#x2F;dotnet-arm32</span><br><span class="line"></span><br><span class="line">dotnet --info                      ~ works</span><br></pre></td></tr></table></figure><p>Adding <code>export</code> above only adds it for that session, you can perminantly add it as follows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH                        ~ wont have &#96;dev&#x2F;dotnet&#96;</span><br><span class="line">sudo nano ~&#x2F;.bashrc               ~ edit PATH in [~&#x2F;.bashrc] file</span><br><span class="line"></span><br><span class="line">At the bottom of the file add the exports. Save and exit.</span><br><span class="line"></span><br><span class="line">export DOTNET_ROOT&#x3D;$HOME&#x2F;dev&#x2F;dotnet-arm32</span><br><span class="line">export PATH&#x3D;$PATH:$HOME&#x2F;dev&#x2F;dotnet-arm32</span><br><span class="line"></span><br><span class="line">source ~&#x2F;.bashrc                 ~ reload the [~&#x2F;.bashrc] file </span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/iot/deployment">https://docs.microsoft.com/en-us/dotnet/iot/deployment</a></li><li><a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></li><li><a href="https://www.raspberrypi.org/blog/visual-studio-code-comes-to-raspberry-pi/">https://www.raspberrypi.org/blog/visual-studio-code-comes-to-raspberry-pi/</a></li><li><a href="https://edi.wang/post/2019/9/29/setup-net-core-30-runtime-and-sdk-on-raspberry-pi-4">https://edi.wang/post/2019/9/29/setup-net-core-30-runtime-and-sdk-on-raspberry-pi-4</a></li><li><a href="https://elbruno.com/2020/01/05/raspberrypi-how-to-solve-dotnet-core-not-recognized-after-reboot/">https://elbruno.com/2020/01/05/raspberrypi-how-to-solve-dotnet-core-not-recognized-after-reboot/</a></li></ul><h3 id="Install-VS-Code"><a href="#Install-VS-Code" class="headerlink" title="Install VS Code"></a>Install VS Code</h3><p>I like to edit and run the code on the Pi, VS code can be used with the <a href="/2019/09/ide-visual-studio-code/">C# extensions</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install code -y</span><br></pre></td></tr></table></figure><h3 id="Hardware-ideas-amp-Help"><a href="#Hardware-ideas-amp-Help" class="headerlink" title="Hardware ideas &amp; Help"></a>Hardware ideas &amp; Help</h3><p>Its amazing the things people share online, helps noobs like me!</p><p><strong>LED</strong></p><ul><li><a href="https://github.com/dotnet/iot/blob/main/samples/led-blink/README.md">Blink an LED with .NET Core on a Raspberry Pi</a></li><li><a href="https://www.youtube.com/watch?v=S0jY6ClycrM">Peter Gallagher: LED GPIO</a></li><li><a href="https://www.youtube.com/watch?v=BY6d8JoGS2E">Industry40tv: LED GPIO</a></li></ul><p><strong>LEDS &amp; Resistors</strong></p><ul><li><a href="https://www.youtube.com/watch?v=BWYy3qZ315U&amp;t=225s">https://www.youtube.com/watch?v=BWYy3qZ315U&amp;t=225s</a></li><li><a href="https://www.youtube.com/watch?v=hduuUDiku80">https://www.youtube.com/watch?v=hduuUDiku80</a></li></ul><p><strong>Servos</strong></p><ul><li><a href="https://github.com/dotnet/iot/tree/main/src/devices/ServoMotor">Servo Motor</a></li><li><a href="https://gist.github.com/jsturtevant/6aa9832d0072438c1069">Windows IoT 10 Servo Motor Example</a></li></ul><p><strong>Sensor</strong></p><ul><li><a href="https://www.youtube.com/watch?v=j8homytc3g4">DHT11 - Digital temperature and humidity sensor.</a></li></ul><p><strong>Breadboards</strong></p><ul><li><a href="https://magpi.raspberrypi.org/articles/breadboard-tutorial">https://magpi.raspberrypi.org/articles/breadboard-tutorial</a></li></ul><h3 id="Netstat-amp-UFW"><a href="#Netstat-amp-UFW" class="headerlink" title="Netstat &amp; UFW"></a>Netstat &amp; UFW</h3><p>You can confirm if the port is listing on your Pi with <code>netstat -nltp</code>, it needs to have a <code>Local Address</code> of <code>:::5001</code> this means its listing to the outside world.</p><p>All ports on the Pi should be open but if this still doesnt work you can try Uncomplicated Firewall (UFW) which is a front-end to iptables.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ufw</span><br><span class="line">ufw status</span><br><span class="line">ufw allow in from any to any port 5001</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Options pattern in ASP.NET Core</title>
      <link href="2021/02/options-pattern-asp-net-core/"/>
      <url>2021/02/options-pattern-asp-net-core/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="What-Are-Options"><a href="#What-Are-Options" class="headerlink" title="What Are Options?"></a>What Are Options?</h3><ul><li><a href="https://github.com/carlpaton/OptionsPatternDemo">https://github.com/carlpaton/OptionsPatternDemo</a></li></ul><p>The options pattern uses classes to provide strongly typed access to groups of related settings. Consider this json configuration:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;TestingParam&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;UserId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;UserEmail&quot;</span>: <span class="string">&quot;foo@domain.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The class for the above could be <code>TestingParamSettings</code> or <code>TestingParamOptions</code> as shown below.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestingParamOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> Section = <span class="string">&quot;TestingParam&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserEmail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then in the test constructor <code>FeatureNameTests</code> inject <code>IConfiguration</code> and in the test method retrieve the data with <code>.GetSection</code> and <code>.Bind</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FeatureNameTests</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _configuration = configuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FeatureName_InitialCondition_ExpectedResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testingParamOptions = <span class="keyword">new</span> TestingParamOptions();</span><br><span class="line">    _configuration.GetSection(testingParamOptions.Section).Bind(testingParamOptions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userId = testingParamOptions.UserId; <span class="comment">// will be 1    </span></span><br><span class="line">    <span class="keyword">var</span> userEmail = testingParamOptions.UserEmail; <span class="comment">// will be foo@domain.com    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is really good as we then implement <a href="/2018/04/interface-segregation-principle-isp/">Interface Segregation Principle (ISP)</a> and <a href="/2018/05/single-responsibility-principle-srp/">Single Responsibility Principle (SRP)</a>.</p><p>We could also bind the <code>TestingParam</code> section to the dependency injection service container we get for free in .Net Core.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.Configure&lt;TestingParamOptions&gt;(Configuration.GetSection(TestingParamOptions.Section));</span><br><span class="line">&#125;                                        </span><br></pre></td></tr></table></figure><p>Then in the test constructor <code>FeatureNameTests</code> inject <code>IOptions&lt;TestingParamOptions&gt;</code> and in the test method access the member values on <code>_options</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FeatureNameTests</span>(<span class="params">IOptions&lt;TestingParamOptions&gt; options</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _options = options.Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FeatureName_InitialCondition_ExpectedResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userId = _options.UserId; <span class="comment">// will be 1    </span></span><br><span class="line">    <span class="keyword">var</span> userEmail = _options.UserEmail; <span class="comment">// will be foo@domain.com    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multiple-Configuration-Sections"><a href="#Multiple-Configuration-Sections" class="headerlink" title="Multiple Configuration Sections"></a>Multiple Configuration Sections</h3><p>This also works when multiple configuration sections bind to the same properties. These could be identified with a persona.</p><p>A persona could be a user with different rights, the below are two user personas <code>UserWithAdminRights</code> and <code>UserWithStandardRights</code>. The admin user would have elevated persmissions and therefor your integration test would behave differently for that user.</p><p>Consider this json configuration:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;TestingParam&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;UserWithAdminRights&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;UserId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;UserEmail&quot;</span>: <span class="string">&quot;admin.user@domain.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;UserWithStandardRights&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;UserId&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;UserEmail&quot;</span>: <span class="string">&quot;standard.user@domain.com&quot;</span></span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could have muiltiple classes to represent this data and it will work just fine however if the consumer is only concearned with parts of the object then this violates <a href="/2018/04/interface-segregation-principle-isp/">Interface Segregation Principle (ISP)</a> and <a href="/2018/05/single-responsibility-principle-srp/">Single Responsibility Principle (SRP)</a>. #sad</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestParameterOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UserWithAdminRightsOptions UserWithAdminRights;</span><br><span class="line">    <span class="keyword">public</span> UserWithStandardRightsOptions UserWithStandardRights;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserWithAdminRightsOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> Section = <span class="string">&quot;TestingParam:UserWithAdminRights&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserEmail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserWithStandardRightsOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> Section = <span class="string">&quot;TestingParam:UserWithStandardRights&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserEmail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This would then be bound in the same manner as the single settings file above.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FeatureNameTests</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _configuration = configuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FeatureName_InitialCondition_ExpectedResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testingParamOptions = <span class="keyword">new</span> TestingParamOptions();</span><br><span class="line">    _configuration.GetSection(testingParamOptions.Section).Bind(testingParamOptions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userId = testingParamOptions.UserWithAdminRights.UserId; <span class="comment">// will be 1    </span></span><br><span class="line">    <span class="keyword">var</span> userEmail = testingParamOptions.UserWithAdminRights.UserEmail; <span class="comment">// will be foo@domain.com    </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// testingParamOptions.UserWithStandardRights.UserEmail may not be used. This is a code smell.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multiple-Configuration-Sections-With-A-Better-Design"><a href="#Multiple-Configuration-Sections-With-A-Better-Design" class="headerlink" title="Multiple Configuration Sections, With A Better Design."></a>Multiple Configuration Sections, With A Better Design.</h3><p>Binding these settings to a class highlights that using a member called <code>Section</code> would not work if we follow Microsofts recommendation of using one class per settings section.</p><p>Consider this class file and the preceding multiple configuration sections json data.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestingParamOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> UserWithAdminRights = <span class="string">&quot;UserWithAdminRights&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> UserWithStandardRights = <span class="string">&quot;UserWithStandardRights&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserEmail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You could configure this in the applications depandancy injection pipeline using named options accessors.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.Configure&lt;TestingParamOptions&gt;(TestingParamOptions.UserWithAdminRights,</span><br><span class="line">                                       Configuration.GetSection(<span class="string">&quot;TestingParam:UserWithAdminRights&quot;</span>));</span><br><span class="line">    services.Configure&lt;TestingParamOptions&gt;(TopItemSettings.UserWithStandardRights,</span><br><span class="line">                                        Configuration.GetSection(<span class="string">&quot;TestingParam:UserWithStandardRights&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then inject/resolve as follows</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FeatureNameTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> TestingParamOptions _userWithAdminRights;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> TestingParamOptions _userWithStandardRights;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeatureNameTests</span>(<span class="params">IOptionsSnapshot&lt;TestingParamOptions&gt; namedOptionsAccessor</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _userWithAdminRights = namedOptionsAccessor.Get(TestingParamOptions.UserWithAdminRights);</span><br><span class="line">        _userWithStandardRights = namedOptionsAccessor.Get(TestingParamOptions.UserWithStandardRights);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#named-options-support-using-iconfigurenamedoptions">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#named-options-support-using-iconfigurenamedoptions</a></li></ul><h3 id="Xunit-IClassFixture"><a href="#Xunit-IClassFixture" class="headerlink" title="Xunit IClassFixture"></a>Xunit IClassFixture</h3><p>WIP</p><p>This means you can have <code>appsettings.ENV1.json</code> and <code>appsettings.ENV2.json</code> with the same class representation for both environments.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
            <tag> wip </tag>
            
            <tag> software testing </tag>
            
            <tag> integration tests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core</title>
      <link href="2021/02/entity-framework-core/"/>
      <url>2021/02/entity-framework-core/</url>
      
        <content type="html"><![CDATA[<p>Many years back I looked at <a href="https://docs.microsoft.com/en-us/ef/">Entity Framework</a>, this was still when I wanted to learn about the <a href="https://dotnet.microsoft.com/download/dotnet-framework">Microsoft .Net framework</a> which was before <a href="https://dotnet.microsoft.com/download">.Net Core</a> came along. At the time most of my day was consumed by <a href="https://www.guru99.com/introduction-to-vbscript.html">VB Script</a> and <a href="https://www.microsoft.com/en-us/sql-server">Microsoft SQL</a>. Typically connecting to the database in VB Script meant hand rolling the connection and working with a data reader and record set. It was, to say the least painful!</p><p>Example of my pain:</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> dbCon = CreateObject(<span class="string">&quot;ADODB.Connection&quot;</span>)</span><br><span class="line">dbCon.Open <span class="string">&quot;Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;MultipleActiveResultSets=true;&quot;</span></span><br><span class="line"></span><br><span class="line">    sql = <span class="string">&quot;SELECT id, desc FROM foo WHERE bar = &#x27;bat&#x27; ORDER BY id DESC&quot;</span></span><br><span class="line">    <span class="keyword">set</span> rs = dbCon.execute(sql)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">not</span> rs.eof <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">do</span> <span class="keyword">until</span> rs.eof</span><br><span class="line"></span><br><span class="line">                response.Write rs(<span class="string">&quot;id&quot;</span>) &amp; <span class="string">&quot; &quot;</span> &amp; rs(<span class="string">&quot;desc&quot;</span>) &amp; <span class="string">&quot;&lt;br /&gt;&quot;</span></span><br><span class="line">            </span><br><span class="line">            rs.movenext</span><br><span class="line">            <span class="keyword">loop</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">    rs.Close</span><br><span class="line">    <span class="keyword">set</span> rs = <span class="literal">nothing</span></span><br><span class="line"></span><br><span class="line">dbCon.Close</span><br><span class="line"><span class="keyword">set</span> dbCon = <span class="literal">nothing</span></span><br></pre></td></tr></table></figure><p>So when I finally started looking at <a href="https://docs.microsoft.com/en-us/dotnet/csharp/">C#</a> and .Net I found something called a <a href="/2017/10/sqllite-with-repository-pattern/">Repository Pattern</a>. This was awesome as it promoted <a href="/2018/04/dependency-inversion-principle-dip/">dependency inversion</a> and I could create my own repository using an ORM (Object Relational Mapper) called <a href="https://github.com/StackExchange/Dapper">Dapper</a> which provided extension methods like: </p><ul><li>Select: <code>connection.Query&lt;T&gt;(sql, parameters).FirstOrDefault();</code></li><li>SelectList: <code>connection.Query&lt;T&gt;(sql, parameters).ToList();</code></li><li>Insert: <code>connection.ExecuteScalar&lt;int&gt;(sql, (T)poco);</code></li><li>Update: <code>connection.Execute(sql, (T)poco);</code></li><li>Delete: <code>connection.Execute(sql, parameters);</code></li></ul><p>Entity Framework felt like it abstracted away so much of the <code>magic</code> that I didnt actually know what it was doing, this worried me as what would I do when it breaks? I also <a href="/2020/09/mysql-performance/">profiled</a> the SQL Database when trying out Entity Framework boilerplate code and I was amazed to see how many SQL Queries were running! I figured yeah na this is too complex for my brain.</p><p>For this reason I happily plodded along with my new friend the <a href="https://github.com/StackExchange/Dapper">Dapper</a> and the <a href="/2017/10/sqllite-with-repository-pattern/">Repository Pattern</a>. However last year I changed jobs and my new team wanted to use Entity Framework Core. I was pretty excited about this as .Net Core is amazing and it was a chance to learn by doing!</p><h3 id="Database-Setup"><a href="#Database-Setup" class="headerlink" title="Database Setup"></a>Database Setup</h3><p>The database is configured in the applications db context <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Infrastructure/DatabaseContext.cs">DatabaseContext.cs</a> with extension methods. The examples below are for <a href="https://www.sqlite.org/index.html">SQLite</a> and <a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads">SQL Server</a> although EF works with many more.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options.UseSqlite(&quot;Data Source&#x3D;sweetapp.db&quot;);</span><br><span class="line"></span><br><span class="line">options.UseSqlServer(&quot;Data Source&#x3D;localhost,1401;Initial Catalog&#x3D;SweetApp;Integrated Security&#x3D;False;User Id&#x3D;sa;Password&#x3D;2dd73426-d37a-4fd2-89e9-92f2a8f1a526;Pooling&#x3D;False&quot;)</span><br></pre></td></tr></table></figure><p>Although SQLite is self contained and free tools like <a href="/2018/05/ide-editor-and-database-tools/">DBeaver</a> can manage the <code>sweetapp.db</code> file I wanted to use SQL Server. The fastest way to get an instance running is with docker and the <a href="https://hub.docker.com/_/microsoft-mssql-server">mssql-server-linux</a> image.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull microsoft&#x2F;mssql-server-linux:2017-latest</span><br><span class="line">docker run --name&#x3D;ef-core -e &#39;ACCEPT_EULA&#x3D;Y&#39; -e &#39;MSSQL_SA_PASSWORD&#x3D;2dd73426-d37a-4fd2-89e9-92f2a8f1a526&#39; -p 1401:1433 -d microsoft&#x2F;mssql-server-linux:2017-latest</span><br></pre></td></tr></table></figure><p>Once up check you can connect with <a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio (SSMS)</a>. If you can it means your containerized database is ready for action.</p><p><img src="/d/entity-framework-core/connect-to-sql.png" alt="SQL Server Management Studio (SSMS)"></p><p>Install the command-line interface (CLI) tools for <a href="https://docs.microsoft.com/en-us/ef/core/cli/dotnet">Entity Framework Core</a> to perform design-time development tasks. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-ef</span><br></pre></td></tr></table></figure><p>Create the application and install the relavant packages. The folder structure I used was <code>/EntityFrameworkCoreDemo/src/SweetApp/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o SweetApp</span><br><span class="line"></span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Sqlite</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Design</span><br></pre></td></tr></table></figure><h3 id="Domain-Models"><a href="#Domain-Models" class="headerlink" title="Domain Models"></a>Domain Models</h3><p>Create the domain models, these would be for internal application use and then create the infastructure database context for <code>DbSet</code> commands.</p><ul><li><a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Domain/Models/Blog.cs">Domain/Models/Blog.cs</a></li><li><a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Domain/Models/Post.cs">Domain/Models/Post.cs</a></li><li><a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Infrastructure/DatabaseContext.cs">Infrastructure/DatabaseContext.cs</a></li></ul><p>Entities in the models with <code>xId</code> in them are assumed as primary keys, example <code>BlogId</code>. We could also use <code>ID</code>. We can also then control mapping, cascase deletes, relations ect with entity propertys or builder configuration with EntityTypeBuilder.</p><ul><li><a href="https://docs.microsoft.com/en-us/ef/core/modeling/entity-properties">Entity Properties</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.metadata.builders.entitytypebuilder-1">Builder configuration with EntityTypeBuilder</a></li></ul><p>The update/delete in <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Program.cs">Program.cs</a> affects both tables <code>dbo.Blog</code> and <code>dbo.Post</code> because of the domain model relationship <code>blog.Posts.Add( ...</code></p><h3 id="Migrations"><a href="#Migrations" class="headerlink" title="Migrations"></a>Migrations</h3><p>Create the migration and run it, this is a code first approach. Any changes to the domain models will be applied to the database each time you run <code>migrations add</code> and then <code>database update</code>. The <code>MeaningfulMigrationName</code> needs to be unique for each migration.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add MeaningfulMigrationName</span><br><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><p>This will be reflected in the <code>__EFMigrationsHistory</code> table.</p><p><img src="/d/entity-framework-core/migration-run.png" alt="Migration Run"></p><p>To make additional changes to the database update the <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/tree/main/src/SweetApp/Domain/Models">domain models</a> and repeat the steps above with <code>MeaningfulMigrationName2</code>. If things go sideways you can revert with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations remove</span><br></pre></td></tr></table></figure><h3 id="CRUD-commands"><a href="#CRUD-commands" class="headerlink" title="CRUD commands"></a>CRUD commands</h3><p>Run the application. This will execute the commands in <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Program.cs">Program.cs</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure><p><img src="/d/entity-framework-core/console-output.png" alt="SQL Server Management Studio (SSMS)"></p><p>These are simple CRUD (Create, read, update and delete) commands copied from <a href="https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app">Getting Started with EF Core</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> db = <span class="keyword">new</span> DatabaseContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Inserting a new blog&quot;</span>);</span><br><span class="line">db.Add(<span class="keyword">new</span> Blog &#123; Url = <span class="string">&quot;http://blogs.msdn.com/adonet&quot;</span> &#125;);</span><br><span class="line">db.SaveChanges();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Querying for a blog&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> blog = db.Blogs</span><br><span class="line">    .OrderBy(b =&gt; b.BlogId)</span><br><span class="line">    .First();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Updating the blog and adding a post&quot;</span>);</span><br><span class="line">blog.Url = <span class="string">&quot;https://devblogs.microsoft.com/dotnet&quot;</span>;</span><br><span class="line">blog.Posts.Add(</span><br><span class="line">    <span class="keyword">new</span> Post &#123; Title = <span class="string">&quot;Hello World&quot;</span>, Content = <span class="string">&quot;I wrote an app using EF Core!&quot;</span> &#125;);</span><br><span class="line">db.SaveChanges();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Delete the blog&quot;</span>);</span><br><span class="line">db.Remove(blog);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure><p>If you look at the data before the delete command is run, it will be persisted to SQL.</p><p><img src="/d/entity-framework-core/persisted-data.png" alt="Persisted data"></p><h3 id="Refrences"><a href="#Refrences" class="headerlink" title="Refrences"></a>Refrences</h3><ul><li><a href="https://docs.microsoft.com/en-us/ef/core/">https://docs.microsoft.com/en-us/ef/core/</a></li><li><a href="https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app">https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro">https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro</a></li><li><a href="https://docs.microsoft.com/en-us/ef/core/cli/dotnet">https://docs.microsoft.com/en-us/ef/core/cli/dotnet</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> orm </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking ILogger</title>
      <link href="2021/02/mocking-ilogger/"/>
      <url>2021/02/mocking-ilogger/</url>
      
        <content type="html"><![CDATA[<p>Mocking extension methods is not possible as they are <code>static</code>.</p><blockquote><p>Use the static modifier to declare a static member, which belongs to the type itself rather than to a specific object.</p></blockquote><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static</a>.</li></ul><h3 id="Work-around"><a href="#Work-around" class="headerlink" title="Work around"></a>Work around</h3><p>Create the mocked logger that is injected into <code>SomeServiceClient</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loggerMock = <span class="keyword">new</span> Mock&lt;ILogger&lt;SomeServiceClient&gt;&gt;();</span><br></pre></td></tr></table></figure><p>After injecting <code>loggerMock.Object</code> and calling the unit of work you can verify what the extension method is calling under the hood.</p><p>Key things to look at here are:</p><ul><li><code>LogLevel</code> below is <code>LogLevel.Error</code> which will be for <code>_logger.LogError</code> from <code>Microsoft.Extensions.Logging</code></li><li><code>logEntryToBeWritten</code> is the text to be logged without the exeption.</li></ul><pre><code class="c#">var logEntryToBeWritten = &quot;The what what borked&quot;;loggerMock.Verify(    x =&gt; x.Log(        It.Is&lt;LogLevel&gt;(l =&gt; l == LogLevel.Error),        It.IsAny&lt;EventId&gt;(),        It.Is&lt;It.IsAnyType&gt;((v, t) =&gt; v.ToString() == logEntryToBeWritten),        It.IsAny&lt;Exception&gt;(),        It.Is&lt;Func&lt;It.IsAnyType, Exception, string&gt;&gt;((v, t) =&gt; true)));</code></pre><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://adamstorr.azurewebsites.net/blog/mocking-ilogger-with-moq">https://adamstorr.azurewebsites.net/blog/mocking-ilogger-with-moq</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filters in ASP.NET Core</title>
      <link href="2021/02/filters-in-asp-net-core/"/>
      <url>2021/02/filters-in-asp-net-core/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="What-are-Filters"><a href="#What-are-Filters" class="headerlink" title="What are Filters?"></a>What are Filters?</h3><blockquote><p>Filters in ASP.NET Core allow code to be run before or after specific stages in the request processing pipeline.</p></blockquote><p>Filter types include Authorization, Resource, Action, Exception and Result. <a href="/2015/05/custom-authentication/">A pretty crude Authorization could be to check the HTTP Headers have have some expected value like an API Key.</a></p><p><img src="/d/filters-in-asp-net-core/filter-pipeline.png" alt="Example filter pipeline from docs.microsoft.com"></p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters">https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters</a></li></ul><h3 id="Custom-Authorization-Policy"><a href="#Custom-Authorization-Policy" class="headerlink" title="Custom Authorization Policy"></a>Custom Authorization Policy</h3><p>The following sample code adds a simple API Key check to all requests. The complete solution is here <a href="https://github.com/carlpaton/AuthorizationDemo">https://github.com/carlpaton/AuthorizationDemo</a>.</p><p>We can apply custom authorization policys using <code>IAuthorizationPolicyProvider</code> from <code>Microsoft.AspNetCore.Authorization;</code> with the following flow.</p><ol><li>Create <code>/Authorization/Requirements/ApiKeyRequirement.cs</code> where ApiKey is the business use case. This could be anything that is sensible for your use case. EG: <code>AdminUser</code></li></ol><p><code>IAuthorizationRequirement</code> is a marker interface with no methods and the mechanism for tracing whether authorization is successful.</p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies#requirements">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies#requirements</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization.Requirements</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyRequirement</span> : <span class="title">IAuthorizationRequirement</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can however include state in the requirements construction, the <code>ApiKeyRequirement</code> instance will be passed into the handler so you would then access it as <code>requirement.Permission</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization.Requirements</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Permission &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyRequirement</span> : <span class="title">IAuthorizationRequirement</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiKeyRequirement</span>(<span class="params"><span class="built_in">string</span> permission</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Permission = permission;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create <code>/Authorization/Handlers/ApiKeyRequirementHandler.cs</code> with constructor injection resources such as repository, contexts, services ect.</li></ol><p>The flows could then be:</p><ul><li>Extract data from CTR injected resources</li><li>Based on the result apply logic for failure; <code>context.Fail();</code> and success; <code>context.Succeed(requirement);</code></li></ul><p>My flow was real simple and just checks for the <code>ApiKey</code> in the given RequestContext.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization.Handlers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyRequirementHandler</span> : <span class="title">AuthorizationHandler</span>&lt;<span class="title">ApiKeyRequirement</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IGeneralRequestContext _generalRequestContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiKeyRequirementHandler</span>(<span class="params">IGeneralRequestContext generalRequestContext</span>) </span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _generalRequestContext = generalRequestContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">HandleRequirementAsync</span>(<span class="params">AuthorizationHandlerContext context, ApiKeyRequirement requirement</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> expectedGuid = Guid.Parse(<span class="string">&quot;cdef007a-5d8e-496d-b123-c9055d157d5f&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_generalRequestContext.ApiKey.Equals(expectedGuid)) </span><br><span class="line">            &#123;</span><br><span class="line">                context.Succeed(requirement);</span><br><span class="line">                <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Fail();</span><br><span class="line">            <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies</a></li></ul><ol start="2"><li>Create <code>/Authorization/AuthorizationRequirementMapper.cs</code>. This will hold a collection of key/values being <code>string</code> and <code>IAuthorizationRequirement</code> and methods to access these. <a href="https://github.com/carlpaton/AuthorizationDemo/blob/main/src/policy-based-authorization/SweetApp/Authorization/Policys.cs">Policys</a> is just a static class with static string members.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationRequirementMapper</span> : <span class="title">IAuthorizationRequirementMapper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IDictionary&lt;<span class="built_in">string</span>, IAuthorizationRequirement&gt; <span class="title">GetAuthorizationRequirementMappings</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IAuthorizationRequirement&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; Policys.FallbackRequirementPolicy, <span class="keyword">new</span> FallbackRequirement() &#125;,</span><br><span class="line">                &#123; Policys.RequireHeaderKeyPolicy, <span class="keyword">new</span> ApiKeyRequirement() &#125;,</span><br><span class="line">                &#123; Policys.DefaultPolicy, <span class="keyword">new</span> DefaultPolicyRequirement() &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAuthorizationRequirement <span class="title">GetDefaultPolicy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetAuthorizationRequirementMappings()[Policys.DefaultPolicy];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAuthorizationRequirement <span class="title">GetFallbackPolicy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetAuthorizationRequirementMappings()[Policys.FallbackRequirementPolicy];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create <code>/Authorization/AuthorizationPolicyProvider.cs</code> then inherit and implement <code>IAuthorizationPolicyProvider</code>. This will give you <code>GetDefaultPolicyAsync()</code>, <code>GetFallbackPolicyAsync()</code> and <code>GetPolicyAsync(policyName)</code>.</li></ol><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationPolicyProvider</span> : <span class="title">IAuthorizationPolicyProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">readonly</span> IAuthorizationRequirementMapper _authorizationRequirementMapper;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationPolicyProvider</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">            IAuthorizationRequirementMapper authorizationRequirementMapper</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _authorizationRequirementMapper = authorizationRequirementMapper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GetDefaultPolicyAsync returns the default authorization policy (the policy used for [Authorize] attributes without a policy specified).</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetDefaultPolicyAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> requirement = _authorizationRequirementMapper</span><br><span class="line">                .GetDefaultPolicy();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetPolicy(requirement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GetFallbackPolicyAsync returns the fallback authorization policy (the policy used by the Authorization Middleware when no policy is specified).</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetFallbackPolicyAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> requirement = _authorizationRequirementMapper</span><br><span class="line">                .GetFallbackPolicy();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetPolicy(requirement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GetPolicyAsync returns an authorization policy for a given name. Example `[Authorize(Policy = &quot;RequireHeaderKeyPolicy&quot;)]`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;policyName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetPolicyAsync</span>(<span class="params"><span class="built_in">string</span> policyName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_authorizationRequirementMapper</span><br><span class="line">                .GetAuthorizationRequirementMappings()</span><br><span class="line">                .TryGetValue(policyName, <span class="keyword">out</span> IAuthorizationRequirement requirement))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> GetPolicy(requirement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetDefaultPolicyAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetPolicy</span>(<span class="params">IAuthorizationRequirement requirement</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> policy = <span class="keyword">new</span> AuthorizationPolicyBuilder()</span><br><span class="line">                .AddRequirements(requirement)</span><br><span class="line">                .Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(policy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Add the authorization mapper, policy provider and handlers to the application pipeline in <code>Startup.cs</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IAuthorizationRequirementMapper, AuthorizationRequirementMapper&gt;();</span><br><span class="line">services.AddSingleton&lt;IAuthorizationPolicyProvider, AuthorizationPolicyProvider&gt;();</span><br><span class="line"></span><br><span class="line">services.AddScoped&lt;IAuthorizationHandler, FallbackRequirementHandler&gt;();</span><br><span class="line">services.AddScoped&lt;IAuthorizationHandler, ApiKeyRequirementHandler&gt;();</span><br><span class="line">services.AddScoped&lt;IAuthorizationHandler, DefaultPolicyRequirementHandler&gt;();</span><br></pre></td></tr></table></figure><ol start="5"><li>So now the application has 3 authorization options</li></ol><p>5.1 <strong>GetFallbackPolicyAsync</strong> The policy run for all end points with no authorization annotation. The value could be that it now replaces <code>[Authorize]</code> attribute on all controllers. Note that if you do this, for end points that dont require authorization checks you now need to add the <code>[AllowAnonymous]</code> annotation. This would be <a href="https://github.com/carlpaton/AuthorizationDemo/blob/main/src/policy-based-authorization/SweetApp/Authorization/Handlers/FallbackRequirementHandler.cs">FallbackRequirementHandler</a></p><p>5.2 <strong>GetDefaultPolicyAsync</strong> The policy run for end points with the annotation <code>[Authorize]</code>.</p><p>5.3 <strong>GetPolicyAsync</strong> The policy run for end points with the policy name specified in the annotation <code>[Authorize(Policy = &quot;RequireHeaderKeyPolicy&quot;)]</code>.</p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/roles">Role-based authorization in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies">Policy-based authorization in ASP.NET Core</a></li><li><a href="https://jakeydocs.readthedocs.io/en/latest/security/authorization/policies.html">Custom Policy-Based Authorization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> web api </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking HttpClient SendAsync</title>
      <link href="2021/01/mocking-httpclient-sendasync/"/>
      <url>2021/01/mocking-httpclient-sendasync/</url>
      
        <content type="html"><![CDATA[<p>In the past the only way I’ve known how to deal with mocking Http/Web clients is to <a href="https://github.com/carlpaton/Common/blob/master/Common/Http/HttpWebRequestFactory.cs">wrap the methods</a> using a custom interface. This is a lot of overhead and I feel teaches us its ok to write code that was not written in a way that is testable from the start. Wrappers are a smell in my opion.</p><p>.Net Core have solved the <code>HttpClient</code> problem by providing a way to inject a <code>HttpClient</code> instance using <code>.AddHttpClient</code> which is in the <code>Microsoft.Extensions.DependencyInjection</code> namespace. This is great as it then gives the consumer a valid object for them to setup things like their <code>BaseAddress</code> and other settings needed.</p><ol><li>In the pipeline add</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">    .AddHttpClient&lt;IFooServiceClient, FooServiceClient&gt;()</span><br></pre></td></tr></table></figure><ol start="2"><li>In the constructor for <code>FooServiceClient</code> you will automagically get a <code>HttpClient</code> instance which you can then set any propertys needed.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooServiceClient</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _client;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FooServiceClient</span>(<span class="params">HttpClient client, IConfiguration config</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    client.BaseAddress = <span class="keyword">new</span> Uri(config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Services:FooService:Url&quot;</span>));</span><br><span class="line"></span><br><span class="line">    _client = client;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;SomeClass&gt; <span class="title">SomeMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> requestUri = <span class="string">&quot;http://localhost:81&quot;</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Get, requestUri);</span><br><span class="line">    <span class="comment">//add headers to request if required</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> _client.SendAsync(request);</span><br><span class="line">    response.EnsureSuccessStatusCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> do something with the response :D</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SomeClass();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Now if you try mock to perhaps assert what the <code>HttpRequestMessage</code> request was, or even that <code>SendAsync</code> was called it cannot be done as it has no override modifier. If you try construct the mock it will protest at runtime about setup / verification expressions.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpClientMock = <span class="keyword">new</span> Mock&lt;HttpClient&gt;();</span><br><span class="line">httpClientMock</span><br><span class="line">  .Verify(x =&gt; x.SendAsync(It.IsAny&lt;HttpRequestMessage&gt;()), Times.Once);</span><br></pre></td></tr></table></figure><p>Injecting the above with <code>httpClientMock.Object</code> will be fine but the <code>.Verify</code> will fail as expected.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message: </span><br><span class="line">    System.NotSupportedException : Unsupported expression: x &#x3D;&gt; x.SendAsync(It.IsAny&lt;HttpRequestMessage&gt;())</span><br><span class="line">    Non-overridable members (here: HttpClient.SendAsync) may not be used in setup &#x2F; verification expressions.</span><br></pre></td></tr></table></figure><p>3.1. The work around is to look at the <code>HttpClient</code> constructor overloads, one takes an instance of <code>HttpMessageHandler</code> which has an abstract <code>SendAsync</code> method that is used by HttpClient under the hood. Credit to <a href="https://dev.to/gautemeekolsen/how-to-test-httpclient-with-moq-in-c-2ldp">Gaute Meek Olsen’s</a> post explaining this far better than I could.</p><p>Create the <code>httpMessageHandlerMock</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpMessageHandlerMock = <span class="keyword">new</span> Mock&lt;HttpMessageHandler&gt;();</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> HttpResponseMessage &#123; StatusCode = HttpStatusCode.OK &#125;;</span><br></pre></td></tr></table></figure><p>You can also add to the response body if needs be, the below is manual json - best to do it with a <a href="/2020/01/json-serializers/">serialized object</a> of what ever your end point returns.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> HttpResponseMessage &#123; </span><br><span class="line">  StatusCode = HttpStatusCode.OK </span><br><span class="line">  Content = <span class="keyword">new</span> StringContent(<span class="string">@&quot;[&#123; &quot;&quot;id&quot;&quot;: 1, &quot;&quot;desc&quot;&quot;: &quot;&quot;foo&quot;&quot;&#125;]&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then define a <code>.Setup</code> to return the response above. As <code>SendAsync</code> is protected we need to use <code>.Protected()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">httpMessageHandlerMock</span><br><span class="line">  .Protected()</span><br><span class="line">  .Setup&lt;Task&lt;HttpResponseMessage&gt;&gt;(</span><br><span class="line">    <span class="string">&quot;SendAsync&quot;</span>,</span><br><span class="line">    ItExpr.IsAny&lt;HttpRequestMessage&gt;(),</span><br><span class="line">    ItExpr.IsAny&lt;CancellationToken&gt;())</span><br><span class="line">  .ReturnsAsync(response);</span><br></pre></td></tr></table></figure><p>Create the client for dependancy injection</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient(httpMessageHandlerMock.Object);</span><br><span class="line"><span class="comment">// Then pass `httpClient` to `FooServiceClient` and call `SomeMethod` </span></span><br></pre></td></tr></table></figure><p>A mock <code>.Verify</code> to check <code>SendAsync</code> was called once with an expected request.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">httpMessageHandlerMock</span><br><span class="line">  .Protected()</span><br><span class="line">  .Verify(</span><br><span class="line">      <span class="string">&quot;SendAsync&quot;</span>,</span><br><span class="line">      Times.Exactly(<span class="number">1</span>),</span><br><span class="line">      ItExpr.Is&lt;HttpRequestMessage&gt;(</span><br><span class="line">          request =&gt;</span><br><span class="line">              request.Method == HttpMethod.Get</span><br><span class="line">              &amp;&amp; <span class="comment">// other checks like `request.RequestUri`, `request.Headers.GetValues` ect),</span></span><br><span class="line">      ItExpr.IsAny&lt;CancellationToken&gt;());</span><br></pre></td></tr></table></figure><p>Beauti!</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://dev.to/gautemeekolsen/how-to-test-httpclient-with-moq-in-c-2ldp">https://dev.to/gautemeekolsen/how-to-test-httpclient-with-moq-in-c-2ldp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing protected methods</title>
      <link href="2021/01/unit-testing-protected-methods/"/>
      <url>2021/01/unit-testing-protected-methods/</url>
      
        <content type="html"><![CDATA[<h3 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>We have a class <code>FooRequirementHandler</code> which inherits from and implements <code>AuthorizationHandler&lt;FooRequirement&gt;</code> - For details on what these handlers actually do see <a href="/2021/02/filters-in-asp-net-core/">Custom Authorization Policy</a> in this filters post.</p><p>We now have a <code>protected</code> access modifier to contend with. If we create an instance of <code>FooRequirementHandler</code> and try call <code>HandleRequirementAsync</code> the pre-compiler will protest with it being inaccessible due to its protection level. This is to be expected.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/protected">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/protected</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">HandleRequirementAsync</span>(<span class="params">AuthorizationHandlerContext context, FooRequirement requirement</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// Handler things</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Work-Around"><a href="#Work-Around" class="headerlink" title="Work Around"></a>Work Around</h3><p>In the test create a class that inherits from <code>FooRequirementHandler</code> to expose the behavior.</p><blockquote><p>A protected member is accessible within its class and by derived class instances.</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Additional setup required to expose `protected` behaviour</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExposedFooRequirementHandler</span> : <span class="title">FooRequirementHandler</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ExposedFooRequirementHandler</span>(<span class="params">ISomeInterface someInterface</span>)</span></span><br><span class="line"><span class="function">      : <span class="title">base</span>(<span class="params">someInterface</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">ExposedHandleRequirementAsync</span>(<span class="params">AuthorizationHandlerContext context, FooRequirement requirement</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">base</span>.HandleRequirementAsync(context, requirement);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the unit test you can then use <code>ExposedFooRequirementHandler</code> as the class under test.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> ExposedFooRequirementHandler(someInterfaceMock.Object);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking .Net Core IConfiguration</title>
      <link href="2021/01/mocking-net-core-iconfiguration/"/>
      <url>2021/01/mocking-net-core-iconfiguration/</url>
      
        <content type="html"><![CDATA[<p>The <code>appsettings.json</code> configuration can be mocked in several ways, the examples below use <a href="/2018/09/mocking-frameworks/">Moq</a>.</p><p>Imagine these settings:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Services&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;SomeService&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Url&quot;</span>: <span class="string">&quot;http://someservice:81&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This would be read in the consumer class as:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Services:SomeService:Url&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Option-1-Mock-configurationSection-and-configuration"><a href="#Option-1-Mock-configurationSection-and-configuration" class="headerlink" title="Option 1: Mock configurationSection and configuration"></a>Option 1: Mock configurationSection and configuration</h3><p>In the testing class you need to mock <code>configurationSection</code> and <code>configuration</code> as follows</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configurationSectionMock = <span class="keyword">new</span> Mock&lt;IConfigurationSection&gt;();</span><br><span class="line"><span class="keyword">var</span> configurationMock = <span class="keyword">new</span> Mock&lt;IConfiguration&gt;();</span><br><span class="line"></span><br><span class="line">configurationSectionMock</span><br><span class="line">   .Setup(x =&gt; x.Value)</span><br><span class="line">   .Returns(<span class="string">&quot;http://someservice:81&quot;</span>);</span><br><span class="line"></span><br><span class="line">configurationMock</span><br><span class="line">   .Setup(x =&gt; x.GetSection(<span class="string">&quot;Services:SomeService:Url&quot;</span>))</span><br><span class="line">   .Returns(configurationSectionMock.Object);</span><br></pre></td></tr></table></figure><p>Then inject <code>configurationMock.Object</code> and it will be happy as when <code>config.GetValue</code> is called.</p><h3 id="Option-2-Read-appsettings-file-based-on-Environment"><a href="#Option-2-Read-appsettings-file-based-on-Environment" class="headerlink" title="Option 2: Read appsettings file based on Environment"></a>Option 2: Read appsettings file based on Environment</h3><p>Build up <code>appConfig</code> and read appsettings file.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> environment = Environment.GetEnvironmentVariable(<span class="string">&quot;ASPNETCORE_ENVIRONMENT&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appConfig = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">    .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">    .AddJsonFile(<span class="string">$&quot;appsettings.<span class="subst">&#123;environment&#125;</span>.json&quot;</span>)</span><br><span class="line">    .Build();</span><br></pre></td></tr></table></figure><p>You can now read the configuration from <code>appConfig</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = appConfig.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Services:SomeService:Url&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> connectionString = appConfig.GetConnectionString(<span class="string">&quot;FooConnectionString&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing Strategies</title>
      <link href="2021/01/testing-strategies/"/>
      <url>2021/01/testing-strategies/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>“A test strategy is an outline that describes the testing approach of the software development cycle.”</p></blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Test_strategy">https://en.wikipedia.org/wiki/Test_strategy</a></li></ul><p>I was recently afforded the opertunity for a deep dive into software testing strategies - it was a amazing! I’ve realized that different teams have a different understanding and naming of tests. As long as the team agree and document the stratagy all will be well in the world. Its also not always best practice to do every kind of test possible, as a team you need to agree on your working/social contracts and then add this to your DoD (Definition of done).</p><h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>These define the smallest unit of work we can have, normally a well written method in a class that takes advantage of <a href="/2018/04/dependency-inversion-principle-dip/">dependency inversion</a>.</p><p>Key points</p><ul><li>This will have a very narrow scope &amp; test logic would be given <code>x</code> the behaviour is <code>y</code>, this doesnt guarantee feature works</li><li><a href="/2018/09/mocking-frameworks/">Mock</a> out all dependencies</li><li>Pick a <a href="/2018/09/unit-testing-frameworks/">Unit Testing Framework</a></li><li>Decide on a pattern and stick to it, <a href="https://gist.github.com/carlpaton/77ae278b904cab2a19423809a69c2c67">AAA</a> is the only one I really know</li></ul><h3 id="Component-Test"><a href="#Component-Test" class="headerlink" title="Component Test"></a>Component Test</h3><p>This will test a deployable boundary (example: the BFF) and generally dependencies outside the boundary are mocked.</p><p>Key points</p><ul><li>Makes sense to run this on PR builds</li><li>Wiremocks are useful here</li></ul><h3 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test"></a>Integration Test</h3><p>This will cross boundaries and the real implementation of resources are used, this is normally done in a UAT environment.</p><p>Key points</p><ul><li>Ensures that the external services mocked out in <code>Component Tests</code> is right</li><li>Wiremocks are useful here</li></ul><h3 id="End-to-end-testing-E2E-Test"><a href="#End-to-end-testing-E2E-Test" class="headerlink" title="End to end testing (E2E Test)"></a>End to end testing (E2E Test)</h3><p>These are slow, expensive and generally pretty flakey! A great testing tool for this is <a href="https://www.cypress.io/">cypress</a></p><p>Key points</p><ul><li>Only do these tests for thr most common flows</li><li>Normally tests the happy path</li><li>Driven by the UI (User Interface) and can test down the stack to the database</li><li>Should cover what you would manually test after deployment</li></ul><h3 id="Acceptance-Test"><a href="#Acceptance-Test" class="headerlink" title="Acceptance Test"></a>Acceptance Test</h3><p>These are manual tests done by a user, should be the engineer and QA doing these to ensure they fifull the stories acceptance criteria and mandatory requirements.</p><p>Key points</p><ul><li>Tests the UI from a user perspective and is is focused on user behaviour</li></ul><h3 id="Load-Test"><a href="#Load-Test" class="headerlink" title="Load Test"></a>Load Test</h3><ul><li><a href="https://ardalis.com/load-testing-and-the-requests-per-second-curve/">https://ardalis.com/load-testing-and-the-requests-per-second-curve/</a></li></ul><h3 id="Penetration-Test"><a href="#Penetration-Test" class="headerlink" title="Penetration Test"></a>Penetration Test</h3><blockquote><p>“A penetration test, colloquially known as a pen test, pentest or ethical hacking, is an authorized simulated cyberattack on a computer system, performed to evaluate the security of the system;”</p></blockquote><p>This is things like DDOS (Distributed Denial of Service) or known variabilities on the host or code base.</p><ul><li><a href="https://cipher.com/blog/the-types-of-pentests-you-must-know-about/">https://cipher.com/blog/the-types-of-pentests-you-must-know-about/</a></li><li><a href="https://en.wikipedia.org/wiki/Penetration_test">https://en.wikipedia.org/wiki/Penetration_test</a></li></ul><h3 id="Accessibility-Test"><a href="#Accessibility-Test" class="headerlink" title="Accessibility Test"></a>Accessibility Test</h3><p>I briefly touched on this at a previouse employer, we used <a href="https://carlpaton.github.io/2019/02/accessibility-utilities/">NVDA screen reader</a> to look for accessibility tags and help make our HTML more semantic. Things like ALT tags in images, linking text in A HREF anchors that made sense, tabindex for keyboard control ect.</p><blockquote><p>“Semantic HTML is the use of HTML markup to reinforce the semantics, or meaning, of the information in webpages and web applications rather than merely to define its presentation or look.”</p></blockquote><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML">https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML</a></li><li><a href="https://www.w3schools.com/html/html_accessibility.asp">https://www.w3schools.com/html/html_accessibility.asp</a></li><li><a href="https://en.wikipedia.org/wiki/Semantic_HTML">https://en.wikipedia.org/wiki/Semantic_HTML</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Architecture</title>
      <link href="2020/12/clean-architecture/"/>
      <url>2020/12/clean-architecture/</url>
      
        <content type="html"><![CDATA[<p>I dont feel <code>Clean Architecture</code> is a one size fits all solution, each project I’ve worked on had different needs/fits. I think its about understanding the benifits of each approach and adopting what works for your problem domain. <a href="/2019/12/web-application-architecture/">Web Application Architecture</a> or the <a href="/2020/07/microservice-architecture/">DDD Oriented Microservice</a> examples will all work as long as the team communicate and stick to the decided architecture.</p><h3 id="Clean-Architecture"><a href="#Clean-Architecture" class="headerlink" title="Clean Architecture"></a>Clean Architecture</h3><p>This has been known by a few names over the years: <code>Hexagonal Architecture</code>, <code>Ports-and-Adapters</code> and <code>Onion Architecture</code>. Its all really the same thing.</p><blockquote><p>“Clean architecture puts the business logic and application model at the center of the application. Instead of having business logic depend on data access or other infrastructure concerns, this dependency is inverted: infrastructure and implementation details depend on the Application Core. This is achieved by defining abstractions, or interfaces, in the Application Core, which are then implemented by types defined in the Infrastructure layer.”</p></blockquote><h3 id="Example-Ardalis"><a href="#Example-Ardalis" class="headerlink" title="Example: Ardalis"></a>Example: Ardalis</h3><p>Application architecture of the <code>ardalis/CleanArchitecture</code> example application that follows <code>clean architecture</code> and  <a href="/2020/04/domain-driven-design/">Domain Driven Design</a>.</p><ul><li><a href="https://github.com/carlpaton/clean-architecture-ardalis">https://github.com/carlpaton/clean-architecture-ardalis</a></li></ul><p><img src="/d/clean-architecture/ardalis-clean-architecture.jpg" alt="ardalis/CleanArchitecture"></p><h3 id="Example-Jason-Taylor"><a href="#Example-Jason-Taylor" class="headerlink" title="Example: Jason Taylor"></a>Example: Jason Taylor</h3><p>Jason describes this with the domain layer first however it makes more sense to me to have the UI first, this also makes it simpler for me to draw similarities with other examples.</p><ul><li><a href="https://github.com/carlpaton/clean-architecture-jasontaylordev">https://github.com/carlpaton/clean-architecture-jasontaylordev</a></li></ul><p><img src="/d/clean-architecture/jason-taylor-clean-architecture.jpg" alt="Jason Taylor/CleanArchitecture"></p><iframe width="560" height="315" src="https://www.youtube.com/embed/dK4Yb6-LxAk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Building-on-these"><a href="#Building-on-these" class="headerlink" title="Building on these"></a>Building on these</h4><p>Other common <code>things</code> these projects house:</p><ul><li>Infrastructure</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Feature.FeatureStrategies                 ~ abstract factory based on &#96;IFeatureStrategy&#96; for AB toggle </span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 Client Credentials Flow</title>
      <link href="2020/12/oauth2-client-credentials-flow/"/>
      <url>2020/12/oauth2-client-credentials-flow/</url>
      
        <content type="html"><![CDATA[<p>Grant Type - <code>Client Credentials</code> is used when the application needs an access token to act on behalf of themselves (so not a user)</p><ol><li>Do a POST request to <code>https://authorisation-service.local/token</code> including your <code>client_id</code> and <code>client_secret</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST https:&#x2F;&#x2F;authorisation-service.local&#x2F;token</span><br><span class="line"></span><br><span class="line">grant_type&#x3D;client_credentials</span><br><span class="line">&amp;client_id&#x3D;dd938314e8e1</span><br><span class="line">&amp;client_secret&#x3D;20166c44bc7e</span><br><span class="line">&amp;scope&#x3D;foo</span><br></pre></td></tr></table></figure><ol start="2"><li>The response could look like</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;Bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">86400</span>,</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eaabf941fbd1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;2501d78c0345&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Resource requests then need to include the <code>token_type</code> and <code>access_token</code> in the authorisation header. Note the American spelling with a <code>z</code>. </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Authorization&#39;:&#39;Bearer eaabf941fbd1&#39;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/">https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/</a></li><li><a href="https://aaronparecki.com/oauth-2-simplified/#client-credentials">https://aaronparecki.com/oauth-2-simplified/#client-credentials</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 Authorization Code Flow</title>
      <link href="2020/12/oauth2-authorization-code-flow/"/>
      <url>2020/12/oauth2-authorization-code-flow/</url>
      
        <content type="html"><![CDATA[<p>Grant Type - Authorization Code Flow, steps 1-&gt;7 are explained below.</p><p><img src="/d/oauth2-authorization-code-flow/workflow.png" alt="Grant Type - Authorization Code Flow"></p><p>The flows below assume you have registered the client (your application) and created a user. Typically registration involves a developer account at the service, answering questions about your application, uploading a logo etc.</p><p>The user is the single sign on (SSO) account. This could be Google, Facebook, Active Directory ect. </p><p>All the tokens and secrets below are overly simplified. </p><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><ol><li><p>The user opens your application at <code>https://your-application.local</code> and is not authenticated. </p></li><li><p>Your application builds an authorization URL and redirect to the authorization service at <code>https://authorisation-service.local</code></p></li></ol><ul><li><code>client_id</code> is your application id that is registered with the authorization service</li><li><code>redirect_uri</code> is the landing page on your application where the now authenticated user will be redirected to along with the <code>authorization-code</code></li><li><code>scope</code> is used for the resource access</li><li><code>state</code> is a random string</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;authorisation-service.local&#x2F;authorise?response_type&#x3D;code</span><br><span class="line">&amp;client_id&#x3D;dd938314e8e1</span><br><span class="line">&amp;redirect_uri&#x3D;https:&#x2F;&#x2F;your-application.local&#x2F;authorization-code.html</span><br><span class="line">&amp;scope&#x3D;foo</span><br><span class="line">&amp;state&#x3D;18b1abb9830d</span><br></pre></td></tr></table></figure><ol start="3"><li><p>The user then provides the authorization service their <strong>USERNAME</strong> and <strong>PASSWORD</strong>, it then validates the users credentials. </p></li><li><p><strong>The username/password are never given back to your application</strong>. The user is then redirected back to your application based on <code>redirect_uri</code> with query parameters <code>state</code> and <code>code</code>. You must then verify the state parameter is what you passed above, so <code>18b1abb9830d=18b1abb9830d</code> to protect against <a href="https://owasp.org/www-community/attacks/csrf">Cross Site Request Forgery (CSRF)</a> attacks.</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;your-application.local&#x2F;authorization-code.html?state&#x3D;18b1abb9830d&amp;code&#x3D;ca9c004f825b</span><br></pre></td></tr></table></figure><ol start="5"><li>The authorization code is then programatically sent back to <code>https://authorisation-service.local/token</code> with a POST request <strong>to exchange it for an access token</strong>. This POST includes your <code>client_secret</code></li></ol><ul><li>Its considered best practice to to include the <code>Proof Key for Code Exchange</code> (PKCE) - “pixy” flow here</li><li>You just need to provide a <code>client_secret</code> authorization code. </li><li><code>client_secret</code> would have been provided when the client was registered.</li></ul><blockquote><p>“The key difference between the PKCE flow and the standard Authorization Code flow is users aren’t required to provide a client_secret. PKCE reduces security risks for native apps, as embedded secrets aren’t required in source code, which limits exposure to reverse engineering.” - developers.onelogin.com</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST https:&#x2F;&#x2F;authorisation-service.local&#x2F;token</span><br><span class="line"></span><br><span class="line">grant_type&#x3D;authorization_code</span><br><span class="line">&amp;client_id&#x3D;dd938314e8e1</span><br><span class="line">&amp;client_secret&#x3D;20166c44bc7e</span><br><span class="line">&amp;redirect_uri&#x3D;https:&#x2F;&#x2F;your-application.local&#x2F;authorization-code.html</span><br><span class="line">&amp;code&#x3D;ca9c004f825b</span><br></pre></td></tr></table></figure><ol start="6"><li>The response could look like</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;Bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">86400</span>,</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eaabf941fbd1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;2501d78c0345&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>Resource requests then need to include the <code>token_type</code> and <code>access_token</code> in the authorisation header. Note the American spelling with a <code>z</code>. </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Authorization&#39;:&#39;Bearer eaabf941fbd1&#39;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aaronparecki.com/oauth-2-simplified/#web-server-apps">https://aaronparecki.com/oauth-2-simplified/#web-server-apps</a></li><li><a href="https://oauth.net/2/grant-types/authorization-code/">https://oauth.net/2/grant-types/authorization-code/</a></li><li><a href="https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type">https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type</a></li><li><a href="https://developers.onelogin.com/openid-connect/guides/auth-flow-pkce">https://developers.onelogin.com/openid-connect/guides/auth-flow-pkce</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2</title>
      <link href="2020/12/oauth2/"/>
      <url>2020/12/oauth2/</url>
      
        <content type="html"><![CDATA[<h3 id="Grant-Types"><a href="#Grant-Types" class="headerlink" title="Grant Types"></a>Grant Types</h3><ul><li><a href="/2020/12/oauth2-authorization-code-flow/">Authorization Code + PKCE</a> </li><li><a href="/2020/12/oauth2-client-credentials-flow/">Client Credentials</a></li><li>Implicit</li></ul><blockquote><p>“The Implicit flow was a simplified OAuth flow previously recommended for native apps and JavaScript apps where the access token was returned immediately without an extra authorization code exchange step.” - <a href="https://oauth.net/2/grant-types/implicit/">https://oauth.net/2/grant-types/implicit/</a></p></blockquote><ul><li>Password Credentials</li></ul><blockquote><p>“The Password grant type is a way to exchange a user’s credentials for an access token. Because the client application has to collect the user’s password and send it to the authorization server, it is not recommended that this grant be used at all anymore.” - <a href="https://oauth.net/2/grant-types/password/">https://oauth.net/2/grant-types/password/</a></p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.oauth.com/oauth2-servers/background/">https://www.oauth.com/oauth2-servers/background/</a></li><li><a href="https://aaronparecki.com/oauth-2-simplified/">https://aaronparecki.com/oauth-2-simplified/</a></li><li><a href="https://example-app.com/pkce">https://example-app.com/pkce</a></li><li><a href="https://www.youtube.com/watch?v=CPbvxxslDTU">https://www.youtube.com/watch?v=CPbvxxslDTU</a></li><li><a href="https://auth0.com/docs/authorization/which-oauth-2-0-flow-should-i-use">https://auth0.com/docs/authorization/which-oauth-2-0-flow-should-i-use</a></li><li><a href="https://www.oauth.com/playground/index.html">https://www.oauth.com/playground/index.html</a></li><li><a href="https://auth0.com/blog/is-building-identity-really-that-hard-a-closer-look/">https://auth0.com/blog/is-building-identity-really-that-hard-a-closer-look/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What makes a great API</title>
      <link href="2020/11/what-makes-a-great-api/"/>
      <url>2020/11/what-makes-a-great-api/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>I recently did some work on a new <a href="https://dotnet.microsoft.com/apps/aspnet/apis">ASP.NET Web API</a> project using <a href="https://dotnet.microsoft.com/download/dotnet-core">.Net Core</a>. While  doing research and development I could see some themes and patterns on <code>What makes a great API</code> and decided to collate this information.</p><p>This was for a RESTful (Representational State Transfer) Web based API (hypertext-driven) with JSON resonse, this was not the API of a new class interface. I dont believe being RESTful makes your API great, SOAP (Simple Object Access Protocol) could work just as well however REST is certainly more popular today. Have a look at <a href="https://www.upwork.com/resources/soap-vs-rest-a-look-at-two-different-api-styles">SOAP vs. REST: A Look at Two Different API Styles</a>.</p><h2 id="Pillars"><a href="#Pillars" class="headerlink" title="Pillars"></a>Pillars</h2><p>Clear pillars are needed for a great API, this is certainly not an exhaustive list but these stood out for me.</p><h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p><strong>Dont bolt security on at the end</strong>, secure your API from the start.</p><ul><li>Use <a href="https://tools.ietf.org/html/rfc6749">OAuth 2.0</a> for authorization</li><li>Never put <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace">stack traces</a> in responses, this can disclose sensitive information</li><li>Errors must be represented in <a href="https://tools.ietf.org/html/rfc7807">Problem JSON (RFC 7807)</a> format, providing error <code>type</code> (URI), and optionally <code>title</code>, <code>status</code>, <code>detail</code> along with others.</li></ul><h3 id="Supported-amp-Well-Architected"><a href="#Supported-amp-Well-Architected" class="headerlink" title="Supported &amp; Well Architected"></a>Supported &amp; Well Architected</h3><ul><li>Use a command line tool such as XOP to generate the skeleton of an OpenAPI specification</li><li>Later updates to the specification can be done at <a href="https://editor.swagger.io/">editor.swagger.io</a></li><li>Document the API first as a proposal and then implement the empty controllers and Generate the OpenAPI specification via Swashbuckle. Use the generated specification to test that the implementation respects the contract.</li><li>Write <a href="https://www.altexsoft.com/blog/api-documentation/">API documentation</a> and build API client SDKs (Software development kit) </li><li>Utilize patterns, standards, templates, and frameworks to realize the features of an API which are not domain specific.</li></ul><h3 id="Consistent"><a href="#Consistent" class="headerlink" title="Consistent"></a>Consistent</h3><ul><li>Be stateless</li><li>have a common look and feel</li><li>The number of items returned by a collection must be limited and paginated (Sorting &amp; Paging)</li><li>Fielding defined appropriate use within HTTP of the canonical verbs <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>, <code>HEAD</code>, and <code>OPTIONS</code>. So don’t change state with GET :)</li><li>Search by criteria</li><li>HTTP header Fields should be in Hyphenated-Pascal-Case format</li><li>Date and Time values must be represented as <code>YYYY-MM-DDThh:mm:ss[.sss]Z</code> format strings</li><li>Dont use null for any represented types</li><li>Resource endpoints must use plural resource forms, example <code>/foos</code></li><li>Resources and sub-resources must be hierarchically identified, example <code>/&#123;resources&#125;/[resource-id]/&#123;sub-resources&#125;/[sub-resource-id]</code></li></ul><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><ul><li>Allow to scale horizontally by using Docker containers and orchestration software like <a href="https://aws.amazon.com/kubernetes">Kubernetes</a></li><li>Rate limit client requests using HTTP Status Code <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429">429 Too Many Requests</a></li></ul><h3 id="Ability-to-change"><a href="#Ability-to-change" class="headerlink" title="Ability to change"></a>Ability to change</h3><ul><li>Avoid breaking changes, dont remove fields/methods/add additional validations</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/">https://swagger.io/resources/articles/adopting-an-api-first-approach/</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api">https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api</a></li><li><a href="http://spec.openapis.org/oas/v3.0.3">http://spec.openapis.org/oas/v3.0.3</a></li><li><a href="https://tools.ietf.org/html/rfc3339">https://tools.ietf.org/html/rfc3339</a></li><li><a href="https://tools.ietf.org/html/rfc7807">https://tools.ietf.org/html/rfc7807</a></li><li><a href="https://www.elastic.io/6-characteristics-of-great-api/">https://www.elastic.io/6-characteristics-of-great-api/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anti Patterns</title>
      <link href="2020/11/anti-pattern/"/>
      <url>2020/11/anti-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>I’ve been pretty focused on learning <a href="/tags/patterns-principles/">software patterns</a> and only recently learnt that what I perceived as <code>bad code</code> can sometimes actually called an <a href="https://en.wikipedia.org/wiki/Anti-pattern">Anti Pattern</a>.</p><blockquote><p>“An anti-pattern is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive.” - wikipedia.org</p></blockquote><h3 id="Golden-Hammer-Anti-pattern"><a href="#Golden-Hammer-Anti-pattern" class="headerlink" title="Golden Hammer Anti-pattern"></a>Golden Hammer Anti-pattern</h3><p>This is the repetitive use of one pattern that has worked amazingly in some applications however is not the best fit for your current problem domain.</p><blockquote><p>“ … everything always ends up using this architecture. A flat head screw? Hammer. Phillips head screw? Hammer. You need an Allen wrench? No you don’t, hammer it.” - freecodecamp.org</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.freecodecamp.org/news/antipatterns-to-avoid-in-code/">https://www.freecodecamp.org/news/antipatterns-to-avoid-in-code/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> anti pattern </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serilog</title>
      <link href="2020/11/serilog/"/>
      <url>2020/11/serilog/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Serilog is an alternative logging implementation that plugs into ASP.NET Core.</p><blockquote><p>“Like many other libraries for .NET, Serilog provides diagnostic logging to files, the console, and elsewhere. It is easy to set up, has a clean API, and is portable between recent .NET platforms.”</p></blockquote><h3 id="Setup-for-Net-Core-3"><a href="#Setup-for-Net-Core-3" class="headerlink" title="Setup for .Net Core 3"></a>Setup for .Net Core 3</h3><ol><li>Install</li></ol><p>Install with <code>dotnet add package Serilog.AspNetCore</code> or manually with <a href="https://www.nuget.org/packages/serilog.aspnetcore/">Nuget</a>, the version at the time of writing this was <code>3.4.0</code></p><ol start="2"><li>Initialization with top-level <code>try/catch</code> block in <code>Program.cs</code></li></ol><ul><li>Doing it this way catches any start up errors and closes high level streams with <code>CloseAndFlush</code></li><li><code>Log.x</code> static instances can also be used through-out the application however Im a fan of rather using dependancy injection so the coupling is to the <code>ILogger</code> interface.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">        .Enrich.FromLogContext()</span><br><span class="line">        .WriteTo.Console()</span><br><span class="line">        .CreateLogger();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Information(<span class="string">&quot;START UP&quot;</span>);</span><br><span class="line">        CreateHostBuilder(args).Build().Run();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.Fatal(ex, <span class="string">&quot;APPLICATION EXEPTION AT START UP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Remove <code>LoggerConfiguration</code> instantiation from <code>Main</code> in <code>Program.cs</code> and rather use <code>UseSerilog()</code> in <code>CreateHostBuilder()</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateHostBuilder(args).Build().Run();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.Fatal(ex, <span class="string">&quot;APPLICATION EXEPTION AT START UP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureAppConfiguration(ConfigureAppLogging)     <span class="comment">// Serilog configuration is done in `ConfigureAppLogging` and not the `webBuilder`</span></span><br><span class="line">        .UseSerilog()                                       <span class="comment">// Sets Serilog as the logging provider. </span></span><br><span class="line">        .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            webBuilder.UseStartup&lt;Startup&gt;();               <span class="comment">// You dont have to do any manual DI in `Startup`, `UseSerilog()` above creates an instance of `ILogger&lt;T&gt;` for you</span></span><br><span class="line">        &#125;);      </span><br></pre></td></tr></table></figure><p>4.1 The <code>Serilog</code> configuration can then either be read from <code>appSettings.json</code> in the <code>Serilog:</code> key/value</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConfigureAppLogging</span>(<span class="params">IConfigurationBuilder config</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">        .ReadFrom.Configuration(config.Build())</span><br><span class="line">        .CreateLogger();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>This default config is from <a href="https://github.com/serilog/serilog-settings-configuration">https://github.com/serilog/serilog-settings-configuration</a> with some added configuration.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;Serilog&quot;: &#123;</span><br><span class="line">    &quot;Using&quot;:  [ &quot;Serilog.Sinks.Console&quot;, &quot;Serilog.Sinks.File&quot; ],</span><br><span class="line">    &quot;MinimumLevel&quot;: &quot;Debug&quot;,</span><br><span class="line">    &quot;WriteTo&quot;: [ &#123; </span><br><span class="line">        &quot;Name&quot;: &quot;Console&quot;, </span><br><span class="line">        &quot;Args&quot;: &#123;</span><br><span class="line">            &quot;formatter&quot;: &quot;Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact&quot;,</span><br><span class="line">        &#125;          </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;File&quot;</span>, <span class="attr">&quot;Args&quot;</span>: &#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;Logs/log.txt&quot;</span> &#125; &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Enrich&quot;: [ &quot;FromLogContext&quot;, &quot;WithMachineName&quot;, &quot;WithThreadId&quot; ],</span><br><span class="line">    &quot;Destructure&quot;: [</span><br><span class="line">        &#123; &quot;Name&quot;: &quot;With&quot;, &quot;Args&quot;: &#123; &quot;policy&quot;: &quot;Sample.CustomPolicy, Sample&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;Name&quot;: &quot;ToMaximumDepth&quot;, &quot;Args&quot;: &#123; &quot;maximumDestructuringDepth&quot;: 4 &#125; &#125;,</span><br><span class="line">        &#123; &quot;Name&quot;: &quot;ToMaximumStringLength&quot;, &quot;Args&quot;: &#123; &quot;maximumStringLength&quot;: 100 &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;ToMaximumCollectionCount&quot;</span>, <span class="attr">&quot;Args&quot;</span>: &#123; <span class="attr">&quot;maximumCollectionCount&quot;</span>: <span class="number">10</span> &#125; &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Properties&quot;: &#123;</span><br><span class="line">        &quot;Application&quot;: &quot;Sample&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Its a good idea to also include <code>MinimumLevel</code> -&gt; <code>Override</code> overrides</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;Override&quot;: &#123;</span><br><span class="line">    &quot;Microsoft&quot;: &quot;Warning&quot;,</span><br><span class="line">    &quot;System&quot;: &quot;Error&quot;,</span><br></pre></td></tr></table></figure><p>4.2 Alternatively if you dont have different configurations per environment you can just use <code>Serilog</code>‘s fluent api and configure the logging in code.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConfigureAppLogging</span>(<span class="params">IConfigurationBuilder config</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">        .WriteTo.Console(<span class="keyword">new</span> CompactJsonFormatter())</span><br><span class="line">        .WriteTo.File(<span class="string">@&quot;Logs\log.txt&quot;</span>, rollingInterval: RollingInterval.Day)</span><br><span class="line">        .CreateLogger();</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><ol start="5"><li>Delete all remnants of the default logger in <code>appSettings.json</code>, this is <code>Logging</code> key/values shown below.</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;Logging&quot;: &#123;</span><br><span class="line">    &quot;LogLevel&quot;: &#123;</span><br><span class="line">        &quot;Default&quot;: &quot;Information&quot;,</span><br><span class="line">        &quot;Microsoft&quot;: &quot;Warning&quot;,</span><br><span class="line">        &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Add Serilog to the applications middleware pipeline in <code>Startup.cs</code> for the <code>Configure()</code> method, this will enable log events per request.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseSerilogRequestLogging();</span><br></pre></td></tr></table></figure><ol start="7"><li>You can then use the <code>ILogger&lt;T&gt;</code> instance using constructor injection and resolve with <code>using Microsoft.Extensions.Logging;</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;FooController&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooController</span>(<span class="params">ILogger&lt;FooController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;INDEX RUN!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://serilog.net/">https://serilog.net/</a></li><li><a href="https://blog.datalust.co/serilog-tutorial/">https://blog.datalust.co/serilog-tutorial/</a></li><li><a href="https://nblumhardt.com/2019/10/serilog-in-aspnetcore-3/">https://nblumhardt.com/2019/10/serilog-in-aspnetcore-3/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon S3</title>
      <link href="2020/11/aws-s3/"/>
      <url>2020/11/aws-s3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="S3-vs-S3-Glacier"><a href="#S3-vs-S3-Glacier" class="headerlink" title="S3 vs S3 Glacier"></a>S3 vs S3 Glacier</h3><blockquote><p>“S3: Amazon Simple Storage Service (Amazon S3) is storage for the internet. You can use Amazon S3 to store and retrieve any amount of data at any time, from anywhere on the web.”</p></blockquote><blockquote><p>“S3 Glacier: Low-cost storage service that provides highly secure, durable, and flexible storage for data archiving and online backup.”</p></blockquote><h3 id="Code-Examples"><a href="#Code-Examples" class="headerlink" title="Code Examples"></a>Code Examples</h3><p>The following are the interface definitions for a <a href="https://carlpaton.github.io/2020/02/facade-pattern/">facade</a> I built using the <a href="https://aws.amazon.com/sdk-for-net/">AWS SDK for .NET</a>. For me it made sense to create two responsibilities <a href="https://github.com/carlpaton/AwsAdministrator/blob/master/src/AwsAdmin.Application/S3/Interface/IBucketService.cs">IBucketService</a> to manage the bucket itself and <a href="https://github.com/carlpaton/AwsAdministrator/blob/master/src/AwsAdmin.Application/S3/Interface/IBucketObjectService.cs">IBucketObjectService</a> to manage the content in the bucket.</p><h2 id="Bucket-Service"><a href="#Bucket-Service" class="headerlink" title="Bucket Service"></a>Bucket Service</h2><p><strong>Interface</strong>: <code>IBucketService</code></p><h3 id="PutBucketAsync"><a href="#PutBucketAsync" class="headerlink" title="PutBucketAsync"></a>PutBucketAsync</h3><p>Creates the given bucket, note that buckets are globally unique in name.<br>Will throw if the bucket already exists:</p><ul><li><p><code>Amazon.S3.AmazonS3Exception : Your previous request to create the named bucket succeeded and you already own it.</code></p></li><li><p><code>Amazon.S3.AmazonS3Exception : The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.</code></p></li><li><p><code>bucketName</code> - Globally unique bucket name</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;PutBucketResponse&gt; <span class="title">PutBucketAsync</span>(<span class="params"><span class="built_in">string</span> bucketName</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="ListBucketsAsync"><a href="#ListBucketsAsync" class="headerlink" title="ListBucketsAsync"></a>ListBucketsAsync</h3><p>Gets a list of buckets for the authenticated user</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;ListBucketsResponse&gt; <span class="title">ListBucketsAsync</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p>CLI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 ls</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html">https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html</a></li></ul><h3 id="DeleteBucketAsync"><a href="#DeleteBucketAsync" class="headerlink" title="DeleteBucketAsync"></a>DeleteBucketAsync</h3><p>Deletes the given bucket, will throw if its not empty.</p><ul><li><code>Amazon.S3.AmazonS3Exception : The bucket you tried to delete is not empty</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;DeleteBucketResponse&gt; <span class="title">DeleteBucketAsync</span>(<span class="params"><span class="built_in">string</span> bucketName</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/DeletingOneObjectUsingNetSDK.html">https://docs.aws.amazon.com/AmazonS3/latest/dev/DeletingOneObjectUsingNetSDK.html</a></li></ul><h2 id="Bucket-Object-Service"><a href="#Bucket-Object-Service" class="headerlink" title="Bucket Object Service"></a>Bucket Object Service</h2><p><strong>Interface</strong>: <code>IBucketObjectService</code></p><h3 id="GetPreSignedURL"><a href="#GetPreSignedURL" class="headerlink" title="GetPreSignedURL"></a>GetPreSignedURL</h3><p>Create a signed URL allowing access to a resource that would usually require authentication.</p><ul><li><code>expireInHours</code> hours in the future in which the URL will expire</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetPreSignedURL</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key, <span class="built_in">double</span> expireInHours</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/S3/MS3GetPreSignedURLGetPreSignedUrlRequest.html">https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/S3/MS3GetPreSignedURLGetPreSignedUrlRequest.html</a></li></ul><h3 id="PutTextObjectAsync"><a href="#PutTextObjectAsync" class="headerlink" title="PutTextObjectAsync"></a>PutTextObjectAsync</h3><p>Put the plaintext object in the S3 bucket. The content type will be set to ‘text/plain’.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;PutObjectResponse&gt; <span class="title">PutTextObjectAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key, <span class="built_in">string</span> contentBody</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">Object Tagging</a></li><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-metadata">Object Metadata</a></li></ul><h3 id="GetObjectAsync"><a href="#GetObjectAsync" class="headerlink" title="GetObjectAsync"></a>GetObjectAsync</h3><p>Get the value of the object on the bucket by reading <code>response.ResponseStream</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;GetObjectResponse&gt; <span class="title">GetObjectAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="GetObjectMetadataAsync"><a href="#GetObjectMetadataAsync" class="headerlink" title="GetObjectMetadataAsync"></a>GetObjectMetadataAsync</h3><p>Retrieves metadata from an object without returning the object itself.</p><p>I think this is used as HTTP header data.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;GetObjectMetadataResponse&gt; <span class="title">GetObjectMetadataAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="DeleteObjectAsync"><a href="#DeleteObjectAsync" class="headerlink" title="DeleteObjectAsync"></a>DeleteObjectAsync</h3><p>Deletes the given object (key).</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;DeleteObjectResponse&gt; <span class="title">DeleteObjectAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="GetObjectTaggingAsync"><a href="#GetObjectTaggingAsync" class="headerlink" title="GetObjectTaggingAsync"></a>GetObjectTaggingAsync</h3><p>Gets the tags as <code>response.Tagging</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;GetObjectTaggingResponse&gt; <span class="title">GetObjectTaggingAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="ListObjectsAsync"><a href="#ListObjectsAsync" class="headerlink" title="ListObjectsAsync"></a>ListObjectsAsync</h3><p>Gets data about the objects as <code>response.S3Objects</code> where <code>.Key</code> is the filename</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;ListObjectsResponse&gt; <span class="title">ListObjectsAsync</span>(<span class="params"><span class="built_in">string</span> bucketName</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aws.amazon.com/s3/">https://aws.amazon.com/s3/</a></li><li><a href="https://docs.aws.amazon.com/s3/index.html">https://docs.aws.amazon.com/s3/index.html</a></li><li><a href="https://github.com/carlpaton/AwsAdministrator/tree/master/src/AwsAdmin.Application/S3">https://github.com/carlpaton/AwsAdministrator/tree/master/src/AwsAdmin.Application/S3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Malva Pudding</title>
      <link href="2020/11/malva-pudding/"/>
      <url>2020/11/malva-pudding/</url>
      
        <content type="html"><![CDATA[<p>Amazing malva pudding recipe my mother in law borrowed from <a href="https://en.wikipedia.org/wiki/Oprah_Winfrey">Oprah</a> :)</p><p><strong>Baking time :</strong> 40-50 minutes until firm.</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><p><em>Cake</em></p><ul><li>1 cup brown sugar</li><li>1 egg</li><li>1 table spoon butter</li><li>4 table spoons apricot jam</li><li>1 cup milk</li><li>2 tea spoons vinigar</li><li>2 tea spoons vanilla essence</li><li>1 cup cake flour</li><li>1 tea spoon bicarb of soda</li></ul><p><em>Sauce</em></p><ul><li>1 cup cream</li><li>7 table spoons butter</li><li>1/2 cup sugar</li><li>1/4 cup water</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Grease oven proof dish.</p><ol><li>Beat together the sugar, egg, butter and apricot jam.</li><li>Combine in the milk, vinigar, vanilla essence and bicarb of soda</li><li>Sift in the cake flour and combine</li><li>Pour batter into dish and cover with foil</li><li>Bake 40 to 50 minutes until firm</li><li>Combine sauce over high heat bringing to boil</li><li>Pour the sauce over the cooked cake and allow to soak </li><li>Serve warm with dollops of vanilla ice cream</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.oprah.com/food/malva-pudding">https://www.oprah.com/food/malva-pudding</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Parameter Sniffing</title>
      <link href="2020/11/sql-parameter-sniffing/"/>
      <url>2020/11/sql-parameter-sniffing/</url>
      
        <content type="html"><![CDATA[<p>This was a super wierd problem where SQL was perfoming poorly however the table in question had indexes on the columns we were filtering on and they were not fragmented.</p><table><thead><tr><th>Table</th><th>Column</th><th align="center">Indexed</th><th align="center">Fragmented</th></tr></thead><tbody><tr><td>foo</td><td>some_email</td><td align="center">yes</td><td align="center">no</td></tr><tr><td>foo</td><td>user_id</td><td align="center">yes</td><td align="center">no</td></tr></tbody></table><p>What we found was that in some cases <code>some_email</code> was null and <code>user_id</code> was not (and vice-versa). Then for that sql command text execution the index used was on the <code>null</code> value.</p><p>So simplifying the SQL statements they would look like this:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dbo.foo <span class="keyword">where</span> some_email <span class="operator">=</span> <span class="keyword">null</span> <span class="keyword">and</span> user_id <span class="operator">=</span> <span class="number">123</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dbo.foo <span class="keyword">where</span> some_email <span class="operator">=</span> <span class="string">&#x27;biz@bat.com&#x27;</span> <span class="keyword">and</span> user_id <span class="operator">=</span> <span class="keyword">null</span> </span><br></pre></td></tr></table></figure><p>The SQL statement in the stored procedure checked the parameter is null before using it, for some reason SQL Server then decided that was the indexed column we wanted to filter on even when that value was not null. It seemed to work the first time and not on subsequent requests. Wierd.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> dbo.foo</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="variable">@someEmail</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> foo.some_email <span class="operator">=</span> <span class="variable">@someEmail</span>)</span><br><span class="line"><span class="keyword">AND</span> (<span class="variable">@userId</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> s.user_id <span class="operator">=</span> <span class="variable">@userId</span>)</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/set-statistics-io-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/statements/set-statistics-io-transact-sql?view=sql-server-ver15</a></li></ul><p>Causes SQL Server to display information about the amount of disk activity generated by Transact-SQL statements.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SET STATISTICS TIME, IO ON</span><br><span class="line"></span><br><span class="line">run query and check messages</span><br><span class="line"></span><br><span class="line">look for scans (BAD)</span><br><span class="line">look for logical reads</span><br><span class="line">look for physical reads (anything here means you are not using in memory)</span><br><span class="line"></span><br><span class="line">generally over 10 000 is bad</span><br></pre></td></tr></table></figure><h3 id="Quick-Fix"><a href="#Quick-Fix" class="headerlink" title="Quick Fix"></a>Quick Fix</h3><p>What we needed was for the <code>null</code> filters to be removed as in this case, null was pointless and we needed data based on <code>some_email</code> or <code>user_id</code>.</p><h3 id="Extract-the-command-text-into-the-application"><a href="#Extract-the-command-text-into-the-application" class="headerlink" title="Extract the command text into the application"></a>Extract the command text into the application</h3><p>Before</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = connection.QueryMultiple(<span class="string">&quot;Foo_Read&quot;</span>, <span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">    someEmail = someEmail,</span><br><span class="line">    userId = userId</span><br><span class="line">&#125;, commandType: CommandType.StoredProcedure);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = reader.Read().ToList();</span><br></pre></td></tr></table></figure><p>After</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fooQuery = sb.AddTemplate(<span class="string">@&quot;</span></span><br><span class="line"><span class="string">        SELECT *</span></span><br><span class="line"><span class="string">        FROM</span></span><br><span class="line"><span class="string">            dbo.Foo f</span></span><br><span class="line"><span class="string">        /**where**/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(someEmail))</span><br><span class="line">&#123;</span><br><span class="line">    sb.Where(<span class="string">&quot;f.some_email = @someEmail&quot;</span>, <span class="keyword">new</span> &#123; someEmail = someEmail &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (userId != <span class="literal">null</span> &amp;&amp; userId != Guid.Empty)</span><br><span class="line">&#123;</span><br><span class="line">    sb.Where(<span class="string">&quot;f.user_id = @userId&quot;</span>, <span class="keyword">new</span> &#123; userId = userId &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = connection.Query(fooQuery.RawSql, fooQuery.Parameters).ToList();</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.sqlshack.com/query-optimization-techniques-in-sql-server-parameter-sniffing/">https://www.sqlshack.com/query-optimization-techniques-in-sql-server-parameter-sniffing/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi - Create a system service</title>
      <link href="2020/10/raspberry-create-a-service/"/>
      <url>2020/10/raspberry-create-a-service/</url>
      
        <content type="html"><![CDATA[<p>I needed a way of creating a system service to automagically start a <code>k3s agent</code> when the node booted up.</p><ol><li>Create a <code>.service</code> file and a <code>.py</code> file for the python script with the following content.</li></ol><p><strong>startk3sagent.service</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano startk3sagent.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Service to start K3S Agent as part of cluster</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3 -u startk3sagent.py</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;home&#x2F;pi&#x2F;k3sscripts</span><br><span class="line">StandardOutput&#x3D;inherit</span><br><span class="line">StandardError&#x3D;inherit</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">User&#x3D;pi</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p><strong>startk3sagent.py</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir k3sscripts</span><br><span class="line">cd k3sscripts</span><br><span class="line">sudo nano startk3sagent.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">K3S_URL&#x3D;&quot;https:&#x2F;&#x2F;192.168.1.79:6443&quot;</span><br><span class="line">K3S_TOKEN&#x3D;&quot;K10604bc55a643203542d97aafd91b0b0c2dc4233d46a1dc3a20a8f4ccf7d16fb50::server:09149feb4ee470a2eff3d3d1e4a83c43&quot;</span><br><span class="line"></span><br><span class="line">COMMAND &#x3D; &quot;sudo k3s agent --server &quot; + K3S_URL + &quot; --token &quot; + K3S_TOKEN</span><br><span class="line"></span><br><span class="line">os.system(COMMAND)</span><br></pre></td></tr></table></figure><ol start="2"><li>Copy the file and test it works</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp startk3sagent.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;startk3sagent.service     ~ copy file</span><br><span class="line">sudo systemctl start startk3sagent.service                                  ~ start service</span><br><span class="line">sudo systemctl stop startk3sagent.service                                   ~ stop service</span><br></pre></td></tr></table></figure><ol start="3"><li>Install as a service</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable startk3sagent.service</span><br><span class="line"></span><br><span class="line">Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;startk3sagent.service → &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;startk3sagent.service.</span><br></pre></td></tr></table></figure><ol start="4"><li>Check what services are running</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service --status-all</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.raspberrypi.org/documentation/linux/usage/systemd.md">https://www.raspberrypi.org/documentation/linux/usage/systemd.md</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Specflow</title>
      <link href="2020/10/specflow/"/>
      <url>2020/10/specflow/</url>
      
        <content type="html"><![CDATA[<h3 id="Whats-Specflow"><a href="#Whats-Specflow" class="headerlink" title="Whats Specflow?"></a>Whats Specflow?</h3><p>Its a library that allows for <code>Behavior Driven Development in .NET.</code> (BDD) using <a href="https://cucumber.io/docs/gherkin/reference/">Gherkin</a> Syntax (Given-When-Then).</p><blockquote><p>“SpecFlow helps teams bind automation to feature files and share the resulting examples as Living Documentation across the team and stakeholders. - specflow.org”</p></blockquote><p><strong>PRO</strong> - using <a href="https://cucumber.io/docs/gherkin/reference/">Gherkin</a> and <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">Specflow</a> allows the entire team to contribute towards the test requirements, your Product Owner or Designer may not be technical but they do understand the domain so dont discount their input.</p><p><strong>CON</strong> - <a href="https://cucumber.io/docs/gherkin/reference/">Gherkin</a> and <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">Specflow</a> add additional complexity, if its just the developer writing the tests then its probably not going to add much value.</p><p>SpecFlow seems pretty focused on integration testing - <a href="/2018/05/unit-tests-overview/">Code that invokes a unit of work that crosses project boundaries, uses actual external dependencies, and/or validates many different aspects about the code under test</a>.</p><p>As Im using <code>Visual Studio 2019</code> I installed the extension <a href="https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlowTeam.SpecFlowForVisualStudio">SpecFlow for Visual Studio 2019</a>.</p><h3 id="Whats-Gherkin"><a href="#Whats-Gherkin" class="headerlink" title="Whats Gherkin?"></a>Whats Gherkin?</h3><p>Its the Syntax (Given-When-Then) which are keywords, the example below is from the template <code>SpecFlow Project</code></p><ul><li><a href="https://github.com/carlpaton/SpecFlowDemo/commit/ab0ed6c8994c006f028d4c30bdaacad763452aba#diff-063b2406327895ad6a12387f95c4ed21">Features/Calculator.feature (commit ab0ed6c)</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Feature: Calculator</span><br><span class="line">In order to avoid silly mistakes</span><br><span class="line">As a math idiot</span><br><span class="line">I *want* to be told the **sum** of ***two*** numbers</span><br><span class="line"></span><br><span class="line">Scenario: Add two numbers</span><br><span class="line">Given the first number is 50</span><br><span class="line">And the second number is 70</span><br><span class="line">When the two numbers are added</span><br><span class="line">Then the result should be 120</span><br></pre></td></tr></table></figure><p>Specflow then knows how to translate the above into steps simliar to the classic <code>tripple A</code> testing pattern. </p><p>All of the below will have <code>using TechTalk.SpecFlow;</code> this resolves the annotations <code>Given When Then</code> above the methods.</p><p>If you place your cursor on a line in the <code>.feature</code> and press F12 (Go to definition) the IDE should navigate to the correct place in the step as shown in <code>CalculatorStepDefinitions.cs</code> below.</p><ul><li><a href="https://github.com/carlpaton/SpecFlowDemo/commit/ab0ed6c8994c006f028d4c30bdaacad763452aba#diff-cbdeb46302046153db8b81354704f3e7">Steps/CalculatorStepDefinitions.cs (commit ab0ed6c)</a></li></ul><h4 id="Arrange"><a href="#Arrange" class="headerlink" title="Arrange"></a>Arrange</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Given the first number is 50</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Given(<span class="meta-string">&quot;the first number is (.*)&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GivenTheFirstNumberIs</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement arrange (precondition) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Additional <code>Arrange</code> steps are added with the keyword <code>And</code>:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// And the second number is 70</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Given(<span class="meta-string">&quot;the second number is (.*)&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GivenTheSecondNumberIs</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement arrange (precondition) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Act"><a href="#Act" class="headerlink" title="Act"></a>Act</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When the two numbers are added</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">When(<span class="meta-string">&quot;the two numbers are added&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WhenTheTwoNumbersAreAdded</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement act (action) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h4><p>The assertion can be done with any <a href="/2018/09/unit-testing-frameworks/">testing framework</a> or the <a href="https://specflow.org/plus/">SpecFlow+ Runner</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Then the result should be 120</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Then(<span class="meta-string">&quot;the result should be (.*)&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ThenTheResultShouldBe</span>(<span class="params"><span class="built_in">int</span> result</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement assert (verification) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sweet-how-do-I-set-things-up"><a href="#Sweet-how-do-I-set-things-up" class="headerlink" title="Sweet how do I set things up?"></a>Sweet how do I set things up?</h3><p>The flow is simply and there are awesome getting started guides like <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">Getting Started With An Example</a> and <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-A-New-Project.html">Getting Started With A New Project</a>.</p><p>A summary of the core steps are with a new project are:</p><ul><li>Create new project from template <code>SpecFlow Project</code><ul><li>This creates <a href="https://github.com/carlpaton/SpecFlowDemo/blob/master/Features/Calculator.feature">/Features/Calculator.feature</a></li><li>It also create <a href="https://github.com/carlpaton/SpecFlowDemo/blob/master/Steps/CalculatorStepDefinitions.cs">/Steps/CalculatorStepDefinitions.cs</a></li></ul></li><li>Create the <code>Example</code> Project, this is the code you want to test, following their example its a <code>class library</code>. <strong>EACH LINE</strong> in the <code>Scenario</code> needs to be satisfied with c# code:<ul><li> <code>public void GivenTheFirstNumberIs(int number)</code>, this sets (arrange) the state <code>FirstNumber</code> </li><li> <code>public void GivenTheSecondNumberIs(int number)</code> this sets (arrange) the state for <code>SecondNumber</code></li><li> <code>public void WhenTheTwoNumbersAreAdded()</code> this calls some behaviour (act) : <code>_calculator.Add();</code></li><li> <code>public void ThenTheResultShouldBe(int expectedResult)</code> asserts the result</li></ul></li></ul><h3 id="Scenario-Context"><a href="#Scenario-Context" class="headerlink" title="Scenario Context"></a>Scenario Context</h3><p><a href="https://docs.specflow.org/projects/specflow/en/latest/Bindings/ScenarioContext.html">See ScenarioContext</a></p><p>The boilerplate code injected <code>ScenarioContext _scenarioContext;</code> into the constructor in <a href="https://github.com/carlpaton/SpecFlowDemo/blob/master/IntegrationTests/Steps/CalculatorStepDefinitions.cs">CalculatorStepDefinitions.cs</a> </p><blockquote><p>“ScenarioContext helps you store values in a dictionary between steps. This helps you to organize your step definitions better than using private variables in step definition classes. -docs.specflow.org”</p></blockquote><p>This means we call things like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_scenarioContext.Add   ~ add new key&#x2F;value</span><br><span class="line">_scenarioContext.Get   ~ get value by key</span><br><span class="line">_scenarioContext.Set   ~ update value by key</span><br></pre></td></tr></table></figure><p>They also have something called <a href="https://docs.specflow.org/projects/specflow/en/latest/Bindings/Context-Injection.html">Context-Injection</a></p><blockquote><p>“This feature allows you to group the shared state in context classes, and inject them into every binding class that needs access to that shared state. -docs.specflow.org”</p></blockquote><p>To use context injection:</p><ol><li>Create your POCOs (simple .NET classes) representing the shared data.</li><li>Define them as constructor parameters in every binding class that requires them.</li><li>Save the constructor argument to instance fields, so you can use them in the step definitions.</li></ol><p>This means <code>CalculatorStepDefinitions</code> could be changed from creating its own <code>new Calculator();</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ScenarioContext _scenarioContext;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Calculator _calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> _result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatorStepDefinitions</span>(<span class="params">ScenarioContext scenarioContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _scenarioContext = scenarioContext;</span><br><span class="line">    _calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To automagically injecting an instance based on the default constructor</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Calculator _calculator;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> _result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatorStepDefinitions</span>(<span class="params">Calculator calculator</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _calculator = calculator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feature-Context"><a href="#Feature-Context" class="headerlink" title="Feature Context"></a>Feature Context</h3><p><a href="https://docs.specflow.org/projects/specflow/en/latest/Bindings/FeatureContext.html">See FeatureContext</a></p><blockquote><p>“FeatureContext persists for the duration of the execution of an entire feature, whereas ScenarioContext only persists for the duration of a scenario. -docs.specflow.org”</p></blockquote><p>These are useful hooks as you can have annotations like <code>[BeforeFeature]</code> and <code>[AfterFeature]</code>.<br>Note that hooks also exist for <code>Scenario Context</code>: <code>[BeforeScenario]</code> and <code>[AfterScenario]</code>.</p><p>You can use either to rebind/override <code>IKernel</code> with your own mock implementations.</p><p>Example from docs.specflow.or:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Binding</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hooks</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BeforeFeature</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BeforeFeature</span>(<span class="params">FeatureContext featureContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Starting &quot;</span> + featureContext.FeatureInfo.Title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AfterFeature</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AfterFeature</span>(<span class="params">FeatureContext featureContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Finished &quot;</span> + featureContext.FeatureInfo.Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/SpecFlowDemo">https://github.com/carlpaton/SpecFlowDemo</a></li><li><a href="https://specflow.org/">https://specflow.org/</a></li><li><a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html</a></li><li><a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-A-New-Project.html">https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-A-New-Project.html</a></li><li><a href="https://cucumber.io/docs/gherkin/reference/">https://cucumber.io/docs/gherkin/reference/</a></li><li><a href="https://docs.specflow.org/projects/specflow/en/latest/Gherkin/Gherkin-Reference.html">https://docs.specflow.org/projects/specflow/en/latest/Gherkin/Gherkin-Reference.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster - Kubernetes</title>
      <link href="2020/09/raspberry-pi-cluster-kubernetes/"/>
      <url>2020/09/raspberry-pi-cluster-kubernetes/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Sweet so K8’s is <code>Kubernetes</code> right, so whats K3’s? Simple answer - Its lightweight <code>Kubernetes</code> for ARM processors which run on Raspberry Pi’s &lt;3 I was inspired by <a href="https://www.youtube.com/playlist?list=PL2_OBreMn7Frk57NLmLheAaSSpJLLL90G">Jeff Geerling’s Turing Pi Cluster</a> videos to try do more with my Pi 4 boards! </p><p>Kubernetes comes in many distributions and flavours as show by the <a href="https://landscape.cncf.io/">CNCF Cloud Native Landscape (the group that maintains kubernetes)</a>. I have chosen to focus on <a href="https://rancher.com/docs/k3s/latest/en/">K3S by Rancher Labs</a> which has an extremely light footprint thanks to the amazing work by <a href="https://github.com/ibuildthecloud">Darren Shepherd</a> (Chief Architect at Rancher Labs).</p><blockquote><p>“We wanted an installation of Kubernetes that was half the size in terms of memory footprint. Kubernetes is a 10-letter word stylized as K8s. So something half as big as Kubernetes would be a 5-letter word stylized as K3s. There is no long form of K3s and no official pronunciation. rancher.com”</p></blockquote><h3 id="K3S-Kubernetes-ecosystem"><a href="#K3S-Kubernetes-ecosystem" class="headerlink" title="K3S Kubernetes ecosystem"></a>K3S Kubernetes ecosystem</h3><p>Kubernetes has the following common terms:</p><ul><li><strong>K3S Server</strong> </li><li>-The server node that handles the <code>kubectl</code> commands</li><li>-There can be several server nodes. </li><li>-Also known as <code>master</code> </li><li>-Runs the <code>k3s server</code></li><li><strong>K3S Agent</strong> </li><li>-The worker node, there can be several worker nodes.</li><li>-Runs the <code>k3s agent</code></li><li><strong>Container</strong> </li><li>-This is a running <code>Docker Image</code> like <a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">carlpaton/nginx-pi-demo</a></li><li><strong>Pods</strong> </li><li>-This is the <code>Kubernetes ecosystem</code> running on a node which is running containers. </li><li>-Note the containers dont necessarily need to be contributing to a common goal to be considered part of the pod.</li><li><strong>Node</strong> </li><li>-This is the machine that runs and instance of <code>Kubernetes</code>, this can be a Virtual Machine, PC, Laptop or in my case a Raspberry Pi.</li><li><strong>Cluster</strong> </li><li>-This is several <code>Nodes</code> connected to gether on the same network.</li></ul><p><img src="/d/raspberry-pi-cluster-kubernetes/overview-of-kubernetes-k3s.jpg" alt="Raspberry Pi Cluster"></p><ul><li><a href="https://rancher.com/docs/k3s/latest/en/architecture/">https://rancher.com/docs/k3s/latest/en/architecture/</a></li></ul><h3 id="Setup-Hardware-and-OS"><a href="#Setup-Hardware-and-OS" class="headerlink" title="Setup Hardware and OS"></a>Setup Hardware and OS</h3><p>I used the same <a href="/2019/10/raspberry-pi-cluster-setup-os/">OS Steps (For Cluster)</a> steps and used the image <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">2020-08-20-raspios-buster-armhf-lite</a>. </p><p>Then, this cluster has two nodes:</p><ul><li><code>node1</code> (server node) ~ runs the <code>k3s server</code></li><li><code>node3</code> (worker node) ~ runs the <code>k3s agent</code></li></ul><h3 id="Setup-Passwordless-SSH-Access"><a href="#Setup-Passwordless-SSH-Access" class="headerlink" title="Setup Passwordless SSH Access"></a>Setup Passwordless SSH Access</h3><p>See the <code>No passphrase</code> section on this <a href="/2019/10/passwordless-ssh-access/">passwordless SSH access</a> post.</p><h3 id="Setup-K3s"><a href="#Setup-K3s" class="headerlink" title="Setup K3s"></a>Setup K3s</h3><p>This can either be done manually (on each node) or with a Playbook.</p><h4 id="Setup-K3s-Manual"><a href="#Setup-K3s-Manual" class="headerlink" title="Setup K3s (Manual)"></a>Setup K3s (Manual)</h4><p>Enable <code>container features</code> in the kernel:</p><p><strong>node1</strong> and <strong>node3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">cd ..&#x2F;..&#x2F;</span><br><span class="line">cd boot</span><br><span class="line">nano cmdline.txt</span><br></pre></td></tr></table></figure><p>Then add <code>cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory</code> to the end, then reboot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>Using a utility script from Rancher Labs run the followng <code>curl</code> command:</p><p><strong>node1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https:&#x2F;&#x2F;get.k3s.io | sh -s - --write-kubeconfig-mode 644         ~ install     </span><br><span class="line">sudo systemctl status k3s                                                  ~ confirm server is running</span><br><span class="line">kubectl get nodes                                                          ~ check nodes</span><br></pre></td></tr></table></figure><p>You will then see <code>[INFO]  systemd: Starting k3s</code>. To get the join key:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;server&#x2F;node-token</span><br><span class="line"></span><br><span class="line">K10604bc55a643203542d97aafd91b0b0c2dc4233d46a1dc3a20a8f4ccf7d16fb50::server:09149feb4ee470a2eff3d3d1e4a83c43</span><br></pre></td></tr></table></figure><p><strong>node3</strong></p><p>Im not sure why the script below doesnt start the <code>worker</code> K3S agent but it does install and configure it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export K3S_URL&#x3D;&quot;https:&#x2F;&#x2F;192.168.1.79:6443&quot;</span><br><span class="line">export K3S_TOKEN&#x3D;&quot;K10604bc55a643203542d97aafd91b0b0c2dc4233d46a1dc3a20a8f4ccf7d16fb50::server:09149feb4ee470a2eff3d3d1e4a83c43&quot;</span><br><span class="line">curl -sfL https:&#x2F;&#x2F;get.k3s.io | sh -s - --write-kubeconfig-mode 644</span><br></pre></td></tr></table></figure><p>You will then see <code>[INFO]  systemd: Starting k3s-agent</code></p><p>I had to then manually start the agent:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo k3s agent --server $&#123;K3S_URL&#125; --token $&#123;K3S_TOKEN&#125;</span><br></pre></td></tr></table></figure><p>The problem with this is when the SSH session is closed the agent is terminated too. I fixed this by <a href="/2020/10/raspberry-create-a-service/">creating a system service</a>.</p><p><strong>node1</strong></p><p>After that all the nodes started up and made a cluster automagically &lt;3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node -o wide</span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl version</span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><h4 id="Setup-K3s-Playbook"><a href="#Setup-K3s-Playbook" class="headerlink" title="Setup K3s (Playbook)"></a>Setup K3s (Playbook)</h4><p>THIS DID NOT WORK FOR ME :( #sad</p><p>I tried to followed Jeff’s advice and use <a href="https://www.youtube.com/watch?v=goclfp6a2IQ">ansible</a> to manage all of the Raspberry Pi’s with this <a href="https://github.com/rancher/k3s-ansible">ansible playbook from Rancher Labs</a>.</p><p><strong>node1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git ansible</span><br></pre></td></tr></table></figure><p>Clone the playbook from Rancher labs and copy the <code>inventory/sample</code> folder to the name of your cluster. I called mine <code>carl-cluster</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rancher&#x2F;k3s-ansible</span><br><span class="line"></span><br><span class="line">cd k3s-ansible</span><br><span class="line">cp -R inventory&#x2F;sample inventory&#x2F;carl-cluster</span><br></pre></td></tr></table></figure><p>Set the hosts, these are your Raspberry Pi’s. You can use the IP or DNS.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd inventory&#x2F;carl-cluster</span><br><span class="line">nano hosts.ini</span><br></pre></td></tr></table></figure><p>I used the following config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[master]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line">[node]</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line">[k3s_cluster:children]</span><br><span class="line">master</span><br><span class="line">node</span><br></pre></td></tr></table></figure><p>Set the <code>pi</code> user in <code>group_vars</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd group_vars</span><br><span class="line">nano all.yml</span><br><span class="line"></span><br><span class="line">ansible_user: debian    ~ default value</span><br><span class="line">ansible_user: pi        ~ updated value</span><br></pre></td></tr></table></figure><p>Then run this command to install your cluster!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..&#x2F;..&#x2F;..&#x2F;</span><br><span class="line">ansible-playbook site.yml -i inventory&#x2F;carl-cluster&#x2F;hosts.ini</span><br></pre></td></tr></table></figure><p>This was as far as I got with the playbook, running on <code>node1</code> complained about not being able to see <code>node1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WIP - ACTUAL ERROR HERE</span><br></pre></td></tr></table></figure><h3 id="Check-whats-running"><a href="#Check-whats-running" class="headerlink" title="Check whats running"></a>Check whats running</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br><span class="line">kubectl get pods -n monitoring</span><br></pre></td></tr></table></figure><h3 id="Cluster-Monitoring"><a href="#Cluster-Monitoring" class="headerlink" title="Cluster Monitoring"></a>Cluster Monitoring</h3><p>This <code>Cluster Monitoring</code> tool was built by Carlos Eduardo and he made it work for ARM based clusters.</p><p><strong>Required software install</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update                                ~ update apt cache</span><br><span class="line">apt-get install -y build-essential golang     ~ make utility and go language</span><br></pre></td></tr></table></figure><p><strong>Switch to root and clone</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo su                                                       ~ switch to root user</span><br><span class="line">cd ~                                                          ~ go to home dir</span><br><span class="line">pwd                                                           ~ confirm dir we are in</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;carlosedp&#x2F;cluster-monitoring     ~ clone </span><br></pre></td></tr></table></figure><p><strong>Setup</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cluster-monitoring</span><br><span class="line">nano vars.jsonnet</span><br></pre></td></tr></table></figure><p>Then update the following for K3S</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#39;armExporter&#39;,                         ~ this will give you CPU temp</span><br><span class="line">    enabled: true,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#39;traefikExporter&#39;,</span><br><span class="line">    enabled: true,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k3s: &#123;</span><br><span class="line">    enabled: true,</span><br><span class="line">    master_ip: [&#39;192.168.1.79&#39;],                  ~ this was my master node</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suffixDomain: &#39;192.168.1.185.nip.io&#39;,             ~ this was my worker node</span><br></pre></td></tr></table></figure><p>Finally build the mainfest for your cluster</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make vendor</span><br><span class="line">make                                              ~ generate YML manifests</span><br><span class="line">kubectl apply -f manifests&#x2F;setup&#x2F;</span><br><span class="line">kubectl apply -f manifests&#x2F;</span><br></pre></td></tr></table></figure><p>Now Kuberbettes will take all these things created though these manifests and start scheduling them on nodes. Some STATUS will be <code>ContainerCreating</code> as its pulling down docker images ect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get ingress -n monitoring          ~ will give the host name</span><br></pre></td></tr></table></figure><ul><li><a href="http://grafana.192.168.1.185.nip.io/">http://grafana.192.168.1.185.nip.io/</a>              ~ admin admin</li><li><a href="http://prometheus.192.168.1.185.nip.io/">http://prometheus.192.168.1.185.nip.io/</a></li><li><a href="http://alertmanager.192.168.1.185.nip.io/">http://alertmanager.192.168.1.185.nip.io/</a></li></ul><p><strong>Get logs in pods, containers</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl logs -f -n monitoring prometheus-k8s-0</span><br><span class="line">kubectl logs -f -n monitoring prometheus-k8s-0 -c prometheus-config-reloader    ~ -c for container</span><br><span class="line">CTRL C</span><br></pre></td></tr></table></figure><p><strong>unistall</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f manifests&#x2F;setup</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlosedp/cluster-monitoring#quickstart-for-k3s">https://github.com/carlosedp/cluster-monitoring#quickstart-for-k3s</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://k3s.io/">https://k3s.io/</a></li><li><a href="https://rancher.com/docs/k3s/latest/en/">https://rancher.com/docs/k3s/latest/en/</a></li><li><a href="https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi/">https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> kubernetes </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Pi Demo</title>
      <link href="2020/09/nginx-pi-demo/"/>
      <url>2020/09/nginx-pi-demo/</url>
      
        <content type="html"><![CDATA[<p>This is <a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">carlpaton/nginx-pi-demo:latest</a> and is a docker image used with my post on <a href="/2020/09/raspberry-pi-cluster-swarm/">Raspberry Pi Cluster Swarm</a> to simply show which node responded to the request.</p><p><img src="/d/nginx-pi-demo/nginx-pi-demo.jpg" alt="Nginx Pi Demo"></p><p>All of the below was based on the amazing work at <a href="https://docs.nginx.com/nginx/deployment-guides/setting-up-nginx-demo-environment/">docs.nginx.com</a> and <a href="https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/">docker.com</a>. I created this image as follows on one of my Raspberry PI’s to ensure it works for ARM.</p><ol><li><p>created <a href="https://github.com/carlpaton/nginx-pi-demo/blob/master/default.conf">default.conf</a>, <a href="https://github.com/carlpaton/nginx-pi-demo/blob/master/index.html">index.html</a> and <a href="https://github.com/carlpaton/nginx-pi-demo/blob/master/Dockerfile">Dockerfile</a></p></li><li><p>build the image</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t webserver .</span><br></pre></td></tr></table></figure><ol start="3"><li>test the image</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -d -p 100:80 --name web webserver</span><br></pre></td></tr></table></figure><ol start="4"><li>login to docker</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><ol start="5"><li>tag the image </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag webserver carlpaton&#x2F;nginx-pi-demo</span><br></pre></td></tr></table></figure><ol start="6"><li>ensure the tagged image <code>carlpaton/nginx-pi-demo</code> exists</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ol start="7"><li>push the image</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push carlpaton&#x2F;nginx-pi-demo</span><br></pre></td></tr></table></figure><ol start="8"><li>Cleanup</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker kill web</span><br><span class="line">docker rmi webserver</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.nginx.com/nginx/deployment-guides/setting-up-nginx-demo-environment/">https://docs.nginx.com/nginx/deployment-guides/setting-up-nginx-demo-environment/</a></li><li><a href="https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/">https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/</a></li><li><a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">https://hub.docker.com/r/carlpaton/nginx-pi-demo</a></li><li><a href="https://github.com/carlpaton/nginx-pi-demo">https://github.com/carlpaton/nginx-pi-demo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster - Docker Swarm</title>
      <link href="2020/09/raspberry-pi-cluster-swarm/"/>
      <url>2020/09/raspberry-pi-cluster-swarm/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/raspberry-pi-cluster-swarm/docker-swarm-lol.jpg" alt="Docker Swarm LOL"></p><p>Following on from the post <a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a> which created a cluster of PI’s and used parallel computing to execute and share the workload using Python … I figured it was time to do the same thing using Docker Swarm.</p><p>Docker Swarm is not dead although its long term future is unknown. I’d take <a href="https://nigelpoulton.com/blog/f/swarm-vs-kubernetes-2020-update">Nigel Poulton’s</a> word on this as as he is a domain expert. I figured knowing some Swarm will probably help at some point but DevOps are probably better off focusing more attention on kubernetes as its future is super bright!</p><p>On that note… Swarm is simple to setup and has a shallow learning curve. Not all companys need <a href="/2020/09/raspberry-pi-cluster-kubernetes/">complex container orchestration tools like kubernetes</a> that can automatically replicate to nodes in the cluster under load. With Swarm the replication is done manually with commands like <code>docker service scale</code>.</p><p>The cluster is made up of 2 or more physical Raspberry Pi 4’s and Docker Swarm has the following common terms:</p><ul><li><strong>Node</strong></li><li><ul><li>This is the machine that runs and instance of the <a href="https://docs.docker.com/engine/">Docker Engine</a>, this can be a Virtual Machine, PC, Laptop or in my case a Raspberry Pi.</li></ul></li><li><strong>Swarm</strong> </li><li><ul><li>A cluster of nodes running the <a href="https://docs.docker.com/engine/">Docker Engine</a>.</li></ul></li><li><strong>Manager Node</strong> </li><li><ul><li>Manages the worker nodes schedules tasks for them to run. </li></ul></li><li><ul><li>Its also responsable for the cluster state. </li></ul></li><li><ul><li>Note that <code>Manager Nodes</code> can also run services.</li></ul></li><li><ul><li>A cluster can have several <code>Manager Nodes</code>. </li></ul></li><li><strong>Worker Node</strong> </li><li><ul><li>Instances of the <a href="https://docs.docker.com/engine/">Docker Engine</a> with the responsability of running your application in containers.</li></ul></li><li><strong>Services</strong> </li><li><ul><li>This is the running container that was created from a Docker Image. </li></ul></li><li><ul><li>It can be anything like <a href="https://hub.docker.com/_/nginx">Nginx</a> (for web) or <a href="https://hub.docker.com/_/mysql">MySQL</a> (for the persistant storage)</li></ul></li><li><strong>Task</strong> </li><li><ul><li>A service thats scheduled to run on a node.</li></ul></li></ul><p><img src="/d/raspberry-pi-cluster-swarm/overview-of-docker-swarm.jpg" alt="Overview of Docker Swarm"></p><blockquote><p>“Docker Swarm is an alternative, Docker-native Container Orchestration Engine that coordinates container placement and management among multiple Docker Engine hosts. Docker Swarm allows you to communicate directly with swarm instead of communicating with each Docker Engine individually. Docker Swarm architecturally is comprised of two types of nodes called Managers and Workers. -rancher.com”</p></blockquote><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ol><li>Follow the <a href="/2019/10/raspberry-pi-cluster-setup-os/">OS Steps (For Cluster)</a>, for <code>Docker Swarm</code> the nodes were:</li></ol><ul><li><code>node1</code> (manager node)</li><li><code>node3</code> (worker node)</li></ul><ol start="2"><li>Install <a href="https://docs.docker.com/get-docker/">Docker CE</a> on all nodes using the <code>pi</code> user. I used <a href="/2018/04/putty/">Putty to SSH</a> to the nodes as I did it from a Windows Machine.</li></ol><p><strong>node1</strong> and <strong>node3</strong></p><p>If you are not on a Windows machine cannot connect to <code>node1</code> then run <code>sudo nmap -sn 192.168.1.0/24</code> to inspect your network, the subnet mask <code>0/24</code> and actual range <code>192.168.1.x</code> will differ depending on your defined <a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/dhcp/dhcp-top">DHCP scope</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">curl -sSL https:&#x2F;&#x2F;get.docker.com | sh                   ~ execute convenience script from Docker (Raspbian is not yet officially supported)</span><br><span class="line">sudo usermod -aG docker pi                              ~ permissions</span><br><span class="line">groups pi                                               ~ check &#96;docker&#96; has been added for the &#96;pi&#96; user</span><br><span class="line">                                                        ~ you will need to exit and login again for the above to take affect</span><br><span class="line">docker run hello-world                                  ~ just make sure it works :D</span><br></pre></td></tr></table></figure><p>If you want to see what the <code>convenience script</code> from Docker is doing you can grab it and then edit it with nano, I dont particularly care and trust the shell script as its from Docker themselves. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL get.docker.com -o get-docker.sh</span><br><span class="line">nano get-docker.sh</span><br></pre></td></tr></table></figure><h3 id="Setup-Manager"><a href="#Setup-Manager" class="headerlink" title="Setup Manager"></a>Setup Manager</h3><p><strong>node1</strong></p><p>Get the IP address and run <code>swarm init</code> to create a <code>manager</code> node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig                                               ~ 192.168.1.79 from &#96;wlan0&#96;</span><br><span class="line">sudo docker swarm init --advertise-addr 192.168.1.79   ~ this will output the command needed for workers to join</span><br></pre></td></tr></table></figure><h3 id="Setup-Worker"><a href="#Setup-Worker" class="headerlink" title="Setup Worker"></a>Setup Worker</h3><p>The token below comes from the <code>swarm init</code> command above.</p><p><strong>node3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node3</span><br><span class="line">docker swarm join --token SWMTKN-1-0qg11jc0dpjdrf9tv7f504r2jhyet95trcbh1o5yz889fow8k6-exwpzo10leqiyr6k65z0iyelq 192.168.1.79:2377</span><br><span class="line">exit                                                  ~ falls back to &#96;node1&#96;</span><br></pre></td></tr></table></figure><p><strong>node1</strong></p><p>Now running <code>sudo docker node ls</code> shows us our swarm :D</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pi@node1:~ $ sudo docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">k86pcxsvs4qvr2qt3ovn90x5w *   node1               Ready               Active              Leader              19.03.13</span><br><span class="line">8i5q2rtb555tpqquc8a0ujdan     node3               Ready               Active                                  19.03.13</span><br></pre></td></tr></table></figure><h3 id="First-Service"><a href="#First-Service" class="headerlink" title="First Service"></a>First Service</h3><p>This will install <a href="https://github.com/dockersamples/docker-swarm-visualizer">docker-swarm-visualizer</a> a tool to visually see the cluster! <a href="https://twitter.com/alexellisuk">Alex Ellis</a> has pushed an image to the Docker Hub as <code>alexellis2/visualizer-arm:latest</code> that works on <a href="https://github.com/dockersamples/docker-swarm-visualizer#running-on-arm">ARM (Raspberry Pi)</a>.</p><p><strong>node1</strong></p><p>This will take a bit of time to complete as it needs to download the depednancy layers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker service create --name viz --publish 8080:8080&#x2F;tcp --constraint node.role&#x3D;&#x3D;manager --mount type&#x3D;bind,src&#x3D;&#x2F;var&#x2F;run&#x2F;docker.sock,dst&#x3D;&#x2F;var&#x2F;run&#x2F;docker.sock alexellis2&#x2F;visualizer-arm:latest</span><br></pre></td></tr></table></figure><p>You can then check the service is running with <code>sudo docker service ls</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@node1:~ $ sudo docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                              PORTS</span><br><span class="line">nswh5q71ho6f        viz                 replicated          1&#x2F;1                 alexellis2&#x2F;visualizer-arm:latest   *:8080-&gt;8080&#x2F;tcp</span><br></pre></td></tr></table></figure><p>The UI is then avaible at - <a href="http://node1:8080/">http://node1:8080/</a></p><p><img src="/d/raspberry-pi-cluster-swarm/alexellis2-visualizer.jpg" alt="alexellis2/visualizer-arm:latest"></p><h3 id="Nginx-Services"><a href="#Nginx-Services" class="headerlink" title="Nginx Services"></a>Nginx Services</h3><p>The examples below use the image <a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">carlpaton/nginx-pi-demo</a> to display some information about the host node, this is useful as we can then see the <code>Server name</code> and <code>Server address</code> changes. Details about this image and how I created it can be found at <a href="/2020/09/nginx-pi-demo/">nginx-pi-demo</a>.</p><p>When you create a service you can initialze it with <code>--replicas n</code> where n is the amount of running instance you want. The below will create 2 instance of <code>nginx-2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 2 --name nginx-2 -p 8081:80 carlpaton&#x2F;nginx-pi-demo</span><br><span class="line">docker service inspect --pretty nginx-2                                  ~ inspect the service, --pretty formats the output, default is json</span><br></pre></td></tr></table></figure><p><code>nginx-2</code> is then avaible at - <a href="http://node1:8081/">http://node1:8081/</a>. If you open one instance and a second in incognio you will see for the same DNS <code>node1:8081</code> the <code>Server name</code> and <code>Server address</code> changes, this means the two requests were processed by different containers (not necessarily nodes but if you use this information along with what you see in visualiser you can prove they are on different nodes). </p><p><img src="/d/raspberry-pi-cluster-swarm/nginx-pi-demo.jpg" alt="nginx-pi-demo"></p><p>To manually scale create the server <code>nginx-manual</code> below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name nginx-manual -p 8082:80 carlpaton&#x2F;nginx-pi-demo    ~ create 1 instance   </span><br><span class="line">docker service ps nginx-manual                                                  ~ check where the processes &#96;nginx-manual&#96; are running</span><br></pre></td></tr></table></figure><p><code>nginx-manual</code> is then avaible at - <a href="http://node1:8082/">http://node1:8082/</a>. Once its up, scale it out by <code>5</code>. Note that this <code>5</code> will be the new total service count.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx-manual&#x3D;5</span><br></pre></td></tr></table></figure><p>If you want to scale down just run the same command but with a lower value like 2, the new service count for <code>nginx-manual</code> will then be 2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx-manual&#x3D;2</span><br></pre></td></tr></table></figure><p>If you now look at the <a href="http://node1:8080/">visualizer tool</a> you can see Docker Swarm is auto load balancing between the nodes :D</p><p><img src="/d/raspberry-pi-cluster-swarm/visualizer-load-balancing.jpg" alt="Load Balancing"></p><h3 id="Delete-a-service"><a href="#Delete-a-service" class="headerlink" title="Delete a service"></a>Delete a service</h3><p>To delete a service run <code>rm</code>, the below will create a dummy server <code>nginx-delete</code> and then delete it. <strong>WARNING!</strong> <code>rm</code> will trash the service without confirming. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name nginx-delete -p 8083:80 carlpaton&#x2F;nginx-pi-demo</span><br><span class="line">docker service rm nginx-delete</span><br></pre></td></tr></table></figure><h3 id="Leave-the-swarm-and-join-again"><a href="#Leave-the-swarm-and-join-again" class="headerlink" title="Leave the swarm and join again"></a>Leave the swarm and join again</h3><p>From a worker run the <code>swarm leave</code> to leave the swarm.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node3</span><br><span class="line">docker swarm leave</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>After leaving the swarm the manager <code>node1</code> moves the load for you.</p><p><img src="/d/raspberry-pi-cluster-swarm/visualizer-swarm-leave.jpg" alt="After Delete"></p><p>If you want to add the node back you need to first delete node completely from the manager.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">docker node rm node3                        ~ run from manager</span><br><span class="line">docker node rm 8i5q2rtb555tpqquc8a0ujdan    ~ if node3 name is ambiguous use the id from &#96;sudo docker node ls&#96;</span><br></pre></td></tr></table></figure><p>Add the node back as a worker using the <code>swarm join</code> command (see the start of this post).</p><p>Even if you restart the service the nodes will not auto load balance (this is by design to avoid disruption). Swarm will add new services to nodes doing the least amount of work, so the idea is they will eventually balance out.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service update nginx-manual                                                        ~ this restarts the service but will not load balance</span><br><span class="line">docker service create --replicas 2 --name nginx-foo -p 8084:80 carlpaton&#x2F;nginx-pi-demo    ~ add &#96;nginx-foo&#96;</span><br></pre></td></tr></table></figure><p><img src="/d/raspberry-pi-cluster-swarm/visualizer-after-adding-nginx-foo.jpg" alt="After adding nginx-foo"></p><ul><li><a href="https://docs.docker.com/engine/swarm/manage-nodes/">https://docs.docker.com/engine/swarm/manage-nodes/</a></li></ul><h3 id="Rolling-Update"><a href="#Rolling-Update" class="headerlink" title="Rolling Update"></a>Rolling Update</h3><p>You can upgrade versions of the running image by including <code>--update-delay 10s</code> when creating it. Then run <code>docker service update [SERVICE NAME]</code></p><ul><li><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/">https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/</a></li></ul><h3 id="Shut-Things-Down"><a href="#Shut-Things-Down" class="headerlink" title="Shut Things Down"></a>Shut Things Down</h3><p>To shut down the nodes ssh to each and such them down, you need to do the workers first and then the managers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -h now</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://nigelpoulton.com/blog/f/swarm-vs-kubernetes-2020-update">https://nigelpoulton.com/blog/f/swarm-vs-kubernetes-2020-update</a></li><li><a href="https://docs.docker.com/engine/swarm/key-concepts/">https://docs.docker.com/engine/swarm/key-concepts/</a></li><li><a href="https://rancher.com/learning-paths/docker-swarm-vs-kubernetes/">https://rancher.com/learning-paths/docker-swarm-vs-kubernetes/</a></li><li><a href="https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script">https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script</a></li><li><a href="https://howchoo.com/g/nmrlzmq1ymn/how-to-install-docker-on-your-raspberry-pi">https://howchoo.com/g/nmrlzmq1ymn/how-to-install-docker-on-your-raspberry-pi</a></li><li><a href="https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm">https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm</a></li><li><a href="https://github.com/dockersamples/docker-swarm-visualizer">https://github.com/dockersamples/docker-swarm-visualizer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Percentage For Data Set</title>
      <link href="2020/09/percentage-for-data-set/"/>
      <url>2020/09/percentage-for-data-set/</url>
      
        <content type="html"><![CDATA[<p>While seeding a database with data for a <a href="/2020/09/rosetta-code-sql-datafix/">DataFix Rosetta Code</a> post I thought it would be helpful to be able to determine the percentage (or get as close to it as possible) for a set of data.</p><p>Typically this would be in a <code>WHILE</code> loop, for all the examples below the upper bound loop until would have been 1000.</p><p>Example use case: for half the data set a date field:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">--- run an update to set the date field for 50% of the data</span></span><br><span class="line">    <span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="Quarters"><a href="#Quarters" class="headerlink" title="Quarters"></a>Quarters</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---- QUARTERS</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">4</span> <span class="operator">&gt;</span> <span class="number">2</span>)         <span class="number">250</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)         <span class="number">500</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">4</span> <span class="operator">&lt;</span> <span class="number">3</span>)         <span class="number">751</span></span><br></pre></td></tr></table></figure><h3 id="Thirds"><a href="#Thirds" class="headerlink" title="Thirds"></a>Thirds</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---- THIRDS</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">3</span> <span class="operator">=</span> <span class="number">0</span>)         <span class="number">333</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">3</span> <span class="operator">&lt;</span> <span class="number">2</span>)         <span class="number">667</span></span><br></pre></td></tr></table></figure><h3 id="Tens"><a href="#Tens" class="headerlink" title="Tens"></a>Tens</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---- TENS</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">=</span> <span class="number">0</span>)        <span class="number">100</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">2</span>)        <span class="number">201</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">3</span>)        <span class="number">301</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">&lt;</span> <span class="number">2</span>)         <span class="number">401</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)         <span class="number">500</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">&lt;</span> <span class="number">3</span>)         <span class="number">601</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">7</span>)        <span class="number">701</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">&lt;</span> <span class="number">4</span>)         <span class="number">801</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">9</span>)        <span class="number">901</span></span><br><span class="line"><span class="operator">*</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><h3 id="Having-a-hoon"><a href="#Having-a-hoon" class="headerlink" title="Having a hoon"></a>Having a hoon</h3><p>I used the script below to figure out the values above.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Hoon</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@Counter</span> <span class="operator">&lt;=</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@Counter</span><span class="operator">+</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@Hoon</span><span class="operator">+</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;----------------------&#x27;</span></span><br><span class="line">PRINT(<span class="string">&#x27; @Hoon = &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">1000</span>), <span class="variable">@Hoon</span>))</span><br><span class="line">PRINT <span class="string">&#x27;----------------------&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/while-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/while-transact-sql?view=sql-server-ver15</a></li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/modulo-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/modulo-transact-sql?view=sql-server-ver15</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> life-hacks </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Datafix</title>
      <link href="2020/09/rosetta-code-sql-datafix/"/>
      <url>2020/09/rosetta-code-sql-datafix/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>Consider the following relational database: <code>FooDatabase</code></p><p><img src="/d/rosetta-code-sql-datafix/dbo.foodatabase.png" alt="dbo.FooDatabase"></p><p>In the context of this database a <code>tenant</code> can only be one of <code>App One</code>, <code>App Two</code> or <code>User</code>. Each <code>User</code> has their own unique GUID and the applications have the following GUIDs:</p><table><thead><tr><th>Application Name</th><th>GUID</th></tr></thead><tbody><tr><td>App One</td><td>3ba2e2e8-f093-41d8-8daf-64d5385604ac</td></tr><tr><td>App Two</td><td>efec5b17-47fc-4d79-ae74-6e8b023023d5</td></tr></tbody></table><p>13 333 records in <code>dbo.item_line</code> have been persisted incorrectly. The column <code>dbo.item_line.tenant_id</code> has been populated with the GUID for <code>App One</code> for the period <code>01 Jan 2018</code> to <code>31 Dec 2018</code> when it should have been populated with the GUID for the <code>User</code> tenant. This date is stored in <code>dbo.item_line.created_date_uct</code>.</p><p>Thankfully <code>dbo.item_line.created_by_user_id</code> is a mandatory field and will contain valid user GUIDs. Note that not all users will exist in <code>dbo.tenant</code>.</p><p>The cleanup must be idempotent, this means it can be run multiple times without changing the result beyond the initial story/task.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Cleanup the data using a SQL script in a safe manner.</p><ul><li>Identify all records in <code>dbo.item_line</code> that need to be updated, print the count.</li><li>Create records in <code>dbo.tenant</code> that dont exist when linking to <code>dbo.item_line.created_by_user_id</code>, print this count too.</li><li>Update <code>dbo.item_line.tenant_id</code> to be the newly created <code>dbo.tenant.id</code> when it did not exist, else update to be <code>dbo.item_line.created_by_user_id</code>. Print the total count of updates. This should match the first count printed.</li></ul><p>Using the supplied data the prints and counts should be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total dbo.item_line to be updated : 13333</span><br><span class="line">total new dbo.tenant records : 12983</span><br><span class="line">actual updates to dbo.item_line : 13333</span><br></pre></td></tr></table></figure><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Spin up a MS SQL Instance, you can then connect to it from Microsoft SQL Server Management Studio on <code>localhost,1500</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name&#x3D;rosetta-df -e &quot;ACCEPT_EULA&#x3D;Y&quot; -e &quot;SA_PASSWORD&#x3D;Password123&quot; -p 1500:1433 -d mcr.microsoft.com&#x2F;mssql&#x2F;server:2017-latest</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/tree/master/mssql/Rosetta%20Code/SQL%20Data%20Fix">Run these SQL scripts in the following order</a>:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">001 CREATE DATABASE.sql</span><br><span class="line">002 CREATE TABLES.sql</span><br><span class="line">003 SEED dbo.tenant.sql</span><br><span class="line">004 SEED dbo.line_item.sql</span><br><span class="line">005 SEED dbo.tenant.sql</span><br></pre></td></tr></table></figure><p>This should get the data into a state that matches the counts above.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h4 id="set-operations"><a href="#set-operations" class="headerlink" title="set operations"></a>set operations</h4><p>A set is an exactly defined collection of objects, this can be accomplished by selecting into a #temptable.</p><h4 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h4><p>Use a STATIC cursor to iterate over the data.</p><h4 id="WITH-common-table-expression"><a href="#WITH-common-table-expression" class="headerlink" title="WITH common_table_expression"></a>WITH common_table_expression</h4><p>Specifies a temporary named result set, known as a common table expression (CTE).</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?redirectedfrom=MSDN&amp;view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?redirectedfrom=MSDN&amp;view=sql-server-ver15</a></li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15</a></li><li><a href="https://www.sqlshack.com/understanding-the-interaction-between-set-theory-and-set-operators-in-sql-server/">https://www.sqlshack.com/understanding-the-interaction-between-set-theory-and-set-operators-in-sql-server/</a></li><li><a href="https://sqlblog.org/2012/01/26/bad-habits-to-kick-thinking-a-while-loop-isnt-a-cursor">https://sqlblog.org/2012/01/26/bad-habits-to-kick-thinking-a-while-loop-isnt-a-cursor</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> sql </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Performance</title>
      <link href="2020/09/mysql-performance/"/>
      <url>2020/09/mysql-performance/</url>
      
        <content type="html"><![CDATA[<p>Over time applications that persist data to a store will have performance degradation as queries that used to return in milliseconds may now take seconds or even minutes to return. This is normal as the application grows and it actually gets used.</p><p><a href="https://dev.mysql.com/downloads/installer/">MySQL Community edition</a> and <a href="https://www.mysql.com/products/workbench/">MySQL Workbench</a> come with all the tools (for free) needed to speed things up, you just need to know where to look and its not actually that hard.</p><h3 id="Where-Clause"><a href="#Where-Clause" class="headerlink" title="Where Clause"></a>Where Clause</h3><p>Assuming your SQL commands have a <a href="https://www.mysqltutorial.org/mysql-where/">where clause</a> they can be optimized to use an index, this is just a sorted list the database engine will query first when fetching your data.</p><p>The <code>WHERE</code> clause tells the engine you only want a subset of the data. Without a <code>WHERE</code> and the subsequent operators like <code>AND</code>, <code>OR</code> ect, you will always request all of the data.</p><h3 id="Large-Tables"><a href="#Large-Tables" class="headerlink" title="Large Tables"></a>Large Tables</h3><p>A school boy mistake would be to simply add indexes to all tables and columns, although the engine will ignore an index if it decides its not needed, the index will need to be maintained and updated over time. It will become fragmented.</p><p>Following YAGNI <a href="https://ardalis.com/beyond-good-enough-is-waste/">(You aren’t gonna need it)</a> seems to work pretty well for me as I would rather speed up SQL Commands when they start becoming a problem.</p><p>The statment below can help you identify tables to focus on, <code>count_rows</code> and <code>index_fragmented</code> are good starting points.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(table_schema, <span class="string">&#x27;.&#x27;</span>, table_name) <span class="keyword">as</span> table_schema,</span><br><span class="line"> CONCAT(table_rows) count_rows,</span><br><span class="line"> CONCAT(ROUND(data_length <span class="operator">/</span> ( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">2</span>), <span class="string">&#x27;G&#x27;</span>) data_size,</span><br><span class="line"> CONCAT(ROUND(index_length <span class="operator">/</span> ( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">2</span>), <span class="string">&#x27;G&#x27;</span>) index_length,</span><br><span class="line"> CONCAT(ROUND(( data_length <span class="operator">+</span> index_length ) <span class="operator">/</span> ( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">2</span>), <span class="string">&#x27;G&#x27;</span>) total_size,</span><br><span class="line"> ROUND(index_length <span class="operator">/</span> data_length, <span class="number">2</span>) index_fragmented</span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> data_length <span class="operator">+</span> index_length <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">50</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc%20examples/identify-large-tables.sql">identify-large-tables.sql</a></li></ul><h3 id="Slow-Query-Log"><a href="#Slow-Query-Log" class="headerlink" title="Slow Query Log"></a>Slow Query Log</h3><p>The engine will not log these by default for performance reasons, you need to switch this on. You can find all system variables with <code>SHOW VARIABLES</code>. The statement below filters only variables realted to slow queries.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">where</span> variable_name </span><br><span class="line"><span class="keyword">in</span> (<span class="string">&#x27;slow_query_log&#x27;</span>, <span class="string">&#x27;log_output&#x27;</span>, <span class="string">&#x27;long_query_time&#x27;</span>, <span class="string">&#x27;slow_query_log_file&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The defaults for these will be</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_output                  ~ FILE</span><br><span class="line">long_query_time             ~ 10.000000</span><br><span class="line">slow_query_log            ~ OFF</span><br><span class="line">slow_query_log_file         ~ &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;MACHINENAME-slow.log</span><br></pre></td></tr></table></figure><p>You can also do things like <code>SHOW VARIABLES where variable_name like &#39;%query%&#39;;</code>.</p><p>Although you could query that file with something like <code>tail MACHINENAME-slow.log</code>, I like to use SQL to keep the logs as its easier to digest. If your database is runnnig in a container you can create an <a href="/2018/06/docker-interactive-container-session/">Interactive Container Session</a> and connect to its terminal.</p><p>If you using SQL to keep the logs, update as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> long_query_time <span class="operator">=</span> <span class="number">1</span>;                    </span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_output <span class="operator">=</span> <span class="string">&#x27;TABLE&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>long_query_time</strong></p><p>The <code>1</code> above means one second, you can however use milliseconds:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> long_query_time <span class="operator">=</span> <span class="number">0.1</span>;              <span class="operator">~</span> <span class="number">100</span>ms</span><br><span class="line"><span class="keyword">SET</span> long_query_time <span class="operator">=</span> <span class="number">0.5</span>;              <span class="operator">~</span> <span class="number">500</span>ms (half a <span class="keyword">second</span>)</span><br></pre></td></tr></table></figure><p>Then clear the logs table so you start fresh:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> mysql.slow_log</span><br></pre></td></tr></table></figure><p>Then test a long running query and check the results:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.slow_log;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CONVERT</span>(sql_text <span class="keyword">USING</span> utf8) <span class="keyword">as</span> command_text <span class="keyword">from</span> mysql.slow_log;</span><br></pre></td></tr></table></figure><p>Now run your application and let the engine log the slow queries for you.</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html">https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html</a></li></ul><h3 id="Execution-Plans"><a href="#Execution-Plans" class="headerlink" title="Execution Plans"></a>Execution Plans</h3><p>Pluck out a slow query from the above and run it in <code>MySQL Workbench</code>, to the right of the results scroll down and click <code>Execution Plan</code>. Things to look out for are <code>Full Table Scan</code> (This will be red) and <code>Thick lines</code> (shows heaps of rows/data coming back)</p><p><img src="/d/mysql-performance/sql-execution-plan-with-issues.png" alt="SQL Execution Plan With Issues"></p><p><strong>Full Table Scan</strong></p><p>You could fix this with an index, check which columns are in the <code>WHERE</code> statement or the columns you are using in your <code>JOINS</code></p><p><strong>Thick lines</strong></p><p>This is a bit harder, look at the amount of data being returned - do you need it? This can be fixed with simple things like swapping out <code>LEFT OUTER JOIN</code> with <code>INNER JOIN</code> as the inner returns only data where they intersect. This is not a silver bullet, your application may NEED all this data!</p><p>An index CAN however fix this for you so you will need to experiment and possibly re-write some of the queries.</p><ul><li><a href="https://dev.mysql.com/doc/workbench/en/wb-tutorial-visual-explain-dbt3.html">https://dev.mysql.com/doc/workbench/en/wb-tutorial-visual-explain-dbt3.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/execution-plan-information.html">https://dev.mysql.com/doc/refman/8.0/en/execution-plan-information.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/explain.html">https://dev.mysql.com/doc/refman/8.0/en/explain.html</a></li><li><a href="https://dev.mysql.com/doc/workbench/en/wb-performance.html">https://dev.mysql.com/doc/workbench/en/wb-performance.html</a></li></ul><h3 id="Create-Index"><a href="#Create-Index" class="headerlink" title="Create Index"></a>Create Index</h3><p>This can be as simple as <code>CREATE INDEX [your index name] ON [your table name] ([your column name])</code>. Its best to find a naming convention and stick to it, the examples below are prefixed with <code>idx_</code> for index and then the column name.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_id</span><br><span class="line">ON risk (id);</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_risk_id</span><br><span class="line">ON risk_line (risk_id);</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_risk_line_id</span><br><span class="line">ON re_eval (risk_line_id);</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_re_eval_id</span><br><span class="line">ON re_eval_verify (re_eval_id);</span><br></pre></td></tr></table></figure><p>After creating the index, run the query again and click the <code>Execution Plans</code> to confirm if your change helped. Instead of <code>SCAN</code> you should hopefully see <code>SEEK</code>, no more/or less red and thin lines showing less data.</p><p>You may still see <code>SCAN</code> like below but if the rows are low its probably fine.</p><p><img src="/d/mysql-performance/sql-execution-plan.png" alt="SQL Execution Plan"></p><p>If you make a mistake you can <code>DROP</code> the index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_risk_id <span class="keyword">ON</span> risk_line;</span><br></pre></td></tr></table></figure><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html">https://dev.mysql.com/doc/refman/8.0/en/create-index.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html">https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html</a></li></ul><h3 id="Other-logging"><a href="#Other-logging" class="headerlink" title="Other logging"></a>Other logging</h3><p>If the slow querys doesnt help you can enable verbose logging. Check the current settings with:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">where</span> variable_name </span><br><span class="line"><span class="keyword">in</span> (<span class="string">&#x27;general_log&#x27;</span>, <span class="string">&#x27;log_output&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The defaults for these will be</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">general_log            <span class="operator">~</span> OFF</span><br><span class="line">log_output             <span class="operator">~</span> FILE</span><br></pre></td></tr></table></figure><p>Then update them as:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> log_output <span class="operator">=</span> <span class="string">&#x27;table&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Then truncate the table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> mysql.general_log</span><br></pre></td></tr></table></figure><p>Run the application or some SQL commands and see what it logged:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CONVERT</span>(argument <span class="keyword">USING</span> utf8) <span class="keyword">as</span> command_text <span class="keyword">from</span> mysql.general_log;</span><br></pre></td></tr></table></figure><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/query-log.html">https://dev.mysql.com/doc/refman/8.0/en/query-log.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netify</title>
      <link href="2020/09/netify/"/>
      <url>2020/09/netify/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Debugging proxy that will allow you to intercept and mutate requests from a web page</p></blockquote><h3 id="Local-Response"><a href="#Local-Response" class="headerlink" title="Local Response"></a>Local Response</h3><p>Consider this simple page - <a href="https://carlpaton.github.io/d/netify/">https://carlpaton.github.io/d/netify/</a></p><p>The <code>SHOULD 200</code> button does a <code>GET</code> to <a href="https://carlpaton.github.io/d/netify/sample.json">https://carlpaton.github.io/d/netify/sample.json</a></p><p>The JSON response is then shown in the LOG, sweet.</p><p><img src="/d/netify/should-200.jpg" alt="SHOULD 200"></p><p>Now to intercept that request create a rule that matches</p><ul><li>Request filter: <a href="https://carlpaton.github.io/d/netify/sample.json">https://carlpaton.github.io/d/netify/sample.json</a></li><li>Set to HXR and GET</li></ul><p>Check Local Response and set:</p><ul><li>Status code: 200</li><li>Set headers: for this example they can be left blank as the page doesnt care</li><li>Body</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;foo&quot;: &quot;naa take this&quot; &#125;</span><br></pre></td></tr></table></figure><p><img src="/d/netify/settings.jpg" alt="Settings"></p><p>Click <code>Inactivate</code> to change the plugin to be <code>Listening</code>, now click <code>CLEAR LOG</code> and then <code>SHOULD 200</code>. The new intercepted response is now shown.</p><p><img src="/d/netify/intercept-should-200.jpg" alt="SHOULD 200"></p><p>This can be seen in the network tab:</p><p><img src="/d/netify/network-tab.jpg" alt="Network Tab"></p><h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><p>Some example headers you may needs to set if your request tells you off.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:                                 application&#x2F;json; charset&#x3D;utf-8</span><br><span class="line">Access-Control-Allow-Credentials:             true</span><br><span class="line">Access-Control-Allow-Origin:                  http:&#x2F;&#x2F;localhost:1234</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj">https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj</a></li><li><a href="https://www.json-generator.com/">https://www.json-generator.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> browser utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command and Query Responsibility Segregation (CQRS)</title>
      <link href="2020/08/cqrs/"/>
      <url>2020/08/cqrs/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>Use Case: When applications change frequently, you can updated the Queries &amp; Commands without affecting each other. When the Application is read heavy, you can then split the database into a Read (performance tuned for read) and Write (Fully normalized)</p></blockquote><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><blockquote><p>“The Command and Query Responsibility Segregation (CQRS) pattern separates read and update operations for a data store. Implementing CQRS in your application can maximize its performance, scalability, and security. The flexibility created by migrating to CQRS allows a system to better evolve over time and prevents update commands from causing merge conflicts at the domain level.”</p></blockquote><p>CQRS has 3 building blocks</p><table><thead><tr><th>Building block</th><th>Description</th></tr></thead><tbody><tr><td>Command / Query</td><td>All the data we need to execute the Query or Command. This is represented as an object instance.</td></tr><tr><td>Handler</td><td>Business logic to execute the Command or Query. This returns a response.</td></tr><tr><td>Response</td><td>Return data that we want to return encapsulated as an object.</td></tr></tbody></table><h3 id="Net-5-C-9-amp-MediatR"><a href="#Net-5-C-9-amp-MediatR" class="headerlink" title=".Net 5 C# 9 &amp; MediatR"></a>.Net 5 C# 9 &amp; MediatR</h3><p>All of the examples below are from <a href="https://github.com/carlpaton/CQRSInDotnetCore">Jonathan Williams: CQRS using C# and MediatR</a></p><p>Dependancy libraries</p><ul><li><a href="https://www.nuget.org/packages/MediatR/">MediatR 9.0.0</a></li><li><a href="https://www.nuget.org/packages/MediatR.Extensions.Microsoft.DependencyInjection/">MediatR.Extensions.Microsoft.DependencyInjection 9.0.0</a></li></ul><p>Jonathan keeps the code together in a static class for findability and describes this as a container for the building blocks. Type of <code>record</code> is recommended for <code>Query</code>, <code>Command</code> and <code>Responses</code> as they are immutable, these are DTO’s (data transfer objects) so we dont want them to change.</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>All the code below has been simplified for brevity, the full <a href="https://github.com/carlpaton/CQRSInDotnetCore">source is on github</a>. The <code>Repository</code> is just a data repository that returns a <code>List&lt;Todo&gt; Todos</code> where type <code>Todo</code> is a domain entity with properties <code>Id</code>, <code>Name</code> and <code>Complete</code>.</p><ol><li>In a <code>Command</code> folder create the static class <code>AddTodo</code></li><li>Add the record <code>Command</code>, class <code>Handler</code> and record <code>Response</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CQRSTest.Commands</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AddTodo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Command</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Command</span>(<span class="params"><span class="built_in">string</span> Name</span>) : IRequest&lt;<span class="built_in">int</span>&gt;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Handler</span> : <span class="title">IRequestHandler</span>&lt;<span class="title">Command</span>, <span class="title">int</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> Repository repository;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Handler</span>(<span class="params">Repository repository</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.repository = repository;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Response&gt; <span class="title">Handle</span>(<span class="params">Command request, CancellationToken cancellationToken</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">var</span> hardCodedId = <span class="number">42</span>; <span class="comment">// we dont have a real database for this demo</span></span><br><span class="line">                <span class="keyword">var</span> todo = <span class="keyword">new</span> Todo &#123; Id = hardCodedId, Name = request.Name &#125;;</span><br><span class="line">                repository.Todos.Add(todo);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> hardCodedId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Response (the code above just returned an int, I included this for completeness as the handler could return a complex type)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Response</span>(<span class="params"><span class="built_in">int</span> Id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>In a <code>Queries</code> folder create the static class <code>GetTodoById</code>.</li><li>Add the record <code>Query</code>, <code>Handler</code> and record <code>Response</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CQRSTest.Queries</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">GetTodoById</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Query</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Query</span>(<span class="params"><span class="built_in">int</span> Id</span>) : IRequest&lt;Response&gt;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Handler</span> : <span class="title">IRequestHandler</span>&lt;<span class="title">Query</span>, <span class="title">Response</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> Repository repository;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Handler</span>(<span class="params">Repository repository</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.repository = repository;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Response&gt; <span class="title">Handle</span>(<span class="params">Query request, CancellationToken cancellationToken</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">var</span> todo = repository.Todos.FirstOrDefault(x =&gt; x.Id == request.Id);</span><br><span class="line">                <span class="keyword">return</span> todo == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="keyword">new</span> Response &#123; Id = todo.Id, Name = todo.Name, Completed = todo.Completed &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Response</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Response</span> (<span class="params"><span class="built_in">int</span> Id, <span class="built_in">string</span> Name, <span class="built_in">bool</span> Completed</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>In the controller use constructor injection to inject <code>IMediator mediator</code>, then use <code>mediator.Send(requestObject)</code> to infer the relative <code>Command</code> or <code>Query</code>.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CQRSTest.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TodoController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IMediator mediator;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TodoController</span>(<span class="params">IMediator mediator</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;/&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetTodoById</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> query = <span class="keyword">new</span> GetTodoById.Query(id);</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> mediator.Send(query);</span><br><span class="line">            <span class="keyword">return</span> response == <span class="literal">null</span> ? NotFound() : Ok(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPost(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">AddTodo</span>(<span class="params">AddTodo.Command command</span>)</span> =&gt; Ok(<span class="keyword">await</span> mediator.Send(command));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>In the application startup pipeline add Mediator to the dependancy injection container using the extension method <code>AddMediatR</code>. Passing the assembly <code>Startup</code> tells mediator to use refection to include our classes above in the dependancy injection container (as they are in the same assembly as Startup). It will be looking for the <code>IRequestHandler</code> interface.</li></ol><p>The order is important, any <code>Repository</code> being used needs to be added to the container first as this will be resolved/injected into the handlers constructor.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;Repository&gt;();</span><br><span class="line">services.AddMediatR(<span class="keyword">typeof</span>(Startup).Assembly);</span><br></pre></td></tr></table></figure><p>Jonathan did a sweet video covering the code above.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/mdzEKGlH0_Q" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Net-3-1"><a href="#Net-3-1" class="headerlink" title=".Net 3.1"></a>.Net 3.1</h3><p>TODO</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs">https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs</a></li><li><a href="https://microservices.io/patterns/data/cqrs.html">https://microservices.io/patterns/data/cqrs.html</a></li><li><a href="https://martinfowler.com/bliki/CQRS.html">https://martinfowler.com/bliki/CQRS.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Arrays</title>
      <link href="2020/08/js-arrays/"/>
      <url>2020/08/js-arrays/</url>
      
        <content type="html"><![CDATA[<h3 id="Fill"><a href="#Fill" class="headerlink" title="Fill"></a>Fill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.state &#x3D; &#123;</span><br><span class="line">    squares: Array(9).fill(null),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/reactjs-tic-tac-toe/blob/master/my-app/src/index.js">https://github.com/carlpaton/reactjs-tic-tac-toe/blob/master/my-app/src/index.js</a></li></ul><h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><p>Call <code>.slice()</code> to create a copy of the squares array to modify instead of modifying the existing array.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const squares &#x3D; this.state.squares.slice();</span><br><span class="line">squares[i] &#x3D; &#39;X&#39;;</span><br><span class="line">this.setState(&#123;squares: squares&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.w3schools.com/jsref/jsref_slice_array.asp">https://www.w3schools.com/jsref/jsref_slice_array.asp</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Sourcing</title>
      <link href="2020/08/event-sourcing/"/>
      <url>2020/08/event-sourcing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>“Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects.”</p></blockquote><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p>Most of us are familiar with a relational database, these can be used to store the sequence of events. The following example was adapted from <a href="https://eventflow.readthedocs.io/">https://eventflow.readthedocs.io/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* MS SQL *&#x2F;</span><br><span class="line">CREATE TABLE [dbo].[event_source](</span><br><span class="line">    [id] [bigint] IDENTITY(1,1) NOT NULL,</span><br><span class="line">    [entity_id] [int] NOT NULL,</span><br><span class="line">    [data] [nvarchar](max) NOT NULL,</span><br><span class="line">    [meta_data] [nvarchar](max) NOT NULL</span><br><span class="line"> CONSTRAINT [pk_event_source] PRIMARY KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">    [id] ASC</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>id; global id you can use to order the events</li><li>entity_id; links to a table of entities </li><li>data; serialized entity (JSON)</li><li>meta_data; tracking information such as <code>time stamp</code>, <code>action performed by</code> anything useful to track the event</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/7065045/using-an-rdbms-as-event-sourcing-storage">https://stackoverflow.com/questions/7065045/using-an-rdbms-as-event-sourcing-storage</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing">https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functional vs. Imperative Programming</title>
      <link href="2020/08/functional-vs-imperative-programming/"/>
      <url>2020/08/functional-vs-imperative-programming/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Summary of use case without fancy words like <code>paradigm</code>, although there is some overlap as some languages support both the below is how I have been programming.</p><table><thead><tr><th>Characteristic</th><th>Imperative (Procedural)</th><th>Functional (Declarative)</th></tr></thead><tbody><tr><td>Langauge / Library</td><td>C#</td><td>React</td></tr><tr><td>State</td><td>State changes are    important.</td><td>State changes are non-existent.</td></tr><tr><td>Primary flow control</td><td>Loops, conditionals, and function (method) calls.</td><td>Function calls, including recursion.</td></tr><tr><td>Manipulation unit</td><td>Class instances (objects)</td><td>Functions as first-class objects and data collections.</td></tr></tbody></table><h3 id="Code-Examples"><a href="#Code-Examples" class="headerlink" title="Code Examples"></a>Code Examples</h3><p>Code example by <a href="https://codeburst.io/@ian.mundy">Ian Mundy</a></p><h4 id="Imperative-Procedural"><a href="#Imperative-Procedural" class="headerlink" title="Imperative (Procedural)"></a>Imperative (Procedural)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const container &#x3D; document.getElementById(‘container’);</span><br><span class="line">const btn &#x3D; document.createElement(‘button’);</span><br><span class="line">btn.className &#x3D; ‘btn red’;</span><br><span class="line">btn.onclick &#x3D; function(event) &#123;</span><br><span class="line"> if (this.classList.contains(‘red’)) &#123;</span><br><span class="line">   this.classList.remove(‘red’);</span><br><span class="line">   this.classList.add(‘blue’);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">   this.classList.remove(‘blue’);</span><br><span class="line">   this.classList.add(‘red’);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">container.appendChild(btn);</span><br></pre></td></tr></table></figure><h4 id="Functional-Declarative"><a href="#Functional-Declarative" class="headerlink" title="Functional (Declarative)"></a>Functional (Declarative)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Button extends React.Component&#123;</span><br><span class="line">  this.state &#x3D; &#123; color: &#39;red&#39; &#125;</span><br><span class="line">  handleChange &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    const color &#x3D; this.state.color &#x3D;&#x3D;&#x3D; &#39;red&#39; ? &#39;blue&#39; : &#39;red&#39;;</span><br><span class="line">    this.setState(&#123; color &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (&lt;div&gt;</span><br><span class="line">      &lt;button </span><br><span class="line">         className&#x3D;&#96;btn $&#123;this.state.color&#125;&#96;</span><br><span class="line">         onClick&#x3D;&#123;this.handleChange&#125;&gt;</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2">https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Reference</title>
      <link href="2020/08/reactjs-reference/"/>
      <url>2020/08/reactjs-reference/</url>
      
        <content type="html"><![CDATA[<h3 id="index-tsx"><a href="#index-tsx" class="headerlink" title="index.tsx"></a>index.tsx</h3><p>JSX is an embeddable XML-like syntax.</p><p><code>index.tsx</code> is a connected component, it’s a redux concept which is a react library for <a href="/2018/07/state-management-front-end/">state management</a>.</p><p>Its the magic that gives your component its <code>props</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default connect&lt; props</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.typescriptlang.org/docs/handbook/jsx.html">https://www.typescriptlang.org/docs/handbook/jsx.html</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://reactjs.org/">https://reactjs.org/</a></li><li><a href="https://frontendmasters.com/courses/intermediate-react-v2/">https://frontendmasters.com/courses/intermediate-react-v2/</a></li><li><a href="https://codesandbox.io/dashboard/home">https://codesandbox.io/dashboard/home</a></li><li><a href="https://www.udemy.com/course/react-the-complete-guide-incl-redux/">https://www.udemy.com/course/react-the-complete-guide-incl-redux/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Hooks</title>
      <link href="2020/08/reactjs-hooks/"/>
      <url>2020/08/reactjs-hooks/</url>
      
        <content type="html"><![CDATA[<h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>Returns a stateful value, and a function to update it.</p><p>Code example by <a href="https://www.freecodecamp.org/news/author/ibrahima92/">Ibrahima Ndaw</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export const App: React.FC &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line"> const [counter, setCounter] &#x3D; React.useState&lt;number&gt;(0)</span><br><span class="line"> </span><br><span class="line"> return (</span><br><span class="line">    &lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Result: &#123; counter &#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(counter + 1)&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCounter(counter - 1)&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#usestate">https://reactjs.org/docs/hooks-reference.html#usestate</a></li></ul><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.</p><p>The default behavior for effects is to fire the effect after every completed render. You can however <code>conditionally</code> fire the effect by passing a second argument as an array of values. Example: <code>fireWhileImChanging</code> below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(</span><br><span class="line">  () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; do something with prop values</span><br><span class="line">  &#125;,</span><br><span class="line">  [fireWhileImChanging],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#useeffect">https://reactjs.org/docs/hooks-reference.html#useeffect</a></li></ul><h3 id="YouTube-D"><a href="#YouTube-D" class="headerlink" title="YouTube :D"></a>YouTube :D</h3><ul><li>React Hooks Tutorial - 1 - Introduction</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/cF2lQ_gZeA8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li>React.js Hooks Crash Course</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/-MlNBTSg_Ww" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.freecodecamp.org/news/beginner-react-project-build-basic-forms-using-react-hooks/">https://www.freecodecamp.org/news/beginner-react-project-build-basic-forms-using-react-hooks/</a></li><li><a href="https://www.freecodecamp.org/news/react-typescript-how-to-set-up-types-on-hooks/">https://www.freecodecamp.org/news/react-typescript-how-to-set-up-types-on-hooks/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tslint</title>
      <link href="2020/08/tslint/"/>
      <url>2020/08/tslint/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TSLint - An extensible linter for the TypeScript language.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const log &#x3D; &#123;</span><br><span class="line">    &#39;foo&#39;: props.foo,</span><br><span class="line">    &#39;bar&#39;: props.bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; tslint:disable-next-line: no-console</span><br><span class="line">console.log(&#39;XXX log&#x3D;&#39;, log);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://palantir.github.io/tslint/">https://palantir.github.io/tslint/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperfixation</title>
      <link href="2020/07/hyperfixation/"/>
      <url>2020/07/hyperfixation/</url>
      
        <content type="html"><![CDATA[<p>By trade I solve business problems with code, this often entails hours of snorkeling though <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace?view=netcore-3.1">stack traces</a> and code I’m trying to understand. Not to mention several google tabs open all about the current <a href="https://docs.microsoft.com/en-us/dotnet/api/system.exception?view=netcore-3.1">exception</a> I just cannot wrap my head around.</p><p>Recently I was tasked with a simple case to update the spelling of an area called <a href="/2020/07/whanganui/">Whanganui</a>, seems simple enough right? <code>CTRL F</code> find the mistake, update it <code>CRTL S</code> … boom ship it, case closed. Well its not always that simple…</p><h3 id="Problem-Domain"><a href="#Problem-Domain" class="headerlink" title="Problem Domain"></a>Problem Domain</h3><p>All company’s have some kind of <a href="https://en.wikipedia.org/wiki/Legacy_code">legacy system or code base</a>, if they don’t they are a start-up and the code is perfect right? Follows <a href="/2018/04/solid-object-oriented-design/">SOLID</a>, has <a href="/tags/software-testing/">unit tests</a> for days… Sure :)</p><p>The problem I faced was a mixture of <a href="/2018/07/database-normalization/">database de-normalization</a>, years of legacy code, business rules by business unit (or vertical) and to be honest a lack of understanding of all the processes that these business units run daily. Big company’s have many working parts, this is how they make money. This is how they can pay their bills.</p><p>So sweet, I found tables to change. There were 3 with the area data and 2 with the business unit specific data. I figured out the <a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver15">SQL Statements</a>, had them reviewed and began testing. (In the end there were more tables I changed)</p><p>This was where I made my first mistake, I <a href="https://totallyadd.com/blog/hyperfixation-and-adhd/">hyper fixated</a> on only my business unit’s logic, the code caching mechanisms and the exceptions I managed to get the code base to throw while testing. This is exciting stuff for me, if I break code I generally get a better understanding of it. I eventually got the branch to behave in manner that I deemed ready for test, so we tested and shipped the case.</p><p>Well then all hell broke loose with exceptions for days in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/classes">classes</a> that I knew I had tested. Man it was frustrating but we had to roll the change back as it was impacting some production traffic. Thankfully my employer has a <a href="https://www.theceomagazine.com/business/management-leadership/foster-no-blame-culture/">zero blame culture</a>, we did our post <code>system bork</code> ritual’s to understand why things got unhappy and learn from it so we can do better next time.</p><h3 id="The-Known"><a href="#The-Known" class="headerlink" title="The Known"></a>The Known</h3><p>I realized that my hyper fixation on the <code>KNOWN</code> was not the correct approach for this problem, we needed extend our focus to the unknown. Sounds weird right? The unknown is, well unknown… it is however reasonable to assume code will break if you give it something weird. It expects <code>Int 32</code> but you give it something random like a lizard.</p><p>In World War 2, Abraham Wald was smart enough not to focus on the known but to use the <code>KNOWN</code> to figure out the <code>UN-KNOWN</code>, the Navy was trying to figure out how to keep their planes in the air after being shot. It was a war, people shot at planes. They looked at planes that had been shot and determined that these areas needed to be beefed up with armor.   </p><blockquote><p>According to him, the statisticians were looking at the planes that came back, meaning that the damage was not critical. Wald pointed out that they should do the exact opposite of what the Navy was planning to do. According to him, they should understand that the undamaged areas on the diagram were the reason that the aircraft was able to make it back. - boredpanda.com</p></blockquote><p><img src="/d/hyperfixation/abraham-wald-plane-bullet-holes.png" alt="Abraham Wald Survival Bias- boredpanda.com"></p><p>In the same way, I needed to focus my changes not only in the database but also in the code base to ethically hack the code to rather log a WARNING than throw exceptions when the database data is processed and it received something <code>UNKNOWN</code>. This is beefing up the important parts which is the same as the aeroplane engines, cockpit ect which do not have any bullet holes in the picture above but also understanding that the areas that got shot can still function.</p><p>When working though this case I was reminded of a quote from one of my favorite <a href="https://www.pluralsight.com/authors/steve-smith">pluralsight</a> authors - <a href="https://www.linkedin.com/in/stevenandrewsmith/">Steve Smith</a></p><blockquote><p>As software developers, we fail in two ways: we build the thing wrong, or we build the wrong things.</p></blockquote><p><img src="/d/hyperfixation/steve-smith-quote.jpg" alt="Steve Smith Quote"></p><p>Not only did I build the thing wrong, I hyper focused on only one area of the business and its <code>Survival Bias</code>. In the end we shipped the case and there was no <code>BORK</code> in production but its only because I started to focus on the <code>UNKNOWN</code> and stopped hyper fixating on the <code>KNOWN</code>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.linkedin.com/posts/carl-paton_excellent-example-of-focusing-on-the-right-activity-6691772515146190848-Ap6q">https://www.linkedin.com/posts/carl-paton_excellent-example-of-focusing-on-the-right-activity-6691772515146190848-Ap6q</a></li><li><a href="https://en.wikipedia.org/wiki/Abraham_Wald">https://en.wikipedia.org/wiki/Abraham_Wald</a></li><li><a href="https://medium.com/@penguinpress/an-excerpt-from-how-not-to-be-wrong-by-jordan-ellenberg-664e708cfc3d">https://medium.com/@penguinpress/an-excerpt-from-how-not-to-be-wrong-by-jordan-ellenberg-664e708cfc3d</a></li><li><a href="https://www.boredpanda.com/world-war-2-aircraft-survivorship-bias-abraham-wald/?utm_source=google&amp;utm_medium=organic&amp;utm_campaign=organic">https://www.boredpanda.com/world-war-2-aircraft-survivorship-bias-abraham-wald/?utm_source=google&amp;utm_medium=organic&amp;utm_campaign=organic</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microservice Architecture</title>
      <link href="2020/07/microservice-architecture/"/>
      <url>2020/07/microservice-architecture/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>As the name implies, a microservices architecture is an approach to building a server application as a set of small services. That means a microservices architecture is mainly oriented to the back-end, although the approach is also being used for the front end. Each service runs in its own process and communicates with other processes using protocols such as HTTP/HTTPS, WebSockets, or AMQP.</p></blockquote><h3 id="DDD-Oriented-Microservice"><a href="#DDD-Oriented-Microservice" class="headerlink" title="DDD Oriented Microservice"></a>DDD Oriented Microservice</h3><p>A layered design is implemented in the <a href="https://github.com/dotnet-architecture/eShopOnContainers">eShopOnContainers</a> application.</p><p><img src="/d/microservice-architecture/domain-driven-design-microservice.png" alt="DDD Oriented Microservice"></p><p>Source: <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/</a></li><li><a href="https://www.freecodecamp.org/news/monolith-vs-microservices-which-architecture-is-right-for-your-team-bb840319d531/">https://www.freecodecamp.org/news/monolith-vs-microservices-which-architecture-is-right-for-your-team-bb840319d531/</a></li><li><a href="https://www.freecodecamp.org/news/our-journey-into-the-world-of-microservices-and-what-we-learned-from-it-d255b9a2a654/">https://www.freecodecamp.org/news/our-journey-into-the-world-of-microservices-and-what-we-learned-from-it-d255b9a2a654/</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/microservices-architecture">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/microservices-architecture</a></li><li><a href="https://eng.uber.com/microservice-architecture/">https://eng.uber.com/microservice-architecture/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
            <tag> ddd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Whanganui</title>
      <link href="2020/07/whanganui/"/>
      <url>2020/07/whanganui/</url>
      
        <content type="html"><![CDATA[<p>Only in Aotearoa, New Zealand is <code>Whanganui == Wanganui </code> and <code>Whanganui != Wanganui</code> but only in region <code>Manawatu / Whanganui</code>, district <code>Whanganui </code> and suburb <code>Whanganui East</code>. (On the North Island)</p><p>This is not to be confused with <code>Little Wanganui</code> on the South Island which is region <code>West Coast</code> and district <code>Buller</code>. There its spelt without the h - so I guess no <code>PH</code> (pounced F-HAH) </p><p>#iLoveNewZealand</p><p>WAT.</p><p><img src="/d/whanganui/whanganui.png" alt="Wanganui != Whanganui"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Whanganui">https://en.wikipedia.org/wiki/Whanganui</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biltong</title>
      <link href="2020/07/biltong/"/>
      <url>2020/07/biltong/</url>
      
        <content type="html"><![CDATA[<p>A place holder for my biltong maker &amp; recipe.</p><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><ul><li><a href="https://www.jaycar.co.nz/120mm-240v-standard-fan/p/YX2514">https://www.jaycar.co.nz/120mm-240v-standard-fan/p/YX2514</a></li><li><a href="https://www.mitre10.co.nz/shop/electrical-hardware/electrical-outlets-fittings/light-fittings/c/RF5378">https://www.mitre10.co.nz/shop/electrical-hardware/electrical-outlets-fittings/light-fittings/c/RF5378</a></li><li><a href="https://www.tradedepot.co.nz/outlet-vent-with-insect-screen-150mm-width#loaded">https://www.tradedepot.co.nz/outlet-vent-with-insect-screen-150mm-width#loaded</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Yield</title>
      <link href="2020/07/c-sharp-yield/"/>
      <url>2020/07/c-sharp-yield/</url>
      
        <content type="html"><![CDATA[<h3 id="Deferred-Execution"><a href="#Deferred-Execution" class="headerlink" title="Deferred Execution"></a>Deferred Execution</h3><p><em>From docs.microsoft.com</em></p><p>Deferred execution means that the evaluation of an expression is delayed until its <em>realized</em> value is actually required. Deferred execution can greatly improve performance when you have to manipulate large data collections, especially in programs that contain a series of chained queries or manipulations. In the best case, deferred execution enables only a single iteration through the source collection.</p><p>The LINQ technologies make extensive use of deferred execution in both the members of core <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq">System.Linq</a> classes and in the extension methods in the various LINQ namespaces, such as <a href="https://docs.microsoft.com/en-us/dotnet/api/system.xml.linq.extensions">System.Xml.Linq.Extensions</a>.</p><p>Deferred execution is supported directly in the C# language by the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield">yield</a> keyword (in the form of the <code>yield-return</code> statement) when used within an iterator block. Such an iterator must return a collection of type <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator">IEnumerator</a> or <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerator-1">IEnumerator</a> (or a derived type).</p><h3 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h3><p>Not sure about real world application but this is a <a href="https://stackoverflow.com/questions/44798975/trouble-understanding-yield-in-c-sharp?noredirect=1&lq=1">code example based on a post from stack overflow</a>.</p><ul><li><a href="https://github.com/carlpaton/Boilerplate/blob/master/Random/Yield/YieldDemo.cs">https://github.com/carlpaton/Boilerplate/blob/master/Random/Yield/YieldDemo.cs</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class YieldDemo</span><br><span class="line">&#123;</span><br><span class="line">    public YieldDemo() </span><br><span class="line">    &#123;</span><br><span class="line">        var doTheYieldThing &#x3D; new DoTheYieldThing();</span><br><span class="line"></span><br><span class="line">        var infiniteOnes &#x3D; doTheYieldThing.InfiniteOnes();</span><br><span class="line"></span><br><span class="line">        var counter &#x3D; 1;</span><br><span class="line">        foreach (var one in infiniteOnes.Take(10))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;one&#x3D;&#123;0&#125;, counter&#x3D;&#123;1&#125;&quot;, one, counter);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(&quot;----------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        foreach (var one in infiniteOnes.Take(10))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;one&#x3D;&#123;0&#125;, counter&#x3D;&#123;1&#125;&quot;, one, counter);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DoTheYieldThing </span><br><span class="line">&#123;</span><br><span class="line">    public IEnumerable&lt;int&gt; InfiniteOnes()</span><br><span class="line">    &#123;</span><br><span class="line">        while (true)</span><br><span class="line">            yield return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This results in</p><p><img src="/d/c-sharp-yield/yield.jpg" alt="Yield"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/44798975/trouble-understanding-yield-in-c-sharp?noredirect=1&amp;lq=1">https://stackoverflow.com/questions/44798975/trouble-understanding-yield-in-c-sharp?noredirect=1&amp;lq=1</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABC Problem</title>
      <link href="2020/07/rosetta-code-abc-problem/"/>
      <url>2020/07/rosetta-code-abc-problem/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>You are given a collection of ABC blocks (maybe like the ones you had when you were a kid).</p><p>There are twenty blocks with two letters on each block.</p><p>A complete alphabet is guaranteed amongst all sides of the blocks.</p><p>The sample collection of blocks:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(B O)</span><br><span class="line">(X K)</span><br><span class="line">(D Q)</span><br><span class="line">(C P)</span><br><span class="line">(N A)</span><br><span class="line">(G T)</span><br><span class="line">(R E)</span><br><span class="line">(T G)</span><br><span class="line">(Q D)</span><br><span class="line">(F S)</span><br><span class="line">(J W)</span><br><span class="line">(H U)</span><br><span class="line">(V I)</span><br><span class="line">(A N)</span><br><span class="line">(O B)</span><br><span class="line">(E R)</span><br><span class="line">(F S)</span><br><span class="line">(L Y)</span><br><span class="line">(P C)</span><br><span class="line">(Z M)</span><br></pre></td></tr></table></figure><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Write a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.</p><p>The rules are simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; can_make_word(&quot;A&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;BARK&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;BOOK&quot;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;TREAT&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;COMMON&quot;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;SQUAD&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;CONFUSE&quot;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>The word <code>BARK</code> was made up using blocks as follows:</p><p><img src="/d/rosetta-code-abc-problem/blocks-example.jpg" alt="BARK"></p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>For the possible solutions blow, each time I ran the <a href="https://github.com/carlpaton/Boilerplate/blob/master/Rosetta%20Code/ABC_Problem/net/Program.cs">console application</a> I got a different result in terms of elapsed time. I guess an average of a few runs would be the best to have an unbiased result but the below paints a pretty clear picture (for me anyway) that the action deligate is the fastest.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ForeachLoop:    00:00:00.0056731</span><br><span class="line">ActionDelegate: 00:00:00.0015526  &lt; fastest run and solution</span><br><span class="line">Regex:          00:00:00.0122734</span><br><span class="line"></span><br><span class="line">ForeachLoop:    00:00:00.0077697</span><br><span class="line">ActionDelegate: 00:00:00.0016330</span><br><span class="line">Regex:          00:00:00.0170153</span><br><span class="line"></span><br><span class="line">ForeachLoop:    00:00:00.0080737</span><br><span class="line">ActionDelegate: 00:00:00.0015944</span><br><span class="line">Regex:          00:00:00.0170100</span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>Using a normal <code>foreach</code> loop</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MakeWord</span>(<span class="params"><span class="built_in">string</span> word, List&lt;<span class="built_in">string</span>&gt; blocks</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blocksLeft = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(blocks);</span><br><span class="line">    <span class="keyword">var</span> stringComparison = StringComparison.CurrentCultureIgnoreCase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> letter <span class="keyword">in</span> word)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!blocksLeft.Any(b =&gt; b.Contains(letter, stringComparison)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        blocksLeft.Remove(blocksLeft.First(b =&gt; b.Contains(letter, stringComparison)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p>Trying to make things faster with an <code>Action</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MakeWord2</span>(<span class="params"><span class="built_in">string</span> word, List&lt;<span class="built_in">string</span>&gt; blocks</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> letters = word.ToList();</span><br><span class="line">    <span class="keyword">var</span> blocksLeft = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(blocks);</span><br><span class="line">    <span class="keyword">var</span> stringComparison = StringComparison.CurrentCultureIgnoreCase;</span><br><span class="line"></span><br><span class="line">    letters.ForEach(letter =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!blocksLeft.Any(b =&gt; b.Contains(letter, stringComparison)))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        blocksLeft.Remove(blocksLeft.First(b =&gt; b.Contains(letter, stringComparison)));</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blocksLeft.Count() + letters.Count() == blocks.Count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.foreach?view=netcore-3.1">https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.foreach?view=netcore-3.1</a></li></ul><h3 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h3><p>Implementation from <a href="http://rosettacode.org/wiki/ABC_Problem#Regex">http://rosettacode.org/wiki/ABC_Problem#Regex</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MakeWord3</span>(<span class="params"><span class="built_in">string</span> word, <span class="built_in">string</span> blocks</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; word.Length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> length = blocks.Length;</span><br><span class="line">        <span class="keyword">var</span> rgx = <span class="keyword">new</span> Regex(<span class="string">&quot;([a-z]&quot;</span> + word[i] + <span class="string">&quot;|&quot;</span> + word[i] + <span class="string">&quot;[a-z])&quot;</span>, RegexOptions.IgnoreCase);</span><br><span class="line">        blocks = rgx.Replace(blocks, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (blocks.Length == length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/Boilerplate/tree/master/Rosetta%20Code/ABC_Problem">https://github.com/carlpaton/Boilerplate/tree/master/Rosetta%20Code/ABC_Problem</a></li><li><a href="http://rosettacode.org/wiki/ABC_Problem">http://rosettacode.org/wiki/ABC_Problem</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rosetta Code</title>
      <link href="2020/07/rosetta-code/"/>
      <url>2020/07/rosetta-code/</url>
      
        <content type="html"><![CDATA[<ul><li>See All <a href="/tags/rosetta-code/">Rosetta Code</a> posts here.</li></ul><p>I was inspired by <a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a> a project by <a href="http://rosettacode.org/wiki/User:Short_Circuit">Mike Mol</a> to document problems and their solutions as I understand them for problems I encouter in my career as a Software Developer. </p><p>There are always several ways to do things in an unopinionated but still programmatic manner. I would rather know how to solve the same problem in several ways and then compare for the best fit in terms of performance and copy style with the current code base.</p><p>Although <code>Rosetta Code</code> is aimed at solving the problem once in different langauges (flip how cool is that!) its still the same thing, I just focus on a few langauges :) </p><blockquote><p>Rosetta Code is a programming chrestomathy site. The idea is to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another.</p></blockquote><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>Template to copy and paste for (hopefully) future rosetta code posts :)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">### Story</span><br><span class="line">foo</span><br><span class="line"></span><br><span class="line">### Task</span><br><span class="line">bar</span><br><span class="line"></span><br><span class="line">### Solutions</span><br><span class="line">baz</span><br><span class="line"></span><br><span class="line">### References</span><br><span class="line">bat</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Collections of Entities</title>
      <link href="2020/05/c-sharp-collections-of-entities/"/>
      <url>2020/05/c-sharp-collections-of-entities/</url>
      
        <content type="html"><![CDATA[<p>Collections are a <strong>list</strong> or a <strong>container</strong> which can hold entities. Each have different use cases.</p><h2 id="Interface-Collections-That-Support-Iteration"><a href="#Interface-Collections-That-Support-Iteration" class="headerlink" title="Interface Collections That Support Iteration"></a>Interface Collections That Support Iteration</h2><h3 id="IEnumerable"><a href="#IEnumerable" class="headerlink" title="IEnumerable"></a>IEnumerable</h3><p>This is the most basic type of container. Exposes an enumerator, which supports a <strong>simple iteration</strong> over a <strong>non-generic collection</strong>. You cannot add, delete or update and there are no count methods, to get a count you would need to iterate over all entities.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="keyword">public</span> System.Collections.<span class="function">IEnumerator <span class="title">GetEnumerator</span> (<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable">https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable</a></li></ul><h3 id="ICollection"><a href="#ICollection" class="headerlink" title="ICollection"></a>ICollection</h3><p>Extends <code>IEnumerable</code> and defines size, enumerators, and synchronization methods for all <strong>non-generic collections</strong>. Has functionality to add, remove, update entities in the container and <strong>get the count</strong>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Properties</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsSynchronized &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> SyncRoot &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyTo</span> (<span class="params">Array array, <span class="built_in">int</span> index</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection">https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection</a></li></ul><h3 id="IList"><a href="#IList" class="headerlink" title="IList"></a>IList</h3><p>Extends <code>IEnumerable</code> and represents a non-generic collection of objects that can be individually <strong>accessed by index</strong>, it supports the same functionality to add, remove, update entities in the container.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Properties</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsFixedSize &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsReadOnly &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span> (<span class="params"></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">IndexOf</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span> (<span class="params"><span class="built_in">int</span> index, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveAt</span> (<span class="params"><span class="built_in">int</span> index</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ilist">https://docs.microsoft.com/en-us/dotnet/api/system.collections.ilist</a></li></ul><h2 id="Other-Interface-Collections"><a href="#Other-Interface-Collections" class="headerlink" title="Other Interface Collections"></a>Other Interface Collections</h2><h3 id="IReadOnlyCollection"><a href="#IReadOnlyCollection" class="headerlink" title="IReadOnlyCollection"></a>IReadOnlyCollection</h3><p>Represents a strongly-typed, read-only collection of elements.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1">https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1</a></li></ul><h3 id="IReadOnlyList"><a href="#IReadOnlyList" class="headerlink" title="IReadOnlyList"></a>IReadOnlyList</h3><p>Represents a read-only collection of elements that can be accessed by index.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1">https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Copy Constructors</title>
      <link href="2020/05/copy-constructors/"/>
      <url>2020/05/copy-constructors/</url>
      
        <content type="html"><![CDATA[<p>This can be used to clone an object however this is a <code>C++</code> term, this allows you to specify an object to create the data from, it would not be very <strong>idiomatic</strong> for a <code>C#</code> developer so I don’t feel its the best approach for me as a .Net Developer. </p><p>Would require each custom type to have a copy constructor to allow traversing of the tree so the copy is done recursively. If you want to <strong>clone</strong> rather look at the suggestions under the creational <a href="/2020/05/prototype-pattern/">Prototype Pattern</a>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Example classes <code>Person</code> and <code>Address</code> which have copy constructors: </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params">Person other</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FirstName = other.FirstName;</span><br><span class="line">        Address = <span class="keyword">new</span> Address(other.Address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params">Address other</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        StreetName = other.StreetName;</span><br><span class="line">        HouseNumber = other.HouseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will work as strings are immutable.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carl = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(carl)</span><br><span class="line">&#123;</span><br><span class="line">    FirstName = <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">john.Address.HouseNumber = <span class="number">123</span>;</span><br><span class="line">john.Address.StreetName = <span class="string">&quot;Foo Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(john);</span><br></pre></td></tr></table></figure><p>Output would be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John, Address: StreetName: Foo Street, HouseNumber: 123</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[PrototypePattern/CopyConstructorDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/CopyConstructorDemo.cs)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Explicit Deep Copy Interface</title>
      <link href="2020/05/explicit-deep-copy-interface/"/>
      <url>2020/05/explicit-deep-copy-interface/</url>
      
        <content type="html"><![CDATA[<p>This can be used to clone an object. We can create our own interface <code>IProtoType&lt;T&gt;</code> and specify a method of <code>DeepCopy</code> which will remove the ambiguity we got from trying <a href="/2020/05/icloneable/">ICloneable</a> but its would still mean traversing the object tree manually so the copy is done <strong>recursively</strong>. </p><p>If you want to <strong>clone</strong> rather look at the suggestions under the creational <a href="/2020/05/prototype-pattern/">Prototype Pattern</a>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Example classes <code>Person</code> and <code>Address</code> which implement <code>IPrototype</code> - the nice thing now with <code>IPrototype</code> is the API would return the given type so no casting is needed.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPrototype</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">DeepCopy</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The implementation would be</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">IPrototype</span>&lt;<span class="title">Person</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">DeepCopy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(FirstName, Address.DeepCopy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span> : <span class="title">IPrototype</span>&lt;<span class="title">Address</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">DeepCopy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Address(StreetName, HouseNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example usage:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carl = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"><span class="keyword">var</span> john = carl.DeepCopy();</span><br><span class="line">john.FirstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">john.Address.HouseNumber = <span class="number">456</span>;</span><br><span class="line">john.Address.StreetName = <span class="string">&quot;Hoe Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(john);</span><br></pre></td></tr></table></figure><p>Output would be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John, Address: StreetName: Hoe Street, HouseNumber: 456</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[PrototypePattern/ICloneableDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.string">https://docs.microsoft.com/en-us/dotnet/api/system.string</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICloneable</title>
      <link href="2020/05/icloneable/"/>
      <url>2020/05/icloneable/</url>
      
        <content type="html"><![CDATA[<p>Creates a new object that is a copy of the current instance.</p><h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>Inheriting from and implementing this interface will provide a <code>Clone</code> method however the return type is <code>object</code> so would need to cast the result. This is not really ideal and could confuse the consumer. If you want to clone rather look at the suggestions under the creational <a href="/2020/05/prototype-pattern/">Prototype Pattern</a>. </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Example classes <code>Person</code> and <code>Address</code> which implement <code>ICloneable</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(FirstName, (Address)Address.Clone());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Address(StreetName, HouseNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will work as strings are immutable.</p><blockquote><p>A string is a sequential collection of characters that is used to represent text. A <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1">String</a> object is a sequential collection of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char?view=netcore-3.1">System.Char</a> objects that represent a string; a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char?view=netcore-3.1">System.Char</a> object corresponds to a UTF-16 code unit. The value of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1">String</a> object is the content of the sequential collection of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char?view=netcore-3.1">System.Char</a> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1#Immutability">Immutability and the StringBuilder class</a> section later in this topic. The maximum size of a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1">String</a> object in memory is 2GB, or about 1 billion characters. - microsoft.com</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Although this will work its a shallow copy</span></span><br><span class="line"><span class="keyword">var</span> carl2 = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"><span class="keyword">var</span> john2 = (Person)carl2.Clone();</span><br><span class="line"></span><br><span class="line">john2.FirstName = <span class="string">&quot;John Two&quot;</span>;</span><br><span class="line">john2.Address.HouseNumber = <span class="number">111</span>;</span><br><span class="line">john2.Address.StreetName = <span class="string">&quot;Foo Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(carl2);</span><br><span class="line">Console.WriteLine(john2);</span><br></pre></td></tr></table></figure><p>Output would be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John Two, Address: StreetName: Foo Street, HouseNumber: 111</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[PrototypePattern/ICloneableDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.string">https://docs.microsoft.com/en-us/dotnet/api/system.string</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prototype Pattern</title>
      <link href="2020/05/prototype-pattern/"/>
      <url>2020/05/prototype-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>This design pattern is all about object copying, the use case would be when its easier to <strong>copy</strong> (<strong>clone</strong>) an existing object than to fully initialize a new one. Note that the existing object could be partially or fully constructed. </p><p>These would be <strong>complicated objects</strong>, perhaps constructed with a <a href="/2020/04/builder-pattern/">builder</a> and you now wish to make simple changes to it for your use case.  </p><p>A <strong>Deep Copy</strong> is what is required for the Prototype Pattern.</p><table><thead><tr><th>Copy</th><th>Description</th></tr></thead><tbody><tr><td>Shallow</td><td>A shallow copy is a copy of the object and its references. This means after you make the copy changes to <code>this</code> object also makes changes to the <code>other</code> object.</td></tr><tr><td>Deep</td><td>A deep copy is not just a copy of the object but a copy of all its <a href="/2018/06/value-type-vs-reference-type/">references (on the heap)</a> by making new objects which replicates the state of those references. This would need to be done <strong>recursively</strong> so you would need to make a complete copy of the object. This means the change in <code>this</code> object does not affect the <code>other</code> object.</td></tr></tbody></table><p><strong>Caveats</strong></p><ul><li>When deep copying an entity, if it has a database auto assigned ID you may want to reset this as should the copied entity change and then be persisted you may update persisted data by mistake.</li></ul><h3 id="ICloneable"><a href="#ICloneable" class="headerlink" title="ICloneable"></a>ICloneable</h3><p><a href="/2020/05/icloneable/">Don’t use ICloneable</a> for the Prototype Pattern as it will create a shallow copy.</p><ul><li>[PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs)</li></ul><h3 id="Copy-Constructors"><a href="#Copy-Constructors" class="headerlink" title="Copy Constructors"></a>Copy Constructors</h3><p>Don’t use <a href="/2020/05/copy-constructors/">Copy Constructors</a> as this would not be <strong>idiomatic</strong> for a <code>C#</code> developer and requires each custom type to have a copy constructor to allow traversing of the tree.</p><ul><li>[PatternsAndPrinciples/PrototypePattern/CopyConstructorDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/CopyConstructorDemo.cs)</li></ul><h3 id="Explicit-Deep-Copy-Interface"><a href="#Explicit-Deep-Copy-Interface" class="headerlink" title="Explicit Deep Copy Interface"></a>Explicit Deep Copy Interface</h3><p>You could create your own <a href="/2020/05/explicit-deep-copy-interface/">Explicit Deep Copy Interface</a> like <code>IProtoType&lt;T&gt;</code> however this would require manual object traversing and having each dependent object in the tree implement <code>IProtoType&lt;T&gt;</code>.</p><ul><li>[PatternsAndPrinciples/PrototypePattern/IProtoTypeDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/IProtoTypeDemo.cs)</li></ul><h3 id="Copy-Through-Serialization-Binary"><a href="#Copy-Through-Serialization-Binary" class="headerlink" title="Copy Through Serialization (Binary)"></a>Copy Through Serialization (Binary)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/BinarySerializationDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/BinarySerializationDemo.cs)</li></ul><p><a href="/2017/12/serialization/">Serialization</a> will be slower but will traverse the entire object tree. As we will not be persisting the serialized object to storage it can simply be kept in a <code>MemoryStream</code>.</p><p>Using a <code>BinaryFormatter</code> makes the most sense as we don’t need human readable data (<a href="/tags/xml/">XML</a>, <a href="/tags/json/">JSON</a>).</p><p>Create the extension method:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            formatter.Serialize(stream, self);</span><br><span class="line">            stream.Seek(<span class="number">0</span>, SeekOrigin.Begin); <span class="comment">// Rewind the stream with offset of 0 from the begining</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">object</span> copy = formatter.Deserialize(stream);</span><br><span class="line">            stream.Close();</span><br><span class="line">            <span class="keyword">return</span> (T)copy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create some classes to hold the state to be copied, <strong>caveat</strong> is the classes need to have the <code>[Serializable]</code> attribute / annotation. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instantiate and copy</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carl = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Initial Object:&quot;</span>);</span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> john = carl.DeepCopy();</span><br><span class="line">john.FirstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">john.Address.HouseNumber = <span class="number">789</span>;</span><br><span class="line">john.Address.StreetName = <span class="string">&quot;Foo Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Initial Object &amp; Copy:&quot;</span>);</span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(john);</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John, Address: StreetName: Foo Street, HouseNumber: 789</span><br></pre></td></tr></table></figure><h3 id="Copy-Through-Serialization-XML"><a href="#Copy-Through-Serialization-XML" class="headerlink" title="Copy Through Serialization (XML)"></a>Copy Through Serialization (XML)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/XmlSerializationDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/XmlSerializationDemo.cs)</li></ul><p>The classes you wish to serialize may not be open for modification, so you could use <code>XMlSerializer</code> if you cannot add the annotation. <strong>Caveat</strong> would however be that the classes need a <strong>parameterless</strong> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors">constructor</a>.</p><p>The extension method would then look like this</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">            xmlSerializer.Serialize(stream, self);</span><br><span class="line">            stream.Position = <span class="number">0</span>; <span class="comment">// same as `stream.Seek(0, SeekOrigin.Begin);`</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (T) xmlSerializer.Deserialize(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Copy-Through-Serialization-System-Text-Json"><a href="#Copy-Through-Serialization-System-Text-Json" class="headerlink" title="Copy Through Serialization (System.Text.Json)"></a>Copy Through Serialization (System.Text.Json)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo.cs)</li><li><a href="https://www.nuget.org/packages/System.Text.Json/">https://www.nuget.org/packages/System.Text.Json/</a></li></ul><p>Some <strong>Caveats</strong> still exist:</p><ul><li><strong>Parameterless</strong> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors">constructor</a> is needed</li><li>This serializer doesn’t work with fields but needs properties instead.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    ...    </span><br></pre></td></tr></table></figure><p>The extension method would look like this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> json = JsonSerializer.Serialize(self);</span><br><span class="line">            <span class="keyword">return</span> JsonSerializer.Deserialize&lt;T&gt;(json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Copy-Through-Serialization-Newtonsoft-Json"><a href="#Copy-Through-Serialization-Newtonsoft-Json" class="headerlink" title="Copy Through Serialization (Newtonsoft.Json)"></a>Copy Through Serialization (Newtonsoft.Json)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo2.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo2.cs)</li><li><a href="https://www.nuget.org/packages/Newtonsoft.Json/">https://www.nuget.org/packages/Newtonsoft.Json/</a></li></ul><p>No additional changes are needed to the class that I could see. The extension method would look like this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> json = JsonConvert.SerializeObject(self);</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=netcore-3.1">https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=netcore-3.1</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=netcore-3.1">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=netcore-3.1</a></li><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/PrototypePattern]">https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/PrototypePattern]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net">https://github.com/carlpaton/Boilerplate/tree/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> serialization </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open Source</title>
      <link href="2020/05/open-source/"/>
      <url>2020/05/open-source/</url>
      
        <content type="html"><![CDATA[<p>These are some of my open source projects, some are more useful than others, some have end runs and code smells but its all about refactoring to a better design &lt;3 </p><table><thead><tr><th>Name</th><th>Description</th><th>Link</th></tr></thead><tbody><tr><td>CarlPaton.Common</td><td>Common DateTime, Encoding, Http &amp; Authorization and Serialization services for applications written in .Net Core, SDK 2.2.104</td><td><a href="https://www.nuget.org/packages/CarlPaton.Common/">https://www.nuget.org/packages/CarlPaton.Common/</a></td></tr><tr><td>Vulnus Cloud</td><td>This application allows you to identify open source dependencies and determine if there are any known, publicly disclosed, vulnerabilities on packages used by your application.</td><td><a href="https://github.com/carlpaton/VulnusCloud">https://github.com/carlpaton/VulnusCloud</a></td></tr><tr><td>Aws Administrator</td><td>AWS infrastructure administration tool. AWS SDK works pretty well however the UI never got much love as Trade Me decided to use Google Cloud (GCP).</td><td><a href="https://github.com/carlpaton/AwsAdministrator">https://github.com/carlpaton/AwsAdministrator</a></td></tr><tr><td>Redis Administrator</td><td>Application to help admin a Redis instance.</td><td><a href="https://github.com/carlpaton/RedisAdministrator">https://github.com/carlpaton/RedisAdministrator</a></td></tr><tr><td>Fibonacci Board</td><td>Fibonacci sequence for story sizing.</td><td><a href="https://carlpaton.github.io/prx/">https://carlpaton.github.io/prx/</a></td></tr></tbody></table><p>There are a few more that I have pushed to <a href="https://github.com/carlpaton">https://github.com/carlpaton</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
            <tag> open source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi LED Control</title>
      <link href="2020/05/pi-led-control/"/>
      <url>2020/05/pi-led-control/</url>
      
        <content type="html"><![CDATA[<p>A <a href="https://en.wikipedia.org/wiki/Light-emitting_diode">light-emitting diode</a> (LED) typically has a forward voltage of between 1.8 and 3.3 volts. The simplest way to drive an LED is through a series resistor where energy is dissipated in the resistor as heat.</p><p>A LED has a voltage drop specified at the intended operating current. <a href="https://en.wikipedia.org/wiki/Ohm's_law">Ohm’s law</a> and <a href="https://en.wikipedia.org/wiki/Kirchhoff's_circuit_laws">Kirchhoff’s circuit laws</a> are used to calculate the appropriate resistor value, by subtracting the LED voltage drop from the supply voltage and dividing by the desired operating current.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM) </span><br><span class="line">GPIO.setup(<span class="number">25</span>, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># At 10Hz the LED will flicker</span></span><br><span class="line">pwm = GPIO.PWM(<span class="number">25</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Frequency is now 50 Hz - LED stops flickering</span></span><br><span class="line">pwm.ChangeFrequency(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5%&quot;</span>)</span><br><span class="line">pwm.ChangeDutyCycle(<span class="number">5</span>)   <span class="comment"># Duty cycle is now 5%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sleeper between duty ramp up</span></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">pwm.ChangeDutyCycle(<span class="number">100</span>) <span class="comment"># Duty cycle is now 100%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean up</span></span><br><span class="line">pwm.stop()</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.petervis.com/electronics/led/led-resistor-calculator.html">https://www.petervis.com/electronics/led/led-resistor-calculator.html</a></li><li><a href="https://www.petervis.com/electronics/Standard_Resistor_Values/Standard_Resistor_Values.html">https://www.petervis.com/electronics/Standard_Resistor_Values/Standard_Resistor_Values.html</a></li><li><a href="https://www.petervis.com/electronics/Standard_Resistor_Values/Resistor_Colour_Code.html">https://www.petervis.com/electronics/Standard_Resistor_Values/Resistor_Colour_Code.html</a></li><li><a href="https://en.wikipedia.org/wiki/LED_circuit">https://en.wikipedia.org/wiki/LED_circuit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Servo Control</title>
      <link href="2020/05/pi-servo-control/"/>
      <url>2020/05/pi-servo-control/</url>
      
        <content type="html"><![CDATA[<p>A servo allows precise control of the angular position of its shaft. Standard servos accept 4.6 to 6 volts.</p><table><thead><tr><th>Colour</th><th>Description</th></tr></thead><tbody><tr><td>Yellow/White</td><td>Control signal</td></tr><tr><td>Red</td><td>Positive power lead</td></tr><tr><td>Black/Brown</td><td>Negative power lead</td></tr></tbody></table><h4 id="Control-signal"><a href="#Control-signal" class="headerlink" title="Control signal"></a>Control signal</h4><p>This needs to be a <code>pulse width modulation (PWM)</code> square wave. The square wave needs to be 50 herts (so a pulse of every 0.2 seconds) The angle of the servo is controlled by the length of the positive pulse (duty cycle) The longer the pulse/period of the wave/duty cycle the larger the angle the servo will turn to and try hold itself at.</p><p>These values vary by servo but for the small cheap SG-90’s the degrees can be calculated as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2% duty cycle &#x3D; 0 degrees</span><br><span class="line">12% duty cycle &#x3D; 180 degrees</span><br></pre></td></tr></table></figure><p><img src="/d/pi-servo-control/servo-duty.jpg" alt="Servo Duty"></p><p>Translating this to python code using the RPi.GPIO library</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set GPIO numbering mode</span></span><br><span class="line">GPIO.setmode(GPIO.BOARD)</span><br><span class="line"><span class="comment"># There is another mode called `GPIO.BCM` for BCM pin numbering, not sure what this is?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set pin 11 as an output, and set servo1 as pin 11 as PWM</span></span><br><span class="line">GPIO.setup(<span class="number">11</span>,GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note 11 is the pi&#x27;s pin, 50Hz pulse (analog servo), 300 would be for digital</span></span><br><span class="line">servo = GPIO.PWM(<span class="number">11</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start PWM running, but with value of 0 (pulse off)</span></span><br><span class="line">servo.start(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># duty is a percentage from 0 to 100 which allows for decimals like 3.33</span></span><br><span class="line"><span class="comment"># 2% = 0 degrees</span></span><br><span class="line"><span class="comment"># 7% = 90 degrees</span></span><br><span class="line"><span class="comment"># 12% = 180 degrees</span></span><br><span class="line"><span class="comment"># setting it then back to 0 stops the servo from jittering, just set `time.sleep(0.5)` before so you give the servo time to move to the position</span></span><br><span class="line">duty = <span class="number">2</span></span><br><span class="line">servo.ChangeDutyCycle(duty)</span><br><span class="line">servo.ChangeDutyCycle(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean up</span></span><br><span class="line">servo.stop()</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/">https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/</a></li><li><a href="https://www.servocity.com/how-does-a-servo-work">https://www.servocity.com/how-does-a-servo-work</a></li><li><a href="http://www.robotplatform.com/knowledge/servo/servo_control_tutorial.html">http://www.robotplatform.com/knowledge/servo/servo_control_tutorial.html</a></li><li><a href="http://webhome.csc.uvic.ca/~mcheng/samples/qu/SENG466_Home/Phase_1/Entries/2010/2/1_Servo_Motor.html">http://webhome.csc.uvic.ca/~mcheng/samples/qu/SENG466_Home/Phase_1/Entries/2010/2/1_Servo_Motor.html</a></li><li><a href="https://www.youtube.com/watch?v=xHDT4CwjUQE">https://www.youtube.com/watch?v=xHDT4CwjUQE</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Useless Box</title>
      <link href="2020/05/pi-useless-box/"/>
      <url>2020/05/pi-useless-box/</url>
      
        <content type="html"><![CDATA[<p>Python code for the below is on <a href="https://github.com/carlpaton/python-hoon/tree/master/useless-box">github</a> with details on the <a href="/2020/05/pi-servo-control/">servo</a> and <a href="/2020/05/pi-switch-control/">switch</a> control here.</p><h3 id="Pin-Out"><a href="#Pin-Out" class="headerlink" title="Pin Out"></a>Pin Out</h3><p><img src="/d/pi-useless-box/useless-box-pinout.jpg" alt="Pinout"></p><h3 id="What-is-a-useless-box"><a href="#What-is-a-useless-box" class="headerlink" title="What is a useless box?"></a>What is a useless box?</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/aqAUmgE3WyM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Then there are the advanced ones!</p><ul><li><a href="https://www.youtube.com/watch?v=Nqk_nWAjBus">https://www.youtube.com/watch?v=Nqk_nWAjBus</a></li></ul><h3 id="Inside-the-Useless-Machine"><a href="#Inside-the-Useless-Machine" class="headerlink" title="Inside the Useless Machine"></a>Inside the Useless Machine</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/PRn1Uzp54uw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Switch Control</title>
      <link href="2020/05/pi-switch-control/"/>
      <url>2020/05/pi-switch-control/</url>
      
        <content type="html"><![CDATA[<p>Determine if switches are on (high) or off (low)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">GPIO.setwarnings(<span class="literal">False</span>) <span class="comment"># Ignore warning for now</span></span><br><span class="line">GPIO.setmode(GPIO.BOARD) <span class="comment"># Use physical pin numbering</span></span><br><span class="line"></span><br><span class="line">GPIO.setup(<span class="number">10</span>, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) <span class="comment"># Set pin 10 to be an input pin and set initial value to be pulled low (off)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Waiting for button push&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># Run forever</span></span><br><span class="line">    <span class="keyword">if</span> GPIO.<span class="built_in">input</span>(<span class="number">10</span>) == GPIO.HIGH:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button was pushed!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://raspberrypihq.com/use-a-push-button-with-raspberry-pi-gpio/">https://raspberrypihq.com/use-a-push-button-with-raspberry-pi-gpio/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi4 Hardware</title>
      <link href="2020/05/pi4-hardware/"/>
      <url>2020/05/pi4-hardware/</url>
      
        <content type="html"><![CDATA[<p>I got tired of having to google each time I needed to find or understand Pi Hardware.</p><h3 id="Heatsinks"><a href="#Heatsinks" class="headerlink" title="Heatsinks"></a>Heatsinks</h3><p>These go over the CPU, DDR-4 Memory and USB controller. I couldn’t find a Pi4 set here in NZ so modified this one from <a href="https://www.geeker.co.nz/raspberry-pi/board/raspberry-pi-heat-sink.html">geeker.co.nz</a></p><p><img src="/d/p4-hardware/heat-sink.jpg" alt="Heatsinks"></p><ul><li><a href="https://www.geeker.co.nz/raspberry-pi/board/raspberry-pi-heat-sink.html">https://www.geeker.co.nz/raspberry-pi/board/raspberry-pi-heat-sink.html</a></li><li><a href="https://www.youtube.com/watch?v=E-4GaAz7XNM">https://www.youtube.com/watch?v=E-4GaAz7XNM</a></li></ul><h3 id="Cluster-Stack"><a href="#Cluster-Stack" class="headerlink" title="Cluster Stack"></a>Cluster Stack</h3><ul><li><a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a></li></ul><p><img src="/d/p4-hardware/cluster-stack.jpg" alt="Cluster Stack"></p>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Examples</title>
      <link href="2020/04/jquery-examples/"/>
      <url>2020/04/jquery-examples/</url>
      
        <content type="html"><![CDATA[<h3 id="attr"><a href="#attr" class="headerlink" title=".attr"></a>.attr</h3><p>The <code>data-</code> attribute can hold any data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data-square</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    @Html.DisplayFor(m =&gt; Model.Square1)</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>To read this data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.item&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> squareNumber = $(<span class="built_in">this</span>).attr(<span class="string">&quot;data-square&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="ajax"><a href="#ajax" class="headerlink" title=".ajax"></a>.ajax</h3><ul><li><a href="/2017/08/loader-client-side/">Sweet loader when .ajax fires</a></li></ul><p>Type needs to match the <a href="/2018/06/http-verbs/">Http Verb, the POST</a> below is intended to <code>create/insert</code> and can be used with these <a href="/2020/04/web-api-controller-example/">example api controller methods</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.item&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            url: <span class="string">&quot;/api/apigame&quot;</span>,</span><br><span class="line">            data: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">Id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">Player</span>: <span class="string">&quot;O&quot;</span> &#125;),</span><br><span class="line">            success: success,</span><br><span class="line">            contentType: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, error, status</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error, status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">alert(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="datepicker"><a href="#datepicker" class="headerlink" title=".datepicker"></a>.datepicker</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;input[type=datetime]&#x27;</span>).datepicker(&#123;</span><br><span class="line">        dateFormat: <span class="string">&quot;dd/mm/yy&quot;</span>,</span><br><span class="line">        changeMonth: <span class="literal">true</span>,</span><br><span class="line">        changeYear: <span class="literal">true</span>,</span><br><span class="line">        yearRange: <span class="string">&quot;-10:+10&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="append"><a href="#append" class="headerlink" title=".append"></a>.append</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heading = <span class="string">&quot;&lt;div class=&#x27;chart-wrapper__item-heading&#x27;&gt;&quot;</span> + json.chartModelsWithMany[i].Heading + <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chart = <span class="string">&quot;&lt;div id=&#x27;&quot;</span> + json.chartModelsWithMany[i].renderAt + <span class="string">&quot;&#x27;&gt;loading ...&lt;/div&gt;&quot;</span>;</span><br><span class="line">$(<span class="string">&quot;#chartVerticalBars&quot;</span>).append(<span class="string">&quot;&lt;div class=&#x27;chart-wrapper__item&#x27;&gt;&quot;</span> + heading + chart + <span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="dialog"><a href="#dialog" class="headerlink" title=".dialog"></a>.dialog</h3><p>Some sweet HTML and CSS hacks</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ui-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1032</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">style</span>=<span class="string">&quot;z-index: 1050!important;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;SWEET HEADING&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;height:100%;padding-top:220px;color: #76b729;&quot;</span>&gt;</span></span><br><span class="line">        LOADING...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;someCode&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>The Javascript to trigger, includes close hacks</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.dialog&quot;</span>).dialog(&#123;</span><br><span class="line">        autoOpen: <span class="literal">false</span>,</span><br><span class="line">        height: <span class="number">550</span>,</span><br><span class="line">        width: <span class="number">900</span>,</span><br><span class="line">        draggable: <span class="literal">false</span>,</span><br><span class="line">        resizable: <span class="literal">false</span>,</span><br><span class="line">        dialogClass: <span class="string">&#x27;sweet-dialog&#x27;</span>,</span><br><span class="line">        open: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).scrollTop(<span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        buttons: [</span><br><span class="line">            &#123;</span><br><span class="line">                text: <span class="string">&quot;DOWNLOAD PDF&quot;</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">window</span>.open(<span class="string">&quot;/Controller/Action/?code=&quot;</span> + $(<span class="string">&quot;#someCode&quot;</span>).val());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                text: <span class="string">&quot;CLOSE&quot;</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    CloseDialog();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.ui-dialog-titlebar-close&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        CloseDialog();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CloseDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.dialog&quot;</span>).dialog(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="load"><a href="#load" class="headerlink" title=".load"></a>.load</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#fooDiv&#x27;</span>).load(<span class="string">&quot;/Controller/Action/?id=42&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://api.jquery.com/jquery.ajax/">https://api.jquery.com/jquery.ajax/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API Controller Example</title>
      <link href="2020/04/web-api-controller-example/"/>
      <url>2020/04/web-api-controller-example/</url>
      
        <content type="html"><![CDATA[<p>These are example controller methods by <a href="/2018/06/http-verbs/">http verb</a>. These can also be async but the context method must return <code>async Task</code>. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Synchronous </span></span><br><span class="line">[<span class="meta">HttpGet(<span class="meta-string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult&lt;ApiGameMoveModel&gt; <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model = _context.Select(id);</span><br><span class="line">    <span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asynchronous</span></span><br><span class="line">[<span class="meta">HttpGet(<span class="meta-string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt;&lt;ApiGameMoveModel&gt; Get(<span class="built_in">int</span> id)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> model = <span class="keyword">await</span> _context.Select(id);</span><br><span class="line">    <span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Synchronous-methods"><a href="#Synchronous-methods" class="headerlink" title="Synchronous methods"></a>Synchronous methods</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> GameUI.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameUI.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiGameController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> DummyContext _context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiGameController</span>(<span class="params">DummyContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET: api/ApiGame</span></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="keyword">public</span> ActionResult&lt;IEnumerable&lt;ApiGameMoveModel&gt;&gt; Get()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to select a list</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ if none exist `return NotFound();`</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="keyword">new</span> List&lt;ApiGameMoveModel&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> ApiGameMoveModel() &#123; Id = <span class="number">42</span>, Player = <span class="string">&quot;player in list that was selected&quot;</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> ApiGameMoveModel() &#123; Id = <span class="number">43</span>, Player = <span class="string">&quot;player in list that was selected&quot;</span> &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET: api/ApiGame/5</span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;ApiGameMoveModel&gt; <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to select on `id`</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ check id exists, if it doesnt `return NotFound();`</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiGameMoveModel() &#123; Id = id, Player = <span class="string">$&quot;player that was selected on <span class="subst">&#123;id&#125;</span>&quot;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PUT: api/ApiGame/5</span></span><br><span class="line">        [<span class="meta">HttpPut(<span class="meta-string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Put</span>(<span class="params"><span class="built_in">int</span> id, ApiGameMoveModel apiGameMoveModel</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (id != apiGameMoveModel.Id)</span><br><span class="line">                <span class="keyword">return</span> BadRequest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ check id exists, if it doesnt `return NotFound();`</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ use db context to update</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> NoContent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// POST: api/ApiGame</span></span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Post</span>(<span class="params">ApiGameMoveModel apiGameMoveModel</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to update</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">new</span> ApiGameMoveModel</span><br><span class="line">            &#123;</span><br><span class="line">                Id = <span class="number">42</span>,</span><br><span class="line">                Player = <span class="string">&quot;player that was updated&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DELETE: api/ApiGame/5</span></span><br><span class="line">        [<span class="meta">HttpDelete(<span class="meta-string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;ApiGameMoveModel&gt; <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to select on `id`</span></span><br><span class="line">            <span class="comment">// if not found, return NotFound();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ use db context to do the delete</span></span><br><span class="line">               </span><br><span class="line">            <span class="comment">// TODO ~ return the model selected by `id`</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiGameMoveModel()&#123; Id = id, Player = <span class="string">&quot;player that was deleted&quot;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Custom Exception</title>
      <link href="2020/04/c-sharp-custom-exception/"/>
      <url>2020/04/c-sharp-custom-exception/</url>
      
        <content type="html"><![CDATA[<p>Create custom exceptions which are then added to existing try catch blocks (above the general exception as they are processed top down.)</p><h3 id="Custom-Exception"><a href="#Custom-Exception" class="headerlink" title="Custom Exception"></a>Custom Exception</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Business.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoordinateNotFoundException</span> : <span class="title">Exception</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoordinateNotFoundException</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoordinateNotFoundException</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoordinateNotFoundException</span>(<span class="params"><span class="built_in">string</span> message, Exception inner</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">message, inner</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Consumption"><a href="#Consumption" class="headerlink" title="Consumption"></a>Consumption</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ThrowCoordinateNotFoundException</span>(<span class="params"><span class="built_in">string</span> messagePart</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CoordinateNotFoundException(<span class="string">$&quot;CoordinatePartsModel <span class="subst">&#123;messagePart&#125;</span> is required.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do the bad thing</span></span><br><span class="line">&#125;</span><br><span class="line">catch (CoordinateNotFoundException exc)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// handle CoordinateNotFoundException</span></span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Handle all other general exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/VulnusCloud/blob/master/Business/Exceptions/CoordinateNotFoundException.cs">https://github.com/carlpaton/VulnusCloud/blob/master/Business/Exceptions/CoordinateNotFoundException.cs</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Builder Pattern</title>
      <link href="2020/04/builder-pattern/"/>
      <url>2020/04/builder-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Use Case: Unit test object creation, any time object construction is complicated.</p></blockquote><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>When piecewise object construction is complicated, provide and API for doing it in a brief and clearly expressed manner. </p><p>*A piecewise function is a function built from pieces of different functions over different intervals. *</p><h3 id="Example-FooBuilder"><a href="#Example-FooBuilder" class="headerlink" title="Example FooBuilder"></a>Example FooBuilder</h3><p><code>FooBuilder</code> is used to construct the entity <code>Foo</code>, its state can be set if needs be with the methods <code>WithId()</code> and <code>WithContactPerson()</code>, this fluent API can be chained. Finally the <code>Create()</code> method returns an instance of <code>Foo</code> with the internal state set.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FooApp.Core.Builders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooBuilder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Guid _id;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _contactPerson;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FooBuilder</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _id = Guid.NewGuid();</span><br><span class="line">            _contactPerson = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FooBuilder <span class="title">WithId</span>(<span class="params">Guid id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FooBuilder <span class="title">WithContactPerson</span>(<span class="params"><span class="built_in">string</span> contactPerson</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _contactPerson = contactPerson;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Foo <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Foo()</span><br><span class="line">            &#123;</span><br><span class="line">                Id = _id,</span><br><span class="line">                ContactPerson = _contactPerson</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-Use-Case-Of-FooBuilder"><a href="#Example-Use-Case-Of-FooBuilder" class="headerlink" title="Example Use Case Of FooBuilder"></a>Example Use Case Of FooBuilder</h4><p>In a test this could be used as follows with the assumption <code>fooRepository</code> -&gt; <code>SelectList</code> returns a collection of type <code>Foo</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> FooBuilder();</span><br><span class="line"></span><br><span class="line">fooRepositoryMock.Setup(x =&gt; x.SelectList())</span><br><span class="line">    .Returns(<span class="keyword">new</span> List&lt;Foo&gt;() &#123;</span><br><span class="line">        foo.WithContactPerson(<span class="string">&quot;Bizz Bat&quot;</span>).Create(),</span><br><span class="line">        foo.WithId(<span class="string">&quot;26ac6c17-0172-4d86-802c-d5b839f6215f&quot;</span>).WithContactPerson(<span class="string">&quot;Hoe Bar&quot;</span>).Create()</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Example-HTML-Builder"><a href="#Example-HTML-Builder" class="headerlink" title="Example HTML Builder"></a>Example HTML Builder</h3><p>Code example below from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a></p><h4 id="Life-without-Builder"><a href="#Life-without-Builder" class="headerlink" title="Life without Builder"></a>Life without Builder</h4><p>Manually create some HTML, this will work but its not great.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">var</span> words = <span class="keyword">new</span>[] &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">sb.Append(<span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> word <span class="keyword">in</span> words)</span><br><span class="line">&#123;</span><br><span class="line">sb.AppendFormat(<span class="string">&quot;&lt;li&gt;&#123;0&#125;&lt;/li&gt;&quot;</span>, word);</span><br><span class="line">&#125;</span><br><span class="line">sb.Append(<span class="string">&quot;&lt;/ul&gt;&quot;</span>);</span><br><span class="line">WriteLine(sb);</span><br></pre></td></tr></table></figure><h4 id="Life-With-A-Builder"><a href="#Life-With-A-Builder" class="headerlink" title="Life With A Builder"></a>Life With A Builder</h4><p>Here the constructor for  <a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern/HtmlBuilder.cs">HtmlBuilder</a> takes a <code>rootName</code> and the <code>AddChild</code> method takes <code>childName</code> and <code>childText</code> parameters. This is then <a href="/2018/03/pillars-of-object-oriented-programming-oop/">encapsulating</a> the creation and use of <a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern/HtmlElement.cs">HtmlElement</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ordinary non-fluent builder</span></span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> HtmlBuilder(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">builder.AddChild(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">builder.AddChild(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">WriteLine(builder.ToString());</span><br></pre></td></tr></table></figure><p>The method <code>AddChildFluent</code> returns a <a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern/HtmlBuilder.cs">HtmlBuilder</a> to allow you to chain methods together. This works by returning a reference to the original object. This is called a <strong>fluent</strong> interface.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> HtmlBuilder(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">builder</span><br><span class="line">    .AddChildFluent(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    .AddChildFluent(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">WriteLine(builder);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li><a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern">PatternsAndPrinciples/BuilderPattern</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Delegates</title>
      <link href="2020/04/c-sharp-delegates/"/>
      <url>2020/04/c-sharp-delegates/</url>
      
        <content type="html"><![CDATA[<p>A <strong>delegate</strong> is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type. You can invoke (or call) the method through the delegate instance. </p><p>Delegate types are <code>delegate</code>, <code>Action</code> and <code>Func</code>.</p><h3 id="Multicast-Delegate"><a href="#Multicast-Delegate" class="headerlink" title="Multicast Delegate"></a>Multicast Delegate</h3><p>All C# delegates have <strong>multicast capability</strong>, this means a single delegate instance can reference more than one target method. You can add or remove target methods using operators <code>+=</code> or <code>-=</code>. Target methods are called in the order they were added to the delegate instance.</p><ol><li>Create the delegate</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NumbersDelegate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create methods the delegate will call, the need to have the same return type and parameters signature.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;AddNumbers: &quot;</span> + (a + b))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MultiplyNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MultiplyNumbers: &quot;</span> + (a * b))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SubtractNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SubtractNumbers: &quot;</span> + (a - b))</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the delegate with one method <code>AddNumbers</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delegate with initial target `AddNumbers`</span></span><br><span class="line">NumbersDelegate numbersDelegate = foo.AddNumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke delegate, this will call `AddNumbers`</span></span><br><span class="line">numbersDelegate(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>Multicast the delegate to have more than one target</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbersDelegate += foo.MultiplyNumbers;</span><br><span class="line">numbersDelegate += foo.SubtractNumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke delegate, this will call `AddNumbers`, then `MultiplyNumbers` and finally `SubtractNumbers`</span></span><br><span class="line">numbersDelegate(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>You can also remove targets from the delegate</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbersDelegate -= foo.MultiplyNumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke delegate, this will call `AddNumbers`, then `SubtractNumbers` as it no longer points to `MultiplyNumbers`</span></span><br><span class="line">numbersDelegate(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="Delegate-As-A-Parameter"><a href="#Delegate-As-A-Parameter" class="headerlink" title="Delegate As A Parameter"></a>Delegate As A Parameter</h3><p>This was used in my <a href="/2017/11/windows-event-logs/">windows event logger</a> application.</p><ol><li>Create the delegate representing a method</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">EventLogReaderDelegate</span>(<span class="params">EventRecord <span class="keyword">record</span></span>)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the methods the delegate will point to</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Count</span>(<span class="params">EventRecord <span class="keyword">record</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// count logic that does something with `record`</span></span><br><span class="line"><span class="comment">// my app didnt actually do anything with `record` but there is a SO link below for an example that did, the principle is pretty much the same though.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Append</span>(<span class="params">EventRecord <span class="keyword">record</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// append logic that does something with `record`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a method that accepts the delegate as a parameter</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessReader</span>(<span class="params">EventLogReader reader, EventLogReaderDelegate <span class="built_in">delegate</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EventRecord <span class="keyword">record</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="keyword">record</span> = reader.ReadEvent()) != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">using (record)</span><br><span class="line">&#123;</span><br><span class="line">delegate(record);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">reader.Seek(<span class="keyword">new</span> SeekOrigin(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Call <code>ProcessReader</code> and pass it the delegates as parameters</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;EventLogModel&gt; <span class="title">Go</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> EventLogReader(_filePath, PathType.FilePath))</span><br><span class="line">&#123;</span><br><span class="line">ProcessReader(reader, Count); </span><br><span class="line">ProcessReader(reader, Append);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar example from SO: <a href="https://stackoverflow.com/questions/2019402/when-why-to-use-delegates">https://stackoverflow.com/questions/2019402/when-why-to-use-delegates</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/</a></li><li><a href="https://www.tutorialspoint.com/csharp/csharp_delegates.htm">https://www.tutorialspoint.com/csharp/csharp_delegates.htm</a></li><li><a href="https://www.tutorialsteacher.com/csharp/csharp-delegates">https://www.tutorialsteacher.com/csharp/csharp-delegates</a></li><li><a href="https://www.pluralsight.com/guides/how-why-to-use-delegates-csharp">https://www.pluralsight.com/guides/how-why-to-use-delegates-csharp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Domain Driven Design (DDD)</title>
      <link href="2020/04/domain-driven-design/"/>
      <url>2020/04/domain-driven-design/</url>
      
        <content type="html"><![CDATA[<p>An attempt to try understand what Domain Driven Design (DDD) is and how I can apply its practice and principles. Eric Evans defines a navigation map for DDD reference:</p><p><img src="/d/domain-driven-design/eric-evans-navigation-map.jpg" alt="Eric Evans - DDD Navigation Map"></p><h3 id="General-Terms"><a href="#General-Terms" class="headerlink" title="General Terms"></a>General Terms</h3><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Problem Domain</td><td>The specific problem the software you’re working on is trying to solve.</td></tr><tr><td>Core Domain</td><td>The key differentiator for the customer’s business – something they must do well and cannot outsource.</td></tr><tr><td>Ubiquitous Language</td><td><a href="/2017/04/ubiquitous-language-ul/">Common language used by domain experts and developers</a>.</td></tr><tr><td>Sub Domain</td><td>Divide each problem of the application into a sub-domain, Examples: Sales, Accounting &amp; Marketing are separate concerns. These are separate applications or features your software must support or interact with.</td></tr><tr><td>Bounded Context</td><td>A description of a boundary (typically a subsystem, or the work of a particular team) within which a particular model is defined and applicable.  Its ok for the same entity to have a different meaning per context in the same domain. Example: <code>Customer</code> - for a <code>Sales Bounded Context</code> this could be a <code>Lead</code>. For the <code>Bookings Bounded Context</code> this could be a <code>Passenger</code>.</td></tr><tr><td>Context Maps</td><td>Used to visualize/demonstrate where the boundaries between contexts lie. This is the The process of identifying bounded contexts and their relationships to one another.</td></tr><tr><td>Shared Kernel</td><td>Part of the model that is shared by two or more teams, who agree not to change it without collaboration</td></tr></tbody></table><h3 id="Code-Classes-Models-and-Objects"><a href="#Code-Classes-Models-and-Objects" class="headerlink" title="Code Classes, Models and Objects"></a>Code Classes, Models and Objects</h3><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Anemic Domain Model</td><td>Model with classes focused on state management, good for Create, read, update and delete (CRUD)</td></tr><tr><td>Rich Domain Model</td><td>Model with logic focused on behavior, not just state, this is preferred for DDD.</td></tr><tr><td>Entity</td><td>A mutable class (liable to change) with an identity that is not tied to its property values which is used for tracking and persistence.</td></tr><tr><td>Immutable</td><td>Type whos state cannot be changed once the object is instantiated (think private setters that you can only access in the constructor)</td></tr><tr><td>Value Object</td><td>An immutable class which identity is defined by the combination of its values.</td></tr><tr><td>Domain Services</td><td>A place in the model to hold behavior that doesn’t belong elsewhere in the domain.</td></tr><tr><td>Side Effects</td><td>State change of the application or interaction with infrastructure in the outside world.</td></tr></tbody></table><h3 id="Aggregates"><a href="#Aggregates" class="headerlink" title="Aggregates"></a>Aggregates</h3><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Aggregate</td><td>A transactional graph of objects</td></tr><tr><td>Aggregate Root</td><td>The entry point of an aggregate which ensures the integrity of the entire graph</td></tr><tr><td>Invariant</td><td>A condition that should always be true for the system to be in a consistent state</td></tr><tr><td>Persistence Ignorant Classes</td><td>Classes that have no knowledge about how they are persisted</td></tr></tbody></table><h3 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h3><blockquote><p>A repository represents all objects of a certain type as a conceptual set…like a collection with more elaborate querying capability. —Eric Evans</p></blockquote><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Repository</td><td>A class that encapsulates the data persistence for an aggregate root</td></tr><tr><td>ACID</td><td>Atomic, Consistent, Isolated, and Durable</td></tr></tbody></table><h3 id="Domain-Events"><a href="#Domain-Events" class="headerlink" title="Domain Events"></a>Domain Events</h3><p>Decoupling the Domain Model’s Communications.</p><blockquote><p>Use a Domain Event to capture an occurrence of something that happened in the domain. —<br>Vaughn Vernon</p></blockquote><p>Example events:</p><ul><li>User Authenticated </li><li>Appointment Confirmed</li><li>Payment Received</li></ul><p>Designing Domain Events:</p><ul><li>Each event is its own class</li><li>Include when the event took place</li><li>Capture event-specific details</li><li>Event fields are initialized in constructor</li><li>No behavior or side effects</li></ul><h3 id="Anti-Corruption-Layers"><a href="#Anti-Corruption-Layers" class="headerlink" title="Anti-Corruption Layers"></a>Anti-Corruption Layers</h3><p>Translate between foreign systems’ models &amp; our own using design patterns</p><ul><li>Facade</li><li>Adapter</li><li>custom translation classes or services</li></ul><p>The structure of an Anti-Corruption Layer:</p><p><img src="/d/domain-driven-design/anti-corruption-layers-domain-driven-design.png" alt="Source: Evans, Domain-Driven Design, p. 367"></p><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Domain Event</td><td>A class that captures the occurrence of an event in a domain object</td></tr><tr><td>Hollywood Principle</td><td>“Don’t call us, we’ll call you”</td></tr><tr><td>Inversion of Control (IOC)</td><td>A pattern for loosely coupling a dependent object with an object it will need at runtime</td></tr><tr><td>Anti-Corruption Layer</td><td>Functionality that insulates a bounded context and handles interaction with foreign systems or contexts</td></tr></tbody></table><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.pluralsight.com/courses/domain-driven-design-fundamentals">https://www.pluralsight.com/courses/domain-driven-design-fundamentals</a></li><li><a href="https://dddcommunity.org/">https://dddcommunity.org/</a></li><li><a href="https://www.infoq.com/domain-driven-design/">https://www.infoq.com/domain-driven-design/</a></li></ul><h3 id="Advocates-of-the-practice"><a href="#Advocates-of-the-practice" class="headerlink" title="Advocates of the practice"></a>Advocates of the practice</h3><ul><li>Eric Evans<ul><li><a href="https://domainlanguage.com/ddd/">https://domainlanguage.com/ddd/</a></li><li><a href="https://domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf">https://domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf</a></li></ul></li><li>Vaughn Vernon<ul><li><a href="https://vaughnvernon.co/">https://vaughnvernon.co/</a></li><li><a href="https://github.com/VaughnVernon/IDDD_Samples_NET">https://github.com/VaughnVernon/IDDD_Samples_NET</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ddd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microwave maize bread</title>
      <link href="2020/04/microwave-maize-bread/"/>
      <url>2020/04/microwave-maize-bread/</url>
      
        <content type="html"><![CDATA[<p>Baking bread has never been this easy. Within less than 30 minutes you can have a freshly baked maize bread.</p><p><strong>Preparation time :</strong> 5 minutes <strong>Cooking time :</strong> 12-15 minutes <strong>Servings :</strong> 6</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><ul><li>4 eggs</li><li>125 ml milk</li><li>125 ml sugar</li><li>pinch salt</li><li>250 ml maize meal</li><li>30 ml cake flour</li><li>7 ml baking powder</li><li>1 can, cream-style</li><li>sweet corn</li><li>1 can, whole-kernel</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Grease a 28 cm silicone loaf tin with nonstick spray.</p><ol><li>Whisk the eggs, milk, sugar and salt.</li><li>Sift together the dry ingredients and mix with the egg mixture. Add the sweet corn and oil and mix well.</li><li>Turn the batter into the tin and sprinkle with paprika.</li><li>Put the tin on an upturned saucer and microwave for 12-15 minutes or until done.</li><li>Cool in the tin for 10 minutes before turning out on a wire rack.</li><li>Serve hot or cold with butter and cheese.</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://m.food24.com/Recipes-and-Menus/South-African-Recipes/microwave-maize-bread-20181029-2">https://m.food24.com/Recipes-and-Menus/South-African-Recipes/microwave-maize-bread-20181029-2</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remote Collaboration</title>
      <link href="2020/03/remote-collaboration/"/>
      <url>2020/03/remote-collaboration/</url>
      
        <content type="html"><![CDATA[<p>The world can remotely collaborate over the internet using amazing and often free tools. With the rise of Covid-19 we are using these tools more frequently in the Information Technology sector. </p><h3 id="Meeting-Tools"><a href="#Meeting-Tools" class="headerlink" title="Meeting Tools"></a>Meeting Tools</h3><p><em>Jamboard</em> is virtual sticky notes!</p><ul><li><a href="https://jamboard.google.com/">https://jamboard.google.com/</a></li></ul><p><em>Slido</em> is useful to bring up all company questions, vote for them to be discussed on an open forum.</p><ul><li><a href="https://www.sli.do/use-cases">https://www.sli.do/use-cases</a></li></ul><h3 id="Virtual-white-boards"><a href="#Virtual-white-boards" class="headerlink" title="Virtual white boards"></a>Virtual white boards</h3><p><em>Miro</em> is a collaborative online whiteboard platform designed for remote and distributed teams.</p><ul><li><a href="https://miro.com/">https://miro.com/</a></li></ul><p><em>AWW APP</em> is a virtual white board</p><ul><li><a href="https://awwapp.com/">https://awwapp.com/</a></li></ul><h3 id="Instant-Messaging"><a href="#Instant-Messaging" class="headerlink" title="Instant Messaging"></a>Instant Messaging</h3><p>Virtual meetings with Hangouts (previously known as G-Talk), this can also be used to stream meetings with only the exec creating the stream and the rest of the company <code>tuning </code> into the stream.</p><ul><li><a href="https://meet.google.com/">https://meet.google.com/</a></li></ul><p><em>Slack</em> is a collaboration hub that can replace email to help you and your team work together seamlessly.</p><ul><li><a href="https://slack.com/intl/en-nz/help/articles/115004071768-What-is-Slack-">https://slack.com/intl/en-nz/help/articles/115004071768-What-is-Slack-</a></li></ul><p><em>Skype for business</em> is a communication tool built for businesses to connect anywhere, anytime.</p><ul><li><a href="https://www.skype.com/en/business/">https://www.skype.com/en/business/</a></li></ul><h3 id="Manage-Workflows"><a href="#Manage-Workflows" class="headerlink" title="Manage Workflows"></a>Manage Workflows</h3><p><em>Redmine</em> is a flexible project management web application.</p><ul><li><a href="https://www.redmine.org/">https://www.redmine.org/</a></li></ul><p><em>Jira</em> has evolved into a powerful work management tool for all kinds of use cases</p><ul><li><a href="https://www.atlassian.com/software/jira/guides/use-cases/what-is-jira-used-for">https://www.atlassian.com/software/jira/guides/use-cases/what-is-jira-used-for</a></li></ul><p><em>Trello</em> lets you work more collaboratively and get more done.</p><ul><li><a href="https://trello.com/">https://trello.com/</a></li></ul><h3 id="Single-Sign-On"><a href="#Single-Sign-On" class="headerlink" title="Single Sign On"></a>Single Sign On</h3><p>The World Has Changed. Agility is Now Required. <em>Okta</em> is Modern Single Sign On (SSO).</p><ul><li><a href="https://www.okta.com/products/single-sign-on/">https://www.okta.com/products/single-sign-on/</a></li></ul><p>Other big names like <a href="https://www.facebook.com/workplace/resources/tech/authentication/sso">Facebook</a> and <a href="https://support.google.com/a/answer/60224?hl=en">Google</a> offer similar services for you to allow your staff to authenticate to things they need to power your business.</p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Status Badges</title>
      <link href="2020/03/status-badges/"/>
      <url>2020/03/status-badges/</url>
      
        <content type="html"><![CDATA[<p>Status badges live at the top of repository <code>README.md</code> files providing information about builds, version ect</p><p><img src="/d/travis-ci/travis-ci.jpg" alt="travis ci"></p><p>Individual CI/CD providers often provide build status badges directly such as <a href="/2018/06/travis-ci/">Travis CI</a></p><p>Shields IO</p><p>I couldnt see how to do this for docker so used <a href="https://shields.io/">shields.io</a>, which can do lots of badge types, including Docker Hub pulls, and build status for lots of popular CI/CD providers. </p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Docker Cloud Automated build](https:&#x2F;&#x2F;img.shields.io&#x2F;docker&#x2F;cloud&#x2F;automated&#x2F;carlpaton&#x2F;vulnuscloud?logoColor&#x3D;brightgreen)](https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;carlpaton&#x2F;vulnuscloud)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlpaton/VulnusCloud">This then displays here. Sweet.</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/51515021/how-do-i-show-docker-pulls-as-an-image-in-my-github-readme-file">https://stackoverflow.com/questions/51515021/how-do-i-show-docker-pulls-as-an-image-in-my-github-readme-file</a></li><li><a href="https://circleci.com/blog/status-badges/">https://circleci.com/blog/status-badges/</a></li><li><a href="https://shields.io/category/build">https://shields.io/category/build</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DI in .Net Core</title>
      <link href="2020/02/di-in-net-core/"/>
      <url>2020/02/di-in-net-core/</url>
      
        <content type="html"><![CDATA[<h3 id="Transient"><a href="#Transient" class="headerlink" title="Transient"></a>Transient</h3><p><strong>Transient</strong> objects are always different; a new instance is provided to every controller and every service.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IOssIndexRepository, OssIndexRepository&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// with parameters</span></span><br><span class="line"><span class="keyword">var</span> projectRepository = <span class="keyword">new</span> ProjectRepository(connectionString);</span><br><span class="line">services.AddTransient&lt;IProjectRepository&gt;(s =&gt; projectRepository);</span><br></pre></td></tr></table></figure><h3 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h3><p><strong>Scoped</strong> objects are the same within a request, but different across different requests.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;IOperationScoped, Operation&gt;();</span><br></pre></td></tr></table></figure><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p><strong>Singleton</strong> objects are the same for every object and every request.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ossIndexRepository = <span class="keyword">new</span> OssIndexRepository(connectionString);</span><br><span class="line">services.AddSingleton&lt;IOssIndexRepository&gt;(ossIndexRepository);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options</a></li><li><a href="https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/">https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Execution Plans</title>
      <link href="2020/02/sql-execution-plans/"/>
      <url>2020/02/sql-execution-plans/</url>
      
        <content type="html"><![CDATA[<p>An execution plan, simply put, is the result of the SQL query optimizer’s attempt to calculate the most efficient way to execute your query. Simply put this turns your <code>Here’s what I want</code> into SQL’s <code>Here’s the best way to get it</code></p><p>You can use <strong>Microsoft SQL Server Management Studio</strong> to see execution plans, this can be done from the tool bar in 3 ways.</p><blockquote><p>To see this tool bar right click your tool bar area and select <code>SQL Editor</code>, you need to have a SQL statement ready and executed for these options to be visible.</p></blockquote><p><img src="/d/sql-execution-plans/ssms-tool-bar.jpg" alt="SSMS Tool Bar"></p><h3 id="Estimated-Execution-Plan"><a href="#Estimated-Execution-Plan" class="headerlink" title="Estimated Execution Plan"></a>Estimated Execution Plan</h3><p>This is a representative view based on the query optimizer - it doesn’t actually run the results of the query.  Execution plan can identify possible missing indexes.</p><p><img src="/d/sql-execution-plans/ssms-suggested-index.jpg" alt="Suggested Index"></p><h3 id="Key-Things-To-Look-For"><a href="#Key-Things-To-Look-For" class="headerlink" title="Key Things To Look For"></a>Key Things To Look For</h3><ol><li>Reading many rows will show as a much thicker line<ol><li>Check things like <code>INNER JOIN</code> vs <code>LEFT OUTER JOIN</code></li><li>Check things like <code>UNION</code> vs <code>UNION ALL</code></li><li>Do you actually need all the columns you are selecting?</li></ol></li><li>High costs shown as a percentage, example 90%</li><li>Scan where we may expect a seek</li></ol><h3 id="Sargable"><a href="#Sargable" class="headerlink" title="Sargable"></a>Sargable</h3><blockquote><p>In relational databases, a condition (or predicate) in a query is said to be <strong>sargable</strong> if the DBMS engine can take advantage of an index to speed up the execution of the query. The term is derived from a contraction of Search ARGument ABLE.</p></blockquote><p>This means you don’t necessarily need a new index, you may need to tweak a query by questioning its <strong>sargability</strong>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Example querys where the cost in the plan are simliar however the first query cost relative to the batch may be significantly lower.</span></span><br><span class="line"></span><br><span class="line">Use MyInstance;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> dbo.myTable <span class="keyword">WITH</span> (NOLOCK) <span class="keyword">WHERE</span> some_date <span class="operator">&gt;</span> <span class="string">&#x27;28 July 1983&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- May result in a Scan, where a seek is more efficient</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> dbo.myTable <span class="keyword">WITH</span> (NOLOCK) <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(some_date) <span class="operator">&gt;</span> <span class="string">&#x27;1983&#x27;</span>; </span><br></pre></td></tr></table></figure><h3 id="Include-Actual-Execution-Plan"><a href="#Include-Actual-Execution-Plan" class="headerlink" title="Include Actual Execution Plan"></a>Include Actual Execution Plan</h3><p>This shows the plan on the back of actually executing your query.</p><h3 id="Include-Live-Query-Stats"><a href="#Include-Live-Query-Stats" class="headerlink" title="Include Live Query Stats"></a>Include Live Query Stats</h3><p>This shows the plan and stats while the query is executing.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.pass.org/PASSBlog/tabid/68281/ArtMID/99177/ArticleID/769/preview/true/Default.aspx">https://www.pass.org/PASSBlog/tabid/68281/ArtMID/99177/ArticleID/769/preview/true/Default.aspx</a></li><li><a href="https://www.sqlshack.com/how-to-use-sargable-expressions-in-t-sql-queries-performance-advantages-and-examples/">https://www.sqlshack.com/how-to-use-sargable-expressions-in-t-sql-queries-performance-advantages-and-examples/</a></li><li><a href="https://www.sentryone.com/plan-explorer">https://www.sentryone.com/plan-explorer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Order Of Execution</title>
      <link href="2020/02/sql-order-of-execution/"/>
      <url>2020/02/sql-order-of-execution/</url>
      
        <content type="html"><![CDATA[<p>I had an issue where I couldn’t use a column that was being evaluated with a modulus statement, the problem was the order of the execution.</p><p>Statement in question:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@lowerBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@upperBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> top <span class="number">100</span> user_id, (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="keyword">as</span> lastThreeDigits, email</span><br><span class="line"><span class="keyword">from</span> dbo.myUsers</span><br><span class="line"><span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%@github.com&#x27;</span></span><br><span class="line"><span class="keyword">and</span> lastThreeDigits <span class="operator">&gt;=</span> <span class="variable">@lowerBound</span></span><br><span class="line"><span class="keyword">and</span> lastThreeDigits <span class="operator">&lt;=</span> <span class="variable">@upperBound</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> email;</span><br></pre></td></tr></table></figure><p>This moans with invalid column name <code>lastThreeDigits</code> the reason for this is the order of execution in the SQL statement being:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This isn&#39;t always the order but it&#39;s the normal one:</span><br><span class="line"></span><br><span class="line"> 1. FROM</span><br><span class="line"> 2. ON</span><br><span class="line"> 3. JOIN</span><br><span class="line"> 4. WHERE</span><br><span class="line"> 5. GROUP BY</span><br><span class="line"> 6. WITH CUBE or WITH ROLLUP</span><br><span class="line"> 7. HAVING</span><br><span class="line"> 8. SELECT</span><br><span class="line"> 9. DISTINCT</span><br><span class="line">10. ORDER BY</span><br><span class="line">11. TOP</span><br></pre></td></tr></table></figure><p>So the WHERE is before the SELECT (where I had the alias the column <code>lastThreeDigits</code>) so it doesn’t exist at the point the WHERE is executed.</p><p>The solution was to give SQL a little more work to do:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@lowerBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@upperBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> top <span class="number">100</span> user_id, (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="keyword">as</span> lastThreeDigits, email</span><br><span class="line"><span class="keyword">from</span> dbo.myUsers</span><br><span class="line"><span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%@github.com&#x27;</span></span><br><span class="line"><span class="keyword">and</span> (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="operator">&gt;=</span> <span class="variable">@lowerBound</span></span><br><span class="line"><span class="keyword">and</span> (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="operator">&lt;=</span> <span class="variable">@upperBound</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> email;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/@allegranzia/sql-select-statement-order-of-execution-ee9eef21510d">https://medium.com/@allegranzia/sql-select-statement-order-of-execution-ee9eef21510d</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sessions in .Net Core</title>
      <link href="2020/02/sessions-in-net-core/"/>
      <url>2020/02/sessions-in-net-core/</url>
      
        <content type="html"><![CDATA[<p>Sessions will not work out of the box, you need to do some setup:</p><ol><li><p>Add the nuget package <code>Microsoft.AspNetCore.Session</code></p></li><li><p>In <strong>Startup.cs</strong> add to <code>ConfigureServices</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddSession(options =&gt; &#123;</span><br><span class="line">    options.IdleTimeout = TimeSpan.FromMinutes(<span class="number">15</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>In <strong>Startup.cs</strong> add to <code>Configure</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseSession();</span><br></pre></td></tr></table></figure></li><li><p>Then in your controllers you can get and set values, would be best to have <code>ProjectName</code> set in a constants file.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpContext.Session.SetString(<span class="string">&quot;ProjectName&quot;</span>, project.ProjectName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> projectName = HttpContext.Session.GetString(<span class="string">&quot;ProjectName&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="Microsoft-AspNetCore-Http"><a href="#Microsoft-AspNetCore-Http" class="headerlink" title="Microsoft.AspNetCore.Http"></a>Microsoft.AspNetCore.Http</h3><p>These are the methods available for use in the controller (Version=2.2.0.0)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static byte[] Get(this ISession session, string key);</span><br><span class="line">public static int? GetInt32(this ISession session, string key);</span><br><span class="line">public static string GetString(this ISession session, string key);</span><br><span class="line">public static void SetInt32(this ISession session, string key, int value);</span><br><span class="line">public static void SetString(this ISession session, string key, string value);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-3.1">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-3.1</a></li><li><a href="https://www.c-sharpcorner.com/article/how-to-use-session-in-asp-net-core/">https://www.c-sharpcorner.com/article/how-to-use-session-in-asp-net-core/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adapter Pattern</title>
      <link href="2020/02/adapter-pattern/"/>
      <url>2020/02/adapter-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the “adaptee” with a class that supports the interface required by the client.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Adapter.aspx">http://www.blackwasp.co.uk/Adapter.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bridge Pattern</title>
      <link href="2020/02/bridge-pattern/"/>
      <url>2020/02/bridge-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Bridge.aspx">http://www.blackwasp.co.uk/Bridge.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chain of Responsibility Pattern</title>
      <link href="2020/02/chain-of-responsibility-pattern/"/>
      <url>2020/02/chain-of-responsibility-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler. </p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/ChainOfResponsibility.aspx">http://www.blackwasp.co.uk/ChainOfResponsibility.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Pattern</title>
      <link href="2020/02/command-pattern/"/>
      <url>2020/02/command-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Use Case: GUI Commands, multi undo/redo, need to serialize sequence of actions/calls. There are many use cases!</p></blockquote><p>Code examples below from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a></p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The command pattern lets you build an object which represents an instruction to perform a particular action. This command contains all the information needed for the action to be taken.</p><h3 id="Command-Example"><a href="#Command-Example" class="headerlink" title="Command Example"></a>Command Example</h3><p>Run a batch of commands on a Bank Account, these commands could then be serialized and persisted to a data store.</p><ol><li>Create <code>BankAccount</code> with its methods access modifiers set to internal, this means they are accessible only within files in the same assembly.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> _balance;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> overdraftLimit = <span class="number">-500</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">int</span> balance = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">      _balance = balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Deposit</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    _balance += amount;</span><br><span class="line">    WriteLine(<span class="string">$&quot;Deposited $<span class="subst">&#123;amount&#125;</span>, balance is now <span class="subst">&#123;_balance&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">internal</span> <span class="built_in">bool</span> <span class="title">Withdraw</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (_balance - amount &gt;= overdraftLimit)</span><br><span class="line">    &#123;</span><br><span class="line">      _balance -= amount;</span><br><span class="line">      WriteLine(<span class="string">$&quot;Withdrew $<span class="subst">&#123;amount&#125;</span>, balance is now <span class="subst">&#123;_balance&#125;</span>&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(_balance)&#125;</span>: <span class="subst">&#123;_balance&#125;</span>&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create our command interface and its implementation.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Call</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankaccountCommand</span> : <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Action</span><br><span class="line">    &#123;</span><br><span class="line">        Deposit, Withdraw</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BankAccount _account;</span><br><span class="line">    <span class="keyword">private</span> Action _action;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _amount;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _succeeded;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank_accountCommand</span>(<span class="params">BankAccount account, Action action, <span class="built_in">int</span> amount</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _account = account ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(paramName: <span class="keyword">nameof</span>(_account));</span><br><span class="line">        _action = action;</span><br><span class="line">        _amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (_action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Action.Deposit:</span><br><span class="line">                _account.Deposit(_amount);</span><br><span class="line">                succeeded = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Action.Withdraw:</span><br><span class="line">                _succeeded = _account.Withdraw(_amount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assumes `Deposit` is the opposite of `Withdraw`</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_succeeded) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (_action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Action.Deposit:</span><br><span class="line">                _account.Withdraw(_amount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Action.Withdraw:</span><br><span class="line">                _account.Deposit(_amount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the commands</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"><span class="keyword">var</span> commands = <span class="keyword">new</span> List&lt;BankAccountCommand&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Deposit, <span class="number">100</span>),</span><br><span class="line">    <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Withdraw, <span class="number">1000</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">WriteLine(bankAccount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> commands)</span><br><span class="line">    c.Call();</span><br><span class="line"></span><br><span class="line">WriteLine(bankAccount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> Enumerable.Reverse(commands))</span><br><span class="line">    c.Undo();</span><br><span class="line"></span><br><span class="line">WriteLine(bankAccount);</span><br></pre></td></tr></table></figure><h3 id="Composite-Command-Example"><a href="#Composite-Command-Example" class="headerlink" title="Composite Command Example"></a>Composite Command Example</h3><p>This is a combination of the <a href="/2020/02/composite-pattern/">Composite Pattern</a> and the Command pattern. Building on the example above a Composite Command could be used to transfer money from account A to account B. This will wrap several elements into one element which has the same API.</p><ol><li>Extend the interface to include a <code>Succcess</code> property.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Call</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="built_in">bool</span> Success &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create a general purpose composite command</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CompositeBankAccountCommand</span> : <span class="title">List</span>&lt;<span class="title">BankAccountCommand</span>&gt;, <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompositeBankAccountCommand</span>(<span class="params">IEnumerable&lt;BankAccountCommand&gt; collection</span>) : <span class="title">base</span>(<span class="params">collection</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ForEach(cmd =&gt; cmd.Call());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="keyword">var</span> cmd <span class="keyword">in</span> </span><br><span class="line">        ((IEnumerable&lt;BankAccountCommand&gt;)<span class="keyword">this</span>).Reverse())</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.Success) cmd.Undo();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Success </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// A composite command is successful only if all of the constituent parts succeed</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.All(cmd =&gt; cmd.Success);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Sets each `Success` - not sure if this is the best approach</span></span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> cmd <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">                cmd.Success = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the command to test it.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"><span class="keyword">var</span> deposit = <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Deposit, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> withdraw = <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Withdraw, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> composite = <span class="keyword">new</span> CompositeBankAccountCommand(<span class="keyword">new</span> []&#123; deposit, withdraw &#125;);</span><br><span class="line"></span><br><span class="line">composite.Call();</span><br><span class="line">WriteLine(bankAccount);</span><br><span class="line"></span><br><span class="line">composite.Undo();</span><br><span class="line">WriteLine(bankAccount);</span><br></pre></td></tr></table></figure><ol start="4"><li>Now to do the money transfer command we need to change how <code>Call</code> works as we need to care that the subsequent commands succeeded. This can be accomplished by making the <code>Call</code> and <code>Undo</code> methods virtual which allows the implementation to be overridden.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Undo</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> Success &#123; &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Create type <code>MoneyTransferCommand</code></li></ol><p>This is the implementation of a composite command using infrastructure from the above.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoneyTransferCommand</span> : <span class="title">CompositeBankAccountCommand</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MoneyTransferCommand</span> (<span class="params">BankAccount <span class="keyword">from</span>, BankAccount to, <span class="built_in">int</span> amount</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// We inherit from a list in the base class so we can call its `AddRange` method</span></span><br><span class="line">        AddRange(<span class="keyword">new</span> [] &#123;</span><br><span class="line">            <span class="keyword">new</span> BankAccountCommand(<span class="keyword">from</span>, BankAccountCommand.Action.Withdraw, amount),</span><br><span class="line">            <span class="keyword">new</span> BankAccountCommand(to, BankAccountCommand.Action.Deposit, amount)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need to override the base call command so we have consistency</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// we dont want to call a subsequent command if the previous command failed</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// this will keep a reference to the last command we envoked</span></span><br><span class="line">        BankAccountCommand last = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> cmd <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// precondition is there is no previous command or the previous command succeeded</span></span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span> || last.Success)</span><br><span class="line">            &#123;</span><br><span class="line">                cmd.Call();</span><br><span class="line">                last = cmd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cmd.Undo();</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// the whole chain has failed</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Use the composite command (happy path)</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">from</span> = <span class="keyword">new</span> BankAccount(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> to = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mtc = <span class="keyword">new</span> CompositeBankAccountCommand(<span class="keyword">from</span>, to, <span class="number">100</span>);</span><br><span class="line">mtc.Call();</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="keyword">from</span>);</span><br><span class="line">WriteLine(to);</span><br></pre></td></tr></table></figure><ol start="7"><li>Try transfer more than the balance allows. The overridden call has checks for this so will <code>Undo</code> the command and break out of the commands.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mtc = <span class="keyword">new</span> CompositeBankAccountCommand(<span class="keyword">from</span>, to, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li><a href="https://exceptionnotfound.net/command-pattern-in-csharp/">https://exceptionnotfound.net/command-pattern-in-csharp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composite Pattern</title>
      <link href="2020/02/composite-pattern/"/>
      <url>2020/02/composite-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilised in a standard manner.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Composite.aspx">http://www.blackwasp.co.uk/Composite.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Decorator Pattern</title>
      <link href="2020/02/decorator-pattern/"/>
      <url>2020/02/decorator-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The decorator pattern is used to extend or alter the functionality of objects at run-time by wrapping them in an object of a decorator class. This provides a flexible alternative to using <a href="http://www.blackwasp.co.uk/Inheritance.aspx">inheritance</a> to modify behavior.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Decorator.aspx">http://www.blackwasp.co.uk/Decorator.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns</title>
      <link href="2020/02/design-patterns/"/>
      <url>2020/02/design-patterns/</url>
      
        <content type="html"><![CDATA[<p>Design patterns are typically split into three categories called <code>Gamma Categorization</code> which was named after Erich Gamma, one of the Gang of Four Authors. These categories are <strong>Creational</strong>, <strong>Structural</strong> and <strong>Behavioral</strong> patterns. I found the <a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">Udemy Course</a> by <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a> hugely helpful in understanding these and other patterns.</p><p>** posts to be fleshed out with examples* </p><h3 id="Creational-Patterns"><a href="#Creational-Patterns" class="headerlink" title="Creational Patterns"></a>Creational Patterns</h3><p>Deal with the creation (construction) of objects either explicit (constructor) or implicit (<a href="/tags/dependency-injection/">Dependency Injection</a>, reflection ect). Some are wholesale (single statement) and others are piecewise (step by step)</p><ul><li><a href="/2020/02/factory-pattern/">Factory</a></li><li><a href="/2020/04/builder-pattern/">Builder</a></li><li><a href="/2020/05/prototype-pattern/">Prototype</a></li><li><a href="/2020/02/singleton-pattern/">Singleton *</a></li></ul><h3 id="Structural-Patterns"><a href="#Structural-Patterns" class="headerlink" title="Structural Patterns"></a>Structural Patterns</h3><p>Concerned with the structure (IE: class members). Many are wrappers that mimic the underlying class interface. They generally stress the importance of good API design.</p><ul><li><a href="/2020/02/adapter-pattern/">Adapter *</a></li><li><a href="/2020/02/bridge-pattern/">Bridge *</a></li><li><a href="/2020/02/composite-pattern/">Composite *</a></li><li><a href="/2020/02/decorator-pattern/">Decorator *</a></li><li><a href="/2020/02/facade-pattern/">Facade *</a></li><li><a href="/2020/02/flyweight-pattern/">Flyweight *</a></li><li><a href="/2020/02/proxy-pattern/">Proxy *</a></li></ul><h4 id="Other-Structural-Patterns"><a href="#Other-Structural-Patterns" class="headerlink" title="Other Structural Patterns"></a>Other Structural Patterns</h4><ul><li><a href="/2017/10/sqlite-with-repository-pattern/">Repository</a></li><li><a href="/2021/02/options-pattern-asp-net-core/">Options (ASP.NET Core)</a></li></ul><h3 id="Behavioral-Patterns"><a href="#Behavioral-Patterns" class="headerlink" title="Behavioral Patterns"></a>Behavioral Patterns</h3><p>All different and don’t really follow a theme but there is some overlap. Most are generally unique in their approach solving a particular problem. It could however be said that <code>Behavioral patterns</code> define manners of communication between classes and objects.</p><ul><li><a href="/2020/02/chain-of-responsibility-pattern/">Chain of Responsibility *</a></li><li><a href="/2020/02/command-pattern/">Command</a></li><li><a href="/2020/02/interpreter-pattern/">Interpreter *</a></li><li><a href="/2020/02/iterator-pattern/">Iterator *</a></li><li><a href="/2020/02/mediator-pattern/">Mediator *</a> | <a href="/2020/08/cqrs/">Command and Query Responsibility Segregation (CQRS)</a></li><li><a href="/2020/02/memento-pattern/">Memento *</a></li><li><a href="/2020/02/observer-pattern/">Observer *</a></li><li><a href="/2020/02/state-pattern/">State *</a></li><li><a href="/2020/02/strategy-pattern/">Strategy *</a></li><li><a href="/2020/02/template-method-pattern/">Template Method *</a></li><li><a href="/2020/02/visitor-pattern/">Visitor *</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li><a href="https://www.pluralsight.com/courses/patterns-library">https://www.pluralsight.com/courses/patterns-library</a></li><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Facade Pattern</title>
      <link href="2020/02/facade-pattern/"/>
      <url>2020/02/facade-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The facade pattern is used to define a simplified interface to a more complex subsystem.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Facade.aspx">http://www.blackwasp.co.uk/Facade.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Factory Pattern</title>
      <link href="2020/02/factory-pattern/"/>
      <url>2020/02/factory-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Motivation-amp-Definition"><a href="#Motivation-amp-Definition" class="headerlink" title="Motivation &amp; Definition"></a>Motivation &amp; Definition</h3><p>A factory component’s responsibility is solely for the <strong>wholesale creation of objects</strong> so <a href="/2020/04/builder-pattern/">non-piecewise like a builder pattern</a>. Motivational usage of a factory could include:</p><ul><li>Object creation logic sometimes becomes too convoluted</li><li>Constructor is not descriptive, its name will match the name of the containing type and additional information about how the object is constructed would need to be communicated in the summary documentation above the method. You cannot overload with same sets of arguments with different names. Optional parameters are confusing and not a great idea for a constructor.</li><li>Entire object creation (so <a href="/2020/04/builder-pattern/">non-piecewise like a builder pattern</a>) is outsourced to separate function (<strong>factory method</strong>), may exist in a separate class (<strong>factory</strong>), hierarchy of factories (<strong>abstract factory</strong>)</li></ul><p>Point Example from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a> of a constructor that can be simplified by use of a factory.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Initializes a point from EITHER cartesian or polar</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;a&quot;&gt;</span>x if cartesian, rho if polar<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;b&quot;&gt;</span>y if cartesian, theta if polar<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cs&quot;&gt;</span>Coordinate system enum.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b, CoordinateSystem cs = CoordinateSystem.Cartesian</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (cs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CoordinateSystem.Polar:</span><br><span class="line">_x = a * Math.Cos(b);</span><br><span class="line">_y = a * Math.Sin(b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line">_x = a;</span><br><span class="line">_y = b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h3><blockquote><p>The factory method is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time.</p></blockquote><p>Refactoring the example above to use factory methods:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a factory method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewCartesianPoint</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a factory method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewPolarPoint</span>(<span class="params"><span class="built_in">double</span> rho, <span class="built_in">double</span> theta</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(</span><br><span class="line">rho * Math.Cos(theta), </span><br><span class="line">rho * Math.Sim(theta));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_x = x;</span><br><span class="line">_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><blockquote><p>A factory is a separate component that knows how to initialize types in a particular way.</p></blockquote><p>It can be argued that the <strong>factory methods</strong> above violates <a href="/2018/05/single-responsibility-principle-srp/">SRP (Single Responsibility Principle)</a> as creation of the object and what it actually does are different concerns. You can move the factory methods into their own class. </p><p>A <strong>caveat</strong> however would then be that the constructor now needs to be public and the consumer can access it. If your assembly was being downloaded as a package (Example: <a href="https://www.nuget.org/packages">Nuget</a>) you can mark the constructor as <strong>internal</strong> which will fix this problem however this is not always the case.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PointFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">NewCartesianPoint</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">NewPolarPoint</span>(<span class="params"><span class="built_in">double</span> rho, <span class="built_in">double</span> theta</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(</span><br><span class="line">rho * Math.Cos(theta), </span><br><span class="line">rho * Math.Sim(theta));</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_x = x;</span><br><span class="line">_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Building on the above you can solve the public constructor issue by using an <strong>inner factory</strong> which would simply put the factory back inside Point as an inner class. They don’t have to be static but its the simplest.</p><p>This is how some of the .net framework is written, example:  <code>Task.Factory.StartNew ...</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewCartesianPoint</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewPolarPoint</span>(<span class="params"><span class="built_in">double</span> rho, <span class="built_in">double</span> theta</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(</span><br><span class="line">rho * Math.Cos(theta), </span><br><span class="line">rho * Math.Sim(theta));</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_x = x;</span><br><span class="line">_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then call as </span></span><br><span class="line"><span class="keyword">var</span> point = Point.Factory.NewCartesianPoint(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><blockquote><p>The abstract factory pattern is used to provide a client with a set of related or dependent objects. The “family” of objects created by the factory are determined at run-time. These objects can be interfaces or abstract classes.</p></blockquote><p>This is relatively <strong>rarely used</strong> outside of a large complicated code bases however smaller contrived examples can be explained using a simple <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples">shopping cart</a> which follows <a href="/2018/04/open-closed-principle-ocp/">OCP (Open Close Principle)</a>. </p><h4 id="Cart-Example"><a href="#Cart-Example" class="headerlink" title="Cart Example"></a>Cart Example</h4><p>This is a <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples/ShoppingCart">cart example</a> based on code done by <a href="https://ardalis.com/?s=solid">Steve Smith aka Ardalis</a></p><p>Create the interface for the rules <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Interfaces/IPriceRule.cs">ShoppingCart/Interfaces/IPriceRule.cs</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPriceRule</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params">OrderItemModel item</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create the interface for the calculator <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Interfaces/IPricingCalculator.cs">ShoppingCart/Interfaces/IPricingCalculator.cs</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPricingCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Implement some rules <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Business/PriceRules/EachPriceRule.cs">ShoppingCart/Business/PriceRules/EachPriceRule.cs</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EachPriceRule</span> : <span class="title">IPriceRule</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params">OrderItemModel item</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.Sku.StartsWith(<span class="string">&quot;EACH&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"><span class="keyword">return</span> item.Quantity * <span class="number">5</span>m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Implement the calculator <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Business/PricingCalculator.cs">PricingCalculator.cs</a>, the <code>IEnumerable&lt;IPriceRule&gt;</code> would be injected using <a href="/tags/dependency-injection/">dependency injection</a>. </p><ul><li><strong>NOTE:</strong> If the calculator returned <code>IPriceRule</code> instead of the <code>decimal</code> it would be a true factory, calling <code>.First</code> is still retrieving an <code>IPriceRule</code> so the pattern is still the same. If you look at the <code>Hot Drink Machine</code> example below it does return the rules interface. </li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PricingCalculator</span> : <span class="title">IPricingCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IEnumerable&lt;IPriceRule&gt; _pricingRules;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PricingCalculator</span>(<span class="params">IEnumerable&lt;IPriceRule&gt; pricingRules</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_pricingRules = pricingRules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"><span class="keyword">return</span> _pricingRules</span><br><span class="line">.First(r =&gt; r.IsMatch(item))</span><br><span class="line">.CalculatePrice(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then to consume inject <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Services/CartService.cs">IPricingCalculator</a> as <code>_pricingCalculator</code>, its <code>CalculatePrice</code> method will find the correct rule from the list based on item and then fluently call the rules <code>CalculatePrice</code> method.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_pricingCalculator.CalculatePrice(item);</span><br></pre></td></tr></table></figure><h4 id="Hot-Drink-Machine-Example"><a href="#Hot-Drink-Machine-Example" class="headerlink" title="Hot Drink Machine Example"></a>Hot Drink Machine Example</h4><p>A <code>HotDrinkMachine</code> example from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a> explains that an abstract factory doesn’t necessarily need to return a family of objects but can return different objects with their own separate factories. This can be expanded to return families of objects per the text book definition.</p><p>The code creation would be done as follows:</p><ol><li>Create the interface <code>IHotDrink</code></li><li>Create the implementations, here <code>internal</code> insinuates we wont be giving out these classes but rather the <code>IHotDrink</code></li><li>Create factory interface <code>IHotDrinkFactory</code></li><li>Create the factory, the assumption here is the process for making Tea and Coffee is vastly different and therefor warrants their own factory. So we will create two factory objects. Again, here <code>internal</code> insinuates we wont be giving out these classes but rather the <code>IHotDrinkFactory</code>. </li><li>Create the <code>HotDrinkMachine</code> class, there are two ways he loaded them up <ol><li><a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/FactoryPattern/AbstractFactoryDemo.cs">Dictionary from enumeration AvailableDrink that maps to available factories</a></li><li><a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/FactoryPattern/AbstractFactoryDemo2.cs">HotDrinkMachine using reflection, typically you would use DI to inject these</a></li></ol></li><li>Finally this can be called as</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> machine = <span class="keyword">new</span> HotDrinkMachine();</span><br><span class="line">IHotDrink drink = machine.MakeDrink(); <span class="comment">// 1st example had params here</span></span><br><span class="line">drink.Consume();</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://dzone.com/articles/factory-method-vs-abstract">https://dzone.com/articles/factory-method-vs-abstract</a></li><li><a href="https://www.geeksforgeeks.org/abstract-factory-pattern/">https://www.geeksforgeeks.org/abstract-factory-pattern/</a></li><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="https://www.dotnettricks.com/learn/designpatterns/factory-method-design-pattern-dotnet">https://www.dotnettricks.com/learn/designpatterns/factory-method-design-pattern-dotnet</a></li><li><a href="https://www.c-sharpcorner.com/article/factory-method-design-pattern-in-c-sharp/">https://www.c-sharpcorner.com/article/factory-method-design-pattern-in-c-sharp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flyweight Pattern</title>
      <link href="2020/02/flyweight-pattern/"/>
      <url>2020/02/flyweight-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The flyweight pattern is used to reduce the memory and resource usage for complex models containing many hundreds, thousands or hundreds of thousands of similar objects.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Flyweight.aspx">http://www.blackwasp.co.uk/Flyweight.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterator Pattern</title>
      <link href="2020/02/iterator-pattern/"/>
      <url>2020/02/iterator-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The iterator pattern is used to provide a standard interface for traversing a collection of items in an aggregate object without the need to understand its underlying structure.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Iterator.aspx">http://www.blackwasp.co.uk/Iterator.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interpreter Pattern</title>
      <link href="2020/02/interpreter-pattern/"/>
      <url>2020/02/interpreter-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The interpreter pattern is used to define the grammar for instructions that form part of a language or notation, whilst allowing the grammar to be easily extended.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Interpreter.aspx">http://www.blackwasp.co.uk/Interpreter.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mediator Pattern</title>
      <link href="2020/02/mediator-pattern/"/>
      <url>2020/02/mediator-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The mediator pattern is used to reduce coupling between classes that communicate with each other. Instead of classes communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/@letienthanh0212/cqrs-and-mediator-in-net-core-project-c0b477eab6e9">https://medium.com/@letienthanh0212/cqrs-and-mediator-in-net-core-project-c0b477eab6e9</a></li><li><a href="https://github.com/jbogard/MediatR">https://github.com/jbogard/MediatR</a></li><li><a href="https://ardalis.com/using-mediatr-in-aspnet-core-apps/">https://ardalis.com/using-mediatr-in-aspnet-core-apps/</a></li><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Mediator.aspx">http://www.blackwasp.co.uk/Mediator.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memento Pattern</title>
      <link href="2020/02/memento-pattern/"/>
      <url>2020/02/memento-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The memento pattern is used to capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Memento.aspx">http://www.blackwasp.co.uk/Memento.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Observer Pattern</title>
      <link href="2020/02/observer-pattern/"/>
      <url>2020/02/observer-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The observer pattern is used to allow an object to publish changes to its state. Other objects subscribe to be immediately notified of any changes.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Observer.aspx">http://www.blackwasp.co.uk/Observer.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy Pattern</title>
      <link href="2020/02/proxy-pattern/"/>
      <url>2020/02/proxy-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. The proxy provides the same public interface as the underlying subject class, adding a level of indirection by accepting requests from a client object and passing these to the real subject object as necessary.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Proxy.aspx">http://www.blackwasp.co.uk/Proxy.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Singleton Pattern</title>
      <link href="2020/02/singleton-pattern/"/>
      <url>2020/02/singleton-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The singleton pattern ensures that only one object of a particular class is ever created. All further references to objects of the singleton class refer to the same underlying instance.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Singleton.aspx">http://www.blackwasp.co.uk/Singleton.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>State Pattern</title>
      <link href="2020/02/state-pattern/"/>
      <url>2020/02/state-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/State.aspx">http://www.blackwasp.co.uk/State.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strategy Pattern</title>
      <link href="2020/02/strategy-pattern/"/>
      <url>2020/02/strategy-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Strategy.aspx">http://www.blackwasp.co.uk/Strategy.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template Method Pattern</title>
      <link href="2020/02/template-method-pattern/"/>
      <url>2020/02/template-method-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The template method pattern is used to define the basic steps of an algorithm and allow the implementation of the individual steps to be changed.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/TemplateMethod.aspx">http://www.blackwasp.co.uk/TemplateMethod.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visitor Pattern</title>
      <link href="2020/02/visitor-pattern/"/>
      <url>2020/02/visitor-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Visitor.aspx">http://www.blackwasp.co.uk/Visitor.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Vulnerability</title>
      <link href="2020/01/software-vulnerability/"/>
      <url>2020/01/software-vulnerability/</url>
      
        <content type="html"><![CDATA[<p>Software vulnerability is when code is open to exploitation though known vulnerabilities. The references below contain links to sites and software that can help identify vulnerability.</p><h3 id="package-json-NPM"><a href="#package-json-NPM" class="headerlink" title="package.json (NPM)"></a>package.json (NPM)</h3><p>You can manually check for vulnerabilities with <code>npm audit</code>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm audit --json &gt; logfoo.log</span><br></pre></td></tr></table></figure><p>At the bottom it will have a summary</p><pre><code>  &quot;metadata&quot;: &#123;    &quot;vulnerabilities&quot;: &#123;      &quot;info&quot;: 0,      &quot;low&quot;: 199,      &quot;moderate&quot;: 20,      &quot;high&quot;: 86,      &quot;critical&quot;: 2    &#125;,</code></pre><p>You should care about <em>severity=critical</em></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ossindex.sonatype.org/">https://ossindex.sonatype.org/</a></li><li><a href="https://owasp.org/www-project-dependency-check/">https://owasp.org/www-project-dependency-check/</a></li><li><a href="https://owasp.org/www-community/Vulnerability_Scanning_Tools">https://owasp.org/www-community/Vulnerability_Scanning_Tools</a></li><li><a href="https://github.com/carlpaton/VulnusCloud">https://github.com/carlpaton/VulnusCloud</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload File MVC Core</title>
      <link href="2020/01/upload-file-mvc-core/"/>
      <url>2020/01/upload-file-mvc-core/</url>
      
        <content type="html"><![CDATA[<h3 id="Net-Core-2x"><a href="#Net-Core-2x" class="headerlink" title=".Net Core 2x"></a>.Net Core 2x</h3><p>Upload and save some file.</p><h3 id="FileUploadViewModel"><a href="#FileUploadViewModel" class="headerlink" title="FileUploadViewModel"></a>FileUploadViewModel</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Display(Name = <span class="meta-string">&quot;Some File&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> List&lt;IFormFile&gt; FormFiles &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="FileUploadController"><a href="#FileUploadController" class="headerlink" title="FileUploadController"></a>FileUploadController</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; POST: FileUpload&#x2F;Create</span><br><span class="line">[HttpPost]</span><br><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line">public async Task&lt;IActionResult&gt; Create([Bind(&quot;PackageType,FormFiles&quot;)] FileUploadViewModel fileUploadViewModel)</span><br><span class="line">        &#123;</span><br><span class="line">            if (ModelState.IsValid)</span><br><span class="line">            &#123;</span><br><span class="line">                var postedFile &#x3D; fileUploadViewModel.FormFiles[0];</span><br><span class="line">                </span><br><span class="line">using (var memoryStream &#x3D; new MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                postedFile.CopyTo(memoryStream);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="View-Create-cshtml"><a href="#View-Create-cshtml" class="headerlink" title="View Create.cshtml"></a>View Create.cshtml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">asp-action</span>=<span class="string">&quot;Create&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">asp-for</span>=<span class="string">&quot;Foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">asp-for</span>=<span class="string">&quot;Foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">asp-validation-for</span>=<span class="string">&quot;PackageType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">asp-for</span>=<span class="string">&quot;FormFiles&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">asp-for</span>=<span class="string">&quot;FormFiles&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">asp-validation-for</span>=<span class="string">&quot;FormFiles&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/VulnusCloud">https://github.com/carlpaton/VulnusCloud</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-3.1">https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-3.1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Colab</title>
      <link href="2020/01/colab/"/>
      <url>2020/01/colab/</url>
      
        <content type="html"><![CDATA[<p><strong>Colab</strong> Notebooks. Colaboratory is a Google research project created to help disseminate machine learning education and research. It’s a Jupyter notebook environment that requires no setup to use and runs entirely in the cloud.</p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><p>List of most useful commands :</p><p><strong>RUNNING</strong></p><ul><li>Ctrl + ENTER : Run current cell</li><li>Shift + ENTER : Run current cell &amp; select next cell or create new one if last</li><li>Alt + ENTER : Run current cell &amp; create new cell</li><li>Ctrl + F9 : Run all cells in notebook</li></ul><p><strong>HANDLING CELLS</strong></p><ul><li>Ctrl + M + A : Create new cell above current cell</li><li>Ctrl + M + B : Create new cell below current cell</li><li>Ctrl + M + M : Transform current Code cell into Text cell</li><li>Ctrl + M + Y : Transform current Text cell into Code cell</li><li>Ctrl + M + P : Go to previous cell</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://colab.research.google.com/">https://colab.research.google.com/</a></li><li><a href="https://www.reddit.com/r/GoogleColab/comments/apxqm6/colabs_most_interesting_shortcuts/">https://www.reddit.com/r/GoogleColab/comments/apxqm6/colabs_most_interesting_shortcuts/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Serializers</title>
      <link href="2020/01/json-serializers/"/>
      <url>2020/01/json-serializers/</url>
      
        <content type="html"><![CDATA[<p>Other <a href="/2017/12/serialization/">Serialization technologies</a> include <strong>Binary</strong> and <strong>XML</strong> Serialization.</p><h3 id="System-Text-Json"><a href="#System-Text-Json" class="headerlink" title="System.Text.Json"></a>System.Text.Json</h3><p>New hotness &lt;3</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> JsonSerializer.Serialize(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview</a></li></ul><h3 id="Json-NET-Newtonsoft-Framework"><a href="#Json-NET-Newtonsoft-Framework" class="headerlink" title="Json.NET / Newtonsoft Framework"></a>Json.NET / Newtonsoft Framework</h3><p>Was integrated into ASP.NET even though it was 3rd party, I think its called Middleware. This lib is pretty much the de facto standard for JSON Serialization (Probably won awards, free beer &amp; stuff!)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> JsonConvert.SerializeObject(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/Common/blob/master/Common/Serialization/JsonConvertService.cs">https://github.com/carlpaton/Common/blob/master/Common/Serialization/JsonConvertService.cs</a></li><li><a href="https://www.newtonsoft.com/json">https://www.newtonsoft.com/json</a></li></ul><h3 id="System-Runtime-Serialization-Json"><a href="#System-Runtime-Serialization-Json" class="headerlink" title="System.Runtime.Serialization.Json"></a>System.Runtime.Serialization.Json</h3><p><strong>Class</strong>: <code>DataContractJsonSerializer</code></p><p>An older, Microsoft-developed serializer that was integrated in previous ASP.NET versions until Newtonsoft.Json replaced it. Needs more code and sucks, don’t use it :D</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> dataContractJsonSerializer = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        dataContractJsonSerializer.WriteObject(memoryStream, obj);</span><br><span class="line">        memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> streamReader = <span class="keyword">new</span> StreamReader(memoryStream))</span><br><span class="line">        &#123;</span><br><span class="line">            json = streamReader.ReadToEnd();</span><br><span class="line">            streamReader.Close();</span><br><span class="line">        &#125;</span><br><span class="line">        memoryStream.Close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- CALL IT</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> FizzbuzzEventBody() &#123;</span><br><span class="line">   buzz_at = BuzzAt,</span><br><span class="line">   fizz_at = FizzAt,</span><br><span class="line">   lower_bound = LowerBound,</span><br><span class="line">   upper_bound = UpperBound</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> json = ToJson&lt;FizzbuzzEventBody&gt;(obj);</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/Common/blob/master/Common/Serialization/DataContractJsonSerializerService.cs">https://github.com/carlpaton/Common/blob/master/Common/Serialization/DataContractJsonSerializerService.cs</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data">https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data</a></li><li><a href="https://www.c-sharpcorner.com/article/json-serialization-and-deserialization-in-c-sharp/">https://www.c-sharpcorner.com/article/json-serialization-and-deserialization-in-c-sharp/</a></li></ul><h3 id="System-Web-Script-Serialization"><a href="#System-Web-Script-Serialization" class="headerlink" title="System.Web.Script.Serialization"></a>System.Web.Script.Serialization</h3><p>I remember using this ages ago in <code>Web Forms</code> and <code>AjaxServer.asmx.cs</code> files - I stopped using it after somebody showed me <code>Json.NET</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">list.Add(<span class="string">&quot;some string value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// slower built in &#x27;JavaScriptSerializer&#x27;</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="keyword">new</span> JavaScriptSerializer().Serialize(list);</span><br><span class="line"><span class="keyword">return</span> json;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8">https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://michaelscodingspot.com/the-battle-of-c-to-json-serializers-in-net-core-3/">https://michaelscodingspot.com/the-battle-of-c-to-json-serializers-in-net-core-3/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuget Hosted Package</title>
      <link href="2020/01/nuget-hosted-package/"/>
      <url>2020/01/nuget-hosted-package/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NuGet is the package manager for .NET. It enables developers to create, share, and consume useful .NET libraries. NuGet client tools provide the ability to produce and consume these libraries as “packages”. </p></blockquote><h3 id="Write-Code"><a href="#Write-Code" class="headerlink" title="Write Code"></a>Write Code</h3><p>I used .Net Core 2.2 and build a class library, example code: <a href="https://github.com/carlpaton/Common/">https://github.com/carlpaton/Common/</a></p><p>Then login at <a href="https://www.nuget.org/">https://www.nuget.org/</a> with your Microsoft Account.</p><h3 id="Create-package"><a href="#Create-package" class="headerlink" title="Create package"></a>Create package</h3><ol><li>Open the <code>.csproj</code> file and add the following properties inside the existing <code>PropertyGroup</code> tag:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageId</span>&gt;</span>CarlPaton.Common<span class="tag">&lt;/<span class="name">PackageId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.2<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Authors</span>&gt;</span>Carl Paton<span class="tag">&lt;/<span class="name">Authors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Company</span>&gt;</span>carlpaton.github.io<span class="tag">&lt;/<span class="name">Company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>Common services and magic.<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageTags</span>&gt;</span>c#<span class="tag">&lt;/<span class="name">PackageTags</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageLicenseUrl</span>&gt;</span>https://github.com/carlpaton/Common/blob/master/LICENSE.md<span class="tag">&lt;/<span class="name">PackageLicenseUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryUrl</span>&gt;</span>https://github.com/carlpaton/Common<span class="tag">&lt;/<span class="name">RepositoryUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryType</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">RepositoryType</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Build a NuGet package, this is the <code>.nupkg</code> file. I ran this from the root of the project <code>C:\Dev\Common&gt;</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet pack</span><br></pre></td></tr></table></figure><p>This generated <code>C:\Dev\Common\Common\bin\Debug\CarlPaton.Common.1.0.0.nupkg</code></p><h3 id="Publish-package"><a href="#Publish-package" class="headerlink" title="Publish package"></a>Publish package</h3><ol start="3"><li><a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli#acquire-your-api-key">Acquire your API key</a></li><li>CD to</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Dev\Common\Common\bin\Debug</span><br></pre></td></tr></table></figure><ol start="5"><li>Publish to nuget &lt;3</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push CarlPaton.Common.1.0.0.nupkg -k yoursweetkeyhere -s https:&#x2F;&#x2F;api.nuget.org&#x2F;v3&#x2F;index.json</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.nuget.org/packages/CarlPaton.Common/">https://www.nuget.org/packages/CarlPaton.Common/</a></li></ul><h3 id="Version-Information"><a href="#Version-Information" class="headerlink" title="Version Information"></a>Version Information</h3><p>Add sweet nuget version to your projects <code>README.md</code> on GitHub - <a href="https://www.nuget.org/packages/CarlPaton.Common/"><img src="https://img.shields.io/nuget/v/CarlPaton.Common.svg?style=flat-square" alt="NuGet version (CarlPaton.Common)"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![NuGet version (CarlPaton.Common)](https:&#x2F;&#x2F;img.shields.io&#x2F;nuget&#x2F;v&#x2F;CarlPaton.Common.svg?style&#x3D;flat-square)](https:&#x2F;&#x2F;www.nuget.org&#x2F;packages&#x2F;CarlPaton.Common&#x2F;)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli">https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli</a></li><li><a href="https://docs.microsoft.com/en-us/nuget/">https://docs.microsoft.com/en-us/nuget/</a></li><li><a href="https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package">https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stored Proc With Cursor Loop</title>
      <link href="2019/12/sql-stored-proc-with-cursor-loop/"/>
      <url>2019/12/sql-stored-proc-with-cursor-loop/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-Proc"><a href="#Create-Proc" class="headerlink" title="Create Proc"></a>Create Proc</h3><p>The <code>cursor</code> will iterate and return its position each time, only once it returns 0 is it complete. Looping like this was useful if the resulting insert needed to trigger another proc.</p><p><strong>READ_ONLY</strong> Prevents updates made through this cursor.</p><p><strong>FORWARD_ONLY</strong> Specifies that the cursor can only move forward and be scrolled from the first to the last row. FETCH NEXT is the only supported fetch option. </p><p><strong>LOCAL</strong> Specifies that the scope of the cursor is local to the batch, stored procedure, or trigger in which the cursor was created.</p><p><strong>STATIC</strong> Specifies that the cursor always displays the result set as it was when the cursor was first opened, and makes a temporary copy of the data to be used by the cursor</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[prc_run_some_crap]</span><br><span class="line">(</span><br><span class="line"><span class="variable">@id</span>                        <span class="type">BIGINT</span>,</span><br><span class="line"><span class="variable">@unused</span>_second_param_id    <span class="type">BIGINT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;@id=&#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@id</span>);</span><br><span class="line">PRINT <span class="string">&#x27;@unused_second_param_id=&#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@unused</span>_second_param_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@some</span>_id <span class="type">int</span>, </span><br><span class="line"><span class="variable">@some</span>_description <span class="type">varchar</span>(<span class="number">10</span>), </span><br><span class="line"><span class="variable">@some</span>_date datetime, </span><br><span class="line"><span class="variable">@some</span>_bool bit;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> My_Sweet_Cursor <span class="keyword">CURSOR</span> <span class="keyword">LOCAL</span> <span class="keyword">STATIC</span> FORWARD_ONLY READ_ONLY <span class="keyword">FOR</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">some_id, some_description, some_date, some_bool</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"> dbo.[first_table] <span class="keyword">WITH</span> (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">id <span class="operator">=</span> <span class="variable">@id</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">OPEN</span> My_Sweet_Cursor;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">FETCH</span> NEXT </span><br><span class="line"><span class="keyword">FROM</span> My_Sweet_Cursor</span><br><span class="line"><span class="keyword">INTO</span> <span class="variable">@some</span>_id, some_description, some_date, some_bool;</span><br><span class="line"></span><br><span class="line">WHILE @<span class="variable">@FETCH</span>_STATUS <span class="operator">=</span> <span class="number">0</span>  </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> some_id <span class="keyword">FROM</span> [dbo].[second_table] <span class="keyword">WITH</span> (NOLOCK) <span class="keyword">WHERE</span> some_id<span class="operator">=</span><span class="variable">@some</span>_id <span class="keyword">AND</span> some_description<span class="operator">=</span><span class="variable">@some</span>_description)</span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">PRINT <span class="string">&#x27;Copying record : &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@some</span>_id);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[second_table]</span><br><span class="line">([some_id]</span><br><span class="line">,[some_description]</span><br><span class="line">,[some_date]</span><br><span class="line">,[some_bool])</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="variable">@some</span>_id, </span><br><span class="line"><span class="variable">@some</span>_description, </span><br><span class="line"><span class="variable">@some</span>_date,</span><br><span class="line"><span class="variable">@some</span>_bool);</span><br><span class="line"><span class="keyword">END</span>; </span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">PRINT <span class="string">&#x27;Already exists &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@some</span>_id);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FETCH</span> NEXT </span><br><span class="line"><span class="keyword">FROM</span> My_Sweet_Cursor</span><br><span class="line"><span class="keyword">INTO</span> <span class="variable">@some</span>_id, some_description, some_date, some_bool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CLOSE</span> My_Sweet_Cursor;  </span><br><span class="line"><span class="keyword">DEALLOCATE</span> My_Sweet_Cursor;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-with-cursor-loop.sql">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-with-cursor-loop.sql</a></li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15</a></li></ul><h3 id="Execute-Proc"><a href="#Execute-Proc" class="headerlink" title="Execute Proc"></a>Execute Proc</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> dbo.[prc_run_some_crap] <span class="variable">@id</span> <span class="operator">=</span> <span class="number">123</span>, <span class="variable">@second</span>_param_id <span class="operator">=</span> <span class="number">456</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stored Proc Offset Fetch</title>
      <link href="2019/12/sql-stored-proc-offset-fetch/"/>
      <url>2019/12/sql-stored-proc-offset-fetch/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-Proc"><a href="#Create-Proc" class="headerlink" title="Create Proc"></a>Create Proc</h3><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-offset-fetch.sql">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-offset-fetch.sql</a></li></ul><p>This will select rows from the table <code>[hoe_database].[dbo].[random_data]</code> using <code>OFFSET</code> which is simply calculated as <code>(@page - 1) * @rows</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example: (2 - 1) * 25 &#x3D; 25</span><br></pre></td></tr></table></figure><p><code>FETCH NEXT</code> then simply returns the next <code>@rows</code> which was 25.</p><p>For this to work we order by the <code>id DESC</code> so the most recent records are at the top.</p><h3 id="Execute-Proc"><a href="#Execute-Proc" class="headerlink" title="Execute Proc"></a>Execute Proc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.[prc_select_some_crap] @page &#x3D; 2, @rows &#x3D; 25;</span><br></pre></td></tr></table></figure><h3 id="Quick-Test"><a href="#Quick-Test" class="headerlink" title="Quick Test"></a>Quick Test</h3><p>Changing the values <code>@page</code> and <code>@rows</code> should show the results if you cannot create stored procs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DECLARE @page INT &#x3D; 5;</span><br><span class="line">DECLARE @rows INT &#x3D; 25;</span><br><span class="line"></span><br><span class="line">IF (@page &lt; 1)</span><br><span class="line">    SET @page &#x3D; 1;</span><br><span class="line">IF (@rows &lt; 1)</span><br><span class="line">    SET @rows &#x3D; 25;</span><br><span class="line"></span><br><span class="line">SELECT [id]</span><br><span class="line">      ,[some_int]</span><br><span class="line">      ,[some_bit]</span><br><span class="line">      ,[some_varchar]</span><br><span class="line">      ,[some_datetime]</span><br><span class="line">      ,[some_numeric]</span><br><span class="line">FROM [hoe_database].[dbo].[random_data] (NOLOCK)</span><br><span class="line">ORDER BY id DESC</span><br><span class="line">OFFSET ((@page - 1) * @rows) ROWS </span><br><span class="line">FETCH NEXT @rows ROWS ONLY;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://sqlperformance.com/2015/01/t-sql-queries/pagination-with-offset-fetch">https://sqlperformance.com/2015/01/t-sql-queries/pagination-with-offset-fetch</a></li><li><a href="https://www.essentialsql.com/using-offset-and-fetch-with-the-order-by-clause/">https://www.essentialsql.com/using-offset-and-fetch-with-the-order-by-clause/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Application Architecture</title>
      <link href="2019/12/web-application-architecture/"/>
      <url>2019/12/web-application-architecture/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Updated 8 Dec 2020</p></blockquote><p>Application architecture of the microsoft eShopOnWeb example.</p><p><img src="/d/web-application-architecture/e-shop-on-web.jpg" alt="eShopOnWeb"></p><h3 id="Clean-architecture"><a href="#Clean-architecture" class="headerlink" title="Clean architecture"></a>Clean architecture</h3><p><a href="/2020/12/clean-architecture/">See clean architecture</a></p><h3 id="N-Layer"><a href="#N-Layer" class="headerlink" title="N-Layer"></a>N-Layer</h3><p>This is simliar to my post on <a href="/2019/07/n-tier-architecture/">N-Tier Architecture</a> but I feel <code>Clean architecture</code> above follows a better project/solution structure.</p><h3 id="Monolithic-application"><a href="#Monolithic-application" class="headerlink" title="Monolithic application"></a>Monolithic application</h3><blockquote><p>“A monolithic application is one that is entirely self-contained, in terms of its behavior. It may interact with other services or data stores in the course of performing its operations, but the core of its behavior runs within its own process and the entire application is typically deployed as a single unit. If such an application needs to scale horizontally, typically the entire application is duplicated across multiple servers or virtual machines.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures">https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures</a></li><li><a href="https://github.com/carlpaton/eShopOnWeb">https://github.com/carlpaton/eShopOnWeb</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generate Random Data</title>
      <link href="2019/12/sql-gen-random-data/"/>
      <url>2019/12/sql-gen-random-data/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE hoe_database;</span><br><span class="line"></span><br><span class="line">USE hoe_database;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.random_data ( </span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    some_int <span class="type">INT</span>,</span><br><span class="line">    some_bit BIT, </span><br><span class="line">    some_varchar <span class="type">VARCHAR</span>(<span class="number">10</span>), </span><br><span class="line">    some_datetime DATETIME, </span><br><span class="line">    some_numeric <span class="type">NUMERIC</span>(<span class="number">16</span>,<span class="number">2</span>) ) </span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="Insert-Some-Random-Data"><a href="#Insert-Some-Random-Data" class="headerlink" title="Insert Some Random Data"></a>Insert Some Random Data</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@count</span> <span class="type">INT</span> </span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@upper</span>_bound <span class="type">INT</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@upper</span>_bound <span class="operator">=</span> <span class="number">20000</span></span><br><span class="line"></span><br><span class="line">PRINT(<span class="string">&#x27;Oh yeah, doing the thing till &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@upper</span>_bound))</span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@count</span> <span class="operator">&lt;=</span> <span class="variable">@upper</span>_bound</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.random_data </span><br><span class="line">    <span class="keyword">SELECT</span>    <span class="variable">@count</span>, </span><br><span class="line">            <span class="keyword">CASE</span> <span class="keyword">WHEN</span> DATEPART(MILLISECOND, GETDATE()) <span class="operator">&gt;=</span> <span class="number">500</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">ELSE</span> <span class="number">1</span> <span class="keyword">END</span> [some_bit], </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) [some_varchar], </span><br><span class="line">            DATEADD(MILLISECOND, (<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">6000</span>) <span class="operator">*</span> <span class="number">-1</span>, </span><br><span class="line">                DATEADD(<span class="keyword">MINUTE</span>, (<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">1000000</span>) <span class="operator">*</span> <span class="number">-1</span>, GETDATE())) [some_datetime], </span><br><span class="line">            (<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">100001</span>) <span class="operator">+</span> ((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">100001</span>) <span class="operator">*</span> <span class="number">0.00001</span>) [some_numeric]</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">IF (<span class="variable">@count</span> <span class="operator">%</span> <span class="number">5000</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">PRINT(<span class="variable">@count</span>)</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span> <span class="operator">+</span><span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">PRINT(<span class="string">&#x27;DONE!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.mssqltips.com/sqlservertip/3157/different-ways-to-get-random-data-for-sql-server-data-sampling/">https://www.mssqltips.com/sqlservertip/3157/different-ways-to-get-random-data-for-sql-server-data-sampling/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transaction With Throw</title>
      <link href="2019/12/sql-transaction-with-throw/"/>
      <url>2019/12/sql-transaction-with-throw/</url>
      
        <content type="html"><![CDATA[<h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">USE [DocumentPacks];</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line">     <span class="keyword">BEGIN</span> TRANSACTION</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DECLARE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- INSERT</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- SOMETHING WENT WRONG WITH THE CODE ABOVE</span></span><br><span class="line">THROW <span class="number">51000</span>, <span class="string">&#x27;Foo error.&#x27;</span>, <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">     <span class="keyword">COMMIT</span> TRANSACTION</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorNumber</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_NUMBER();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorLine</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_LINE();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorMessage</span> NVARCHAR(<span class="number">4000</span>) <span class="operator">=</span> ERROR_MESSAGE();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorSeverity</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_SEVERITY();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorState</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_STATE();</span><br><span class="line"></span><br><span class="line">     IF @<span class="variable">@TRANCOUNT</span> <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">          <span class="keyword">ROLLBACK</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line">     RAISERROR(<span class="variable">@ErrorMessage</span>, <span class="variable">@ErrorSeverity</span>, <span class="variable">@ErrorState</span>);</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15</a></li><li><a href="https://stackoverflow.com/questions/31274274/t-sql-throw-exception-within-a-transaction">https://stackoverflow.com/questions/31274274/t-sql-throw-exception-within-a-transaction</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Batching Data Changes</title>
      <link href="2019/12/sql-batching-data-changes/"/>
      <url>2019/12/sql-batching-data-changes/</url>
      
        <content type="html"><![CDATA[<p>Batching data chances is encouraged when doing large <code>UPDATE</code> and <code>DELETE</code> statements which affect many rows.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The idea is that you</p><ol><li>Create <code>#full_list</code> and copy the primary ID into this table from <code>prod_table</code></li><li>Define the <code>batch_size</code>, example 1000 and other variables such as the <code>number_of_batches</code></li><li>Loop <code>WHILE @rows_exist = 1</code></li><li>Insert into <code>#temp_batch</code> by selecting <code>TOP(@batch_size)</code></li><li>Perform the <code>UPDATE</code> or <code>DELETE</code><ol><li>on <code>prod_table</code> by joining to <code>#temp_batch</code></li><li>DELETE FROM <code>#temp_full_list</code></li></ol></li><li>Set <code>@rows_exist </code>as infinite loops are frowned upon. Apparently.</li></ol><h3 id="Roll-Backs"><a href="#Roll-Backs" class="headerlink" title="Roll Backs"></a>Roll Backs</h3><p>A simple way to roll the data back is to create a new <code>dbo.temp_random_data</code> and insert the at very least the <code>id</code> so you can join back to it. This is really for an <code>UPDATE</code> as <code>DELETE</code> should trigger auditing. You do audit deletes in your database right? :)</p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/batching-data-changes.sql">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/batching-data-changes.sql</a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">USE hoe_database;</span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">IF (OBJECT_ID(<span class="string">&#x27;[dbo].[temp_random_data]&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NULL</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">PRINT(<span class="string">&#x27;CREATING temp_random_data&#x27;</span>)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.temp_random_data (</span><br><span class="line">[id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[insert_date] [datetime] <span class="keyword">DEFAULT</span> GETDATE(),</span><br><span class="line">[id_random_data] [<span class="type">int</span>] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[done] [<span class="type">int</span>] <span class="keyword">DEFAULT</span> <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.temp_random_data <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_temp_random_data_id <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"><span class="keyword">END</span>  </span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">PRINT <span class="string">&#x27;ALREADY EXISTS temp_random_data&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.temp_random_data</span><br><span class="line">(id_random_data, done)</span><br><span class="line"><span class="keyword">SELECT</span> id, <span class="number">0</span> <span class="keyword">as</span> done</span><br><span class="line"><span class="keyword">FROM</span> random_data (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> some_bit <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">-1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@batch</span>_size <span class="type">INT</span> <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@rows</span>_to_update <span class="type">INT</span> <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> dbo.temp_random_data <span class="keyword">WITH</span> (NOLOCK))</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@number</span>_of_batches <span class="type">INT</span> <span class="operator">=</span> (<span class="variable">@rows</span>_to_update <span class="operator">/</span> <span class="variable">@batch</span>_size) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@current</span>_batch <span class="type">INT</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@message</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@rows</span>_exist <span class="type">INT</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #temp_batch;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #temp_batch( id_random_data <span class="type">INT</span> );</span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@rows</span>_exist <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">BEGIN</span>   </span><br><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> #temp_batch</span><br><span class="line"><span class="keyword">SELECT</span> TOP (<span class="variable">@batch</span>_size) id_random_data</span><br><span class="line"><span class="keyword">FROM</span> dbo.temp_random_data (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> done <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id_random_data <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- This is the prod table</span></span><br><span class="line">UPDATE random_data <span class="keyword">WITH</span> (ROWLOCK)</span><br><span class="line"><span class="keyword">SET</span> some_bit <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">FROM</span> random_data <span class="keyword">AS</span> rd</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> #temp_batch</span><br><span class="line"><span class="keyword">ON</span> rd.id <span class="operator">=</span> #temp_batch.id_random_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- This temp_ table can be deleted once done and you are happy with the change</span></span><br><span class="line">UPDATE dbo.temp_random_data</span><br><span class="line"><span class="keyword">SET</span> done <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> dbo.temp_random_data <span class="keyword">AS</span> trd</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> #temp_batch</span><br><span class="line"><span class="keyword">ON</span> trd.id_random_data <span class="operator">=</span> #temp_batch.id_random_data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> #temp_batch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@message</span> <span class="operator">=</span> <span class="string">&#x27;Finished batch &#x27;</span> <span class="operator">+</span> <span class="built_in">CAST</span>(<span class="variable">@current</span>_batch <span class="keyword">AS</span> <span class="type">VARCHAR</span>) <span class="operator">+</span> <span class="string">&#x27; of &#x27;</span> <span class="operator">+</span> <span class="built_in">CAST</span>(<span class="variable">@number</span>_of_batches <span class="keyword">AS</span> <span class="type">VARCHAR</span>) <span class="operator">+</span> <span class="string">&#x27;. &#x27;</span> <span class="operator">+</span> <span class="built_in">CAST</span>(<span class="built_in">CAST</span>(GETDATE() <span class="keyword">AS</span> SMALLDATETIME) <span class="keyword">AS</span> <span class="type">VARCHAR</span>)</span><br><span class="line">RAISERROR(<span class="variable">@message</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@current</span>_batch <span class="operator">=</span> <span class="variable">@current</span>_batch <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">PRINT ERROR_MESSAGE();</span><br><span class="line">BREAK;</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="number">1</span> <span class="keyword">FROM</span> dbo.temp_random_data <span class="keyword">WHERE</span> done <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">SET</span> <span class="variable">@rows</span>_exist <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #temp_batch;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Resources</title>
      <link href="2019/12/pi-resources/"/>
      <url>2019/12/pi-resources/</url>
      
        <content type="html"><![CDATA[<h3 id="File-Manager"><a href="#File-Manager" class="headerlink" title="File Manager"></a>File Manager</h3><p>Re-install file manager when it crashes on start.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall pcmanfm</span><br></pre></td></tr></table></figure><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><p><em>GPIO</em> (general-purpose input/output) values can be seen by running <code>pinout</code>, if you hold the pi vertically with the usb ports facing down the <code>5V</code> pins are on the top left.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import RPi.GPIO as GPIO</span><br><span class="line"></span><br><span class="line"># for GPIO numbering, choose BCM  </span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"></span><br><span class="line"># or, for pin numbering, choose BOARD  </span><br><span class="line">GPIO.setmode(GPIO.BOARD)  </span><br><span class="line"></span><br><span class="line"># but you can&#39;t have both, so only use one</span><br></pre></td></tr></table></figure><p><img src="/d/pi-resources/pinout.jpg" alt="GPIO"></p><ul><li><a href="https://www.raspberrypi.org/documentation/usage/gpio/python/README.md">https://www.raspberrypi.org/documentation/usage/gpio/python/README.md</a></li><li><a href="https://www.raspberrypi.org/documentation/usage/gpio/">https://www.raspberrypi.org/documentation/usage/gpio/</a></li><li><a href="https://raspi.tv/2013/rpi-gpio-basics-4-setting-up-rpi-gpio-numbering-systems-and-inputs">https://raspi.tv/2013/rpi-gpio-basics-4-setting-up-rpi-gpio-numbering-systems-and-inputs</a></li></ul><h3 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h3><ul><li><a href="https://www.hanselman.com/blog/BuildingRunningAndTestingNETCoreAndASPNETCore21InDockerOnARaspberryPiARM32.aspx">https://www.hanselman.com/blog/BuildingRunningAndTestingNETCoreAndASPNETCore21InDockerOnARaspberryPiARM32.aspx</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.makeuseof.com/tag/different-uses-raspberry-pi/">https://www.makeuseof.com/tag/different-uses-raspberry-pi/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Magic And Tips</title>
      <link href="2019/12/sql-magic-and-tips/"/>
      <url>2019/12/sql-magic-and-tips/</url>
      
        <content type="html"><![CDATA[<p>SQL Magic and tips that are too small to warrant their own pages (read Carl doesn’t know enough about them) but are still pretty sweet and worth noting how to do!</p><h3 id="Temporary-Tables-And-Variables"><a href="#Temporary-Tables-And-Variables" class="headerlink" title="Temporary Tables And Variables"></a>Temporary Tables And Variables</h3><p>Instantiated in <code>tempdb</code></p><ul><li>[<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table%20variables.sql]">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table%20variables.sql]</a>(<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table</a> variables.sql)</li><li>[<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary%20tables.sql]">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary%20tables.sql]</a>(<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary</a> tables.sql)</li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/create-table-transact-sql?redirectedfrom=MSDN&view=sql-server-ver15#temporary-tables">Temporary Tables</a></li></ul><blockquote><p>You can create local and global temporary tables. Local temporary tables are visible only in the current session, and global temporary tables are visible to all sessions.</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Temporary table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #carl_log</span><br><span class="line">(</span><br><span class="line">c1 <span class="type">Varchar</span>(<span class="number">50</span>), </span><br><span class="line">c2 <span class="type">Varchar</span>(<span class="number">50</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Table Variables</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@carl</span>_log <span class="keyword">table</span> </span><br><span class="line">( </span><br><span class="line">c1 <span class="type">Varchar</span>(<span class="number">50</span>), </span><br><span class="line">c2 <span class="type">Varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.mssqltips.com/sqlservertip/1556/differences-between-sql-server-temporary-tables-and-table-variables/">https://www.mssqltips.com/sqlservertip/1556/differences-between-sql-server-temporary-tables-and-table-variables/</a></li></ul><p>A Pro Tip!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF(OBJECT_ID(<span class="string">&#x27;[tempdb].[dbo].[#settings]&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [tempdb].[dbo].[#settings];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- can be replaced by</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #settings</span><br></pre></td></tr></table></figure><h3 id="DateAdd-amp-Current-Date-Stamps"><a href="#DateAdd-amp-Current-Date-Stamps" class="headerlink" title="DateAdd &amp; Current Date Stamps"></a>DateAdd &amp; Current Date Stamps</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- add using hours</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(hh, <span class="number">24</span> <span class="operator">*</span> <span class="number">1</span> <span class="operator">+</span> <span class="number">11</span>, DATEADD(dd, DATEDIFF(dd, <span class="number">0</span>, GETDATE()), <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">--- add using minutes</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(<span class="keyword">minute</span>, <span class="number">2115</span>, DATEADD(dd, DATEDIFF(dd, <span class="number">0</span>, GETDATE()), <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">SELECT</span> GETUTCDATE()</span><br></pre></td></tr></table></figure><h3 id="Order-By-Random"><a href="#Order-By-Random" class="headerlink" title="Order By Random"></a>Order By Random</h3><p>Select a random record from a large table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> dbo.carl_table (NOLOCK)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> NEWID()</span><br></pre></td></tr></table></figure><h3 id="Waitfor-Delay"><a href="#Waitfor-Delay" class="headerlink" title="Waitfor Delay"></a>Waitfor Delay</h3><p>10 seconds</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WAITFOR DELAY <span class="string">&#x27;00:00:10&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>The constraint will be called <code>CON_some_useful_meaningful_name__my_column</code> and is for the column <code>my_column</code>. The <code>CON_</code> prefix can be denoted as anything useful to your organization, always follow the suggestions of your DBA or the existing naming conventions in the database.</p><p>The constraint below means <code>my_column</code> has to be <code>UNIQUE</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE myInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="number">1</span> <span class="keyword">FROM</span> sys.key_constraints <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;CON_some_useful_meaningful_name__my_column&#x27;</span>)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[my_table] <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> [CON_some_useful_meaningful_name__my_column] <span class="keyword">UNIQUE</span> ([my_column])</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="Print-amp-Convert"><a href="#Print-amp-Convert" class="headerlink" title="Print &amp; Convert"></a>Print &amp; Convert</h3><p>When print things out for the user to see your proc doing something you will need to convert types. TIP! Set <code>SET NOCOUNT ON</code> first so you dont get <code>(n row(s) affected)</code> in your messages!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@SomeUuid</span> UNIQUEIDENTIFIER <span class="operator">=</span> NEWID ();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- HACK HACK HACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Inform the user</span></span><br><span class="line">PRINT(<span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">1000</span>),<span class="variable">@Counter</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">36</span>),<span class="variable">@SomeUuid</span>))</span><br></pre></td></tr></table></figure><h3 id="ROWCOUNT"><a href="#ROWCOUNT" class="headerlink" title="@@ROWCOUNT"></a>@@ROWCOUNT</h3><blockquote><p>Returns the number of rows affected by the last statement. If the number of rows is more than 2 billion, use ROWCOUNT_BIG.</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dbo.foo <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@ROWCOUNT</span></span><br><span class="line"></span><br><span class="line">UPDATE dbo.foo <span class="keyword">SET</span> some_field <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@ROWCOUNT</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/rowcount-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/functions/rowcount-transact-sql?view=sql-server-ver15</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gas Engines</title>
      <link href="2019/12/gas-engines/"/>
      <url>2019/12/gas-engines/</url>
      
        <content type="html"><![CDATA[<h3 id="EVOE-10GX2"><a href="#EVOE-10GX2" class="headerlink" title="EVOE 10GX2"></a>EVOE 10GX2</h3><ul><li>Mixture: 20:1</li><li>Propeller: 10x6 (break-in), 12x6 (normal flight)</li></ul><h4 id="Break-in-Process"><a href="#Break-in-Process" class="headerlink" title="Break-in Process"></a>Break-in Process</h4><p><strong>First tank of fuel</strong>: Set the high-speed needle valve at 2.5 turns out and use the suggested break-in prop. Run the engine on the ground for its first tank of fuel and DO NOT go above half throttle. Cycle the throttle between idle and half throttle every minute.</p><p><strong>Second tank of fuel</strong>: Tune the needle valve to be slightly rich of the peak RPM at full throttle without a drop in RPM. Do not run at full throttle on the ground for more than 30 seconds at a time. Tune the low speed needle valve for a smooth transition from idle to mid-range, go back to full throttle to confirm the main needle valve setting and then fly. During this flight, be sure to be conscientious of extended periods of heating the engine. Be sure to mix-in some cool-down dives and lower-throttle flying.</p><p><strong>Third tank of fuel</strong>: Fly the engine at high throttle while performing the recommended figure eight maneuvers. This will help the piston ring and cylinder liner to expand and contract; helping the breaking-in process. Tune the needle valve to be slightly rich of the peak RPM as necessary.</p><p><strong>Fourth tank of fuel</strong>: Select one of the recommended propellers for normal operation and mount it on your engine. Tune the main needle valve to be slightly rich of<br>the peak RPM and the low speed needle valve for a smooth transition from idle to full throttle and continue to break-in the engine in flight. </p><p>Do not worry about an engine setting being slightly rich during this process. When set correctly, the engine will occasionally sound as if it is misfiring (which it is). During the climbing maneuvers this should go away and might return during the diving maneuvers. If it does not go away during the climbs, land the airplane and lean the high-speed needle by 1–2 clicks, then take off and fly again. Enjoy the break-in process—you are doing a lot of flying.</p><ul><li><a href="/d/gas-engines/evoe10gx2-manual-en.pdf">EVOE10GX2-Manual-EN.pdf</a></li></ul><h3 id="EVOE-33GX"><a href="#EVOE-33GX" class="headerlink" title="EVOE 33GX"></a>EVOE 33GX</h3><p><a href="/d/gas-engines/evoe33gx-manual-en.pdf">EVOE33GX-Manual_EN.pdf</a></p><h3 id="DLE-30"><a href="#DLE-30" class="headerlink" title="DLE 30"></a>DLE 30</h3><ul><li>Mixture: 30:1</li><li>Propeller: 18×8, 18×10, 19×8, 20×8</li></ul><h3 id="Mixtures-amp-Oils"><a href="#Mixtures-amp-Oils" class="headerlink" title="Mixtures &amp; Oils"></a>Mixtures &amp; Oils</h3><p>100% synthetic oils that work pretty well are Putoline, Stihl and <del>Motul 800</del>. Generally the oils used on racing 2 stoke go-carts are good.</p><ul><li>Smaller Engines: 20:1</li><li>Larger Engines: 40:1</li></ul><table><thead><tr><th></th><th>20:1</th><th>40:1</th></tr></thead><tbody><tr><td>1L</td><td>50ml</td><td>25ml</td></tr><tr><td>2L</td><td>100ml</td><td>50ml</td></tr><tr><td>3L</td><td>150ml</td><td>75ml</td></tr><tr><td>4L</td><td>200ml</td><td>100ml</td></tr><tr><td>5L</td><td>250ml</td><td>125ml</td></tr><tr><td>6L</td><td>300ml</td><td>150ml</td></tr><tr><td>7L</td><td>350ml</td><td>175ml</td></tr><tr><td>8L</td><td>400ml</td><td>200ml</td></tr><tr><td>9L</td><td>450ml</td><td>225ml</td></tr><tr><td>10L</td><td>500ml</td><td>250ml</td></tr></tbody></table><iframe width="560" height="315" src="https://www.youtube.com/embed/qIPbVAaOcJg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://www.lightningkarts.com.au/index.php?select=51">Oil Mix Chart</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NgRx Selectors</title>
      <link href="2019/11/ngrx%20selectors/"/>
      <url>2019/11/ngrx%20selectors/</url>
      
        <content type="html"><![CDATA[<p>Selectors are pure functions used for obtaining slices of store state.</p><h3 id="Selector-by-route"><a href="#Selector-by-route" class="headerlink" title="Selector by route"></a>Selector by route</h3><p>This will select based on route data, example: <code>/invoice/123</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--- foo.facade.ts</span><br><span class="line">public createInvoice (invoice: IInvoice): Observable&lt;IStoreItem&lt;IInvoice&gt;&gt; &#123;</span><br><span class="line">    this._store.dispatch(new CreateInvoiceAction(invoice));</span><br><span class="line">    return this._store.select(InvoiceSelectors.currentInvoice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public getInvoice (): Observable&lt;IStoreItem&lt;IInvoice&gt;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; need to dispatch GetInvoiceAction ??, could pass in a string token??</span><br><span class="line">    return this._store.select(InvoiceSelectors.byRoute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- foo.selectors.ts</span><br><span class="line">export const byRoute &#x3D; createSelector(</span><br><span class="line">RouterSelectors.currentParams,</span><br><span class="line">(params: Params): string &#x3D;&gt; &#123;</span><br><span class="line">return params.id;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export const currentInvoice &#x3D; createSelector(</span><br><span class="line">  selectFeature,</span><br><span class="line">  (state: FeatureState) &#x3D;&gt; state.counter</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>IStoreItem</code> is just a way to wrap the response and universally (thought-out your application) check if the store slice ready.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export interface IStoreItem&lt;T&gt; &#123;</span><br><span class="line">    isLoading: boolean;</span><br><span class="line">    item?: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> <a href="https://ngrx.io/guide/store/selectors">https://ngrx.io/guide/store/selectors</a> </li></ul><h3 id="Using-selectors-with-props"><a href="#Using-selectors-with-props" class="headerlink" title="Using selectors with props"></a>Using selectors with props</h3><p> To select a piece of state based on data that isn’t available in the store you can pass <code>props</code> to the selector function. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- foo.facade.ts</span><br><span class="line">public getCurrentInvoice (): Observable&lt;IStoreItem&lt;IInvoice&gt;&gt; &#123;</span><br><span class="line">  return this._store.pipe(select(fromRoot.getCount, &#123; multiply: 2 &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- foo.selectors.ts</span><br><span class="line">--- here &#96;counter&#96; is the response from &#96;getCounterValue&#96; and &#96;props&#96; came from the call to &#96;getCount&#96; above. NgRx is wierd :D</span><br><span class="line"></span><br><span class="line">export const getCount &#x3D; createSelector(</span><br><span class="line">  getCounterValue,</span><br><span class="line">  (counter, props) &#x3D;&gt; counter * props.multiply</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><a href="https://ngrx.io/guide/store/selectors#using-selectors-with-props">https://ngrx.io/guide/store/selectors#using-selectors-with-props</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NgRx Operators</title>
      <link href="2019/11/ngrx-operators/"/>
      <url>2019/11/ngrx-operators/</url>
      
        <content type="html"><![CDATA[<p>In the <code>.pipe(</code> you can call any of these operators</p><h3 id="ofType"><a href="#ofType" class="headerlink" title="ofType"></a>ofType</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Effect</span>()</span><br><span class="line"><span class="keyword">public</span> updateSomthingOnSomeEventEffect$ = <span class="built_in">this</span>._actions$.pipe(</span><br><span class="line">    ofType&lt;MyAction&gt;(SuccessAction.TYPE),</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ngrx.io/guide/effects/operators">https://ngrx.io/guide/effects/operators</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJS Operators</title>
      <link href="2019/11/rxjs-operators/"/>
      <url>2019/11/rxjs-operators/</url>
      
        <content type="html"><![CDATA[<p>In the <code>.pipe(</code> you can call any of these operators, most of the comments below are right out of the source <a href="https://github.com/ReactiveX/rxjs">code docs</a>. Also see <a href="http://reactivex.io/documentation/operators.html">reactivex.io/documentation/operators</a> and <a href="https://rxjs.dev/guide/operators">rxjs.dev/guide/operators</a>.</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>Filter items emitted by the source Observable by only emitting those that satisfy a specified predicate.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter to check the something comes back and properties are set</span></span><br><span class="line">filter(<span class="function"><span class="params">storeItem</span> =&gt;</span> storeItem &amp;&amp; !!storeItem.item),</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter on a bool</span></span><br><span class="line">filter(<span class="function"><span class="params">a</span> =&gt;</span> a.isLoading === <span class="literal">false</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter that SOMETHING came back</span></span><br><span class="line">filter(<span class="built_in">Boolean</span>),</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.learnrxjs.io/learn-rxjs/operators/filtering/filter">https://www.learnrxjs.io/learn-rxjs/operators/filtering/filter</a></li><li><a href="https://www.concretepage.com/angular/angular-rxjs-filter">https://www.concretepage.com/angular/angular-rxjs-filter</a></li></ul><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>Perform a side effect for every emission on the source Observable, but return an Observable that is identical to the source.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quick tap to display whats coming back</span></span><br><span class="line">tap(<span class="function"><span class="params">a</span> =&gt;</span> <span class="built_in">console</span>.log(a)),</span><br><span class="line">    </span><br><span class="line"><span class="comment">// if its an object</span></span><br><span class="line">tap(<span class="function"><span class="params">a</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(a))),</span><br></pre></td></tr></table></figure><h3 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h3><p>Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only fire down to the `subscribe` when `item.listingId` changes</span></span><br><span class="line">distinctUntilChanged(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev.item.listingId === curr.item.listingId)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example</span></span><br><span class="line"><span class="built_in">this</span>._fooFacade.getCurrentListing().pipe(</span><br><span class="line">takeUntil(<span class="built_in">this</span>._destroyed$),</span><br><span class="line">filter(<span class="function"><span class="params">storeItem</span> =&gt;</span> storeItem &amp;&amp; !!storeItem.item),</span><br><span class="line">distinctUntilChanged(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev.item.listingId === curr.item.listingId)</span><br><span class="line">).subscribe(<span class="function"><span class="params">storeItem</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do something, this was usewful when resetting state</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Applies a given <code>project</code> function to each value emitted by the source Observable, and emits the resulting values as an Observable.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// here only `item` is emmited as an observable</span></span><br><span class="line">map(<span class="function"><span class="params">foo</span> =&gt;</span> foo.item),</span><br><span class="line"></span><br><span class="line"><span class="comment">// here we emit the object `&#123; fooProp: params.fooProp &#125;` as an observable      </span></span><br><span class="line"><span class="built_in">this</span>.fooParam$ = <span class="built_in">this</span>.route.queryParams.pipe(</span><br><span class="line">map(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">fooProp</span>: params.fooProp &#125;;</span><br><span class="line">    &#125;));    </span><br></pre></td></tr></table></figure><h3 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first emit will be an empty array []</span></span><br><span class="line">startWith([])</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://reactivex.io/documentation/operators.html">http://reactivex.io/documentation/operators.html</a></li><li><a href="https://rxjs-dev.firebaseapp.com/guide/operators">https://rxjs-dev.firebaseapp.com/guide/operators</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Section</title>
      <link href="2019/11/mvc-section/"/>
      <url>2019/11/mvc-section/</url>
      
        <content type="html"><![CDATA[<p>MVC Sections allow you to manipulate where in the DOM things appear, this is helpful for scripts that require libraries to be available.</p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>In the <code>Index.cshtml</code> file the script below requires that jQuery is loaded.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@section ScriptsGameController &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;ready!&quot;</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This section can then be displayed in the <code>_Layout.cshtml</code> file</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/js/site.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    @RenderSection(&quot;Scripts&quot;, required: false)</span><br><span class="line">    @RenderSection(&quot;ScriptsGameController&quot;, required: false)</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest</title>
      <link href="2019/11/jest/"/>
      <url>2019/11/jest/</url>
      
        <content type="html"><![CDATA[<p>Jest is a javaScript testing framework.</p><h3 id="Of"><a href="#Of" class="headerlink" title="Of"></a>Of</h3><p>Converts the arguments to an observable sequence.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someSequence = &#123; <span class="attr">item</span>: &#123;&#125;, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;</span><br><span class="line"><span class="keyword">const</span> someObservableSequence$ = <span class="keyword">of</span>(someSequence)</span><br></pre></td></tr></table></figure><h3 id="TestBed-with-mockReturnValue"><a href="#TestBed-with-mockReturnValue" class="headerlink" title="TestBed with mockReturnValue"></a>TestBed with mockReturnValue</h3><p>This can be called inside the tests body to mock out the function <code>getFeatures</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestBed.get(SomeFacade).getFeatures &#x3D; jest.fn().mockReturnValue(of());</span><br></pre></td></tr></table></figure><h3 id="Data-driven"><a href="#Data-driven" class="headerlink" title="Data driven"></a>Data driven</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">--- <span class="keyword">with</span> toBeObservable</span><br><span class="line">describe(<span class="string">&#x27;[childComponentEnabled$]&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">abName</span>: <span class="literal">true</span>, <span class="attr">expected</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">abName</span>: <span class="literal">false</span>, <span class="attr">expected</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ].forEach(<span class="function">(<span class="params">&#123; abName, expected &#125;</span>) =&gt;</span></span><br><span class="line">        it(<span class="string">`should <span class="subst">$&#123;expected ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;not&#x27;</span>&#125;</span> use &#x27;child-component-to-maybe-show&#x27; if abName feature is <span class="subst">$&#123;abName&#125;</span>`</span>, marbles(<span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// Arrange</span></span><br><span class="line">            <span class="keyword">const</span> fixture = TestBed.createComponent(ParentComponent);</span><br><span class="line">            <span class="keyword">const</span> testComponent = fixture.componentInstance;</span><br><span class="line">            <span class="keyword">const</span> abFeature = &lt;IAbFeature&gt; &#123;</span><br><span class="line">                name: <span class="string">&#x27;abName&#x27;</span>,</span><br><span class="line">                value: abName.toString(),</span><br><span class="line">                winningVariantName: <span class="string">&#x27;OnVariant&#x27;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            TestBed.get(AbFrameworkFacade).getByName = <span class="function">() =&gt;</span> <span class="keyword">of</span>(abFeature);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Act</span></span><br><span class="line">            fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Assert</span></span><br><span class="line">            m.expect(testComponent.childComponentEnabled$).toBeObservable(<span class="string">&#x27;(a|)&#x27;</span>, &#123;</span><br><span class="line">                a: expected</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;))</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--- passing the array elements by <span class="built_in">object</span> <span class="string">`testcase`</span></span><br><span class="line">describe(<span class="string">`getSomeMethod`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            someObject: &#123;&#125;,</span><br><span class="line">            someBool: <span class="literal">true</span>,</span><br><span class="line">            someString: <span class="string">&#x27;hoe&#x27;</span>,</span><br><span class="line">            someEnum: SomeEnum.hoe,</span><br><span class="line">            expected: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            someObject: &#123;&#125;,</span><br><span class="line">            someBool: <span class="literal">true</span>,</span><br><span class="line">            someString: <span class="string">&#x27;bazz&#x27;</span>,</span><br><span class="line">            someEnum: SomeEnum.foo,</span><br><span class="line">            expected: <span class="string">&#x27;foo bar&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ].forEach(<span class="function"><span class="params">testcase</span> =&gt;</span> &#123;</span><br><span class="line">        it(<span class="string">`does some sweet thing,</span></span><br><span class="line"><span class="string">        testcase <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(testcase)&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do all the things and set `actual`</span></span><br><span class="line"><span class="keyword">const</span> actual = <span class="string">&#x27;wat&#x27;</span>;</span><br><span class="line">            expect(actual).toBe(testcase.expected);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="toHaveBeenCalledTimes"><a href="#toHaveBeenCalledTimes" class="headerlink" title="toHaveBeenCalledTimes"></a>toHaveBeenCalledTimes</h3><p>Much like <code>.Verify</code> in <a href="/2018/12/unit-testing-with-nunit/">nunit to assert a method was called</a>. Here the <code>fakeAsync</code> and <code>tick</code> are mocking the passage of time, could be to allow subscriptions ect.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;UnitOfWork&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;Reason this unit of work should have been called&#x27;</span>, fakeAsync(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">const</span> spy = TestBed.get(SomeService).methodWeAreCheckingWasCalled = jest.fn();</span><br><span class="line"></span><br><span class="line">        TestBed.get&lt;ISomeFacade&gt;(SomeOtherService).getSomeMethod = jest.fn().mockReturnValue(<span class="keyword">of</span>(&#123;</span><br><span class="line">            item: &#123;&#125;, <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        TestBed.get(SomeServiceWithoutAnInterface).getSomeMethod2 = jest.fn().mockReturnValue(<span class="keyword">of</span>(&#123;</span><br><span class="line">            item: &#123;&#125;, <span class="attr">isLoading</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        classUnderTest.ngOnInit();</span><br><span class="line">        tick();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        expect(spy).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="TBA"><a href="#TBA" class="headerlink" title="TBA"></a>TBA</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toHaveBeenCalledWith</span><br><span class="line"></span><br><span class="line">toBeInstanceOf</span><br><span class="line"></span><br><span class="line">toBe</span><br><span class="line"></span><br><span class="line">toMatchSnapshot</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://jestjs.io/">https://jestjs.io/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Passwordless SSH Access</title>
      <link href="2019/10/passwordless-ssh-access/"/>
      <url>2019/10/passwordless-ssh-access/</url>
      
        <content type="html"><![CDATA[<p>While setting up my <a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a> I needed passwordless SSH access between the master and worker nodes. There are a few ways to do this which I detail below.</p><h3 id="Check-if-the-SSH-key-exists"><a href="#Check-if-the-SSH-key-exists" class="headerlink" title="Check if the SSH key exists"></a>Check if the SSH key exists</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="Keychain"><a href="#Keychain" class="headerlink" title="Keychain"></a>Keychain</h3><p>The <code>Keychain</code> steps below allow for passwordless SSH access from <code>node1</code> to <code>node3</code>.</p><p><a href="https://linux.die.net/man/1/keychain">Keychain</a> is a manager for ssh-agent.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install keychain</span><br></pre></td></tr></table></figure><h4 id="Setup-Common-User"><a href="#Setup-Common-User" class="headerlink" title="Setup Common User"></a>Setup Common User</h4><p>The steps below are based on the work by <a href="https://www.udemy.com/course/build-your-own-super-computer-with-raspberry-pi">Ben Heidorn - udemy.com</a></p><p>A common user is needed on each node to allow the nodes to authenticate and execute the MPI commands. I used the username <code>mpiuser</code>. By default the PI’s install with the user <code>PI</code> and password <code>raspberry</code>.</p><p><strong>node1</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -u 2345 mpiuser</span><br></pre></td></tr></table></figure><p><code>-m</code> creates the home directory, <code>-u</code> is the user id, I think you can use any user id as long as they are same on all nodes.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd mpiuser            ~ raspberry for both prompts, secure I know!</span><br></pre></td></tr></table></figure><p>Now login as user <code>mpiuser</code> to test it works</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - mpiuser                   ~ switch to the mpiuser user</span><br><span class="line">exit                           ~ exit that user session and go back to the &#96;pi&#96; user</span><br></pre></td></tr></table></figure><p>Repeat the same for <strong>node3</strong>, this can be done over SSH using the PI user. You can connect using <code>ssh pi@node3</code>. When done run <code>exit</code> to fall back to <strong>node1</strong>.</p><h4 id="Setup-Generate-SSH-Keys"><a href="#Setup-Generate-SSH-Keys" class="headerlink" title="Setup Generate SSH Keys"></a>Setup Generate SSH Keys</h4><p>Allow each node to authenticate using SSH (Secure Shell) using public &amp; private keys.</p><p><strong>node1</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - mpiuser</span><br><span class="line">ssh-keygen -t rsa              ~ same to the default location &#96;&#x2F;home&#x2F;mpiuser&#x2F;.ssh&#x2F;id_rsa&#96;</span><br><span class="line">                               ~ passphrase &#96;raspberry&#96; - secure right? :D</span><br></pre></td></tr></table></figure><p><code>-t rsa</code> is the encription type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id mpiuser@node3     ~ copys the ssh key to node3 (this would need to be done for nodes2&#x2F;4)</span><br><span class="line">ssh node3                     ~ should now ask for the passphrase</span><br><span class="line">exit                          ~ go back to node1</span><br></pre></td></tr></table></figure><p>To allow the user to login without a password/passphrase. This is done on the Node1 (master)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .bashrc</span><br></pre></td></tr></table></figure><p>At the bottom of the file add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># keychain magic</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;keychain $HOME&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">source $HOME&#x2F;.keychain&#x2F;$HOSTNAME-sh</span><br></pre></td></tr></table></figure><p>After saving the file recompile it by running</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><p>Now you should be able to run <code>ssh node3</code> and not be asked for a password. </p><h3 id="No-passphrase"><a href="#No-passphrase" class="headerlink" title="No passphrase"></a>No passphrase</h3><p><strong>node1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa                             ~ default location &#96;&#x2F;home&#x2F;pi&#x2F;.ssh&#x2F;id_rsa&#96;</span><br><span class="line">                                              ~ blank password</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub pi@node3</span><br><span class="line">ssh pi@node3</span><br></pre></td></tr></table></figure><p><strong>node3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub pi@node1</span><br><span class="line">ssh pi@node1</span><br></pre></td></tr></table></figure><p>This will copy the keys to</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://collabnix.com/how-to-create-password-less-ssh-for-linux/">https://collabnix.com/how-to-create-password-less-ssh-for-linux/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster Setup OS</title>
      <link href="2019/10/raspberry-pi-cluster-setup-os/"/>
      <url>2019/10/raspberry-pi-cluster-setup-os/</url>
      
        <content type="html"><![CDATA[<p>Updated: <em>29/09/2020</em></p><p>I tried to keep the Operating System (OS) setup separate from the <a href="/tags/raspberry-pi/">Pi Posts</a> else they would be duplicated.</p><h3 id="Distributions"><a href="#Distributions" class="headerlink" title="Distributions"></a>Distributions</h3><p>There are a few distributions that work on the Pi, the most common is Raspberry Pi OS (previously called Raspbian). A lot of configuration options still use the terminology <code>raspbian</code>.</p><p>For clusters I mostly use <code>Raspberry Pi OS (32-bit) Lite</code> which is a minimal image based on <code>Debian Buster</code>, its then mannaged though <a href="/tags/ssh/">SSH</a>.</p><p>I have used <code>Raspberry Pi OS (32-bit) with desktop</code> and <code>retropie</code> just to have a hoon.</p><ul><li><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">2020-08-20-raspios-buster-armhf-lite</a></li><li><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">Raspios: 2020-08-20-raspios-buster-armhf-full</a></li><li><a href="/2019/10/retropie/">Retropie: retropie-buster-4.6-rpi4</a></li></ul><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><p>As I only have two <a href="https://www.pbtech.co.nz/product/SEVRBP0206/Raspberry-Pi-4-Model-B-4GB-LPDDR4-FIRST-28nm-Based">Raspberry Pi 4 Model B’s</a> I set them up as:</p><ul><li><code>node1</code> (master node)</li><li><code>node3</code> (worker node)</li></ul><h3 id="OS-Steps-For-Cluster"><a href="#OS-Steps-For-Cluster" class="headerlink" title="OS Steps (For Cluster)"></a>OS Steps (For Cluster)</h3><ol><li>Download <code>Raspberry Pi OS (32-bit) Lite</code> - <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">2020-08-20-raspios-buster-armhf-lite</a>.</li><li>Install on SD cards with <a href="https://www.balena.io/etcher/">Etcher</a> or any flashing utility.</li><li>Pop in the SD Cards and boot the Pi, allow disk expand and wait for the OS to figure out its life.</li><li>Once at the terminal login as user <code>pi</code> and password <code>raspberry</code>. Probably best to update your passwords, meh.</li><li>Run <code>sudo raspi-config</code> </li></ol><ul><li>Config country (4. Localisation Options)</li><li>Rename the Pi’s (2. Network Options)</li><li>Setup Wifi (2. Network Options) </li><li>SSH (5. Interfacing Options). Then finally reboot.</li></ul><ol start="6"><li>Install additional software, you dont actually need git unless you plan to pull down <a href="https://github.com/carlpaton/nginx-pi-demo">nginx-pi-demo</a> and build it yourself.</li></ol><p>The other software is just common things I install and use in other posts.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git nmap python-mpi4py keychain ansible</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster</title>
      <link href="2019/10/raspberry-pi-cluster/"/>
      <url>2019/10/raspberry-pi-cluster/</url>
      
        <content type="html"><![CDATA[<p>I was inspired by a Technology blogger <a href="https://www.youtube.com/channel/UCRjSO-juFtngAeJGJRMdIZw">Gary Sims</a> to build my own (small) super computer using Raspberry Pi’s and a message passing interface library. Following his <code>Prime Numbers</code> example the key concepts are:</p><p><strong>MPI library</strong> - Message passing interface, this is a standard way of sending blocks of data into a cluster from one node to another. For the examples below I used <a href="https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php">mpiexec</a> which is free and <a href="https://github.com/open-mpi/ompi">open source</a>.</p><p><strong>Scatter</strong> - the MPI program will see each core in your cluster as something it can ask to do work. It will scatter the numbers accross the nodes to check if they are prime.</p><p><strong>Gather</strong> - the MPI program will then gather the results. This is done on the master node that you started the command from.</p><p><img src="/d/raspberry-pi-cluster/raspberry-pi-cluster.jpg" alt="Raspberry Pi Cluster"></p><p>In this video Gary explains what a <code>Raspberry Pi Supercomputer Cluster</code> is and the key concepts of the message passing interface.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VzcarXuVUvU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Setup-Hardware-OS"><a href="#Setup-Hardware-OS" class="headerlink" title="Setup Hardware / OS"></a>Setup Hardware / OS</h3><p>Follow the <a href="/2019/10/raspberry-pi-cluster-setup-os/">OS Steps (For Cluster)</a>, then call them</p><ul><li><code>node1</code></li><li><code>node2</code></li></ul><p>The distro come with most applications already installed, some of the applications I used were <code>git</code>, <code>nano</code> and <code>ssh</code>. Additional installs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git python-mpi4py keychain ansible</span><br></pre></td></tr></table></figure><h3 id="Setup-Passwordless-SSH-Access"><a href="#Setup-Passwordless-SSH-Access" class="headerlink" title="Setup Passwordless SSH Access"></a>Setup Passwordless SSH Access</h3><p>See the <code>Keychain</code> section on this <a href="/2019/10/passwordless-ssh-access/">passwordless SSH access</a> post.</p><h3 id="Hostfile"><a href="#Hostfile" class="headerlink" title="Hostfile"></a>Hostfile</h3><p>When running <code>mpiexec python python_script.py</code> it can be run with the switch <code>-hostfile HOSTFILENAME</code>, so the full command is then <code>mpiexec -hostfile hostfile python python_script.py</code></p><p>The content of the hostfile is either the DNS name or IP address of all the nodes in the cluster.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node3</span><br></pre></td></tr></table></figure><h3 id="Work-Load"><a href="#Work-Load" class="headerlink" title="Work Load"></a>Work Load</h3><p>The PI’s need some problems to solve! Clone <a href="https://github.com/carlpaton/python-hoon">https://github.com/carlpaton/python-hoon</a> to the same dir on both PI’s. Its important that the directorys are the same as the MASTER node (using MPI) will look in these directorys for the script to run.</p><h4 id="Check-mpi4py"><a href="#Check-mpi4py" class="headerlink" title="Check mpi4py"></a>Check mpi4py</h4><blockquote><p>The script prints hostnames and ranks (process id in MPI) from each MPI process in a sequential manner.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd python-hoon&#x2F;mpiexec</span><br><span class="line">time mpiexec python check_mpi4py.py</span><br><span class="line">time mpiexec -np 4 -hostfile hostfile python check_mpi4py.py          ~ limit to 4 cores</span><br></pre></td></tr></table></figure><p>This script was copied from <a href="https://chainermn.readthedocs.io/en/v1.0.0b2_a/installation/troubleshooting.html">chainermn.readthedocs.io</a></p><h4 id="Prime-Numbers"><a href="#Prime-Numbers" class="headerlink" title="Prime Numbers"></a>Prime Numbers</h4><p>Use parallel computing to find prime numbers in the range <code>0</code> to <code>10000</code>. This is a Python 2 script cloned from <a href="https://github.com/garyexplains/examples">github.com/garyexplains</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd python-hoon&#x2F;mpiexec</span><br><span class="line">time mpiexec -hostfile hostfile python primenumbers27.py              ~ no core limit, use all nodes in &#96;hostfile&#96;</span><br></pre></td></tr></table></figure><p>The results below show the time taken to complete the script <code>primenumbers27.py</code> using 8 cores, 4 cores and finally just 1 core. The results should probably be averaged out or something but running just once like the below clearly shows speed improvements. Using Wifi and the speed of my SD cards would also come into play.</p><p><img src="/d/raspberry-pi-cluster/primenumbers27-8-cores.jpg" alt="8 Core 6.42s"></p><p><img src="/d/raspberry-pi-cluster/primenumbers27-4-cores.jpg" alt="4 Core 8.02s"></p><p><img src="/d/raspberry-pi-cluster/primenumbers27-1-core.jpg" alt="1 Core 28.06s"></p><p><strong>What Are Prime Numbers?</strong></p><ul><li>Greater than 1</li><li>Whole number with exactly two factors, itself and 1.</li></ul><p>Some examples of prime numbers: 2,3,5,7,11,13,17,19</p><p>The number 4 is not a prime number because it can be divided evenly by 4, 2, and 1. The number 5 is a prime number because it cannot be divided evenly by any other numbers except for 5 and 1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">2 &#x2F; 1 &#x3D; 2</span><br><span class="line">2 &#x2F; 2 &#x3D; 1</span><br><span class="line"></span><br><span class="line">3 &#x2F; 1 &#x3D; 3</span><br><span class="line">3 &#x2F; 2 &#x3D; 1.x</span><br><span class="line">3 &#x2F; 3 &#x3D; 1</span><br><span class="line"></span><br><span class="line">4 &#x2F; 1 &#x3D; 4</span><br><span class="line">4 &#x2F; 2 &#x3D; 2</span><br><span class="line">4 &#x2F; 3 &#x3D; 1.x</span><br><span class="line">4 &#x2F; 4 &#x3D; 1</span><br><span class="line"></span><br><span class="line">5 &#x2F; 1 &#x3D; 5</span><br><span class="line">5 &#x2F; 2 &#x3D; 2.x</span><br><span class="line">5 &#x2F; 3 &#x3D; 1.x</span><br><span class="line">5 &#x2F; 4 &#x3D; 1.x</span><br><span class="line">5 &#x2F; 5 &#x3D; 1</span><br><span class="line"></span><br><span class="line">6 &#x2F; 1 &#x3D; 6</span><br><span class="line">6 &#x2F; 2 &#x3D; 3</span><br><span class="line">6 &#x2F; 3 &#x3D; 2</span><br><span class="line">6 &#x2F; 4 &#x3D; 1.x</span><br><span class="line">6 &#x2F; 5 &#x3D; 1.x</span><br><span class="line">6 &#x2F; 6 &#x3D; 1</span><br><span class="line"></span><br><span class="line">7 &#x2F; 1 &#x3D; 7</span><br><span class="line">7 &#x2F; 2 &#x3D; 3.x</span><br><span class="line">7 &#x2F; 3 &#x3D; 2.x</span><br><span class="line">7 &#x2F; 4 &#x3D; 1.x</span><br><span class="line">7 &#x2F; 5 &#x3D; 1.x</span><br><span class="line">7 &#x2F; 6 &#x3D; 1.x</span><br><span class="line">7 &#x2F; 7 &#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/garyexplains/examples">https://github.com/garyexplains/examples</a></li><li><a href="http://www.circuitbasics.com/how-to-write-and-run-a-python-program-on-the-raspberry-pi/">http://www.circuitbasics.com/how-to-write-and-run-a-python-program-on-the-raspberry-pi/</a></li><li><a href="https://www.raspberrypi.org/documentation/usage/python/">https://www.raspberrypi.org/documentation/usage/python/</a></li><li><a href="https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php">https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php</a></li><li><a href="https://chainermn.readthedocs.io/en/v1.0.0b2_a/installation/troubleshooting.html">https://chainermn.readthedocs.io/en/v1.0.0b2_a/installation/troubleshooting.html</a></li></ul><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p><a href="/2020/09/raspberry-pi-cluster-swarm/">This cluster can also be run with Docker in swarm mode.</a></p><ul><li><a href="https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm">https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm</a></li><li><a href="https://www.docker.com/blog/happy-pi-day-docker-raspberry-pi/">https://www.docker.com/blog/happy-pi-day-docker-raspberry-pi/</a></li><li><a href="https://medium.com/@simone.dicicco/building-a-raspberry-pi-cluster-with-docker-8d53ee614479">https://medium.com/@simone.dicicco/building-a-raspberry-pi-cluster-with-docker-8d53ee614479</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> ssh </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retropie</title>
      <link href="2019/10/retropie/"/>
      <url>2019/10/retropie/</url>
      
        <content type="html"><![CDATA[<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h4 id="Pi-V4-Support"><a href="#Pi-V4-Support" class="headerlink" title="Pi V4 Support"></a>Pi V4 Support</h4><ol><li><a href="https://www.balena.io/etcher/">Download and install etcher</a></li><li><a href="https://retropie.org.uk/download/">Download the retropie image</a></li><li>Flash your card with etcher</li></ol><p>After loading up it will expand the disk and your should be able to configure your controller.</p><p>Other steps:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">F4 to exit to console</span><br><span class="line"></span><br><span class="line">sudo raspi-config</span><br><span class="line"></span><br><span class="line">4 Localisation Options -&gt; Change Wifi Country</span><br><span class="line"></span><br><span class="line">5 Interfacing Options -&gt; SSH -&gt; Enable</span><br><span class="line"></span><br><span class="line">2 Network Options -&gt; Wifi -&gt; Set SSID&#x2F;Password</span><br><span class="line"></span><br><span class="line">? Change hostname, I used &#96;node1&#96;</span><br></pre></td></tr></table></figure><ul><li><a href="https://retropie.org.uk/docs/First-Installation/">https://retropie.org.uk/docs/First-Installation/</a></li></ul><h4 id="Pre-Official-Pi-V4-Support"><a href="#Pre-Official-Pi-V4-Support" class="headerlink" title="Pre Official Pi V4 Support"></a>Pre Official Pi V4 Support</h4><p>Raspbian is the operating system running on the PI, Retropie then runs on-top of this to allow emulation of arcade games. This sweet video runs though what you need to do.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/L5Pz60iHtL8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>### Terminal Steps<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;RetroPie&#x2F;RetroPie-Setup</span><br><span class="line"></span><br><span class="line">cd RetroPie-Setup</span><br><span class="line"></span><br><span class="line">sudo nano retropie_packages.sh</span><br><span class="line">Add this line  __platform&#x3D;rpi3</span><br><span class="line"></span><br><span class="line">sudo .&#x2F;retropie_setup.sh</span><br></pre></td></tr></table></figure><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><p>Besides the PI itself you will need either the <code>Nintendo NES classic USB</code> or <code>USB Super Nintendo Game Controllers</code></p><h4 id="XBox-One-Controller"><a href="#XBox-One-Controller" class="headerlink" title="XBox One Controller"></a>XBox One Controller</h4><p>I used <code>select</code> as my hotkey.</p><p>Hotkey combinations are specific to the retroarch/libretro based emulators.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hotkey Combination        Action</span><br><span class="line">Hotkey+Start              Exit</span><br><span class="line">Hotkey+Right Shoulder  Save</span><br><span class="line">Hotkey+Left Shoulder  Load</span><br><span class="line">Hotkey+Right              Input State Slot Increase</span><br><span class="line">Hotkey+Left               Input State Slot Decrease</span><br><span class="line">Hotkey+X                  RGUI Menu</span><br><span class="line">Hotkey+B                  Reset</span><br></pre></td></tr></table></figure><ul><li><a href="https://retropie.org.uk/docs/Controller-Configuration/">https://retropie.org.uk/docs/Controller-Configuration/</a></li></ul><h3 id="All-the-roms"><a href="#All-the-roms" class="headerlink" title="All the roms"></a>All the roms</h3><ul><li> <a href="https://raspberrytips.com/download-retropie-roms/">https://raspberrytips.com/download-retropie-roms/</a> </li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://retropie.org.uk/">https://retropie.org.uk/</a></li><li><a href="https://www.raspberrypi.org/downloads/raspbian/">https://www.raspberrypi.org/downloads/raspbian/</a></li><li><a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></li><li><a href="https://www.lynda.com/Raspberry-Pi-tutorials/Loading-games-your-Raspberry-Pi/521141/580159-4.html">https://www.lynda.com/Raspberry-Pi-tutorials/Loading-games-your-Raspberry-Pi/521141/580159-4.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Imac 2019</title>
      <link href="2019/09/imac-2019/"/>
      <url>2019/09/imac-2019/</url>
      
        <content type="html"><![CDATA[<p>International Miniature Aerobatic Club</p><h3 id="Known-Basic-2019"><a href="#Known-Basic-2019" class="headerlink" title="Known Basic 2019"></a>Known Basic 2019</h3><table><thead><tr><th>No.</th><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td><img src="/d/imac-2019/1.JPG" alt="2.4.1.1"></td><td>360 degree turn</td></tr><tr><td>2</td><td>8.4.1.1; 9.1.5.2</td><td>Humpty bump, 1/2 roll on vertical down line</td></tr><tr><td>3</td><td>8.5.2.1; 9.1.2.2</td><td>Reverse half Cuban, 1/2 roll on 45 degree upline (I think this is downline)</td></tr><tr><td>4</td><td>7.4.1.1</td><td>Loop</td></tr><tr><td>5</td><td>1.2.7.1; 9.1.4.2</td><td>Sharks Tooth, 1/2 roll on 45 degree downline</td></tr><tr><td>6</td><td>5.2.1.1</td><td>Hammerhead / Stall turn</td></tr><tr><td>7</td><td>1.1.1.1; 9.1.3.4</td><td>Aileron roll</td></tr><tr><td>8</td><td>8.5.6.1; 9.1.4.2</td><td>Half Cuban, 1/2 roll on 45 degree downline</td></tr><tr><td>9</td><td>7.2.2.1; 9.1.3.2</td><td>Half inside loop, 1/2 roll on top</td></tr><tr><td>10</td><td>1.1.6.3; 9.11.1.6</td><td>1 1/2 Turn positive spin</td></tr></tbody></table><iframe width="560" height="315" src="https://www.youtube.com/embed/yMbcwHkP-lU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Learning-Aresti"><a href="#Learning-Aresti" class="headerlink" title="Learning Aresti"></a>Learning Aresti</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/1EVrfk0TVvQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="/d/imac-2019/2019-imac-known-basic.pdf">Basic 2019 PDF</a></li><li><a href="http://www.mini-iac.org/Downloads">http://www.mini-iac.org/Downloads</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH - Secure shell to instance</title>
      <link href="2019/09/aws-secure-shell-ssh-to-instance/"/>
      <url>2019/09/aws-secure-shell-ssh-to-instance/</url>
      
        <content type="html"><![CDATA[<ol><li>Create key pair in AWS Console and download it<ol><li>Suggested saved location <code>C:\TradeMe\Identities\carl-key-pair.pem</code></li></ol></li><li>Load <code>.pem</code> key, using <code>PuTTYgen</code><ol><li>Save private key, suggested location <code>C:\TradeMe\Identities\carl-key-pair.ppk</code></li></ol></li><li>Run <code>Pageant</code><ol><li>From the system tray Add key and select the <code>ppk</code> file</li><li>You should now be able to SSH using <code>PuTTY</code></li></ol></li><li>In AWS Console enable inbound traffic in security group</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSH   TCP   22   0.0.0.0&#x2F;0</span><br></pre></td></tr></table></figure><ol start="4"><li>Connect</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ec2-user@ec2-xx-xxx-xxx-xxx.ap-southeast-2.compute.amazonaws.com</span><br><span class="line">root@ec2-xx-xxx-xxx-xxx.ap-southeast-2.compute.amazonaws.com</span><br></pre></td></tr></table></figure><ol start="5"><li>Running commands on the instance</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y ecs-init</span><br><span class="line">sudo service docker start</span><br><span class="line">sudo start ecs</span><br><span class="line"></span><br><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;esc&#x2F;esc-agentlog.YYYY-MM-DD</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html#connection-prereqs-get-info-about-instance">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html#connection-prereqs-get-info-about-instance</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance-connect.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance-connect.html</a></li><li><a href="https://www.lynda.com/Docker-tutorials/Explore-ECS-cluster/606069/643362-4.html">https://www.lynda.com/Docker-tutorials/Explore-ECS-cluster/606069/643362-4.html</a></li><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/ecs-agent-disconnected/">https://aws.amazon.com/premiumsupport/knowledge-center/ecs-agent-disconnected/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beer Brewing</title>
      <link href="2019/09/beer-brewing/"/>
      <url>2019/09/beer-brewing/</url>
      
        <content type="html"><![CDATA[<h3 id="Temperatures"><a href="#Temperatures" class="headerlink" title="Temperatures"></a>Temperatures</h3><ul><li>Lagers: 10-14 degrees<ul><li>Pilsner is a type of pale lager.</li></ul></li><li>Ales: 18-21 degrees</li></ul><h3 id="Hydrometer"><a href="#Hydrometer" class="headerlink" title="Hydrometer"></a>Hydrometer</h3><p>Understanding what your fermentation is doing will help ensure a successful brew and encourage improvement in your brewing. A hydrometer to measure the gravity before, during and after fermentation is part of that process. If nothing else, it will help you work out the amount of alcohol in the beer and you’ll know when the fermentation has finished.</p><p>They measure: <em>specific gravity</em>, <em>potential alcohol</em> and approximate <em>sugar per liter</em>.</p><p>At its most basic scientific purpose, a hydrometer is an instrument that measures the <a href="https://en.wikipedia.org/wiki/Specific_gravity">specific gravity</a> of liquids, that is to say, it measures the ratio of the density of the liquid to the density of water.</p><h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><ul><li>Clean your drum with a sterilizing agent</li><li>Brewing, <strong>2 hours</strong><ul><li>Dissolve your brew in 2-4 liters of very hot water</li><li>Add 1kg of sugar or dextrose</li><li>Put about 10 liters of cold water in your fermenter</li><li>Add the hot mixture, and mix well.</li><li>Top it up to 23 liters and sprinkle with brewers’ yeast when the temperature is below 30°.</li></ul></li><li>Fermenting <strong>about a week</strong><ul><li>Seal the fermenter and partly fill the airlock with boiled, cooled water.</li><li>Once the airlock <em>stops bubbling</em> and the <em>brew clears</em>, leave it for another <strong>48 hours</strong></li><li>If the hydrometer reading is close to the expected reading and static for more than <strong>24 hours</strong> then it’s ready for bottling.</li></ul></li><li>Sterilize your bottles and caps with a sterilizing agent</li><li>Add a teaspoon of sugar or dextrose to each bottle</li><li>Fill each bottle to 40mm below the top</li><li>Cap the bottles, tilt them a few times to help dissolve the sugar</li><li>Store them in a <strong>warm place for five days</strong></li><li>Move them somewhere a <strong>bit cooler for another five days</strong></li><li>Give them <strong>another week</strong>, and try your beer</li></ul><p>Sample at <strong>three weeks</strong>, <strong>three months</strong>, and <strong>six months</strong> if you don’t get rat-assed with your mates and smash them all.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.brewshop.co.nz/brewing-resources/starting-home-brewing">https://www.brewshop.co.nz/brewing-resources/starting-home-brewing</a></li><li><a href="https://www.brewshop.co.nz/blog/5-tips-for-beginners/">https://www.brewshop.co.nz/blog/5-tips-for-beginners/</a></li><li><a href="https://www.brewshop.co.nz/blog/simple-beer-brewing-tips/">https://www.brewshop.co.nz/blog/simple-beer-brewing-tips/</a></li><li><a href="https://www.howtohomebrewbeers.com/2016/06/how-to-use-hydrometer-correctly-to.html">https://www.howtohomebrewbeers.com/2016/06/how-to-use-hydrometer-correctly-to.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> beer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wood Working Projects</title>
      <link href="2019/09/wood-working-projects/"/>
      <url>2019/09/wood-working-projects/</url>
      
        <content type="html"><![CDATA[<p>As humans waste things, I feel its too easy to just go out and buy something new (which comes in a box with packaging which we also then throw away)</p><p>I feel if we can all just re-purpose some <code>things</code> it will help. To this tune I have been trying to re-purpose old pallets <a href="https://www.google.com/search?q=pallet+projects+ideas">drawing insparation from other peoples projects</a>.</p><h3 id="Some-Projects"><a href="#Some-Projects" class="headerlink" title="Some Projects"></a>Some Projects</h3><p><img src="/d/wood-working-projects/bed-side-table.jpg" alt="Bed side table"></p><p><img src="/d/wood-working-projects/kids-toy-box.jpg" alt="Kids toy box"></p><p><img src="/d/wood-working-projects/planters.jpg" alt="Planters"></p><p><img src="/d/wood-working-projects/small-box.jpg" alt="Small box"></p>]]></content>
      
      
      
        <tags>
            
            <tag> wood work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Line Interface Overview</title>
      <link href="2019/09/aws-command-line-interface-overview/"/>
      <url>2019/09/aws-command-line-interface-overview/</url>
      
        <content type="html"><![CDATA[<p><a href="/2019/09/aws-install-and-configure-cli/">Firstly install and configure both the AWSCLI and ECSCLI</a>.</p><p>For the examples below <code>ecs</code> is the <code>[options]</code> argument after the <code>aws</code> command. It instructs <code>aws</code> to run the command for <code>Elastic Container Services</code>. Any commands that point to a <code>.json</code> configuration file are <a href="https://github.com/carlpaton/AWS">available on github</a>.</p><p>Detailed help for both EC2 (Elastic Compute Cloud) and ECS (Elastic Container Service) can be found at the links below:</p><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/index.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/index.html</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html</a></li></ul><p>You can dump the result if any command to a text file which is useful with the <code>describe</code> commands. Single <code>&gt;</code> will overwrite the file and <code>&gt;&gt;</code> will append. Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; aws ecr list-images --repository-name lexicon-webmvc &gt; output.txt</span><br><span class="line">C:\&gt; aws ecr list-images --repository-name lexicon-webmvc &gt;&gt; output.txt</span><br></pre></td></tr></table></figure><h3 id="ECR-Elastic-Container-Registry"><a href="#ECR-Elastic-Container-Registry" class="headerlink" title="ECR - Elastic Container Registry"></a>ECR - Elastic Container Registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr list-images --repository-name lexicon-webmvc</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecr/list-images.html">https://docs.aws.amazon.com/cli/latest/reference/ecr/list-images.html</a></li><li><a href="/2019/09/aws-elastic-container-registry/">ECR CLI commands</a> are listed here in context of the <a href="https://github.com/carlpaton/lexicon">lexicon</a> project.</li></ul><h3 id="Task-Definitions"><a href="#Task-Definitions" class="headerlink" title="Task Definitions"></a>Task Definitions</h3><p>Example task definition ARN : <code>arn:aws:ecs:ap-southeast-2:000000000000:task-definition/lexicon-task-definition:3</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-task-definitions --region ap-southeast-2 --status INACTIVE</span><br><span class="line"></span><br><span class="line">aws ecs describe-task-definition --task-definition TASK-NAME</span><br></pre></td></tr></table></figure><p>You CANNOT DELETE task definitions they have to be only deregistered if you no longer want them.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs deregister-task-definition --task-definition TASK-NAME </span><br></pre></td></tr></table></figure><p>Register new from local <code>.json</code> file. If you use an existing name it will create a new revision of the task definition. The name is defined in the <code>.json</code> in the <code>family</code> parameter.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs register-task-definition --cli-input-json file:&#x2F;&#x2F;lexicon-task-definition.json --region ap-southeast-2</span><br></pre></td></tr></table></figure><h3 id="VPC-Virtual-Private-Cloud"><a href="#VPC-Virtual-Private-Cloud" class="headerlink" title="VPC - Virtual Private Cloud"></a>VPC - Virtual Private Cloud</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-vpcs</span><br><span class="line"></span><br><span class="line">aws ec2 create-vpc --cidr-block 10.0.0.0&#x2F;16</span><br></pre></td></tr></table></figure><p>The above will create your VPC along with a <code>Route Table</code>, <code>DHCP options set</code>, <code>Network ACLs</code> and <code>Security Groups</code></p><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html</a></li></ul><h3 id="EC2-Instance"><a href="#EC2-Instance" class="headerlink" title="EC2 Instance"></a>EC2 Instance</h3><p>EC2 (Amazon Elastic Compute Cloud) is the virtual machine running in the cloud, this is a Linux variant running the <code>Amazon Linux AMI 2.0.20190913 x86_64 ECS HVM</code> - where AMI stands for <code>Amazon Machine Images</code></p><p>Terminated instances remain visible after termination (for approximately one hour).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ Descibes the virtual machine instance</span><br><span class="line">aws ec2 describe-instances &gt; output.txt</span><br><span class="line"></span><br><span class="line">~ Describes an attribute, example &#96;kernel&#96; which would be &#96;KernelId&#96; in the response</span><br><span class="line">aws ec2 describe-instance-attribute --instance-id i-00000000000000000 --attribute kernel --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">~ Kill it with fire</span><br><span class="line">aws ec2 terminate-instances --instance-ids i-00000000000000000</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html</a></li></ul><p>To create a launch template</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ display existing launch templates</span><br><span class="line">aws ec2 describe-launch-templates</span><br><span class="line"></span><br><span class="line">~ create new</span><br><span class="line">aws ec2 create-launch-template --launch-template-name TemplateForWebServer --launch-template-data file:&#x2F;&#x2F;create-launch-template.json</span><br><span class="line"></span><br><span class="line">~ delete</span><br><span class="line">aws ec2 delete-launch-template --launch-template-id lt-0bcc8aca918ba6ae8</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html?icmpid=docs_ec2_console">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html?icmpid=docs_ec2_console</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestLaunchTemplateData.html">https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestLaunchTemplateData.html</a></li></ul><p>To run instances</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 run-instances --launch-template LaunchTemplateId&#x3D;lt-0daef39547692deac</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html#launching-instances">https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html#launching-instances</a></li></ul><h3 id="Security-Groups"><a href="#Security-Groups" class="headerlink" title="Security Groups"></a>Security Groups</h3><p>This is used to open up ports, example allowing you to connect to SQL from SQL Server Management Studio on port 1433. The example below opens port 80.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-security-groups --filters Name&#x3D;vpc-id,Values&#x3D;VPC_ID --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">aws ec2 authorize-security-group-ingress --group-id SECURIYY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0&#x2F;0 --region ap-southeast-2</span><br></pre></td></tr></table></figure><h3 id="Subnets"><a href="#Subnets" class="headerlink" title="Subnets"></a>Subnets</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-subnet --generate-cli-skeleton</span><br><span class="line"></span><br><span class="line">aws ec2 create-subnet --vpc-id vpc-VPC_ID --cidr-block 10.0.1.0&#x2F;24</span><br><span class="line"></span><br><span class="line">aws ec2 create-subnet --cli-input-json file:&#x2F;&#x2F;create-subnet-1.json</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html</a></li></ul><h3 id="Clusters"><a href="#Clusters" class="headerlink" title="Clusters"></a>Clusters</h3><p>Example cluster ARN: <code>arn:aws:ecs:ap-southeast-2:000000000000:cluster/lexicon-cluster</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-clusters</span><br><span class="line"></span><br><span class="line">aws ecs delete-cluster --cluster CLUSTER_ID</span><br><span class="line"></span><br><span class="line">aws ecs describe-clusters --clusters CLUSTER_ID</span><br><span class="line"></span><br><span class="line">aws ecs create-cluster --cluster-name lexicon-cluster --tags key&#x3D;Description,value&#x3D;lexicon</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/create-cluster.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/create-cluster.html</a></li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Start from task definition and keep it running.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-services --cluster lexicon-cluster</span><br><span class="line">aws ecs delete-service --service lexicon-service --cluster lexicon-cluster</span><br><span class="line"></span><br><span class="line">~ servicediscovery</span><br><span class="line">aws servicediscovery list-services --filters lexicon </span><br><span class="line">aws servicediscovery delete-service --id srv-cftwloewpccqww3k</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/servicediscovery/delete-service.html">https://docs.aws.amazon.com/cli/latest/reference/servicediscovery/delete-service.html</a></li></ul><h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs run-task --task-definition lexicon-task-definition:6 --cluster lexicon-cluster</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html</a></li></ul><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>Assign metadata to AWS resources, this is a array of <code>key|value</code> so you can allocate infrastructure resources.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-tags-for-resource --resource-arn </span><br></pre></td></tr></table></figure><ul><li><a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">https://aws.amazon.com/answers/account-management/aws-tagging-strategies/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Registry</title>
      <link href="2019/09/aws-elastic-container-registry/"/>
      <url>2019/09/aws-elastic-container-registry/</url>
      
        <content type="html"><![CDATA[<p>Amazon Elastic Container Registry (ECR) is a fully-managed <a href="https://aws.amazon.com/docker/">Docker</a> container registry that makes it easy for developers to store, manage, and deploy Docker container images.</p><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Create ECR Repository from the AWS Console, example: <code>lexicon-webmvc</code>  </p><ul><li><a href="https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2">https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">000000000000.dkr.ecr.ap-southeast-2.amazonaws.com&#x2F;lexicon-webmvc</span><br><span class="line">This is the same as a docker hub image: microsoft&#x2F;mssql-server-linux:2017-CU13</span><br></pre></td></tr></table></figure><h3 id="Push-image-from-Local"><a href="#Push-image-from-Local" class="headerlink" title="Push image from Local"></a>Push image from Local</h3><p>Use the CLI to generate your login command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws ecr get-login --no-include-email --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">docker login -u AWS -p [MASSIVE ENCRIPTED BLOB] https:&#x2F;&#x2F;000000000000.dkr.ecr.ap-southeast-2.amazonaws.com</span><br><span class="line"></span><br><span class="line">docker tag docker-compose-lexicon_lexicon-webmvc 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com&#x2F;lexicon-webmvc</span><br><span class="line"></span><br><span class="line">docker push 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com&#x2F;lexicon-webmvc</span><br></pre></td></tr></table></figure><p>Now the image will be available at the ECR.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aws.amazon.com/ecr/">https://aws.amazon.com/ecr/</a></li><li><a href="https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2">https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service - Lexicon from AWS Console</title>
      <link href="2019/09/aws-elastic-container-service-lexicon-from-aws-console/"/>
      <url>2019/09/aws-elastic-container-service-lexicon-from-aws-console/</url>
      
        <content type="html"><![CDATA[<p>The <code>Lexicon</code> is an open source project <a href="https://github.com/carlpaton/lexicon">available on GitHub</a>, the steps below setup the infrastructure in AWS using the AWS Console for launch type <code>EC2</code>. There is a <a href="/2019/09/aws-elastic-container-service-stack-overview/">stack overview here</a> that shows how the infrastructure works together. Alternatively this can also be <a href="/2019/09/aws-elastic-container-service-lexicon-from-cli/">done from the CLI</a> where I used the launch type <code>fargate</code>.</p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><p>Login to the Console and search for <code>ECS</code> and select create new cluster.</p><h4 id="Instance-configuration"><a href="#Instance-configuration" class="headerlink" title="Instance configuration"></a>Instance configuration</h4><p>AWS <code>Fargate</code> type is a compute engine that allows you to run <a href="http://aws.amazon.com/what-are-containers">containers</a> without having to manage servers or clusters. For the steps below I used <code>EC2 Linux + Networking</code>. (for reasons :D)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type:                            EC2 Linux + Networking</span><br></pre></td></tr></table></figure><p>This will also create the following resources:</p><ul><li>Cluster</li><li>VPC</li><li>Subnets</li><li>Auto Scaling group with Linux AMI</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cluster name:                    lexicon-cluster</span><br><span class="line">Provisioning Model:              On-Demand Instance</span><br></pre></td></tr></table></figure><p>With On-Demand Instances, you pay for compute capacity by the hour, with no long-term commitments or upfront payments.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EC2 instance type:               m5.large</span><br><span class="line">Instances:                       1</span><br><span class="line">EC2 Ami Id:                      Amazon Linux 2 AMI [ami-0e18747114eff8bce]</span><br><span class="line"> (ECS-optimized AMI)</span><br><span class="line">EBS storage (GiB):               22</span><br><span class="line">Key pair:                        *select if setup on EC2</span><br></pre></td></tr></table></figure><p><code>ami-0e18747114eff8bce</code> is the Amazon Linux AMI 2.0.20190913 x86_64 ECS HVM GP2 Linux Image used for the virtual machine. AMI stands for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">Amazon Machine Image</a>.</p><h4 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h4><p>Configure the VPC for your container instances to use. A VPC is an isolated portion of the AWS cloud populated by AWS objects, such as Amazon EC2 instances. You can choose an existing VPC, or create a new one with this wizard.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VPC:                             *create new</span><br><span class="line">CIDR block:                      10.0.0.0&#x2F;16</span><br><span class="line">Subnet 1:                        10.0.0.0&#x2F;24</span><br><span class="line">Subnet 2:                        10.0.1.0&#x2F;24</span><br><span class="line">Security group:                  *create new</span><br><span class="line">Security group inbound rules:    0.0.0.0&#x2F;0:80</span><br></pre></td></tr></table></figure><h4 id="Container-instance-IAM-role"><a href="#Container-instance-IAM-role" class="headerlink" title="Container instance IAM role"></a>Container instance IAM role</h4><p>The Amazon ECS container agent makes calls to the Amazon ECS API actions on your behalf, so container instances that run the agent require the ecsInstanceRole IAM policy and role for the service to know that the agent belongs to you. If you do not have the ecsInstanceRole already, we can create one for you.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Container instance IAM role:     ecsInstanceRole</span><br></pre></td></tr></table></figure><h4 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h4><p>These are key value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Description:lexicon</span><br></pre></td></tr></table></figure><h4 id="CloudWatch-Container-Insights"><a href="#CloudWatch-Container-Insights" class="headerlink" title="CloudWatch Container Insights"></a>CloudWatch Container Insights</h4><p>CloudWatch Container Insights is a monitoring and troubleshooting solution for containerized applications and microservices. It collects, aggregates, and summarizes compute utilization such as CPU, memory, disk, and network; and diagnostic information such as container restart failures to help you isolate issues with your clusters and resolve them quickly. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CloudWatch Container Insights:    [X] Enable Container Insights</span><br></pre></td></tr></table></figure><p>Clicking create will then create all of the following resources</p><ul><li>ECS cluster as <code>lexicon-cluster</code></li><li>ECS Instance IAM Policy - IAM Policy for the role ecsInstanceRole is attached</li><li>CloudFormation Stack - <code>EC2ContainerService-lexicon-cluster</code></li></ul><p>Cluster resources</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ECS AMI ID                           ami-0e18747114eff8bce</span><br><span class="line">VPC                                  vpc-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 1                             subnet-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 1 route table association     rtbassoc-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 2                             subnet-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 2 route table association     rtbassoc-0c0c0c0000c00c0cc</span><br><span class="line">VPC Availability Zones               ap-southeast-2a, ap-southeast-2b, ap-southeast-2c</span><br><span class="line">Security group                       sg-0c0c0c0000c00c0cc</span><br><span class="line">Internet gateway                     igw-0c0c0c0000c00c0cc</span><br><span class="line">Route table                          rtb-0c0c0c0000c00c0cc</span><br><span class="line">Amazon EC2 route                     EC2Co-Publi-000000000000</span><br><span class="line">Virtual private gateway attachment   EC2Co-Attac-00000000000</span><br><span class="line">Launch configuration                 EC2ContainerService-lexicon-cluster-EcsInstanceLc-0c0c0c0000c00c0cc</span><br><span class="line">Auto Scaling group                   EC2ContainerService-lexicon-cluster-EcsInstanceAsg-0c0c0c0000c00c0cc</span><br></pre></td></tr></table></figure><h3 id="Task-Definitions"><a href="#Task-Definitions" class="headerlink" title="Task Definitions"></a>Task Definitions</h3><p>From <code>Task Definitions</code> select <code>Create new Task Definition</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Launch type: EC2 </span><br><span class="line">Task Definition Name:             lexicon-definition:6</span><br><span class="line">Requires Compatibilities:         EC2</span><br><span class="line">Task Role:                        ecsTaskExecutionRole</span><br><span class="line">Network Mode:                     default</span><br></pre></td></tr></table></figure><p>If you choose <default>, ECS will start your container using Docker’s default networking mode, which is Bridge on Linux and NAT on Windows. <default> is the only supported mode on Windows.</p><ul><li>For bridge (FARGATE will only have awsvpc)</li></ul><h4 id="Task-execution-IAM-role"><a href="#Task-execution-IAM-role" class="headerlink" title="Task execution IAM role"></a>Task execution IAM role</h4><p>This role is required by tasks to pull container images and publish container logs to Amazon CloudWatch on your behalf. If you do not have the ecsTaskExecutionRole already, we can create one for you.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task execution role:              ecsTaskExecutionRole</span><br></pre></td></tr></table></figure><h4 id="Task-size"><a href="#Task-size" class="headerlink" title="Task size"></a>Task size</h4><p>The task size allows you to specify a fixed size for your task. Task size is required for tasks using the Fargate launch type and is optional for the EC2 launch type. Container level memory settings are optional when task size is set. Task size is not supported for Windows containers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task memory (GB):                 4096</span><br></pre></td></tr></table></figure><p>The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB, for example 1024, or as a string using GB, for example ‘1GB’ or ‘1 gb’.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task CPU (vCPU):                  2048   (512 &#x3D; 0.5 vCPU, 1024 &#x3D; 1 vCPU, 2048 &#x3D; 2 vCPU)</span><br></pre></td></tr></table></figure><p>The number of CPU units used by the task. It can be expressed as an integer using CPU units, for example 1024, or as a string using vCPUs, for example ‘1 vCPU’ or ‘1 vcpu’.</p><h4 id="Add-Container-WEB"><a href="#Add-Container-WEB" class="headerlink" title="Add Container (WEB)"></a>Add Container (WEB)</h4><p>This is the ASP.NET MVC web application.</p><h5 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container name:          lexicon-web</span><br><span class="line">Image:                   000000000000.dkr.ecr.ap-southeast-2.amazonaws.com&#x2F;lexicon-test</span><br><span class="line">Memory Limits (MiB):     soft 512</span><br><span class="line">Port mappings:           80 -&gt; 80</span><br></pre></td></tr></table></figure><p>Port mappings: <code>0 -&gt; 80</code> means any from the <code>host</code> to the container on 80. This will however then assign a random port like 32722 which would probably not be open in the security group.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Environment variables:   </span><br><span class="line"></span><br><span class="line">LEXICON_SQL_CONNECTION&#x3D;Server&#x3D;@@MACHINE_NAME@@,1433;Database&#x3D;lexicon;User Id&#x3D;sa;Password&#x3D;Password123;</span><br><span class="line"></span><br><span class="line">~ these just check for null, so just set the one you want it to use to &#96;yes&#96;</span><br><span class="line">SUBSTITUTE_LOCAL_IP&#x3D;</span><br><span class="line">SUBSTITUTE_PUBLIC_IP&#x3D;yes</span><br></pre></td></tr></table></figure><h5 id="Advanced-container-configuration"><a href="#Advanced-container-configuration" class="headerlink" title="Advanced container configuration"></a>Advanced container configuration</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Essential:               un-check </span><br><span class="line">Log configuration:       [x] Auto-configure CloudWatch Logs</span><br></pre></td></tr></table></figure><p>Essential, if you check this and your process exits, then the entire task is shut down as well. At least one of your containers HAS to have this checked.</p><h4 id="Add-Container-SQL"><a href="#Add-Container-SQL" class="headerlink" title="Add Container (SQL)"></a>Add Container (SQL)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container name:          lexicon-sql</span><br><span class="line">Image:                   microsoft&#x2F;mssql-server-linux:2017-CU13</span><br><span class="line">Memory Limits (MiB):     soft 2048</span><br><span class="line">Port mappings:           1433 -&gt; 1433</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Environment variables:   </span><br><span class="line"></span><br><span class="line">ACCEPT_EULA&#x3D;Y</span><br><span class="line">SA_PASSWORD&#x3D;Password123</span><br></pre></td></tr></table></figure><p>You may also designate AWS Systems Manager Parameter Store keys or ARNs using the ‘valueFrom’ field. ECS will inject the value into containers at run-time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Essential:               check</span><br><span class="line">Log configuration:       [x] Auto-configure CloudWatch Logs</span><br></pre></td></tr></table></figure><h3 id="Task-run-once-off"><a href="#Task-run-once-off" class="headerlink" title="Task (run once off)"></a>Task (run once off)</h3><ul><li><code>Clusters</code> -&gt; <code>lexicon-cluster</code> -&gt; <code>tasks</code> -&gt; <code>run new task</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Launch type:             EC2</span><br><span class="line">Task Definition:         lexicon-definition:6</span><br><span class="line">Cluster:                 lexicon-cluster</span><br><span class="line">Number of tasks:         1</span><br></pre></td></tr></table></figure><p>Then hit <code>Run Task</code> and wait for the status to change to <code>RUNNING</code></p><ul><li><code>Clusters</code> -&gt; <code>select task</code> -&gt; <code>expand container</code> -&gt; Click external link</li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>You can start from task definition and keep it running as apposed to running the task as <code>once off</code>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/ecs/">https://docs.aws.amazon.com/ecs/</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html#cli-aws-ecs">https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html#cli-aws-ecs</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service - Lexicon from CLI</title>
      <link href="2019/09/aws-elastic-container-service-lexicon-from-cli/"/>
      <url>2019/09/aws-elastic-container-service-lexicon-from-cli/</url>
      
        <content type="html"><![CDATA[<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p><a href="/2019/09/aws-install-and-configure-cli/">Firstly install and configure both the AWSCLI and ECSCLI</a>. </p><p>These are the steps to use the <a href="/2019/09/aws-command-line-interface-overview/">CLI</a> to generate the <a href="/2019/09/aws-elastic-container-service-lexicon/">Lexicon</a> infrastructure with a Fargate Task. All <code>.json</code> configuration files are <a href="https://github.com/carlpaton/AWS">available on github</a>.</p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- Create ECS cluster using config and profile setup from &#96;Prerequisites&#96;</span><br><span class="line">ecs-cli up --cluster-config carl_configuration_name --ecs-profile carl_ecs_cli_profile</span><br><span class="line"></span><br><span class="line">--- Get default security group ID for the VPC. Use the VPC ID from the previous output</span><br><span class="line">aws ec2 describe-security-groups --filters Name&#x3D;vpc-id,Values&#x3D;vpc-00000000000000000 --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">--- Security group rule to allow inbound access on port 80</span><br><span class="line">aws ec2 authorize-security-group-ingress --group-id sg-0000000000000000 --protocol tcp --port 80 --cidr 0.0.0.0&#x2F;0 --region ap-southeast-2</span><br></pre></td></tr></table></figure><h3 id="Compose-File"><a href="#Compose-File" class="headerlink" title="Compose File"></a>Compose File</h3><p>Here you will need <code>subnet ID 1</code>, <code>subnet ID 2</code> and <code>security group ID</code> values which would have been displayed when you ran <code>ecs-cli up</code>. If you cleared the console you can use <code>aws ec2 describe-vpcs</code> and look at the <code>Tags</code> to make an educated guess.</p><ul><li><a href="https://github.com/carlpaton/AWS/blob/master/ec2/ecs/compose/docker-compose.yml">docker-compose.yml</a></li><li><a href="https://github.com/carlpaton/AWS/blob/master/ec2/ecs/compose/ecs-params.yml">ecs-params.yml</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service Simple Demo</title>
      <link href="2019/09/aws-elastic-container-service-simple-demo/"/>
      <url>2019/09/aws-elastic-container-service-simple-demo/</url>
      
        <content type="html"><![CDATA[<p>This runs on top of Amazon Elastic Compute Cloud (Amazon EC2) and the steps below follow the AWS GUI (graphical user interface). I learnt most of the content below by following <a href="https://www.linkedin.com/in/arthur-ulfeldt-5150aa5/">Arthur Ulfeldt</a>‘s tutorial <a href="https://www.lynda.com/Docker-tutorials/Welcome/606069/643348-4.html">Deploying Docker to AWS</a>.</p><p>This demo will simply write the current datetime to a volume using the busybox image, the container is called <code>data-source</code>. Another container running nginx will then display this data, this container is called <code>data-server</code>.</p><p><img src="/d/aws-elastic-container-service-simple-demo/overview.jpg" alt="Simple Demo Infrastructure Overview"></p><p>Calling <code>data-server</code> on its public IP will then display as follows:</p><p><img src="/d/aws-elastic-container-service-simple-demo/simple-demo.jpg" alt="nginx data-server"></p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Create your account at <a href="https://aws.amazon.com/">https://aws.amazon.com/</a> login and under <code>AWS Management Console</code> type or look for <code>ECS</code>, this will take you to the <code>ECS Dashboard</code> </p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><p>Create cluster type of launch type <code>FARGATE</code>, it may be called something like <code>Networking only</code> and mention <code>Powered by AWS Fagate</code> - things in IT change daily :)</p><ul><li>Cluster name: <code>simple-demo2</code></li><li>Check <code>Create VPC</code></li><li>Tag: Description|simple-demo2 (this is the key|value)</li><li>Check <code>Enable container insights</code> for CloudWatch</li><li>From the <a href="/2019/09/aws-command-line-interface/">CLI</a> you can view all clusters:</li></ul><h3 id="Task-Definition"><a href="#Task-Definition" class="headerlink" title="Task Definition"></a>Task Definition</h3><p>Select <code>Task Definitions</code> -&gt; <code>Create new Task Definition</code></p><ul><li>Select the <code>FARGATE</code> template</li><li>Task Definition Name: task-definition-data-server</li><li>Requires Compatibilities: FARGATE</li><li>Task Role: escTaskExecutionRole</li><li>Network Mode: awsvpc</li><li>Task execution role: ecsTaskExecutionRole</li><li>Task memory (GB): 0.5GB</li><li>Task CPU (vCPU): 0.25 vCPU</li></ul><p>Volumes:</p><ul><li>create one called <code>shared-data</code></li></ul><p>CONTAINER 1</p><ul><li>Container name: <code>data-source</code></li><li>Image: busybox</li><li>Memory Limits (MiB): 128</li><li>Entry point:     <code>sh, -c, while true; do echo $(date) &gt; /shared-data/index.html; sleep 5; done</code></li><li>Mount points: select source volume, and set the path <code>/shared-data</code> to match the shell script</li><li>Log configuration: check Auto-configure CloudWatch Logs</li></ul><p>CONTAINER 2</p><ul><li>Container name: <code>data-server</code></li><li>Image: nginx</li><li>Memory Limits (MiB): 128</li><li>Port mappings: 0 -&gt; 80</li><li>Mount points: select source volume, and set the path <code>/usr/share/nginx/html</code></li></ul><h3 id="Run-Task"><a href="#Run-Task" class="headerlink" title="Run Task"></a>Run Task</h3><p>Now manually run the above task definition from <code>Tasks</code> tab, <code>Run new Task</code>.</p><p>Once it starts up select the running task, copy its <code>Public IP</code> into a browsers and you should see the current time update every 5 seconds. Per the image above this <code>IP</code> was <code>3.104.47.134</code></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.lynda.com/Docker-tutorials/Welcome/606069/643348-4.html">https://www.lynda.com/Docker-tutorials/Welcome/606069/643348-4.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service Stack Overview</title>
      <link href="2019/09/aws-elastic-container-service-stack-overview/"/>
      <url>2019/09/aws-elastic-container-service-stack-overview/</url>
      
        <content type="html"><![CDATA[<h3 id="VPC-Virtual-Private-Cloud"><a href="#VPC-Virtual-Private-Cloud" class="headerlink" title="VPC - Virtual Private Cloud"></a>VPC - Virtual Private Cloud</h3><p>A virtual private cloud (VPC) is a virtual network dedicated to your AWS account. It is logically isolated from other virtual networks in the AWS Cloud. You can launch your AWS resources, such as Amazon EC2 instances, into your VPC. A VPC spans all the Availability Zones in the region.</p><p>When you create a VPC, you must specify a range of IPv4 addresses for the VPC in the form of a Classless Inter-Domain Routing (CIDR) block; for example, <code>10.0.0.0/16</code>. This is the primary CIDR block for your VPC.</p><ul><li><a href="https://tools.ietf.org/html/rfc4632">https://tools.ietf.org/html/rfc4632</a></li></ul><p><img src="/d/aws-elastic-container-service-stack-overview/elastic-compute-cloud.png" alt="Amazon Elastic Container Service Stack Overview"></p><p> Amazon just wraps all this up under “Web Servers” in their official diagram</p><p><img src="/d/aws-elastic-container-service-stack-overview/nat-gateway-diagram.png" alt="Amazon Web Servers"></p><ul><li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/images/nat-gateway-diagram.png">https://docs.aws.amazon.com/vpc/latest/userguide/images/nat-gateway-diagram.png</a></li></ul><h3 id="Subnets"><a href="#Subnets" class="headerlink" title="Subnets"></a>Subnets</h3><p>After creating a VPC, you can add one or more subnets in each Availability Zone. When you create a subnet, you specify the CIDR block for the subnet, which is a subset of the VPC CIDR block.</p><ul><li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html</a></li></ul><h3 id="EC2-Elastic-Compute-Cloud"><a href="#EC2-Elastic-Compute-Cloud" class="headerlink" title="EC2 - Elastic Compute Cloud"></a>EC2 - Elastic Compute Cloud</h3><p>Amazon Elastic Compute Cloud (EC2) gives you a platform for your infrastructure to live in. The below is a high level diagram showing the structure and relationships. For access you will need to create an account at <a href="https://aws.amazon.com/">https://aws.amazon.com/</a></p><ul><li><a href="https://aws.amazon.com/ec2/">https://aws.amazon.com/ec2/</a></li></ul><h3 id="ECS-Elastic-Container-Service"><a href="#ECS-Elastic-Container-Service" class="headerlink" title="ECS - Elastic Container Service"></a>ECS - Elastic Container Service</h3><p>This is the AWS container orchestration service that supports <a href="https://www.docker.com/">Docker</a>.</p><ul><li><a href="https://aws.amazon.com/ecs/">https://aws.amazon.com/ecs/</a></li></ul><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><ul><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create_cluster.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create_cluster.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html</a></li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Start from task definition and keep it running.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>You can manually run a task from a task definition but its best to use a <code>Service</code> to keep it running. A <code>Task</code> is a running collection of docker containers.</p><ul><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task_definitions.html">https://docs.aws.amazon.com/AmazonECS/latest/userguide/task_definitions.html</a></li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><a href="https://www.docker.com/">Docker</a> container spun up from its image.</p>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Install &amp; Configure CLI</title>
      <link href="2019/09/aws-install-and-configure-cli/"/>
      <url>2019/09/aws-install-and-configure-cli/</url>
      
        <content type="html"><![CDATA[<h3 id="IAM-Overview"><a href="#IAM-Overview" class="headerlink" title="IAM Overview"></a>IAM Overview</h3><p>It is not reccomended to use the <code>rootuser</code> for any workloads/CLI/SDK access, rather setup a <code>IAM users</code> and grant access either by policy (single rule) or role. Think of a role as a hat that the user can wear to then have access to resources.</p><blockquote><p>“An IAM role is an IAM identity that you can create in your account that has specific permissions. An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS.”</p></blockquote><blockquote><p>“A role is intended to be assumable by anyone or thing who needs it.”</p></blockquote><blockquote><p>“An IAM role is similar to a user in that it is an AWS identity with permissions policies that determine what the identity can and cannot do in AWS. A role is intended to be assumable by anyone or thing who needs it. A role does not have standard long-term credentials (password or access keys) associated with it. Instead, if a user assumes a role, temporary security credentials are created dynamically and provided to the user.”</p></blockquote><p><img src="/d/aws-install-and-configure-cli/iam-overview.jpg" alt="IAM Overview"></p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>To configure the below you will need  the required <code>access key id</code> and  <code>secret access key</code> which you can get from the <a href="https://console.aws.amazon.com/iam/home?region=ap-southeast-2#/home">AWS AMI Console</a> (Identity and Access Management) you will need to be logged in. Any commands that point to a <code>.json</code> configuration file are <a href="https://github.com/carlpaton/AWS">available on github</a>.</p><h3 id="AWSCLI"><a href="#AWSCLI" class="headerlink" title="AWSCLI"></a>AWSCLI</h3><ol><li>Download and install using the <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html#install-msi-on-windows">MSI installer</a> for windows.</li></ol><p>This will live in <code>C:\Program Files\Amazon\AWSCLI</code> and should then work from any terminal.</p><ol start="2"><li>Check version</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --version</span><br></pre></td></tr></table></figure><ol start="3"><li>Configure with the keys you got from the IAM  in the amazon console.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; aws configure</span><br><span class="line">AWS Access Key ID [None]: HOEHOEHOEHOHEOHEOHE</span><br><span class="line">AWS Secret Access Key [None]: HO&#x2F;hehOehoHEOHEhohEOHeohEOH+EohOEe</span><br><span class="line">Default region name [None]: ap-southeast-2</span><br><span class="line">Default output format [None]:</span><br></pre></td></tr></table></figure><p>This creates these text files in the following location:</p><ul><li><code>%USERPROFILE%\.aws\credentials</code> (windows)</li><li><code>~/.aws/credentials</code> (linux)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~ C:\Users\[USERNAME]\.aws\credentials</span><br><span class="line">[default]</span><br><span class="line">aws_access_key_id &#x3D; HOEHOEHOEHOHEOHEOHE                    </span><br><span class="line">aws_secret_access_key &#x3D; HO&#x2F;hehOehoHEOHEhohEOHeohEOH+EohOEe</span><br></pre></td></tr></table></figure><ul><li><code>%USERPROFILE%\.aws\config</code> (windows)</li><li><code>~/.aws/config</code> (linux)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ C:\Users\[USERNAME]\.aws\config </span><br><span class="line">[default]</span><br><span class="line">region &#x3D; ap-southeast-2</span><br></pre></td></tr></table></figure><ol start="4"><li>Then you can test it works</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-roles</span><br></pre></td></tr></table></figure><ol start="5"><li>Create the task execution IAM role</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- Create the task execution role</span><br><span class="line">C:\dev\aws\ami&gt;</span><br><span class="line">aws iam --region ap-southeast-2 create-role --role-name ecsTaskExecutionRole --assume-role-policy-document file:&#x2F;&#x2F;task-execution-assume-role.json</span><br><span class="line"></span><br><span class="line">--- Attach the task execution role policy</span><br><span class="line">aws iam --region ap-southeast-2 attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy&#x2F;service-role&#x2F;AmazonECSTaskExecutionRolePolicy</span><br></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://docs.aws.amazon.com/sdk-for-net/latest/developer-guide/creds-file.html">https://docs.aws.amazon.com/sdk-for-net/latest/developer-guide/creds-file.html</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users">https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html</a></li></ul><h3 id="ECSCLI-Elastic-Container-Service"><a href="#ECSCLI-Elastic-Container-Service" class="headerlink" title="ECSCLI (Elastic Container Service)"></a>ECSCLI (Elastic Container Service)</h3><p>This will live in <code>C:\Program Files\Amazon\ECSCLI</code></p><ol><li>Run windows powersell as administrator</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--- create folder</span><br><span class="line">New-Item C:\Program Files\Amazon\ECSCLI -type directory</span><br><span class="line"></span><br><span class="line">--- install</span><br><span class="line">Invoke-WebRequest -OutFile ‘C:\Program Files\Amazon\ECSCLI\ecs-cli.exe’ https:&#x2F;&#x2F;amazon-ecs-cli.s3.amazonaws.com&#x2F;ecs-cli-windows-amd64-latest.exe</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Edit the environment variables and add <code>C:\Program Files\Amazon\ECSCLI</code> to the <code>PATH</code> variable field</p></li><li><p>Restart powersell  and check version</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ecs-cli --version</span><br></pre></td></tr></table></figure><ol start="4"><li>Configure with the same keys used above</li></ol><p>I used the profile names <code>carl_ecs_cli_profile</code> and <code>carl_configuration_name</code> below when setting up <a href="/2019/09/aws-elastic-container-service-lexicon-from-cli/">ECS for the Lexicon via the AWS CLI</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ecs-cli configure profile --profile-name carl_ecs_cli_profile --access-key HOEHOEHOEHOHEOHEOHE --secret-key HO&#x2F;hehOehoHEOHEhohEOHeohEOH+EohOEe</span><br><span class="line"></span><br><span class="line">ecs-cli configure --cluster ClusterName1 --default-launch-type FARGATE --region ap-southeast-2 --config-name carl_configuration_name</span><br></pre></td></tr></table></figure><p>Note that <code>--cluster</code> needs to satisfy regular expression pattern: <code>[a-zA-Z][-a-zA-Z0-9]*</code></p><p>This creates these files which you can edit with any text editor.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ C:\Users\[USERNAME]\AppData\Local\ecs\config</span><br><span class="line">: carl_configuration_name</span><br><span class="line"></span><br><span class="line">~ C:\Users\[USERNAME]\AppData\Local\ecs\credentials </span><br><span class="line">: carl_ecs_cli_profile</span><br></pre></td></tr></table></figure><h3 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html#install-msi-on-windows">https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html#install-msi-on-windows</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_Configuration.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_Configuration.html</a></li><li><a href="https://console.aws.amazon.com/iam/">https://console.aws.amazon.com/iam/</a></li><li><a href="https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/tkv-create-ami-from-instance.html">https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/tkv-create-ami-from-instance.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML comments</title>
      <link href="2019/09/c-sharp-xml-comments/"/>
      <url>2019/09/c-sharp-xml-comments/</url>
      
        <content type="html"><![CDATA[<p>XML documentation comments are a special kind of comment, added above the definition of any user-defined type or member.</p><p>Once you enable <code>GenerateDocumentationFile</code> (I did it from the IDE which added this <code>GenerateDocumentationFile</code>  element to my .cspoj file) you will need to <code>inheritdoc</code> to derived classes. This is applicable when using a base class or interfaces.</p><p>The steps for VS 2017 was properties (from project) -&gt; build -&gt; output -&gt; check <code>XML documentation file</code></p><h3 id="inheritdoc"><a href="#inheritdoc" class="headerlink" title="inheritdoc"></a>inheritdoc</h3><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Some ISweet related comment</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISweet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Some Foo related comment</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Foo</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sweet</span> : <span class="title">ISweet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// do foo things!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/codedoc">https://docs.microsoft.com/en-us/dotnet/csharp/codedoc</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/inheritdoc">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/inheritdoc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE Visual Studio Code</title>
      <link href="2019/09/ide-visual-studio-code/"/>
      <url>2019/09/ide-visual-studio-code/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+P                                              Quick Open, Go to File…</span><br></pre></td></tr></table></figure><ul><li><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li></ul><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>File -&gt; Preferences -&gt; Settings -&gt; Under user settings click the ellipses … in the top right -&gt; Select ‘Open settings.json’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Show white space                    “editor.renderWhitespace”: “all”</span><br><span class="line">Auto save                           “files.autoSave”: “afterDelay”</span><br><span class="line">Explorer                            “explorer.autoReveal”: true</span><br></pre></td></tr></table></figure><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=medo64.render-crlf">Render Line Endings</a> ~ Displays the line ending symbol and optionally extra whitespace when ‘Render whitespace’ is turned on.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin">TSLint</a> ~ Adds tslint to VS Code using the TypeScript TSLint language service plugin.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest">Jest</a> ~ Test player &amp; debugger </li><li><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare">VS Live Share</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-audio">VS Live Share Audio</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE Rider</title>
      <link href="2019/09/ide-rider/"/>
      <url>2019/09/ide-rider/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Fuzzy search</span><br><span class="line">    - Alt+up                                          history</span><br><span class="line">    - Alt+Enter                                       add shortcuts</span><br><span class="line"></span><br><span class="line">- Mercurial</span><br><span class="line">    - Alt+a                                           annotation</span><br><span class="line">    - Ctrl+h                                          show history</span><br><span class="line">    - Ctrl+d                                          show changes</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.jetbrains.com/rider/">https://www.jetbrains.com/rider/</a></li><li><a href="https://www.youtube.com/embed/mTW_BUUKKRM?autoplay=1">https://www.youtube.com/embed/mTW_BUUKKRM?autoplay=1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE Visual Studio</title>
      <link href="2019/09/ide-visual-studio/"/>
      <url>2019/09/ide-visual-studio/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CRTL+T                                           Got to all</span><br></pre></td></tr></table></figure><ul><li><a href="https://devblogs.microsoft.com/wp-content/uploads/sites/4/2019/03/vskeyboard.pdf">https://devblogs.microsoft.com/wp-content/uploads/sites/4/2019/03/vskeyboard.pdf</a></li></ul><h3 id="Built-in-tools"><a href="#Built-in-tools" class="headerlink" title="Built in tools"></a>Built in tools</h3><ul><li><a href="https://blogs.msdn.microsoft.com/devops/2016/07/15/7-ways-to-look-at-the-values-of-variables-while-debugging-in-visual-studio/">Autos, Locals</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/viewing-the-call-stack-in-visual-studio">Call Stack</a></li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=TomasRestrepo.Viasfora">Viasfora</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AddNewFile">Add New File</a></li><li><a href="https://www.jetbrains.com/resharper/">resharper</a>, <a href="https://www.jetbrains.com/dotcover/">dotcover</a>, <a href="https://www.jetbrains.com/decompiler/">dotpeek</a></li></ul><h3 id="Code-Snippets"><a href="#Code-Snippets" class="headerlink" title="Code Snippets"></a>Code Snippets</h3><ul><li><a href="https://gist.github.com/charleyza/77ae278b904cab2a19423809a69c2c67">unittest.snippet</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.visualstudio.com/downloads/">https://www.visualstudio.com/downloads/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE WebStorm</title>
      <link href="2019/09/ide-webstorm/"/>
      <url>2019/09/ide-webstorm/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+&#x2F;                                     Add&#x2F;remove line or block comment</span><br><span class="line">Ctrl+Shift+f                               Find in Path</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.jetbrains.com/help/webstorm/mastering-keyboard-shortcuts.html">https://www.jetbrains.com/help/webstorm/mastering-keyboard-shortcuts.html</a></li><li><a href="https://www.jetbrains.com/webstorm/download/#section=windows">Webstorm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Objectives</title>
      <link href="2019/08/objectives/"/>
      <url>2019/08/objectives/</url>
      
        <content type="html"><![CDATA[<p>Objectives are specific results that you or your team wish to achieve within a time frame using the resources available. These are generally more specific and easier to measure than goals as they can be both short and long term.</p><p>Objectives can be used to create policy and evaluate performance by ticking off key results. To successfully make use of objectives to up-skill staff they need to check most of these boxes:</p><ul><li>Align to company values and objectives</li><li>Finite, so limited in size and scope with suggested periods of short term (3 months)  or long term (6 months)</li><li>Documented and tracked as visibility is key. This can be done with <code>small improvements</code></li><li>Continually improved upon and spoken about, this can be done in a bi-weekly catchup with your people leader / manager or chapter lead. </li></ul><h3 id="Objective-Sweet-Spot"><a href="#Objective-Sweet-Spot" class="headerlink" title="Objective Sweet Spot"></a>Objective Sweet Spot</h3><p>Further to the above to be well balanced, objectives need to be in the sweet spot between the <code>Company Strategy</code>, your <code>Now skills</code> and your own <code>Personal growth</code></p><p><img src="/d/objectives/objective-sweet-spot.jpg" alt="Well balanced objectives"></p><h3 id="Clarifying-the-objective"><a href="#Clarifying-the-objective" class="headerlink" title="Clarifying the objective"></a>Clarifying the objective</h3><p>This is where you want to get to.</p><ul><li>What do you want to achieve with an ideal outcome?</li><li>What do you want to change or improve on?</li><li>Why this objective, what value will it bring?</li><li>What will success look like?</li><li>What would the benefits of achieving this objective be<ul><li>For the team / company?</li><li>For growing your current skill set?</li><li>For long term growth?</li></ul></li><li>Looking 6 months ahead, what would you like to see happening?</li></ul><h3 id="What-you-already-bring-to-the-table"><a href="#What-you-already-bring-to-the-table" class="headerlink" title="What you already bring to the table"></a>What you already bring to the table</h3><p>These are existing strengths and areas you need to develop.</p><ul><li>What are you already doing that already contributes to this objective?</li><li>What is going well and what are the challenges?</li><li>What is currently in place to promote success and what affect is it having?</li><li>What is currently in place that gets in the way of success and what affect is it having?</li><li>Where are you right now in relation to the objective?</li><li>What progress have you made so far?</li><li>Which of your peers have had a similar objective that you can learn from?</li><li>What have you already tried? </li></ul><h3 id="Documenting"><a href="#Documenting" class="headerlink" title="Documenting"></a>Documenting</h3><p>Once you have identified the objective an approach to start documenting it and noting the key results could be to use a <code>70:20:10</code> split. This is 70% experimental, 20% social and 10% formal.</p><ul><li>70%  experimental, this is 7 points around the objective which include key results, technologies used and action items to help achieve the objective. </li><li>20 % social, this is 2 people that will help you with your objective. These can be anybody with domain knowledge around the objective. They need to know you have chosen then and be willing to help.</li><li>10% formal, this is training and can be lectures or formal discussions or simply <a href="/2019/01/online-learning-portals/">online training</a>.</li></ul><p>The above can be visually drawn as shown below, this was an objective to build a <code>Lexicon Manager</code> which is used to manage a company’s copy / microcopy. This is the actual text displayed on platforms such as desktop website or native mobile phone app.</p><p><img src="/d/objectives/objective-documenting.jpg" alt="Objective documenting"></p><p>From the above the 70% experimental column shown on the left can be grouped as:</p><ul><li>Key Results<ul><li>Company gains an asset</li><li>Code speak around containers</li></ul></li><li>Technologies used<ul><li>Amazon ECS</li><li>Docker compose &amp; Powershell</li><li>Code repository, <a href="https://github.com/carlpaton/lexicon">I released this project open source to GIT</a>.</li></ul></li><li>Documentation<ul><li>Gathering requirements</li><li>Actual documentation on wiki, share or presentation.</li></ul></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.businessdictionary.com/definition/objective.html">http://www.businessdictionary.com/definition/objective.html</a></li><li><a href="https://www.small-improvements.com/">https://www.small-improvements.com/</a></li><li><a href="https://github.com/carlpaton/lexicon">https://github.com/carlpaton/lexicon</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Text Files</title>
      <link href="2019/07/reading-text-files/"/>
      <url>2019/07/reading-text-files/</url>
      
        <content type="html"><![CDATA[<p>The simplest way to do this is to use the .Net framework classes: <code>System.IO.File</code></p><h3 id="ReadAllText"><a href="#ReadAllText" class="headerlink" title="ReadAllText"></a>ReadAllText</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filePath = <span class="string">@&quot;C:\Users\cpaton\Downloads\hoehoe.txt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> jsonText = File.ReadAllText(filePath);</span><br></pre></td></tr></table></figure><h3 id="ReadLines"><a href="#ReadLines" class="headerlink" title="ReadLines"></a>ReadLines</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filePath = <span class="string">@&quot;C:\Users\cpaton\Downloads\hoehoe.txt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> lines = File.ReadLines(filePath);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> lines) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//foo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Write To Text Files</title>
      <link href="2019/07/write-to-text-files/"/>
      <url>2019/07/write-to-text-files/</url>
      
        <content type="html"><![CDATA[<h3 id="StreamWriter"><a href="#StreamWriter" class="headerlink" title="StreamWriter"></a>StreamWriter</h3><p>This will append to the file at <code>filePath</code> and use <code>Newtonsoft.Json</code> to serialize the data to JSON in <code>someObject</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(filePath, <span class="literal">true</span>, Encoding.ASCII)) </span><br><span class="line">&#123;</span><br><span class="line">sw.Write(JsonConvert.SerializeObject(someObject));</span><br><span class="line">sw.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N-Tier Architecture</title>
      <link href="2019/07/n-tier-architecture/"/>
      <url>2019/07/n-tier-architecture/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“N-tier architecture is also called multi-tier architecture because the software is engineered to have the processing, data management, and presentation functions physically and logically separated.  That means that these different functions are hosted on several machines or clusters, ensuring that services are provided without resources being shared and, as such, these services are delivered at top capacity.  The “N” in the name n-tier architecture refers to any number from 1.”</p></blockquote><p>Also see <a href="/2019/12/web-application-architecture/">Web Application Architecture</a></p><h3 id="Application-Architecture-2-Layer"><a href="#Application-Architecture-2-Layer" class="headerlink" title="Application Architecture : 2 Layer"></a>Application Architecture : 2 Layer</h3><p><strong>Web UI &amp; Web API</strong></p><ul><li>Mocking is needed for both <code>Data</code> and <code>Business</code> however both UI and API use models from <code>Core.Entities</code> which were mapped in <code>Data</code>/<code>Business</code>.</li></ul><p><strong>Business</strong></p><ul><li>Will mostly have pure functions with the exeption of probably <code>DateTime</code> related functions.</li><li>Knows nothing about the <code>Data</code> module so no mocking is needed for unit tests in the </li></ul><p><img src="/d/n-tier-architecture/2-layer-architecture.jpg" alt="Application Architecture : 2 Layer"></p><h3 id="Application-Architecture-nLayer"><a href="#Application-Architecture-nLayer" class="headerlink" title="Application Architecture : nLayer"></a>Application Architecture : nLayer</h3><p><strong>Web UI &amp; Web API</strong></p><ul><li>No mocking is needed for <code>Data</code> only business, if a repository from <code>Data</code> is injected this is considered an <code>END RUN</code></li></ul><p><strong>Business</strong></p><ul><li>Mocking is needed for data, should accept and respond with <code>Core.Entities</code></li></ul><p><img src="/d/n-tier-architecture/n-layer-architecture.jpg" alt="Application Architecture : nLayer"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier">https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/">https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends</a></li><li><a href="https://stackify.com/n-tier-architecture/">https://stackify.com/n-tier-architecture/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wing Joiner</title>
      <link href="2019/07/wing-joiner/"/>
      <url>2019/07/wing-joiner/</url>
      
        <content type="html"><![CDATA[<p>Sweet wing joiner idea for my 60 size trainer by Grant from <a href="http://www.hangarone.co.nz/">http://www.hangarone.co.nz/</a></p><p><img src="/d/wing-joiner/wing-joiner.jpg" alt="Sweet Wing Joiner"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://drive.google.com/open?id=1sAs48H-vOKjOjf2cU_3GZ-fV7ceqFMmD">https://drive.google.com/open?id=1sAs48H-vOKjOjf2cU_3GZ-fV7ceqFMmD</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebForms Load File</title>
      <link href="2019/07/web-forms-load-file/"/>
      <url>2019/07/web-forms-load-file/</url>
      
        <content type="html"><![CDATA[<p>Although MVC is my framework of choice Legacy <code>WebForms</code> applications still exist in the world.</p><h3 id="ASPX-file"><a href="#ASPX-file" class="headerlink" title=".ASPX file"></a>.ASPX file</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>File<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">asp:FileUpload</span> <span class="attr">id</span>=<span class="string">&quot;FileUploadControl&quot;</span> <span class="attr">runat</span>=<span class="string">&quot;server&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form form-buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">&quot;ImportButton&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;Import&quot;</span> <span class="attr">runat</span>=<span class="string">&quot;server&quot;</span> <span class="attr">OnClick</span>=<span class="string">&quot;ImportButton_Click&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Code-Behind"><a href="#Code-Behind" class="headerlink" title="Code Behind"></a>Code Behind</h3><p>Here <code>_importFromExcelFileService</code> is the injected service.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ImportButton_Click </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Validation())</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> savePath = _importFromExcelFileService.SaveFile(FileUploadControl, Server);</span><br></pre></td></tr></table></figure><p>Validation method to separate the concearns using the same <code>_importFromExcelFileService</code> service.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Validation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> validationMessage = _importFromExcelFileService.Validate(FileUploadControl);</span><br><span class="line"><span class="keyword">if</span> (validationMessage != <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Tools.ShowMessage(message, validationMessage, messageType.red);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Although this did create a dependancys on <code>System.Web.UI.WebControls.FileUpload</code> and <code>System.IO.FileInfo</code> I felt this to be a better design.</p><p>Its possible to mock these with <code>SystemWrapper</code> ~ <a href="https://stackoverflow.com/questions/1582596/how-do-i-moq-the-system-io-fileinfo-class-or-any-other-class-without-an-inter">https://stackoverflow.com/questions/1582596/how-do-i-moq-the-system-io-fileinfo-class-or-any-other-class-without-an-inter</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImportFromExcelFileService</span> : <span class="title">IImportFromExcelFileService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _allowedExtension = <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SaveFile</span>(<span class="params">FileUpload fileUploadControl, HttpServerUtility server</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> filename = Path.GetFileName(fileUploadControl.FileName);</span><br><span class="line"><span class="keyword">var</span> path = server.MapPath(<span class="string">&quot;~/WhyIsThisNotBeingReadFromConfig/Tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Directory.Exists(path))</span><br><span class="line">Directory.CreateDirectory(path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> savePath = Path.Combine(path, Guid.NewGuid() + filename);</span><br><span class="line">fileUploadControl.SaveAs(savePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Validate</span>(<span class="params">FileUpload fileUploadControl</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!fileUploadControl.HasFile)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Please select a file.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI -_-</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> FileInfo(fileUploadControl.FileName).Extension != _allowedExtension)</span><br><span class="line"><span class="keyword">return</span> <span class="string">$&quot;Please supply a file in the format <span class="subst">&#123;_allowedExtension&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Futaba 10j</title>
      <link href="2019/07/futaba-10j/"/>
      <url>2019/07/futaba-10j/</url>
      
        <content type="html"><![CDATA[<h3 id="Aux-Chan"><a href="#Aux-Chan" class="headerlink" title="Aux-Chan"></a>Aux-Chan</h3><p>To assign a switch to a channel, here I use CH6 / SwC for flaps.</p><p><code>Menu 1</code> – <code>AUX-CHAN</code> – <code>CH6</code> – <code>SwC</code></p><ul><li>Manual page 56</li></ul><h3 id="End-Point"><a href="#End-Point" class="headerlink" title="End Point"></a>End Point</h3><p>To set servo end points if they are mechanically too far for the current TX/RX.</p><p><code>Menu 1</code> – <code>END POINT</code> – <code>6:FLP</code> (on pg2) – <code>&lt;-</code> =72</p><ul><li>Manual page 112</li></ul><h3 id="Dual-Rate-EXPO"><a href="#Dual-Rate-EXPO" class="headerlink" title="Dual Rate / EXPO"></a>Dual Rate / EXPO</h3><p><code>Menu 3</code> – <code>D/R EXPO</code></p><p>These are conservative settings that worked well with my apprentice and H9-40 stick.</p><p>| Channel | Function | Low | High |<br>| ————- | ————- |<br>| 1 | D/R | 40% | 70% |<br>| 1 | EXP | -30% | -40% |<br>| 2 | D/R | 45% | 65% |<br>| 2 | EXP | -30% | -40% |<br>| 4 | D/R | 60% | 100% |<br>| 4 | EXP | -40% | -70% |</p><ul><li>Manual page 104</li></ul><h3 id="Mixing-flaps-to-work-with-aileron"><a href="#Mixing-flaps-to-work-with-aileron" class="headerlink" title="Mixing flaps to work with aileron"></a>Mixing flaps to work with aileron</h3><p>My <code>H9-40 sticks</code> flaps travel was the same as the ailerons so this would effectively create larger ailerons.</p><ol><li><p>Set all <code>AUX-CHAN</code> 5to10 to NULL, this released/centered the servos</p></li><li><p>Enable <code>FLAPARONS</code> (Menu 3), this mixed 1 &amp; 7 in opposite directions (Could also be done with mixing)</p></li><li><p>Enable under menu 1 <code>P.MIX 1-6</code> two mixes</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NOR 1 AIL-&gt;GER</span><br><span class="line">      RATE 100%</span><br><span class="line">  MASTER AIL</span><br><span class="line">  SLAVE GER</span><br><span class="line"></span><br><span class="line">NOR 2 AIL-&gt;AUX  </span><br><span class="line">      RATE 100%</span><br><span class="line">  MASTER AIL</span><br><span class="line">  SLAVE AUX (ch8)</span><br></pre></td></tr></table></figure><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><table><thead><tr><th>Channel</th><th>Timber</th><th>H9-40</th></tr></thead><tbody><tr><td>1</td><td>Aileron (Y-reverese-cable)</td><td>Left Aileron</td></tr><tr><td>2</td><td>Elevator</td><td>Elevator</td></tr><tr><td>3</td><td>Throttle</td><td>Throttle</td></tr><tr><td>4</td><td>Rudder</td><td>Rudder</td></tr><tr><td>5</td><td>NULL</td><td>Left Flap (GER)</td></tr><tr><td>6</td><td>Flaps (Y-straight-cable) on SwC</td><td>NULL</td></tr><tr><td>7</td><td>NULL</td><td>Right Aileron</td></tr><tr><td>8</td><td>NULL</td><td>Right Flap</td></tr><tr><td>9</td><td>NULL</td><td>NULL</td></tr><tr><td>10</td><td>NULL</td><td>NULL</td></tr></tbody></table><h3 id="Switches"><a href="#Switches" class="headerlink" title="Switches"></a>Switches</h3><p>| Switch Letter  | Timber | H9-40 |<br>| ————- | ————- |<br>| A | Elevator dual rate | Elevator dual rate |<br>| B | Rudder dual rate | Rudder dual rate |<br>| C | Flaps half/full | NULL |<br>| D | Aileron dual rates | Aileron dual rates |<br>| E | NULL | NULL |<br>| F | NULL | NULL |<br>| G | NULL | NULL |<br>| H | NULL | NULL |<br>| VR | NULL | Ignition On |</p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular expressions</title>
      <link href="2019/07/regex/"/>
      <url>2019/07/regex/</url>
      
        <content type="html"><![CDATA[<h3 id="Matching-in-a-query-string-parameter"><a href="#Matching-in-a-query-string-parameter" class="headerlink" title="Matching in a query string parameter"></a>Matching in a query string parameter</h3><p>I feel documentation on any regex is important and they are super hard to read / understand.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; $                                        -&gt; String interpolation</span><br><span class="line">&#x2F;&#x2F;&#x2F; @&quot;                                       -&gt; Starts a verbatim string literal.</span><br><span class="line">&#x2F;&#x2F;&#x2F; (                                        -&gt; Logical grouping of part of an expression.</span><br><span class="line">&#x2F;&#x2F;&#x2F; (\&amp;|\?)                                  -&gt; Start with &#96;&amp;&#96; or &#96;?&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; ?                                        -&gt; Result of &#96;(\&amp;|\?)&#96; must be 0 or 1</span><br><span class="line">&#x2F;&#x2F;&#x2F; \b                                       -&gt; Matches a word boundary</span><br><span class="line">&#x2F;&#x2F;&#x2F; &#123;SomeAttribute.Hoe&#125;&#x3D;1                    -&gt; String interpolation, if &#96;SomeAttribute.Hoe&#96; was &#96;42&#96; then this would add &#96;42&#x3D;1&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; \b                                       -&gt; Matches a word boundary</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">private readonly string MyQueryStringParamRegex &#x3D; $@&quot;((\&amp;|\?)?)\b&#123;SomeAttribute.Hoe&#125;&#x3D;1\b&quot;;</span><br></pre></td></tr></table></figure><p>You could then use this in code as</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (new Regex(MyQueryStringParamRegex).IsMatch(query))</span><br><span class="line">&#123;</span><br><span class="line">     &#x2F;&#x2F; do something based on the match</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matching-email-address"><a href="#Matching-email-address" class="headerlink" title="Matching email address"></a>Matching email address</h3><p>Sweet example from <a href="https://www.computerhope.com/unix/regex-quickref.htm">computerhope.com</a> to match an Email address.</p><p><img src="/d/regex/regex-1.gif" alt="Email Matching Example"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.computerhope.com/unix/regex-quickref.htm">https://www.computerhope.com/unix/regex-quickref.htm</a></li><li><a href="https://www.dotnetperls.com/regex">https://www.dotnetperls.com/regex</a></li><li><a href="http://regexlib.com/cheatsheet.aspx">http://regexlib.com/cheatsheet.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana</title>
      <link href="2019/07/kibana/"/>
      <url>2019/07/kibana/</url>
      
        <content type="html"><![CDATA[<p><em>Kibana</em> lets you visualize your Elasticsearch data and navigate the Elastic Stack, also see <a href="/2018/04/elk-stack/">ELK Stack</a></p><h3 id="Stand-Alone-Containers"><a href="#Stand-Alone-Containers" class="headerlink" title="Stand Alone Containers"></a>Stand Alone Containers</h3><p><code>V7</code><br><code>docker run -d --name kibana-v7 -p 5607:5601 -e &quot;ELASTICSEARCH_HOSTS=&#123;host&#125;:&#123;port&#125;&quot; kibana:7.2.0</code></p><p><code>V5</code><br><code>docker run -d --name kibana-v5 -p 5605:5601 -e &quot;ELASTICSEARCH_URL=&#123;host&#125;:&#123;port&#125;&quot; kibana:5</code></p><h3 id="Environment-variables-translation"><a href="#Environment-variables-translation" class="headerlink" title="Environment variables translation"></a>Environment variables translation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kibana Version         Kibana Setting              Docker Dev Env</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">V7                     elasticsearch.hosts         ELASTICSEARCH_HOSTS</span><br><span class="line">V5.6.4                 elasticsearch.url           ELASTICSEARCH_URL</span><br></pre></td></tr></table></figure><h3 id="Elastic-Ports"><a href="#Elastic-Ports" class="headerlink" title="Elastic Ports"></a>Elastic Ports</h3><p>9200 is for REST<br>9300 for nodes communication</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>V7 Current, yeah this will change in 5 minutes :D</p><ul><li><a href="https://www.elastic.co/guide/en/kibana/current/settings.html">https://www.elastic.co/guide/en/kibana/current/settings.html</a></li><li><a href="https://www.elastic.co/guide/en/kibana/current/docker.html">https://www.elastic.co/guide/en/kibana/current/docker.html</a></li></ul><p>V6</p><ul><li><a href="https://www.elastic.co/guide/en/kibana/5.6/settings.html">https://www.elastic.co/guide/en/kibana/5.6/settings.html</a></li><li><a href="https://www.elastic.co/guide/en/kibana/5.2/_configuring_kibana_on_docker.html">https://www.elastic.co/guide/en/kibana/5.2/_configuring_kibana_on_docker.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> utilities </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing with xUnit.net</title>
      <link href="2019/06/unit-testing-with-xunit/"/>
      <url>2019/06/unit-testing-with-xunit/</url>
      
        <content type="html"><![CDATA[<p>xUnit.net is a free, open source, community-focused unit testing tool for the .NET Framework. Install <code>xunit</code> from Nuget as version <code>2.4.1</code>.</p><p>U_I_E signatures are <code>Unit of work</code>, <code>inital condition</code> and <code>expected result</code>.</p><h3 id="Fact"><a href="#Fact" class="headerlink" title="Fact"></a>Fact</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">U_I_E</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> someBool = ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.Equal(shouldPass, someBool&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Other asserts</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Assert.Contains(collection, x =&gt; x.SweetProp == <span class="string">&quot;Foo&quot;</span>);</span><br><span class="line">Assert.DoesNotContain(collection, x =&gt; x.SweetProp == <span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">Assert.NotNull(fooObj);</span><br><span class="line">Assert.True(condition);</span><br></pre></td></tr></table></figure><h3 id="Theory-Inline-Data"><a href="#Theory-Inline-Data" class="headerlink" title="Theory - Inline Data"></a>Theory - Inline Data</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">InlineData(<span class="meta-string">&quot;foo@bar.com&quot;</span>, true)</span>]</span><br><span class="line">[<span class="meta">InlineData(<span class="meta-string">&quot;baz@bat.com&quot;</span>, false)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">U_I_E</span>(<span class="params"><span class="built_in">string</span> someEmail, <span class="built_in">bool</span> someBool</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> someBool = ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.Equal(shouldPass, someBool&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Theory-Member-Data"><a href="#Theory-Member-Data" class="headerlink" title="Theory - Member Data"></a>Theory - Member Data</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">object</span>[]&gt; FooTestData()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// someString, someStrings                     </span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; <span class="string">&quot;foo&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; <span class="string">&quot;bar&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span> &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">MemberData(nameof(FooTestData))</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">U_I_E</span>(<span class="params"><span class="built_in">string</span> someString, IEnumerable&lt;<span class="built_in">string</span>&gt; someStrings</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.Equal(...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shared-Context-between-Tests"><a href="#Shared-Context-between-Tests" class="headerlink" title="Shared Context between Tests"></a>Shared Context between Tests</h3><p>xUnit doesnt have explicit <code>[SetUp]</code> and <code>[TearDown]</code> annotations like <a href="/2018/12/unit-testing-with-nunit/">NUnit</a>, instead they say you must use a Constructor and Dispose.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackTests</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    Stack&lt;<span class="built_in">int</span>&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackTests</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        stack.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://xunit.net/docs/shared-context">https://xunit.net/docs/shared-context</a></li></ul><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>Verifies that the exact exception is thrown (and not a derived exception type). Returns the exception that was thrown, when successful.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">var</span> exception = Assert.ThrowsAsync&lt;HttpRequestException&gt;(<span class="keyword">async</span> () =&gt; <span class="keyword">await</span> classUnderTest.SomeMethodThatThrowsAsync());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assert</span></span><br><span class="line">Assert.Equal(expectedExceptionMessage, exception.Result.Message);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://xunit.github.io/docs/getting-started/netfx/visual-studio">https://xunit.github.io/docs/getting-started/netfx/visual-studio</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backends for Frontends</title>
      <link href="2019/05/backends-for-frontends/"/>
      <url>2019/05/backends-for-frontends/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when you want to avoid customizing a single backend for multiple interfaces. This pattern was first described by Sam Newman.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://samnewman.io/patterns/architectural/bff/">https://samnewman.io/patterns/architectural/bff/</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="2019/05/redis/"/>
      <url>2019/05/redis/</url>
      
        <content type="html"><![CDATA[<p>Redis is an open source (BSD licensed), in-memory <strong>data structure store</strong>, used as a database, cache and message broker. You can quickly spin up a container and have a hoon:</p><ol><li>Create a network for the containers to connect to.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge redis-bridge-network</span><br></pre></td></tr></table></figure><ol start="2"><li>Bring up the Redis Server</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name red-srv -d -p 6379:6379 --network redis-bridge-network redis:4.0.5-alpine redis-server --appendonly yes</span><br></pre></td></tr></table></figure><ol start="3"><li>Bring up <code>redis administrator</code> which is my open source UI for Redis</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name red-admin -d -p 8080:80 --network redis-bridge-network --env REDIS_CONNECTION&#x3D;red-srv,allowAdmin&#x3D;true  carlpaton&#x2F;redis-administrator:latest</span><br></pre></td></tr></table></figure><p>This UI can then be seen at - <a href="http://localhost:8080/">http://localhost:8080/</a></p><ul><li><a href="https://github.com/carlpaton/RedisAdministrator">https://github.com/carlpaton/RedisAdministrator</a></li><li><a href="https://hub.docker.com/r/carlpaton/redis-administrator">https://hub.docker.com/r/carlpaton/redis-administrator</a></li></ul><ol start="4"><li>Bring up <code>redis commander</code> which is an open source UI for Redis written by <a href="https://github.com/joeferner/redis-commander">Joe Ferner</a>.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name red-com -d -p 8081:8081 --network redis-bridge-network --env REDIS_HOSTS&#x3D;red-srv  rediscommander&#x2F;redis-commander:latest</span><br></pre></td></tr></table></figure><p>This UI can then be seen at - <a href="http://localhost:8081/">http://localhost:8081/</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://redislabs.com/blog/so-youre-looking-for-the-redis-gui/">https://redislabs.com/blog/so-youre-looking-for-the-redis-gui/</a></li><li><a href="https://www.npmjs.com/package/redis-commander/">https://www.npmjs.com/package/redis-commander/</a></li><li>[<a href="https://hub.docker.com/_/redis?tab=description(https://hub.docker.com/_/redis?tab=description)">https://hub.docker.com/_/redis?tab=description(https://hub.docker.com/_/redis?tab=description)</a></li><li><a href="https://redis.io/topics/rediscli/">https://redis.io/topics/rediscli/</a></li><li><a href="https://redis.io/topics/introduction">Introduction to Redis</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Tag Helpers</title>
      <link href="2019/04/mvc-tag-helpers/"/>
      <url>2019/04/mvc-tag-helpers/</url>
      
        <content type="html"><![CDATA[<p>MVC tag helpers and their Razor equivalent.</p><p>To get these new tag helpers to work you need to add the following to your <code>\Views\_ViewImports.cshtml</code> file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers</span><br></pre></td></tr></table></figure><p>All of the CSS class references below are from bootstrap.</p><h2 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a asp-action&#x3D;&quot;Delete&quot; asp-route-id&#x3D;&quot;@item.Id&quot;&gt;Edit&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">@Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id &#x3D; item.Id &#125;, new &#123; onclick &#x3D; &quot;return confirm(&#39;Are you sure you want to delete this entry?&#39;);&quot; &#125;)</span><br></pre></td></tr></table></figure><p>The above is pretty bad as it will allow a <code>GET</code> to a delete action that should rather only accept a <code>POST</code>.<br>To refactor this to a better design, rather add this to your view:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form asp-action&#x3D;&quot;Delete&quot; asp-route-id&#x3D;&quot;@item.Id&quot;&gt;</span><br><span class="line">    &lt;a asp-action&#x3D;&quot;Edit&quot; asp-route-id&#x3D;&quot;@item.Id&quot;&gt;Edit&lt;&#x2F;a&gt; |</span><br><span class="line">    &lt;a asp-action&#x3D;&quot;Index&quot; asp-route-id&#x3D;&quot;@item.Id&quot; asp-controller&#x3D;&quot;EntryPlatform&quot;&gt;Platform&lt;&#x2F;a&gt; |</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Delete&quot; class&#x3D;&quot;btn-link&quot; onclick&#x3D;&quot;return confirm(&#39;Are you sure you want to delete this entry?&#39;);&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>Then in your controller add:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; POST: LexiconEntry&#x2F;Delete&#x2F;5</span><br><span class="line">[HttpPost, ActionName(&quot;Delete&quot;)]</span><br><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line">public IActionResult Delete(int id)</span><br><span class="line">&#123;</span><br><span class="line">    _repository.Delete(id);</span><br><span class="line">    TempData[&quot;message&quot;] &#x3D; &quot;Entry deleted successfully.&quot;;</span><br><span class="line">    return RedirectToAction(&quot;Index&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Works with anything like string, datetime, double</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input asp-for&#x3D;&quot;Name&quot; class&#x3D;&quot;form-control&quot; &#x2F;&gt;</span><br><span class="line">&lt;input asp-for&#x3D;&quot;Salary&quot; class&#x3D;&quot;form-control&quot; &#x2F;&gt;</span><br><span class="line">&lt;input asp-for&#x3D;&quot;SomeDate&quot; class&#x3D;&quot;form-control&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">@Html.TextBox(&quot;Description&quot;, null, new &#123; @class &#x3D; &quot;form-control&quot; &#125;)</span><br></pre></td></tr></table></figure><p>You can also store this as a cookie or session.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;hidden&quot; asp-for&#x3D;&quot;Id&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="Span-Validation-For"><a href="#Span-Validation-For" class="headerlink" title="Span Validation For"></a>Span Validation For</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span asp-validation-for&#x3D;&quot;Description&quot; class&#x3D;&quot;text-danger&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><h2 id="Lable-for"><a href="#Lable-for" class="headerlink" title="Lable for"></a>Lable for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label asp-for&#x3D;&quot;Recommendation&quot; class&#x3D;&quot;control-label&quot;&gt;&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure><h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Html.DisplayNameFor(model &#x3D;&gt; model.Name)</span><br><span class="line"></span><br><span class="line">@foreach (var item in Model) &#123;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                @Html.DisplayFor(modelItem &#x3D;&gt; item.Name)</span><br></pre></td></tr></table></figure><h2 id="DropDown-List-For"><a href="#DropDown-List-For" class="headerlink" title="DropDown List For"></a>DropDown List For</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.DropDownListFor(Model &#x3D;&gt; Model.SubCategoryId, (List&lt;SelectListItem&gt;)ViewData[&quot;SubCategory_SelectList&quot;], &quot;-- Please Select --&quot;, new &#123; @class &#x3D; &quot;form-control&quot; &#125;)</span><br></pre></td></tr></table></figure><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;divResults&quot;&gt;</span><br><span class="line">    &lt;partial name&#x3D;&quot;~&#x2F;Views&#x2F;Entry&#x2F;_Table.cshtml&quot; model&#x3D;&quot;Model&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;divResults&quot;&gt;</span><br><span class="line">    @&#123;</span><br><span class="line">        @Html.Partial(&quot;~&#x2F;Views&#x2F;Entry&#x2F;_Table.cshtml&quot;, Model);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://getbootstrap.com/docs/4.3/">getbootstrap.com/docs/4.3/</a></li><li><a href="https://blogs.msdn.microsoft.com/cdndevs/2015/08/06/a-complete-guide-to-the-mvc-6-tag-helpers/">blogs.msdn.microsoft.com</a></li><li><a href="https://github.com/carlpaton/lexicon">lexicon code</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Hexo</title>
      <link href="2019/04/configure-hexo/"/>
      <url>2019/04/configure-hexo/</url>
      
        <content type="html"><![CDATA[<p>Sweet plugins and configuration settings for Hexo.</p><h3 id="hexo-deployer-git"><a href="#hexo-deployer-git" class="headerlink" title="hexo-deployer-git"></a>hexo-deployer-git</h3><p><code>yarn add hexo-deployer-git</code></p><p>Once installed add the following to the root <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/carlpaton/carlpaton.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">carlpaton</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">carl.paton@gmail.com</span></span><br></pre></td></tr></table></figure><p>This then works with the commands:</p><ul><li><code>hexo generate</code> (short hand <code>hexo g</code>)</li><li><code>hexo deploy</code> (short hand <code>hexo d</code>)</li></ul><h3 id="hexo-browsersync"><a href="#hexo-browsersync" class="headerlink" title="hexo-browsersync"></a>hexo-browsersync</h3><p><code>yarn add hexo-browsersync</code></p><p>This then works with the command <code>hexo serve</code> (short hand <code>hexo s</code>)</p><h3 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h3><p>Then go to your theme’s main <code>_config.yml</code> and look for a property called google_analytics. Fill in your tracking ID.</p><p>google_analytics: UA-0000000-0</p><ul><li><a href="http://www.codeblocq.com/2015/12/Add-Google-Analytics-to-your-hexo-blog/">http://www.codeblocq.com/2015/12/Add-Google-Analytics-to-your-hexo-blog/</a></li></ul><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p><code>npm install hexo-generator-search</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="2019/04/hello-hexo/"/>
      <url>2019/04/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>I used <a href="https://hexo.io/">Hexo</a> as my blogs framework and the theme is a modified version of the <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a> theme, its really simple to use and integrate changes.</p><h3 id="Hexo-Installation"><a href="#Hexo-Installation" class="headerlink" title="Hexo Installation"></a>Hexo Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Verify required software for Hexo is installed, if not check the sweet video below</span></span><br><span class="line">node -v</span><br><span class="line">git version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><ul><li><a href="https://hexo.io/docs/">https://hexo.io/docs/</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/ARted4RniaU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Create-Hexo-Site"><a href="#Create-Hexo-Site" class="headerlink" title="Create Hexo Site"></a>Create Hexo Site</h3><p>This is done via the Hexo CLI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barebones hexo, this will create the folder `myblog` and initialize hexo blogging framework </span></span><br><span class="line">hexo init carlpaton.github.io</span><br></pre></td></tr></table></figure><ul><li><a href="https://hexo.io/docs/setup">https://hexo.io/docs/setup</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/0m2HnATkHOk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Configuration Files:</p><ul><li>“<strong>blog config</strong>“ refer to the <code>_config.yml</code> in the blog root directory.</li><li>“<strong>theme config</strong>“ refer to the path <code>theme/landscape/_config.yml</code></li></ul><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>Original links from the frameworks <a href="https://github.com/techlahoma/Hexo-Workshop/blob/master/source/_posts/hello-world.md">hello world</a> starter post.</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info:</p><ul><li><a href="https://hexo.io/docs/deployment.html">Deployment</a></li><li><a href="https://hexo.io/docs/">documentation</a></li><li><a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a></li><li><a href="https://github.com/hexojs/hexo/issues">GitHub</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adding local code to git</title>
      <link href="2019/04/adding-local-code-to-git/"/>
      <url>2019/04/adding-local-code-to-git/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Create the new repository: <a href="https://github.com/new">https://github.com/new</a><br>1.1 Example name <code>EventLogger</code><br>1.2 Create as Public and dont add a README yet</p></li><li><p>Locate your folder in a command terminal: example <code>C:\Dev\EventLogger</code><br>2.1 run <code>git init</code>, this will create a <code>.git</code> folder</p></li><li><p>Set the <code>Git commit user setting</code><br>3.1 <code>C:\Dev\EventLogger\.git\config</code><br>3.2 Add as follows</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name &#x3D; Carl</span><br><span class="line">email &#x3D; carl.paton@gmail.com</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Run <code>git add .</code> to stage your local files<br>4.1 Run <code>git status</code> to confirm your files are added/staged</p></li><li><p>Run <code>git commit -m &quot;first commit&quot;</code><br>5.1 Run <code>git log</code> to confirm your user setting`</p></li><li><p>Run <code>git remote add origin https://github.com/carlpaton/EventLogger.git</code></p></li><li><p>Run <code>git push -u origin master</code></p></li></ol><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><ol><li>Update the <code>config</code> to include your credentials</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;USERNAME:PASSWORD@github.com&#x2F;carlpaton&#x2F;EventLogger.git&quot;</span><br></pre></td></tr></table></figure><ul><li>NOTE: Credentials are stored in plain text!</li></ul><p>test</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSQL Restore Dump</title>
      <link href="2019/03/psql-restore-dump/"/>
      <url>2019/03/psql-restore-dump/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/carlpaton/docker-psql-restore-dump">https://github.com/carlpaton/docker-psql-restore-dump</a></li></ul><p>This will create 2 containers <code>postgres-db</code> and <code>postgres-copy</code>, db is the database and copy is a volitile container used to copy your <code>mydump.sql</code> file to a volumn, from there the db container will have access to it.</p><h3 id="Download-latest-image-and-spin-up"><a href="#Download-latest-image-and-spin-up" class="headerlink" title="Download latest image and spin up"></a>Download latest image and spin up</h3><p>From powershell <code>run.ps1</code></p><ul><li><a href="https://github.com/carlpaton/docker-psql-restore-dump/blob/master/run.ps1">https://github.com/carlpaton/docker-psql-restore-dump/blob/master/run.ps1</a></li></ul><h3 id="Create-some-tables-data"><a href="#Create-some-tables-data" class="headerlink" title="Create some tables / data"></a>Create some tables / data</h3><p><em>This step is not needed if you already have a dump file</em></p><p>Connect with any editor (PgAdmin, Dbeaver) to <code>localhost:5432</code> with username <code>postgres</code> and password <code>postgres</code> then add some data to be used with the dump</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE public.staff_master ( id serial NOT NULL, first_name text, surname text, email text, insert_date date, salary real, CONSTRAINT employee_pkey PRIMARY KEY (id));</span><br><span class="line">INSERT INTO public.staff_master (first_name, surname, email, insert_date, salary) VALUES (&#39;carl psql&#39;, &#39;my surname&#39;, &#39;email@domain.com&#39;, NOW(), 0);</span><br></pre></td></tr></table></figure><h3 id="Create-interactive-session"><a href="#Create-interactive-session" class="headerlink" title="Create interactive session"></a>Create interactive session</h3><p>From powershell <code>docker exec -it postgres-db bash</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dump</span><br><span class="line">dir</span><br></pre></td></tr></table></figure><p>This should then reflect the file you copied <code>mydump.sql</code></p><p>You can also <code>CAT mydump.sql</code> but if its large your pc may fall on its head.</p><h3 id="Dump-something-to-test-with-from-‘postgres’"><a href="#Dump-something-to-test-with-from-‘postgres’" class="headerlink" title="Dump something to test with from ‘postgres’"></a>Dump something to test with from ‘postgres’</h3><p><em>This step is not needed if you already have a dump file</em></p><p>From powershell <code>pg_dump -U postgres -v -Fc postgres -f /dump/mydump.dump</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure><p>You should now see <code>mydump.dump</code> and <code>mydump.sql</code> where the dump file is the one you just created</p><h3 id="Create-‘mydb’"><a href="#Create-‘mydb’" class="headerlink" title="Create ‘mydb’"></a>Create ‘mydb’</h3><p>From powershell <code>psql -U postgres -c &quot;CREATE DATABASE mydb OWNER = postgres TABLESPACE pg_default;&quot;</code></p><h3 id="Restore-dump"><a href="#Restore-dump" class="headerlink" title="Restore dump"></a>Restore dump</h3><p>From powershell <code>pg_restore -U postgres -d mydb &lt; /dump/mydump.dump</code></p><h3 id="Quit"><a href="#Quit" class="headerlink" title="Quit"></a>Quit</h3><p>CTRL+C Exit</p><h3 id="Alternative-Copy"><a href="#Alternative-Copy" class="headerlink" title="Alternative Copy"></a>Alternative Copy</h3><p>If the file is massive you can try this method to copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mydump.sql bd2f2aae3b84:&#x2F;dump&#x2F;mydump.sql</span><br></pre></td></tr></table></figure><p>.. where <code>bd2f2aae3b84</code> is the name of your container which you can get by running <code>docker ps --all</code></p><p>You can then check the files on the container with <code>ls -l --block-size=M</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fizz Buzz</title>
      <link href="2019/03/rosetta-code-fizzbuzz/"/>
      <url>2019/03/rosetta-code-fizzbuzz/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>A popular interview question is the <code>FizzBuzz test</code>, its based on a children’s game where you count from 1 to 100 and for multiples of 3 say ‘Fizz’, multiples of 5 say “Buzz”, if both say ‘FizzBuzz’ else say the number.</p><p>For example, a typical round of fizz buzz would start as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">Fizz</span><br><span class="line">4</span><br><span class="line">Buzz Fizz</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">Fizz</span><br><span class="line">Buzz</span><br><span class="line">11</span><br><span class="line">Fizz</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">Fizz Buzz</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">Fizz</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Write a program that prints the numbers from 1 to 100. But for multiples of three print <code>Fizz</code> instead of the number and for the multiples of five print <code>Buzz</code>. For numbers which are multiples of both three and five print <code>FizzBuzz</code>.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetFizzBuzz</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> outPut = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        outPut = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            outPut = <span class="string">&quot;Fizz&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            outPut += <span class="string">&quot;Buzz&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (outPut.Equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">            outPut = i.ToString();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(outPut);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://carlpaton.github.io/2018/06/docker-fizzbuzz-image/">Docker Fizzbuzz Image</a></li><li><a href="https://github.com/carlpaton/FizzBuzz">https://github.com/carlpaton/FizzBuzz</a></li><li><a href="http://rosettacode.org/wiki/Talk:FizzBuzz">http://rosettacode.org/wiki/Talk:FizzBuzz</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reporting Frameworks</title>
      <link href="2019/03/reporting-frameworks/"/>
      <url>2019/03/reporting-frameworks/</url>
      
        <content type="html"><![CDATA[<p>Crystal Reports</p><ul><li><a href="https://www.crystalreports.com/resources/">https://www.crystalreports.com/resources/</a></li><li><a href="https://www.tektutorialshub.com/crystal-reports/how-to-download-and-install-crystal-report-runtime/">https://www.tektutorialshub.com/crystal-reports/how-to-download-and-install-crystal-report-runtime/</a></li></ul><p>BIRT Reports</p><ul><li><a href="https://www.eclipse.org/birt/">https://www.eclipse.org/birt/</a></li></ul><p>iTextSharp</p><ul><li><a href="https://github.com/itext/itextsharp">https://github.com/itext/itextsharp</a></li></ul><p>PDFSharp</p><ul><li><a href="http://www.pdfsharp.net/wiki/PDFsharpSamples.ashx">http://www.pdfsharp.net/wiki/PDFsharpSamples.ashx</a></li><li><a href="https://github.com/empira/PDFsharp">https://github.com/empira/PDFsharp</a></li></ul><p>Visual Studio reporting</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftReportProjectsforVisualStudio">https://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftReportProjectsforVisualStudio</a></li></ul><p>xsPDF</p><ul><li><a href="https://www.xspdf.com/">https://www.xspdf.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Accessibility Utilities</title>
      <link href="2019/02/accessibility-utilities/"/>
      <url>2019/02/accessibility-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="NVDA"><a href="#NVDA" class="headerlink" title="NVDA"></a>NVDA</h3><p>The NVDA screen reader can be downloaded free of charge by anyone. </p><ul><li><a href="https://www.nvaccess.org/download/">nvaccess.org/download</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack query string params vertically</title>
      <link href="2019/02/stack-query-string-params-vertically/"/>
      <url>2019/02/stack-query-string-params-vertically/</url>
      
        <content type="html"><![CDATA[<p>find and replace &amp; with \n&amp;</p><p><img src="/d/stack-query-string-params-vertically/stack-1.png" alt="find and replace"></p>]]></content>
      
      
      
        <tags>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Observables Subscribe</title>
      <link href="2019/02/angular-observables-subscribe/"/>
      <url>2019/02/angular-observables-subscribe/</url>
      
        <content type="html"><![CDATA[<p>The example below shows an <code>Observable</code> input into a child component, as its a stream that can change you need to subscribe to those changes and use a change detector to update the template.</p><p>If possible rather do the subscription in the parent component and input the data. Example <code>@Input() public inputType: IInputType;</code></p><h3 id="child-component"><a href="#child-component" class="headerlink" title="child.component"></a>child.component</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">child.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ChangeDetectorRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildComponent</span> <span class="title">implements</span> <span class="title">OnChanges</span>, <span class="title">OnDestroy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Input</span>() <span class="keyword">public</span> observable$: Observable&lt;IInputType&gt;;</span><br><span class="line"><span class="keyword">private</span> _destroyed$: Subject&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> Subject&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> someString: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> _changeDetectorRef: ChangeDetectorRef</span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ngOnChanges () &#123;</span><br><span class="line">        <span class="built_in">this</span>.observable$.pipe(</span><br><span class="line">            takeUntil(<span class="built_in">this</span>._destroyed$))</span><br><span class="line">            .subscribe(<span class="function"><span class="params">inputType</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setSomeString(inputType);</span><br><span class="line">                <span class="built_in">this</span>._changeDetectorRef.markForCheck();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ngOnDestroy () &#123;</span><br><span class="line">        <span class="built_in">this</span>._destroyed$.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> setSomeString (inputType: IInputType): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.someString = inputType.someProperty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> someString: &#123;&#123;someString&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/observables">https://angular.io/guide/observables</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Observables Pipe Async</title>
      <link href="2019/02/angular-observables-pipe-async/"/>
      <url>2019/02/angular-observables-pipe-async/</url>
      
        <content type="html"><![CDATA[<p>Observables provide support for passing messages between publishers and subscribers in your application. In the example below <code>parent.component</code> contains the <code>child.component</code> which binds to members <code>counterSubject</code>, <code>countObservable$</code> and <code>foo</code> declared in the parent. </p><p>In the interpolated html the  <code>| async</code> sets up and destroys the subscription for you. It is common practice for the observable to be suffixed with $, so here the observable is <code>countObservable$</code></p><h3 id="parent-component"><a href="#parent-component" class="headerlink" title="parent.component"></a>parent.component</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">parent.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> counterSubject = <span class="keyword">new</span> BehaviorSubject&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">private</span> countObservable$: Observable&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">  <span class="keyword">private</span> foo = <span class="string">&#x27;this is the text value of foo&#x27;</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.countObservable$ = <span class="built_in">this</span>.counterSubject</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">inc</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _count = <span class="built_in">this</span>.counterSubject.getValue() + <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.counterSubject.next(_count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">parent-search.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countObservable: &#123;&#123;countObservable$ | async&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countSubject: &#123;&#123;counterSubject.getValue()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;inc()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;app-child</span><br><span class="line">  [foo]=&quot;foo&quot;</span><br><span class="line">  [countObservable]=&quot;countObservable$&quot;</span><br><span class="line">  [counterSubject]=&quot;counterSubject&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="child-component"><a href="#child-component" class="headerlink" title="child.component"></a>child.component</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">child-control-search.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() foo : <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Input</span>() countObservable : Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">  <span class="meta">@Input</span>() counterSubject : Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">child.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> foo: &#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countObservable: &#123;&#123;countObservable | async&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countSubject: &#123;&#123;counterSubject | async&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/observables">https://angular.io/guide/observables</a></li><li><a href="https://stackblitz.com/edit/angular-elzdzs">https://stackblitz.com/edit/angular-elzdzs</a></li><li><a href="https://github.com/carlpaton/angular-observables">https://github.com/carlpaton/angular-observables</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front End Technologies</title>
      <link href="2019/01/front-end-technologies/"/>
      <url>2019/01/front-end-technologies/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Framework</th><th>State Management Library</th><th>Other Technolologies Used</th><th>Comment</th></tr></thead><tbody><tr><td>Angular</td><td>NgRx</td><td>Typescript</td><td>Redux with RxJs = NgRx</td></tr><tr><td></td><td></td><td>RxJs</td><td></td></tr><tr><td>React</td><td>Redux</td><td></td><td>Formally known as <code>Flux</code></td></tr><tr><td>Vue</td><td>Vuex</td><td></td><td>WAT</td></tr></tbody></table><h3 id="NgRx"><a href="#NgRx" class="headerlink" title="NgRx"></a>NgRx</h3><ul><li><a href="/2019/01/angular-reference/">Angular reference</a></li></ul><h3 id="RxJs"><a href="#RxJs" class="headerlink" title="RxJs"></a>RxJs</h3><ul><li><a href="https://www.udemy.com/rxjs-course/">https://www.udemy.com/rxjs-course/</a> ~ RxJs 6 In Practice </li><li><a href="https://www.lynda.com/Angular-tutorials/Learning-RxJS/630623-2.html">https://www.lynda.com/Angular-tutorials/Learning-RxJS/630623-2.html</a> ~ Rel. 1/12/2018</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> client side scripting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning &amp; Resources</title>
      <link href="2019/01/learning-resources/"/>
      <url>2019/01/learning-resources/</url>
      
        <content type="html"><![CDATA[<p>There are so many resources (many free) on the internet today that we are spoilt for choice. These are some that I have come across in my quest to better my craft. </p><p>Also see my list of <a href="/2019/01/legends-influencers/">Legends &amp; Influencers</a> and <a href="/2019/01/online-learning-portals/">Online Learning Portals</a>.</p><h4 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h4><ul><li><a href="https://docs.microsoft.com/en-us/learn/modules/welcome-to-azure/">https://docs.microsoft.com/en-us/learn/modules/welcome-to-azure/</a></li><li><a href="https://aws.amazon.com/">https://aws.amazon.com/</a></li><li><a href="https://www.qwiklabs.com/">https://www.qwiklabs.com/</a></li></ul><h4 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a>Icons</h4><ul><li><a href="https://css.gg/">https://css.gg/</a></li></ul><h4 id="Content-amp-Fake-API"><a href="#Content-amp-Fake-API" class="headerlink" title="Content &amp; Fake API"></a>Content &amp; Fake API</h4><ul><li><a href="https://www.fillmurray.com/">https://www.fillmurray.com/</a> , <a href="https://placekitten.com/">https://placekitten.com/</a></li><li><a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a></li><li><a href="https://unsplash.com/">https://unsplash.com/</a></li></ul><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ul><li><a href="https://cssbattle.dev/">https://cssbattle.dev/</a></li><li><a href="https://css-tricks.com/">css-tricks.com</a></li><li><a href="https://www.sassmeister.com/">https://www.sassmeister.com/</a></li></ul><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><ul><li><a href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics">Getting Started – Git Basics</a></li><li><a href="https://help.github.com/en/articles/organizing-information-with-tables">https://help.github.com/en/articles/organizing-information-with-tables</a></li></ul><h4 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h4><ul><li><a href="https://testing.googleblog.com/search/label/TotT">Testing on the Toilet</a> – blog by Google</li></ul><h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><ul><li><a href="https://docs.emmet.io/cheat-sheet/">docs.emmet.io/cheat-sheet/</a></li><li><a href="https://caniuse.com/">https://caniuse.com/</a></li><li><a href="https://www.base64-image.de/">https://www.base64-image.de/</a></li><li>Free PDF Books – <a href="http://www.allitebooks.in/">www.allitebooks.in</a><ul><li><em>All of the work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</em></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Legends &amp; Influencers</title>
      <link href="2019/01/legends-influencers/"/>
      <url>2019/01/legends-influencers/</url>
      
        <content type="html"><![CDATA[<p>I try to read as much as possible and link to posts that influence my way of thinking, a give credit where its due mindset.</p><p>These are Legends &amp; Influencers who have over the years impacted my own professional continual development.</p><p>Also a special shout out to my peers who have explained software related magic to me, sometimes more than once. You know who you are :)</p><h3 id="C-NET-MVC-Patterns"><a href="#C-NET-MVC-Patterns" class="headerlink" title="C#, .NET, MVC, Patterns"></a>C#, .NET, MVC, Patterns</h3><ul><li><a href="http://msmvps.com/blogs/deborahk">Deborah Kurata – msmvps.com/blogs/deborahk</a></li><li><a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk - udemy.com/user/dmitrinesteruk</a></li><li><a href="http://jesseliberty.com/">Jesse Liberty – jesseliberty.com</a></li><li><a href="https://jhmt.github.io/">Jun Hashimoto - jhmt.github.io</a></li><li>Mark Long - Infinite Skills/O’Reilly; Specifically helped with <a href="https://www.udemy.com/course/programming-in-microsoft-c-exam-70-483/">70-483</a></li><li><a href="https://martinfowler.com/">Martin Fowler - martinfowler.com</a></li><li><a href="https://blog.cleancoder.com/">Robert C. Martin – blog.cleancoder.com</a></li><li><a href="http://odetocode.com/blogs/all">Scott Allen – odetocode.com</a></li><li><a href="https://ardalis.com/">Steve Smith – ardalis.com</a></li><li><a href="https://twitter.com/tonynorthrup">Tony Northrup – twitter.com/tonynorthrup</a></li></ul><h3 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h3><ul><li><a href="http://hacklewayne.com/">Hackle Wayne - hacklewayne.com</a></li></ul><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><p>Learnt heaps from Tommy about <strong>Javascript</strong>, <strong>CSS</strong>, <strong>Typescript</strong>, <strong>Front End Frameworks</strong> and he help helped me setup my <a href="/tags/hexo/">hexo</a> blog, thank you my mate!</p><ul><li><a href="https://www.javascriptgames.online/">Ania Kubów - javascriptgames.online</a></li><li><a href="https://hoehoetester.github.io/">Tommy Tsuda - hoehoetester.github.io</a></li></ul><h3 id="Java-GIT"><a href="#Java-GIT" class="headerlink" title="Java, GIT"></a>Java, GIT</h3><ul><li><a href="https://melissapalmer.github.io/">Melissa Palmer – melissapalmer.github.io</a></li><li><a href="https://nvie.com/about/">Vincent Driessen – nvie.com/about/</a></li></ul><h3 id="Docker-Containers"><a href="#Docker-Containers" class="headerlink" title="Docker, Containers"></a>Docker, Containers</h3><ul><li><a href="http://container.training/">Jerome Petazzoni – container.training</a></li><li><a href="http://nigelpoulton.com/">Nigel Poulton – nigelpoulton.com</a></li><li><a href="http://leeroya.com/">Lee-Roy Ashworth – leeroya.com</a></li></ul><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><ul><li><a href="http://osmyn.com/">Rusty Divine – osmyn.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Certification Path</title>
      <link href="2019/01/microsoft-certification-path/"/>
      <url>2019/01/microsoft-certification-path/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Updated 20/05/2020</strong></em></p><p>Although I view the <a href="https://www.microsoft.com/en-us/learning/certification-overview.aspx">Microsoft Technical Certifications</a> certificates as a money making mechanism the skills measured for each certificate is a really good list to align your own skills to. (As a .Net developer) Perhaps I’m just a hypocrite that doesn’t have any certificates and secretly wants them :D</p><h3 id="Role-Based"><a href="#Role-Based" class="headerlink" title="Role Based"></a>Role Based</h3><p>Microsoft are <a href="https://www.microsoft.com/en-us/learning/community-blog-post.aspx?BlogId=8&Id=375282">retiring MCSA / MCSD along with other certifications</a> in favor of role based certifications.</p><ul><li><a href="https://docs.microsoft.com/en-us/learn/certifications/exams/az-900">AZ-900 (Microsoft Azure Fundamentals)</a><ul><li><a href="https://www.udemy.com/course/microsoft-azure-beginners-guide/">udemy.com/course/microsoft-azure-beginners-guide</a></li></ul></li><li><a href="https://docs.microsoft.com/en-gb/learn/certifications/azure-developer?WT.mc_id=certtransslide-slide-wwl">Azure Developer Associate</a><ul><li><a href="https://docs.microsoft.com/en-gb/learn/certifications/exams/az-204">AZ-204 (Developing Solutions for Microsoft Azure)</a></li></ul></li></ul><h3 id="Retired"><a href="#Retired" class="headerlink" title="Retired"></a>Retired</h3><p>Looks like MTA is staying for now - who knows what will happen in the future.</p><ul><li><a href="https://www.microsoft.com/en-us/learning/mta-summary-certification.aspx">MTA – Microsoft Technology Associate</a><ul><li><a href="https://www.microsoft.com/en-us/learning/exam-98-361.aspx">Exam 98-361 (Software Development Fundamentals)</a></li></ul></li><li><a href="https://www.microsoft.com/en-us/learning/mcsa-certification.aspx">MCSA – Microsoft Certified Solutions Associate</a><ul><li><a href="https://www.microsoft.com/en-us/learning/mcsa-web-applications-certification.aspx">App Builder, Web Applications</a><ul><li><a href="https://www.microsoft.com/en-us/learning/exam-70-483.aspx">Exam 70-483/Course 20483 (Programming in C#)</a><ul><li><a href="https://www.udemy.com/programming-in-microsoft-c-exam-70-483/">udemy.com</a></li><li><a href="https://www.exam-labs.com/exam/70-483">exam-labs.com</a></li><li><a href="https://mva.microsoft.com/en-US/training-courses/programming-in-c-jump-start-14254?l=j0iuozSfB_6900115888">mva.microsoft.com</a></li></ul></li><li><a href="https://www.microsoft.com/en-us/learning/exam-70-486.aspx">Exam 70-486/Course 20486 (Developing ASP.NET MVC Web Applications)</a></li></ul></li></ul></li><li><a href="https://www.microsoft.com/en-us/learning/mcsd-certification.aspx">MCSD – Microsoft Certified Solutions Developer</a><ul><li><a href="https://www.microsoft.com/en-us/learning/mcsd-app-builder-certification.aspx">App Builder</a><ul><li><a href="https://www.microsoft.com/en-us/learning/exam-70-487.aspx">Exam 70-487/Course 20487 (Developing Microsoft Azure and Web Services)</a></li><li><a href="https://www.microsoft.com/en-us/learning/exam-70-497.aspx">Exam 70-497 (Software Testing with Visual Studio)</a></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Online Learning Portals</title>
      <link href="2019/01/online-learning-portals/"/>
      <url>2019/01/online-learning-portals/</url>
      
        <content type="html"><![CDATA[<p>Some useful (some even free) online learning and reference portals.</p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul><li><a href="https://www.udemy.com/">https://www.udemy.com</a> (individual course purchase)</li><li><a href="https://www.lynda.com/portal/sip?org=aucklandlibraries.govt.nz">https://www.lynda.com/portal/sip?org=aucklandlibraries.govt.nz</a> (free with organization login such as aucklandlibraries.govt.nz)</li><li><a href="https://www.freecodecamp.org/">https://www.freecodecamp.org/</a></li><li><a href="https://www.pluralsight.com/">https://www.pluralsight.com</a> (!free, monthly subscription)</li><li><a href="https://academind.com/learn/">https://academind.com/learn/</a> (some free, some once off purchase also monthly)</li></ul><h3 id="Class-Central"><a href="#Class-Central" class="headerlink" title="Class Central"></a>Class Central</h3><p>Learn from the best. Discover thousands of free online courses from top universities around the world like MIT, Stanford, and Harvard.</p><ul><li><a href="https://www.classcentral.com/">https://www.classcentral.com/</a></li></ul><h3 id="Containers-amp-Cloud"><a href="#Containers-amp-Cloud" class="headerlink" title="Containers &amp; Cloud"></a>Containers &amp; Cloud</h3><ul><li><a href="https://www.qwiklabs.com/">https://www.qwiklabs.com/</a> (!free)</li><li><a href="http://container.training/">http://container.training</a></li></ul><h3 id="NET-amp-ASP-NET"><a href="#NET-amp-ASP-NET" class="headerlink" title=".NET &amp; ASP.NET"></a>.NET &amp; ASP.NET</h3><ul><li><a href="https://www.youtube.com/user/IAmTimCorey/playlists/">https://www.youtube.com/user/IAmTimCorey/playlists/</a> (Heaps on C#)</li><li><a href="https://www.youtube.com/c/dotNET/playlists/">https://www.youtube.com/c/dotNET/playlists/</a></li><li><a href="https://www.youtube.com/c/csharpfritz/playlists/">https://www.youtube.com/c/csharpfritz/playlists/</a></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="https://realpython.com/">https://realpython.com/</a></li></ul><h3 id="Uncategorized"><a href="#Uncategorized" class="headerlink" title="Uncategorized"></a>Uncategorized</h3><ul><li><a href="https://channel9.msdn.com/">https://channel9.msdn.com</a></li><li><a href="https://www.w3schools.com/">https://www.w3schools.com</a></li><li><a href="https://mva.microsoft.com/">https://mva.microsoft.com</a></li><li><a href="https://www.edx.org/">https://www.edx.org</a></li><li><a href="https://www.coursera.org/?authMode=signup">https://www.coursera.org</a></li><li><a href="https://www.udacity.com/">https://www.udacity.com</a></li><li><a href="https://egghead.io/">https://egghead.io</a></li><li><a href="https://codewithmosh.com/courses">https://codewithmosh.com/courses</a></li><li><a href="https://linuxacademy.com/">https://linuxacademy.com/</a></li><li><a href="https://frontendmasters.com/">https://frontendmasters.com/</a> (subscription based)</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.freecodecamp.org/news/free-online-programming-cs-courses/">https://www.freecodecamp.org/news/free-online-programming-cs-courses/</a></li><li><a href="https://medium.com/quick-code/the-best-free-resources-to-learn-programming-online-in-2019-4dfe23a62c7f">https://medium.com/quick-code/the-best-free-resources-to-learn-programming-online-in-2019-4dfe23a62c7f</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spelling Lessons</title>
      <link href="2019/01/spelling-lessons/"/>
      <url>2019/01/spelling-lessons/</url>
      
        <content type="html"><![CDATA[<p>Early on in my working career I did telephonic and Email support for <a href="https://vodacommessaging.co.za/">Vodacom Messaging</a> which is run by <a href="https://www.aat.co.za/">Always Active Technologies</a> in Kloof, South Africa. I struggled with spelling and grammar but fortunately a senior Systems Architect took a personal interest in me and often commented on my Emails offering advice, spelling and grammar corrections.</p><p>Later he was fundamental in my software development path and I will forever be grateful for the help and patience. These days I try read and learn as much as possible, this page dedicated to documenting words I have to google the meaning of and would probably struggle to spell.</p><ul><li><a href="https://dictionary.cambridge.org/dictionary/english/arbiter">Arbiters</a><ul><li>A person who settles a dispute or has ultimate authority in a matter.</li></ul></li><li><a href="https://en.wikipedia.org/wiki/Software_entropy">Code Entropy</a><ul><li>As systems around our code change, the code left untouched becomes brittle.</li></ul></li><li><a href="https://www.lexico.com/en/definition/corollary">Corollary</a><ul><li>A proposition that follows from (and is often appended to) one already proved.</li></ul></li><li><a href="https://www.lexico.com/en/definition/eschew">Eschews</a><ul><li>Deliberately avoid using; abstain from.</li></ul></li><li><a href="https://www.lexico.com/en/definition/neophyte">Neophyte</a><ul><li>A person who is new to a subject or activity.</li></ul></li><li><a href="https://www.dictionary.com/browse/paradigm">Paradigm</a><ul><li>A typical example or pattern of something; a pattern or model.</li></ul></li><li><a href="https://www.lexico.com/en/definition/stylistically">Stylistically</a><ul><li>In a way that relates to the style in which something is written or done.</li></ul></li><li><a href="https://dictionary.cambridge.org/dictionary/english/succinct">Succinctly</a><ul><li>In a brief and clearly expressed manner.</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vendor Prefixes</title>
      <link href="2019/01/css-vendor-prefixes/"/>
      <url>2019/01/css-vendor-prefixes/</url>
      
        <content type="html"><![CDATA[<p><strong>CSS vendor prefixes</strong>, also sometimes known as or <strong>CSS browser prefixes</strong>, are a way for <strong>browser</strong> makers to <strong>add</strong> support for new <strong>CSS</strong> features before those features are fully supported in all browsers.</p><p>Using a tool like an online tool like <a href="https://autoprefixer.github.io/">autoprefixer</a> can determine what prefixes need to be added. Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// recommended <span class="selector-tag">to</span> be</span><br><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    -webkit-box-<span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">    -ms-<span class="attribute">flex</span>-positive:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is using recommendations from [<a href="https://caniuse.com/#search=CSS%20Flexible%20Box%20Layout%20Module]">https://caniuse.com/#search=CSS%20Flexible%20Box%20Layout%20Module]</a>(<a href="https://caniuse.com/#search=CSS">https://caniuse.com/#search=CSS</a> Flexible Box Layout Module)</p><h3 id="Prefix-Browser-Relationship"><a href="#Prefix-Browser-Relationship" class="headerlink" title="Prefix Browser Relationship"></a>Prefix Browser Relationship</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-ms                ~ IE</span><br><span class="line">-webkit            ~ Chrome, Safari</span><br><span class="line">-moz               ~ Firefox</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://autoprefixer.github.io/">https://autoprefixer.github.io/</a></li><li><a href="https://caniuse.com/">https://caniuse.com/</a></li><li><a href="https://www.lifewire.com/css-vendor-prefixes-3466867">https://www.lifewire.com/css-vendor-prefixes-3466867</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Common Features</title>
      <link href="2019/01/angular-common-features/"/>
      <url>2019/01/angular-common-features/</url>
      
        <content type="html"><![CDATA[<p>Common features of Angular’s template syntax, the source code for the below is available at <a href="https://github.com/carlpaton/angular.io-start">https://github.com/carlpaton/angular.io-start</a> and was built using <a href="https://angular.io/start">https://angular.io/start</a></p><h3 id="ngFor"><a href="#ngFor" class="headerlink" title="ngFor"></a>ngFor</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let product of products&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; products &#125; <span class="keyword">from</span> <span class="string">&#x27;../products&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;app-product-list&#x27;</span>,</span><br><span class="line">  templateUrl: <span class="string">&#x27;./product-list.component.html&#x27;</span>,</span><br><span class="line">  styleUrls: [<span class="string">&#x27;./product-list.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductListComponent</span> </span>&#123;</span><br><span class="line">  products = products;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> products = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;Phone XL&#x27;</span>,</span><br><span class="line">    price: <span class="number">799</span>,</span><br><span class="line">    description: <span class="string">&#x27;A large phone with one of the best screens&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="ngIf-Interpolation"><a href="#ngIf-Interpolation" class="headerlink" title="ngIf, Interpolation { { } }"></a>ngIf, Interpolation { { } }</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;product.description&quot;</span>&gt;</span></span><br><span class="line">Description: &#123;&#123; product.description &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Property-binding"><a href="#Property-binding" class="headerlink" title="Property binding [ ]"></a>Property binding [ ]</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">title</span>]=<span class="string">&quot;product.name + &#x27; details&#x27;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; product.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Event-binding"><a href="#Event-binding" class="headerlink" title="Event binding ( )"></a>Event binding ( )</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;share()&quot;</span>&gt;</span></span><br><span class="line">Share</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.ts</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductListComponent</span> </span>&#123;</span><br><span class="line">  products = products;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">share</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(<span class="string">&#x27;The product has been shared hoe!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Here <code>product</code> is created in the <code>ngFor</code>  loop and is an input to component <code>app-product-alerts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line">&lt;div *ngFor=<span class="string">&quot;let product of products&quot;</span>&gt;</span><br><span class="line">  &lt;app-product-alerts</span><br><span class="line">    [product]=<span class="string">&quot;product&quot;</span></span><br><span class="line">  &lt;/app-product-alerts&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>A property named <code>product</code> is defined with an <code>@Input</code> decorator</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Input &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAlertsComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Input</span>() product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This input can then be used in the html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;product.price &gt; 700&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Notify Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Emit an event up to the product list component from <code>product-alerts.component</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAlertsComponent</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Input</span>() product;</span><br><span class="line">  <span class="meta">@Output</span>() notify = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Event binding to call the <code>notify.emit()</code> method</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;product.price &gt; 700&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;notify.emit()&quot;</span>&gt;</span>Notify Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Behavior that should happen when the button is clicked (In the parent component <code>product-list.component</code>)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductListComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">onNotify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(<span class="string">&#x27;You will be notified when the product goes on sale&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Update the product list component to receive output from the product alerts component.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line">&lt;app-product-alerts</span><br><span class="line">  [product]=&quot;product&quot; </span><br><span class="line">  (notify)=&quot;onNotify()&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product-alerts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/template-syntax">https://angular.io/guide/template-syntax</a></li><li><a href="https://angular.io/guide/component-interaction">https://angular.io/guide/component-interaction</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Reference</title>
      <link href="2019/01/angular-reference/"/>
      <url>2019/01/angular-reference/</url>
      
        <content type="html"><![CDATA[<h3 id="Change-detection"><a href="#Change-detection" class="headerlink" title="Change detection"></a>Change detection</h3><ul><li><a href="https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f">https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f</a></li><li><a href="https://medium.com/@bencabanes/angular-change-detection-strategy-an-introduction-819aaa7204e7">https://medium.com/@bencabanes/angular-change-detection-strategy-an-introduction-819aaa7204e7</a></li></ul><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><ul><li><a href="https://medium.com/@luukgruijs/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0">https://medium.com/@luukgruijs/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0</a></li></ul><h3 id="Unsubscribe-RxJS-Observables"><a href="#Unsubscribe-RxJS-Observables" class="headerlink" title="Unsubscribe RxJS Observables"></a>Unsubscribe RxJS Observables</h3><ul><li><a href="https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0">https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0</a></li></ul><h3 id="NgRx"><a href="#NgRx" class="headerlink" title="NgRx"></a>NgRx</h3><ul><li><a href="https://www.udemy.com/ngrx-course/">https://www.udemy.com/ngrx-course/</a> ~ NgRx In Depth (Angular 8)</li><li><a href="https://ngrx.io/guide/store">https://ngrx.io/guide/store</a></li><li><a href="https://www.lynda.com/Angular-tutorials/Learning-NgRx/709847-2.html">https://www.lynda.com/Angular-tutorials/Learning-NgRx/709847-2.html</a> ~ Rel. 8/3/2018</li></ul><h3 id="Ubuntu-Setup"><a href="#Ubuntu-Setup" class="headerlink" title="Ubuntu Setup"></a>Ubuntu Setup</h3><ul><li><a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall">https://github.com/nodesource/distributions/blob/master/README.md#debinstall</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_11.x | sudo -E bash - </span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">sudo apt install npm</span><br><span class="line">sudo npm install -g @angular&#x2F;cli</span><br><span class="line"></span><br><span class="line">-- update npm with &#39;n&#39; if you cant update the version with the above</span><br><span class="line">sudo npm install -g n</span><br><span class="line">sudo n latest</span><br><span class="line"></span><br><span class="line">-- restore dependencies after git clone</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Pipes</title>
      <link href="2019/01/angular-pipes/"/>
      <url>2019/01/angular-pipes/</url>
      
        <content type="html"><![CDATA[<p>Recently while building a new feature I found that moving logic out of the the .ts file into a pipe would make it far more re-usable in other components. The progression of this piece of work went under several revisions to reduce coupling and increase cohesion. </p><p>The initial logic looked something like this and was used to set the value of a public member ‘<em>displayInfo</em>‘ at <em>ngOnChanges</em> by calling <em>getDisplayInfo</em></p><p>The value of displayInfo was then displayed in the .html file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">some-example.components.ts</span><br><span class="line"></span><br><span class="line">public getDisplayInfo (obj1: CustomType1,  </span><br><span class="line">obj2: CustomType2,  </span><br><span class="line">obj3: CustomType3): string &#123; </span><br><span class="line">   <span class="keyword">let</span> details = [];</span><br><span class="line">   <span class="keyword">if</span> (obj1) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; prop1, prop2 &#125; = obj1; </span><br><span class="line">      details.push(<span class="string">`<span class="subst">$&#123;prop1&#125;</span> with some text and <span class="subst">$&#123;prop2&#125;</span>.`</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// other simliar logic using obj2 and obj3   </span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> details.join(<span class="string">&#x27; &#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some-example.components.html</span><br><span class="line"></span><br><span class="line">&#123;&#123; displayInfo &#125;&#125;</span><br></pre></td></tr></table></figure><p>This worked however could be made better with a pipe as follows</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">display-info.pipe.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>; </span><br><span class="line"><span class="comment">// other type imports</span></span><br><span class="line"></span><br><span class="line">@Pipe(&#123;</span><br><span class="line">    name: <span class="string">&#x27;sweetPrefixDisplayInfo&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayInfo</span> <span class="title">Pipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">    public transform (obj1: CustomType1, <span class="attr">obj2</span>: CustomType2,  </span><br><span class="line">obj3: CustomType3): string &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// exact logic from getDisplayInfo in &#x27;some-example.components.ts&#x27; </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">display-info.module.ts</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropertySearchCardDetailsPipe &#125; <span class="keyword">from</span> <span class="string">&#x27;./display-info.pipe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">         DisplayInfoPipe</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">exports</span>: [</span><br><span class="line">         DisplayInfoPipe</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayInfoPipeModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>The pipe was then imported as ‘DisplayInfoPipeModule’ into the module for my component in its module file <em>some-example.module.ts</em> This was then called in <em>some-example.components.ts</em> as follows</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some-example.components.html</span><br><span class="line"></span><br><span class="line">&#123;&#123; obj1 | sweetPrefixDisplayInfo:obj2:obj3 &#125;&#125;</span><br></pre></td></tr></table></figure><p>In my opinion this not only looks awkward but is not really how a pipe is intended to be used. It really should be seen as ‘hey sweetPrefixDisplayInfo take this value and format it’ the additional parameters could be to include additional formatting.</p><p>Example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; obj1.SomeDate | sweetPrefixDisplayInfo:includeTime &#125;&#125;</span><br></pre></td></tr></table></figure><p>However in my case we were creating a sentence string from three complex objects with rules to include parts of the sentence should valid objects be passed, these are the obj1, obj2 and obj3 objects. </p><p>As obj1, obj2 and obj3 are complex objects the pipe would not make use of all their properties, this is a code smell which is violating <a href="/2018/05/single-responsibility-principle-srp/">single responsibility</a> and <a href="/2018/04/interface-segregation-principle-isp/">interface segregation</a> principles.</p><p>The cleaner solution I feel would be to still use the pipe and introduce a new object specific to its function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayInfoData</span> </span>&#123;</span><br><span class="line">    public somePropWeCareAbout1: string; </span><br><span class="line">    public somePropWeCareAbout2: string;</span><br><span class="line">    public somePropWeCareAbout3: string;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ect  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Then set a public property <em>fooDisplayInfo</em> in <em>some-example.components.ts</em> to the value of an instance of the type DisplayInfoData with the properties mapped from obj1, obj2 and obj3</p><p>Then call the pipe as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; fooDisplayInfo | sweetPrefixDisplayInfo &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/pipes">https://angular.io/guide/pipes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex</title>
      <link href="2019/01/css-flex/"/>
      <url>2019/01/css-flex/</url>
      
        <content type="html"><![CDATA[<p>Flex Direction</p><ul><li><a href="https://codepen.io/charleyza/pen/qgBNgQ">https://codepen.io/charleyza/pen/qgBNgQ</a></li></ul><p>Flex Grow</p><ul><li><a href="https://codepen.io/charleyza/pen/RvwRdX">https://codepen.io/charleyza/pen/RvwRdX</a></li></ul><p>Flex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex: 0 0 auto;</span><br></pre></td></tr></table></figure><p>Is the same as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flex-grow: 0;</span><br><span class="line"></span><br><span class="line">flex-shrink: 0;</span><br><span class="line"></span><br><span class="line">flex-basis: auto;</span><br></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://codepen.io/collection/ngWZpo/">https://codepen.io/collection/ngWZpo/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Screen Shots</title>
      <link href="2019/01/screen-shots/"/>
      <url>2019/01/screen-shots/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://cloudshot.com/">http://cloudshot.com/</a></li><li><a href="https://support.microsoft.com/en-nz/help/13776/windows-use-snipping-tool-to-capture-screenshots">https://support.microsoft.com/en-nz/help/13776/windows-use-snipping-tool-to-capture-screenshots</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular CLI</title>
      <link href="2019/01/angular-cli/"/>
      <url>2019/01/angular-cli/</url>
      
        <content type="html"><![CDATA[<p>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate directive highlight</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://angular.io/cli">https://angular.io/cli</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Directives</title>
      <link href="2019/01/angular-directives/"/>
      <url>2019/01/angular-directives/</url>
      
        <content type="html"><![CDATA[<h2 id="Attribute-directives"><a href="#Attribute-directives" class="headerlink" title="Attribute directives"></a>Attribute directives</h2><p>An <strong>Attribute</strong> directive changes the appearance or behavior of a DOM element.</p><h3 id="routerLink"><a href="#routerLink" class="headerlink" title="routerLink"></a>routerLink</h3><p>Here <code>queryParams</code> is an input which is being set in the <code>fooParam$</code> observable, this would be useful to carry params from one page to another.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a</span><br><span class="line">class=&quot;some-bem__class&quot;</span><br><span class="line">routerLink=&quot;&#123;&#123; link.url &#125;&#125;&quot;</span><br><span class="line">[queryParams]=&quot;(fooParam$ | async )&quot;&gt;</span><br><span class="line">&#123;&#123; link.title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://angular.io/api/router/RouterLink">https://angular.io/api/router/RouterLink</a> </li><li><a href="https://angular.io/guide/attribute-directives">https://angular.io/guide/attribute-directives</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BEM - Blocks Elements and Modifiers</title>
      <link href="2019/01/css-bem/"/>
      <url>2019/01/css-bem/</url>
      
        <content type="html"><![CDATA[<p><strong>Block</strong>, encapsulates a standalone entity that is meaningful on its own such as a <code>nav</code> block.</p><p><strong>Element</strong>, parts of a block and have no standalone meaning. Any element is semantically tied to its block such as <code>.list-item-link</code></p><p><strong>Modifier</strong>, flags on blocks or elements used to change appearance, behavior or state such as <code>--hidden</code> or <code>--hover</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BLOCK__ELEMENT--MODIFIER</span><br><span class="line">nav__list-item-link--active</span><br></pre></td></tr></table></figure><p><img src="/d/css-bem/css-bem.png" alt="BEM Example"></p><p>Contrived example using common html elements <code>ul</code>, <code>li</code> and <code>a</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Explore<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Marketplace<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Classes that can be used</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>    -&gt;    <span class="selector-class">.list</span></span><br><span class="line"><span class="selector-tag">li</span>    -&gt;    <span class="selector-class">.list-item</span></span><br><span class="line"><span class="selector-tag">a</span>     -&gt;    <span class="selector-class">.list-item-link</span></span><br></pre></td></tr></table></figure><p>So finally this would be</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;gh-nav__list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;gh-nav__list-item-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Explore<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;gh-nav__list-item-link gh-nav__list-item-link--hover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Marketplace<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://getbem.com/introduction/">http://getbem.com/introduction/</a></li><li><a href="https://codepen.io/charleyza/pen/OJLGvZM">https://codepen.io/charleyza/pen/OJLGvZM</a></li><li><a href="https://fonts.google.com/?selection.family=Mansalva">https://fonts.google.com/?selection.family=Mansalva</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boxing size</title>
      <link href="2019/01/css-boxing-size/"/>
      <url>2019/01/css-boxing-size/</url>
      
        <content type="html"><![CDATA[<p>Boxing Size</p><ul><li><a href="https://codepen.io/charleyza/pen/ErxgKO">https://codepen.io/charleyza/pen/ErxgKO</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Specificity and selectors</title>
      <link href="2019/01/css-specificity-and-selectors/"/>
      <url>2019/01/css-specificity-and-selectors/</url>
      
        <content type="html"><![CDATA[<h3 id="Specificity"><a href="#Specificity" class="headerlink" title="Specificity"></a>Specificity</h3><p>Specificity uses a four-category system to give a CSS selector a value. The selector with the most specific value wins. Each </p><table><thead><tr><th>Specificity</th><th>High</th><th></th><th></th><th>Low</th></tr></thead><tbody><tr><td>Selector</td><td>Inline</td><td>ID</td><td>Class, pseudo-class, attribute</td><td>element</td></tr><tr><td>Weight</td><td>1,0,0,0</td><td>0,1,0,0</td><td>0,0,1,0</td><td>0,0,0,1</td></tr></tbody></table><p>Examples:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nav#nav &gt; li:hover &#123; colour:red; &#125;</span><br><span class="line">Results in 0,1,1,2</span><br><span class="line"></span><br><span class="line">li:nth-child(2):hover &#123; color:red; &#125;</span><br><span class="line">Results in 0,0,2,1</span><br></pre></td></tr></table></figure><h3 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h3><p>These can help you add weight to the <code>Specificity</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.myDiv &#123;</span><br><span class="line">    padding-top: 50px;</span><br><span class="line">    margin-top: -50px;    </span><br><span class="line">    </span><br><span class="line">    &amp;.myDiv2 &#123;</span><br><span class="line">    padding-top: 150px;</span><br><span class="line">    margin-top: -150px;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*Resulting CSS and what it would select on</span><br><span class="line"></span><br><span class="line">.myDiv &#123; padding-top: 50px; margin-top: -50px; &#125;               ~ 0,0,1,0</span><br><span class="line">.myDiv.myDiv2 &#123; padding-top: 150px; margin-top: -150px; &#125;      ~ 0,0,2,0</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;myDiv myDiv2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Universal-and-combinator-selectors"><a href="#Universal-and-combinator-selectors" class="headerlink" title="Universal and combinator selectors"></a>Universal and combinator selectors</h4><p>These have no effect on specificity.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// universal selector (*) matches elements of any type.</span><br><span class="line"></span><br><span class="line">* &#123; <span class="attribute">box-sizing</span>: border-box; <span class="attribute">font-family</span>: <span class="string">&quot;Open Sans&quot;</span>, sans-serif; &#125;</span><br><span class="line"></span><br><span class="line">// The adjacent sibling combinator (+) separates two selectors and matches the second element only if it immediately follows the first element, and both are children of the same parent element. Example: Paragraphs that come immediately after any image</span><br><span class="line"></span><br><span class="line">img + p &#123; font-style: bold; &#125;</span><br><span class="line"></span><br><span class="line">// The child combinator (&gt;) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the children of elements matched by the first. Example: List items that are children of the <span class="string">&quot;my-things&quot;</span> list</span><br><span class="line"></span><br><span class="line">ul.my-things &gt; li &#123; margin: <span class="number">2em</span>; &#125;</span><br><span class="line"></span><br><span class="line">// The general sibling combinator (~) separates two selectors and matches the second element only if it follows the first element (though not necessarily immediately), and both are children of the same parent element. Example: Paragraphs that are siblings of and subsequent to any image</span><br><span class="line"></span><br><span class="line">img ~ p &#123; color: red; &#125;</span><br><span class="line"></span><br><span class="line">// The descendant combinator — typically represented by <span class="selector-tag">a</span> single space ( ) character. Example: List items that are descendants of the <span class="string">&quot;my-things&quot;</span> list</span><br><span class="line"></span><br><span class="line">ul.my-things li &#123; margin: <span class="number">2em</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="pseudo-class"><a href="#pseudo-class" class="headerlink" title="pseudo-class"></a>pseudo-class</h4><p>Common <code>pseudo-class</code> selectors</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&amp;:first-child &#123;</span><br><span class="line">    margin-left: -8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&amp;:last-child &#123;</span><br><span class="line">    margin-bottom: 28px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&amp;:visited &#123;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:nth-child(1) &#123;</span><br><span class="line">    width: 900px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Attribute-Selector"><a href="#Attribute-Selector" class="headerlink" title="Attribute Selector"></a>Attribute Selector</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.someClass[someAttribute]</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity</a></li><li><a href="https://www.w3schools.com/css/css_specificity.asp">https://www.w3schools.com/css/css_specificity.asp</a></li><li><a href="https://dev.to/emmawedekind/css-specificity-1kca">https://dev.to/emmawedekind/css-specificity-1kca</a></li><li><a href="https://specifishity.com/">https://specifishity.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Boolean Coercion</title>
      <link href="2019/01/js-boolean-coercion/"/>
      <url>2019/01/js-boolean-coercion/</url>
      
        <content type="html"><![CDATA[<p>Boolean coercion: In javascript coercion, all values are converted to true except for the following values which are coerced to false:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(!!&quot;&quot;);         &#x2F;&#x2F; false</span><br><span class="line">console.log(!!0);          &#x2F;&#x2F; false</span><br><span class="line">console.log(!!null);       &#x2F;&#x2F; false</span><br><span class="line">console.log(!!undefined);  &#x2F;&#x2F; false</span><br><span class="line">console.log(!!NaN);        &#x2F;&#x2F; false</span><br><span class="line">console.log(!!false);      &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript">https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing with MSTest</title>
      <link href="2018/12/unit-testing-with-mstest/"/>
      <url>2018/12/unit-testing-with-mstest/</url>
      
        <content type="html"><![CDATA[<h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line">[TestClass]</span><br><span class="line">public class MyClassTests</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   [TestMethod]</span><br><span class="line">   public void UnitOfWork_InitialCondition_ExpectedResult()</span><br><span class="line">   &#123;</span><br><span class="line">      &#x2F;&#x2F; Arrange</span><br><span class="line">      &#x2F;&#x2F; Act</span><br><span class="line">      &#x2F;&#x2F; Assert</span><br><span class="line">      Assert.AreEqual(expected, actual);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-Asserts"><a href="#Other-Asserts" class="headerlink" title="Other Asserts"></a>Other Asserts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.IsTrue</span><br></pre></td></tr></table></figure><h3 id="ExpectedException"><a href="#ExpectedException" class="headerlink" title="ExpectedException"></a>ExpectedException</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ExpectedException(typeof(MyException))]</span><br><span class="line">[TestMethod]</span><br><span class="line">public void UnitOfWork_InitialCondition_ExpectedResult()</span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing">https://docs.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing</a></li><li><a href="https://www.automatetheplanet.com/mstest-cheat-sheet/#tab-con-3">https://www.automatetheplanet.com/mstest-cheat-sheet/#tab-con-3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing with NUnit</title>
      <link href="2018/12/unit-testing-with-nunit/"/>
      <url>2018/12/unit-testing-with-nunit/</url>
      
        <content type="html"><![CDATA[<p>Install from Nuget <code>3.12.0</code>, the <code>Mock</code> references below are from <a href="/2018/09/mocking-frameworks/">Moq</a> and the example’s <code>Unit Of Work</code> is <code>SomeMethod</code>.</p><h3 id="Assert-AreEqual"><a href="#Assert-AreEqual" class="headerlink" title="Assert.AreEqual"></a>Assert.AreEqual</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using Moq;</span><br><span class="line">using NUnit.Framework;</span><br><span class="line"></span><br><span class="line">[TestFixture]</span><br><span class="line">public class MyClassTest</span><br><span class="line">&#123;</span><br><span class="line">    private Mock&lt;ISomeService&gt; _someServiceMock;</span><br><span class="line"></span><br><span class="line">    [SetUp]</span><br><span class="line">    public void SetUp()</span><br><span class="line">    &#123;</span><br><span class="line">    _someServiceMock &#x3D; new Mock&lt;ISomeService&gt;();    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [Test]</span><br><span class="line">    public void SomeMethod_initialCondition_expectedResult()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Arrange</span><br><span class="line">        var expected &#x3D; &quot;hoe&quot;;</span><br><span class="line"></span><br><span class="line">        _someServiceMock</span><br><span class="line">        .Setup(x &#x3D;&gt; x.SomeServiceMethod(someValue))</span><br><span class="line">        .Returns(true);</span><br><span class="line">        </span><br><span class="line">        var classUnderTest &#x3D; new MyClass(_someServiceMock.Object);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Act</span><br><span class="line">        var actual &#x3D; classUnderTest.SomeMethod(..parms);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Assert</span><br><span class="line">        Assert.AreEqual(expected, actual);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Assert-Throws"><a href="#Assert-Throws" class="headerlink" title="Assert.Throws"></a>Assert.Throws</h3><p>Assert type of <code>MyException</code> was thrown.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assert</span></span><br><span class="line">Assert.Throws&lt;MyException&gt;(() =&gt; classUnderTest.SomeMethod(paramValue1, paramValue2));</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.Throws.html">https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.Throws.html</a></li><li><a href="https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.ThrowsAsync.html">https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.ThrowsAsync.html</a></li></ul><h3 id="Verify"><a href="#Verify" class="headerlink" title=".Verify"></a>.Verify</h3><p>Assert a method in the mocked service was called once.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Assert</span><br><span class="line">_someServiceMock.Verify(</span><br><span class="line">   x &#x3D;&gt; x.SomeOtherServiceMethod(paramValue1),</span><br><span class="line">   Times.Once());</span><br></pre></td></tr></table></figure><h3 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h3><p>Pass parameters to a test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[TestCase(-1, &quot;hoe&quot;)]</span><br><span class="line">[TestCase(42, &quot;foo&quot;)]</span><br><span class="line">public void SomeMethod_initialCondition_expectedResult(int someId, string someText)</span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="TestCaseSource"><a href="#TestCaseSource" class="headerlink" title="TestCaseSource"></a>TestCaseSource</h3><p>Pass the test an array of data.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[TestCaseSource(&quot;GetSweetData&quot;)]</span><br><span class="line">public void SomeMethod_initial_condition_expected_result(int someId, string someText)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static readonly object[] GetSweetData &#x3D; new List&lt;object&gt;()</span><br><span class="line">&#123;</span><br><span class="line">   new object[]&#123; 123, &quot;Some Data&quot; &#125;,</span><br><span class="line">   new object[]&#123; 456, &quot;Some Other Data&quot; &#125;,</span><br><span class="line">&#125;.ToArray();</span><br></pre></td></tr></table></figure><h3 id="Fluent-Assertions"><a href="#Fluent-Assertions" class="headerlink" title="Fluent Assertions"></a>Fluent Assertions</h3><p><code>FluentAssertions</code> provides extension methods for your assets, I used Nuget version <code>5.9.0</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v5.9.0</span><br><span class="line">actual.Should().BeEquivalentTo(expectedModel);</span><br><span class="line"></span><br><span class="line">v2.2.0</span><br><span class="line">&#96;ShouldBeEquivalentTo&#96; asserts that an object is equivalent to another object.</span><br><span class="line">objectA.ShouldBeEquivalentTo(objectB);</span><br></pre></td></tr></table></figure><ul><li><a href="https://fluentassertions.com/introduction">https://fluentassertions.com/introduction</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.nuget.org/packages/NUnit/">https://www.nuget.org/packages/NUnit/</a></li><li><a href="https://ardalis.com/unit-test-naming-convention">https://ardalis.com/unit-test-naming-convention</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit">https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit</a></li><li><a href="https://github.com/nunit/docs/wiki/TestCaseSource-Attribute">TestCaseSource Attribute</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IEquatable</title>
      <link href="2018/10/iequatable/"/>
      <url>2018/10/iequatable/</url>
      
        <content type="html"><![CDATA[<p>Can be used to determine equality of class instances.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">obj1.Equals(obj2) <span class="comment">// will return false as the memory reference is not the same</span></span><br></pre></td></tr></table></figure><h3 id="Object-State-Equality"><a href="#Object-State-Equality" class="headerlink" title="Object State Equality"></a>Object State Equality</h3><p>Consider <code>Foo</code> has the following properties, for the above these would have received the default values right? So 0 and Null, so why did the quality fail? We already know it was the memory reference not being the same as custom types like <code>Foo</code> are reference types. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Desc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can fix this by simply inheriting and implementing <code>IEquatable&lt;T&gt;</code> where <code>T</code> is the type you want to compare with.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span> : <span class="title">IEquatable</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Desc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Equals</span>(<span class="params">Foo other</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ReferenceEquals(other, <span class="literal">null</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ReferenceEquals(<span class="keyword">this</span>, other))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (Id == other.Id</span><br><span class="line">                    &amp;&amp; Desc == other.Desc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">This method is used to return the hash code for this instance. A hash code is a numeric value which is used to insert and identify an object in a hash-based collection. The GetHashCode method provides this hash code for algorithms that need quick checks of object equality.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">GetHashCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Logical exclusive OR operator ^ is for compound assignment</span></span><br><span class="line">            <span class="built_in">int</span> hash = <span class="number">0</span>;</span><br><span class="line">            hash ^= Id.GetHashCode();</span><br><span class="line">            hash ^= Desc.GetHashCode();</span><br><span class="line">            <span class="keyword">return</span> hash;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So now equals has been overridden to compare the state. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Foo()</span><br><span class="line">&#123;</span><br><span class="line">Id = <span class="number">42</span>,</span><br><span class="line">Desc = <span class="string">&quot;Hoe&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Foo()</span><br><span class="line">&#123;</span><br><span class="line">Id = <span class="number">42</span>,</span><br><span class="line">Desc = <span class="string">&quot;Hoe&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.Equals(obj2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#compound-assignment">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#compound-assignment</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1">https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1</a></li><li><a href="https://www.geeksforgeeks.org/c-sharp-object-gethashcode-method-with-examples/">https://www.geeksforgeeks.org/c-sharp-object-gethashcode-method-with-examples/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Runners</title>
      <link href="2018/09/test-runners/"/>
      <url>2018/09/test-runners/</url>
      
        <content type="html"><![CDATA[<h3 id="Resharper-–-Unit-Test-Sessions"><a href="#Resharper-–-Unit-Test-Sessions" class="headerlink" title="Resharper – Unit Test Sessions"></a>Resharper – Unit Test Sessions</h3><ul><li><a href="https://www.jetbrains.com/help/resharper/Reference__Windows__Unit_Test_Sessions.html">Unit Test Sessions window</a></li><li><a href="https://www.jetbrains.com/help/resharper/Using_Unit_Test_Sessions.html">Using Unit Test Sessions</a></li></ul><h3 id="Dotnet-Watch"><a href="#Dotnet-Watch" class="headerlink" title="Dotnet Watch"></a>Dotnet Watch</h3><p><code>dotnet-watch</code> is a file watcher for <code>dotnet</code> that restarts the specified application when changes in the source code are detected.</p><ul><li>CS to solution directory</li><li>dotnet build<ul><li>dotnet test (run once)</li><li>dotnet watch test (watch for changes)</li></ul></li></ul><p><img src="/d/test-runners/dotnet-watch.png" alt="Dotnet Watch"></p><ul><li><a href="https://www.pluralsight.com/courses/test-driven-development-big-picture">https://www.pluralsight.com/courses/test-driven-development-big-picture</a></li><li><a href="https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/dotnet-watch.md">https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/dotnet-watch.md</a></li><li><a href="https://github.com/aspnet/DotNetTools/blob/master/src/dotnet-watch/README.md">https://github.com/aspnet/DotNetTools/blob/master/src/dotnet-watch/README.md</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>These 3 are listed in <a href="http://www.wrox.com/WileyCDA/WroxTitle/Professional-Test-Driven-Development-with-C-Developing-Real-World-Applications-with-TDD.productCd-047064320X.html">Professional Test Driven Development with C#: Developing Real World Applications with TDD</a></p><ul><li>TestDriven.NET</li><li>Developer Express Test Runner</li><li>Gallio</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Testing Frameworks</title>
      <link href="2018/09/unit-testing-frameworks/"/>
      <url>2018/09/unit-testing-frameworks/</url>
      
        <content type="html"><![CDATA[<h3 id="NUnit"><a href="#NUnit" class="headerlink" title="NUnit"></a>NUnit</h3><ul><li>See <a href="/2018/12/unit-testing-with-nunit/">Unit testing with NUnit</a></li></ul><h3 id="MSTest"><a href="#MSTest" class="headerlink" title="MSTest"></a>MSTest</h3><ul><li>See <a href="/2018/12/unit-testing-with-mstest/">Unit testing with MSTest</a></li></ul><h3 id="xUnit-net"><a href="#xUnit-net" class="headerlink" title="xUnit.net"></a>xUnit.net</h3><ul><li>See <a href="/2019/06/unit-testing-with-xunit/">Unit testing with xUnit</a></li></ul><h3 id="MbUnit"><a href="#MbUnit" class="headerlink" title="MbUnit"></a>MbUnit</h3><ul><li><a href="https://www.nuget.org/packages/mbunit/">https://www.nuget.org/packages/mbunit/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking Frameworks</title>
      <link href="2018/09/mocking-frameworks/"/>
      <url>2018/09/mocking-frameworks/</url>
      
        <content type="html"><![CDATA[<h3 id="Moq"><a href="#Moq" class="headerlink" title="Moq"></a>Moq</h3><p>Moq is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using Moq;</span><br><span class="line"></span><br><span class="line">var mockClientRepository &#x3D; new Mock&lt;IClientRepository&gt;();</span><br><span class="line"></span><br><span class="line">mockClientRepository</span><br><span class="line">   .Setup(x &#x3D;&gt; x.SelectList())</span><br><span class="line">   .Returns(new List&lt;ClientModel&gt; &#123; new ClientModel(&quot;Name&quot;, &quot;Surname&quot;) &#125;);</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F; then inject as &#96;mockClientRepository.Object&#96;</span><br></pre></td></tr></table></figure><p>If the method being mocked (<code>SelectList</code>) has parameters you don’t care about then you can mock them with <code>It.IsAny</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It.IsAny&lt;string&gt;()</span><br><span class="line">It.IsAny&lt;int&gt;()</span><br></pre></td></tr></table></figure><ul><li><a href="/2018/12/unit-testing-with-nunit/">See Unit testing with NUnit</a> </li><li><a href="https://github.com/Moq/moq4/wiki/Quickstart">https://github.com/Moq/moq4/wiki/Quickstart</a></li><li><a href="https://developerhandbook.com/unit-testing/writing-unit-tests-with-nunit-and-moq/">https://developerhandbook.com/unit-testing/writing-unit-tests-with-nunit-and-moq/</a></li><li><a href="http://www.aamiraftab.com/unit-testing-repository-pattern-using-moq-shouldly-in-xunit-framework/">http://www.aamiraftab.com/unit-testing-repository-pattern-using-moq-shouldly-in-xunit-framework/</a></li><li><a href="https://www.codeproject.com/Articles/47603/Mock-a-Database-Repository-using-Moq">https://www.codeproject.com/Articles/47603/Mock-a-Database-Repository-using-Moq</a></li><li><a href="https://www.pluralsight.com/courses/aspdotnet-core-mvc-testing-fundamentals">https://www.pluralsight.com/courses/aspdotnet-core-mvc-testing-fundamentals</a></li><li><a href="https://www.pluralsight.com/courses/mocking-with-moq">https://www.pluralsight.com/courses/mocking-with-moq</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li><a href="https://nsubstitute.github.io/">NSubstitute</a></li><li>Rhino Mocks</li><li>Type Mock</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection Frameworks</title>
      <link href="2018/09/dependency-injection-frameworks/"/>
      <url>2018/09/dependency-injection-frameworks/</url>
      
        <content type="html"><![CDATA[<p>Also see <a href="/2018/04/dependency-inversion-principle-dip/">Dependency Inversion Principle (DIP)</a>.</p><ul><li><a href="/2018/09/autofac/">Autofac</a></li><li><a href="/2018/09/ninject/">Ninject</a></li><li><a href="/2018/09/unity/">Unity</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li>Structure Map</li><li>Windsor</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autofac</title>
      <link href="2018/09/autofac/"/>
      <url>2018/09/autofac/</url>
      
        <content type="html"><![CDATA[<h3 id="Autofac-MVC-Example"><a href="#Autofac-MVC-Example" class="headerlink" title="Autofac (MVC Example)"></a>Autofac (MVC Example)</h3><p>Uses an IOC (Inversion of control) container, its simple to setup in an MVC application.</p><p>Install <code>Autofac</code> 5.2.0 and <code>Autofac.Extensions.DependencyInjection</code> 6.0.0</p><p><strong>Startup.cs</strong></p><p>The install should add <code>ConfigureContainer</code> to your <code>Startup.cs</code>, you dont need to build the container, you only nee to register things in it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureContainer(ContainerBuilder builder)</span><br><span class="line">&#123;</span><br><span class="line">builder.RegisterModule(new FooModule());</span><br><span class="line">builder.RegisterModule(new BarModule());</span><br><span class="line">builder.RegisterModule(new DataModule());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Modules</strong></p><p>Modules are a cool way to group things in a cohesive manner.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System.Linq;</span><br><span class="line">using Autofac;</span><br><span class="line"></span><br><span class="line">namespace fooapp.Plumbing.IoC</span><br><span class="line">&#123;</span><br><span class="line">    public class ModuleData : Module</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void Load(ContainerBuilder builder)</span><br><span class="line">        &#123;</span><br><span class="line">&#x2F;&#x2F; register things using the builder</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Register things using the builder</strong></p><p>You can then use the power of reflection in the <code>DataModule</code> class above to resolve things from a repository, this is cool as it will resolve things like <code>ICoolRepository</code> to <code>CoolRepository</code> because they have the string <code>Repository</code> in their names.</p><p>Its pretty common to do this for a <a href="/2020/02/factory-pattern/">Factory</a> too.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterAssemblyTypes(System.Reflection.Assembly.GetAssembly(typeof(SomeBaseClass)))</span><br><span class="line">.Where(t &#x3D;&gt; t.Name.EndsWith(&quot;Repository&quot;) || t.Name.EndsWith(&quot;Factory&quot;))</span><br><span class="line">        .AsImplementedInterfaces()</span><br><span class="line">        .SingleInstance();</span><br></pre></td></tr></table></figure><p>You can also look to the namespace when using reflection: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterAssemblyTypes(System.Reflection.Assembly.GetAssembly(typeof(SomeBaseClass)))</span><br><span class="line">.Where(t &#x3D;&gt; t.IsInNamespace(&quot;fooapp.sweet.namespace&quot;))</span><br><span class="line">        .AsImplementedInterfaces()</span><br><span class="line">        .SingleInstance();</span><br></pre></td></tr></table></figure><p>Else if its a once off helper/magic just resolve directly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterInstance(new FooHelper()).As&lt;IFooHelper&gt;().SingleInstance();</span><br></pre></td></tr></table></figure><p><strong>SingleInstance</strong></p><p>Called in the fluent api examples above with <code>.SingleInstance();</code>, remember not have any state in anything that expects to exist as a <a href="/2020/02/singleton-pattern/">singleton</a>.</p><blockquote><p>Configure the component so that every dependent component or call to Resolve()</p></blockquote><h3 id="Autofac-Webforms-Example"><a href="#Autofac-Webforms-Example" class="headerlink" title="Autofac (Webforms Example)"></a>Autofac (Webforms Example)</h3><p>Uses an IOC (Inversion of control) container. This was useful in a legacy Web Forms application (Autofac, Version=4.8.1.0) however it would have worked just as well in the MVC application I used Unity in.</p><p>install <code>Autofac</code> 4.9.1 and <code>Autofac.Web</code> 4.0.0</p><p>Update web.config to include this below <code>system.webServer</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">  &lt;add</span><br><span class="line">    name&#x3D;&quot;ContainerDisposal&quot;</span><br><span class="line">    type&#x3D;&quot;Autofac.Integration.Web.ContainerDisposalModule, Autofac.Integration.Web&quot;</span><br><span class="line">    preCondition&#x3D;&quot;managedHandler&quot;&#x2F;&gt;</span><br><span class="line">  &lt;add</span><br><span class="line">    name&#x3D;&quot;PropertyInjection&quot;</span><br><span class="line">    type&#x3D;&quot;Autofac.Integration.Web.Forms.PropertyInjectionModule, Autofac.Integration.Web&quot;</span><br><span class="line">    preCondition&#x3D;&quot;managedHandler&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;  </span><br></pre></td></tr></table></figure><p>Add <code>Global.asax</code> if it doesn’t already exist, implement <code>IContainerProviderAccessor</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Global : System.Web.HttpApplication, IContainerProviderAccessor</span><br></pre></td></tr></table></figure><p>Add some crap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Provider that holds the application container.</span><br><span class="line">static IContainerProvider _containerProvider;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Instance property that will be used by Autofac HttpModules</span><br><span class="line">&#x2F;&#x2F; to resolve and inject dependencies.</span><br><span class="line">public IContainerProvider ContainerProvider</span><br><span class="line">&#123;</span><br><span class="line">get &#123; return _containerProvider; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void Application_Start(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; Build up your application container and register your dependencies.</span><br><span class="line">var builder &#x3D; new ContainerBuilder();</span><br><span class="line">var connectionString &#x3D; Tools.GetConnectionString(&quot;conn&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Your DI :D</span><br><span class="line">builder.Register(c &#x3D;&gt; new MaterialRepository(connectionString))</span><br><span class="line">   .As&lt;IMaterialRepository&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Once you&#39;re done registering things, set the container</span><br><span class="line">&#x2F;&#x2F; provider up with your registrations.</span><br><span class="line">_containerProvider &#x3D; new ContainerProvider(builder.Build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In your page code behind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">namespace MyNameSpace</span><br><span class="line">&#123;</span><br><span class="line">    public partial class SomePage : System.Web.UI.Page</span><br><span class="line">    &#123;</span><br><span class="line">        public ISomeRepository _someRepository &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://autofac.org/">https://autofac.org/</a></li><li><a href="https://autofaccn.readthedocs.io/en/latest/integration/webforms.html">https://autofaccn.readthedocs.io/en/latest/integration/webforms.html</a></li></ul><h3 id="Contextual-Binding-Keyed-Services"><a href="#Contextual-Binding-Keyed-Services" class="headerlink" title="Contextual Binding (Keyed Services)"></a>Contextual Binding (Keyed Services)</h3><p>This is the same as <a href="/2018/09/ninject/">Ninjects Contextual Binding</a> but uses <code>.Keyed</code></p><p>Create an enum, for reasons :)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> LaunchDarklyProjectEnum</span><br><span class="line">&#123;</span><br><span class="line">    ProjectOne,</span><br><span class="line">    ProjectTwo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IoC Module example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sdkKeyProjectOne = <span class="string">&quot;sdk-0000000000000000&quot;</span>;</span><br><span class="line"></span><br><span class="line">builder.Register(c =&gt; <span class="keyword">new</span> LdClient(sdkKeyProjectOne))</span><br><span class="line">    .Keyed&lt;ILdClient&gt;(LaunchDarklyProjectEnum.ProjectOne)</span><br><span class="line">    .SingleInstance();</span><br></pre></td></tr></table></figure><p>Resolve with <code>KeyFilter</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LdFeatureRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILdClient _ldClientProjectOne;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LdFeatureRepository</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        [KeyFilter(LaunchDarklyProjectEnum.ProjectOne</span>)] ILdClient ldClientProjectOne)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _ldClientProjectOne = ldClientProjectOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html">https://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html</a></li></ul><h3 id="Disposal"><a href="#Disposal" class="headerlink" title="Disposal"></a>Disposal</h3><ul><li><a href="https://autofaccn.readthedocs.io/en/latest/lifetime/disposal.html">https://autofaccn.readthedocs.io/en/latest/lifetime/disposal.html</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://autofac.org/">https://autofac.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# LINQ</title>
      <link href="2018/09/c-sharp-linq/"/>
      <url>2018/09/c-sharp-linq/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">LINQ</a> stands for <strong>Language Integrated Query</strong>, it provides extension methods that are super useful when iterating through <a href="/2020/05/c-sharp-collections-of-entities/">collections of entities</a>. Below are some of the common and useful <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">LINQ</a> methods I have used while taking advantage of its <strong>Fluent API</strong> (This just means it returns a reference to the original object.)</p><p>Generally I don’t like to use temporary variables like <code>x</code> in the predicate, I find it easier to read if the variable is named in a manner that representing the state. Example: if the <code>_fooRepository</code> was <code>_clientRepository</code> then <code>x</code> could be substituted with <code>cl</code> or <code>client</code>.</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p> Projects each element of a sequence into a new form.</p><ul><li>Returns <code>IEnumerable</code> whose elements are the result of invoking the transform function on each element of source. So the below will return an <code>IEnumerable&lt;int&gt;</code>  containing the <code>Id&#39;s</code>.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foos = _fooRepository</span><br><span class="line">.SelectList()</span><br><span class="line">.Select(x =&gt; x.Id);</span><br></pre></td></tr></table></figure><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><p>Filters a sequence of values based on a predicate.</p><ul><li>Returns <code>IEnumerable</code> that contains elements from the input sequence that satisfy the condition.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foos = _fooRepository</span><br><span class="line">.SelectList()</span><br><span class="line">.Where(x =&gt; x.MemberDate &gt;= startDate)</span><br><span class="line">.Where(x =&gt; x.MemberDate &lt; endDate);</span><br></pre></td></tr></table></figure><h3 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h3><p>Groups the elements of a sequence according to a specified key selector function. </p><ul><li>Returns <code>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fooGroupsOfMemberA = _fooRepository</span><br><span class="line">.SelectList()</span><br><span class="line">.Where(x =&gt; x.MemberDate &gt;= startDate)</span><br><span class="line">.Where(x =&gt; x.MemberDate &lt; endDate)</span><br><span class="line">.GroupBy(grp =&gt; grp.MemberA);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The data would the look like:</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">key: 55       ~ this is `MemberA`</span></span><br><span class="line"><span class="comment">elements: </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">[0] an element from SelectList,</span></span><br><span class="line"><span class="comment">[1] an element from SelectList</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">key: 105       ~ this is `MemberA`</span></span><br><span class="line"><span class="comment">elements: </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">[0] an element from SelectList,</span></span><br><span class="line"><span class="comment">[1] an element from SelectList,</span></span><br><span class="line"><span class="comment">            [2] an element from SelectList,</span></span><br><span class="line"><span class="comment">            [3] an element from SelectList,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><h3 id="Contains"><a href="#Contains" class="headerlink" title="Contains"></a>Contains</h3><p>Determines whether a sequence contains a specified element by using the default equality comparer.</p><ul><li>Returns <code>true</code> if the source sequence contains an element that has the specified value; otherwise, <code>false</code>.</li></ul><p>In the example below <code>bars</code> is some <code>IEnumerable</code> collection, the entity has a property <code>UserId</code> and I was looking for the SQL equivalent of <code>WHERE user_id IN (42, 105, 302) </code> so bars entities will now only have users whose id’s are 42, 105 or 302.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123; 42, 105, 302 &#125;</span></span><br><span class="line"><span class="keyword">var</span> userIds = _userRepository</span><br><span class="line">    .SelectList()</span><br><span class="line">    .Select(u =&gt; u.Id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bars = _fooRepository</span><br><span class="line">    .SelectList()</span><br><span class="line">    .Where(b =&gt; userIds.Contains(b.UserId));</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ninject</title>
      <link href="2018/09/ninject/"/>
      <url>2018/09/ninject/</url>
      
        <content type="html"><![CDATA[<p>Nuget packages: Ninject, Version 3.2.2</p><p>An obsessive focus on <em>simplicity</em> and <em>ease of use</em>. An example from their site:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Samurai</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IWeapon Weapon &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Samurai</span>(<span class="params">IWeapon weapon</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Then in the module</span></span><br><span class="line"><span class="comment">// I would put this `WarriorModule` in `Business/Plumbing/Ninject` </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WarriorModule</span> : <span class="title">NinjectModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Bind&lt;IWeapon&gt;().To&lt;Sword&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// The above is a Fluent API so you can then scope as needs be</span></span><br><span class="line">        <span class="comment">// .InSingletonScope();</span></span><br><span class="line">        <span class="comment">// .InTransientScope();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="When-Injected-Exactly-Into"><a href="#When-Injected-Exactly-Into" class="headerlink" title="When Injected Exactly Into"></a>When Injected Exactly Into</h3><p>This binding also allows you to bind an exact instance of something <code>WhenInjectedExactlyInto</code> so if you have a set of rules and your class needs a specific rule, you can inject it:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bind&lt;IRules&gt;().To&lt;SomeRule&gt;().WhenInjectedExactlyInto&lt;ConsumerClass&gt;();</span><br></pre></td></tr></table></figure><h3 id="Bind-All-Interfaces"><a href="#Bind-All-Interfaces" class="headerlink" title="Bind All Interfaces"></a>Bind All Interfaces</h3><p>If you have 100’s of services and they will be named as <code>IServiceName</code> for the interface and <code>ServiceName</code> for the implementation you can leverage refection and <code>BindAllInterfaces</code> to bind these for you.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patterns = <span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;SweetApp.dll&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SweetApp.Admin.dll&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> typesToExclude = <span class="keyword">new</span> List&lt;Type&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typeof</span> (RubbishService),</span><br><span class="line">    <span class="keyword">typeof</span> (RubbishService2)</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">.Bind(x =&gt; x.FromAssembliesMatching(patterns)</span><br><span class="line">      .SelectAllClasses()</span><br><span class="line">      .Excluding(typesToExclude)</span><br><span class="line">      .BindDefaultInterface());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ninject.Extensions.Conventions.3.2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FromAssembliesMatching </span></span><br><span class="line"><span class="comment">-&gt; Scans the assemblies that matching one of the given assembly name pattern.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SelectAllClasses </span></span><br><span class="line"><span class="comment">-&gt; Selects all none abstract classes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Excluding </span></span><br><span class="line"><span class="comment">-&gt; Excludes the given types</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BindDefaultInterface</span></span><br><span class="line"><span class="comment">-&gt; Binds the default interface of the given types to the type. e.g. Foo : IFoo</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Contextual-Binding"><a href="#Contextual-Binding" class="headerlink" title="Contextual Binding"></a>Contextual Binding</h3><p>Contextual binding allows more than one binding for a type using <code>.Named</code></p><p>I dont think this is the best way to do things as the consumer (maybe a repository or service) then really has muiltiple concearns. (Well for my example anyway) The examples below were adapted from github.com/ninject and are for a scenario where 2 <a href="https://launchdarkly.com/">Launch Darkly (feature management client)</a> projects need to be injected into the same repository. Each project has its own SDK Key so the client needs to be instantiated with its correct key. </p><p>Create an enum, for reasons :)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> LaunchDarklyProjectEnum</span><br><span class="line">&#123;</span><br><span class="line">    ProjectOne,</span><br><span class="line">    ProjectTwo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The IOC is then setup. <code>InSingletonScope</code> is fine as there is no state and each request should get the same instance.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Bind&lt;ILdClient&gt;()</span><br><span class="line">    .ToMethod(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sdkKeyProjectOne = <span class="string">&quot;sdk-0000000000000000&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LdClient(sdkKeyProjectOne);</span><br><span class="line">    &#125;)</span><br><span class="line">    .InSingletonScope()</span><br><span class="line">    .Named(LaunchDarklyProjectEnum.ProjectOne);</span><br><span class="line"></span><br><span class="line">Bind&lt;ILdClient&gt;()</span><br><span class="line">    .ToMethod(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sdkKeyProjectTwo = <span class="string">&quot;sdk-1111111111111111&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LdClient(sdkKeyProjectTwo);</span><br><span class="line">    &#125;)</span><br><span class="line">    .InSingletonScope()</span><br><span class="line">    .Named(LaunchDarklyProjectEnum.ProjectTwo);    </span><br></pre></td></tr></table></figure><p>Then when resolved you indicate the name you want to use in the given context:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LdFeatureRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILdClient _ldClientProjectOne;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILdClient _ldClientProjectTwo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LdFeatureRepository</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        [Named(LaunchDarklyProjectEnum.ProjectOne</span>)] ILdClient ldClientProjectOne,</span></span><br><span class="line"><span class="function">        [<span class="title">Named</span>(<span class="params">LaunchDarklyProjectEnum.ProjectTwo</span>)] ILdClient ldClientProjectTwo)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _ldClientProjectOne = ldClientProjectOne;</span><br><span class="line">        _ldClientProjectTwo = ldClientProjectTwo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/ninject/Ninject/wiki/Contextual-Binding">https://github.com/ninject/Ninject/wiki/Contextual-Binding</a></li><li><a href="https://launchdarkly.github.io/dotnet-server-sdk/html/T_LaunchDarkly_Client_ILdClient.htm">https://launchdarkly.github.io/dotnet-server-sdk/html/T_LaunchDarkly_Client_ILdClient.htm</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.ninject.org/">http://www.ninject.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity</title>
      <link href="2018/09/unity/"/>
      <url>2018/09/unity/</url>
      
        <content type="html"><![CDATA[<h3 id="Unity-MVC-Example"><a href="#Unity-MVC-Example" class="headerlink" title="Unity (MVC Example)"></a>Unity (MVC Example)</h3><p><em>“The Unity Container (Unity) is a lightweight, extensible dependency injection container. It facilitates building loosely coupled applications”</em></p><p>This was very simple to setup for an ASP.NET MVC project (net461) using the nuget packages:</p><ul><li> Unity.Container, Version=5.7.0</li><li> Unity.Abstractions, Version=3.3.0</li><li> Unity.Mvc, Version=5.0.13</li></ul><p>Implementation is as simple as this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">~ /App_Start/UnityConfig.cs</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterComponents</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">var</span> container = <span class="keyword">new</span> UnityContainer();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// resolve instances with parameterless constructors</span></span><br><span class="line">     container.RegisterType&lt;IFizzRepository, FizzRepository&gt;();</span><br><span class="line">     container.RegisterType&lt;IBuzzRepository, BuzzRepository&gt;();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// resolve instances with constructors dependant on something already in the container</span></span><br><span class="line">     container.RegisterType&lt;IFooService, FooService&gt;(</span><br><span class="line">         <span class="keyword">new</span> InjectionConstructor(</span><br><span class="line">             container.Resolve&lt;IFizzRepository&gt;(),</span><br><span class="line">             container.Resolve&lt;IBuzzRepository&gt;()</span><br><span class="line">         ));</span><br><span class="line">     </span><br><span class="line">     DependencyResolver.SetResolver(<span class="keyword">new</span> UnityDependencyResolver(container));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~/Global.asax.cs</span><br><span class="line">UnityConfig.RegisterComponents();</span><br><span class="line"></span><br><span class="line">~/Controllers/KiefController.cs</span><br><span class="line">Constructor signature can then include `IFizzRepository fizzRepository, IFooService fooService`</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>If you have worked with amazing <a href="/2018/09/dependency-injection-frameworks/">Dependency Injection Frameworks</a> such as <a href="/2018/09/autofac-mvc/">Autofac</a> or <a href="/2018/09/ninject/">Ninject</a> you would expect to be able to create cohesive modules right? Well Unity doesn’t support this out of the box however you can create extension methods that do pretty much the same thing, just remember the order will matter if you are going to be calling <code>container.Resolve</code> later down the stack.</p><p>Simply call <code>container.AddExtension</code> and new up the module:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~ /App_Start/UnityConfig.cs</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterComponents</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> container = <span class="keyword">new</span> UnityContainer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Data repository</span></span><br><span class="line">    container.AddExtension(<span class="keyword">new</span> RepositoryModule());</span><br><span class="line">    </span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>The module then inherits the <code>Container</code> from the base class <code>UnityContainerExtension</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Unity;</span><br><span class="line"><span class="keyword">using</span> Unity.Extension;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FooApp.Domain.Plumbing.Unity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RepositoryModule</span> : <span class="title">UnityContainerExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Container.RegisterType&lt;IFizzRepository, FizzRepository&gt;();</span><br><span class="line">            Container.RegisterType&lt;IBuzzRepository, BuzzRepository&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><p> Unity is unable to automatically resolve <code>IEnumerable&lt;T&gt;</code> dependencies which you could use with an <a href="/2020/02/factory-pattern/">Abstract Factory</a>.</p><p> You can however get around this by naming the dependency.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Container.RegisterType&lt;IPriceRule, EachPriceRule&gt;(&quot;EachPriceRule&quot;);</span><br><span class="line">Container.RegisterType&lt;IPriceRule, WeightPriceRule&gt;(&quot;WeightPriceRule&quot;);</span><br></pre></td></tr></table></figure><p>This is then automagically injected into the consumer.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class FooController : Controller</span><br><span class="line">&#123;</span><br><span class="line">    private readonly IEnumerable&lt;IPriceRule&gt; _priceRules;</span><br><span class="line"></span><br><span class="line">    public FooController(IEnumerable&lt;IPriceRule&gt; priceRules)</span><br><span class="line">    &#123;</span><br><span class="line">        _priceRules &#x3D; priceRules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.codeproject.com/Articles/988257/Dependency-Injection-using-Unity-container">https://www.codeproject.com/Articles/988257/Dependency-Injection-using-Unity-container</a></li><li><a href="https://msdn.microsoft.com/en-us/library/dn223671(v=pandp.30).aspx">https://msdn.microsoft.com/en-us/library/dn223671(v=pandp.30).aspx</a></li><li><a href="https://github.com/unitycontainer/unity">https://github.com/unitycontainer/unity</a></li><li><a href="https://github.com/unitycontainer/aspnet-mvc">https://github.com/unitycontainer/aspnet-mvc</a></li><li><a href="https://www.c-sharpcorner.com/article/dependency-injection-in-asp-net-mvc-5/">https://www.c-sharpcorner.com/article/dependency-injection-in-asp-net-mvc-5/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dual-Boot Windows 10 &amp; Ubuntu 18.04 - 16.04</title>
      <link href="2018/09/how-to-dual-boot-windows-10-and-ubuntu/"/>
      <url>2018/09/how-to-dual-boot-windows-10-and-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>The steps are summarized as follows:</p><ol><li>Install windows 10 first<ol><li>Use the maximum disk space for the volume as NTFS</li><li><a href="https://www.microsoft.com/en-us/download/windows-usb-dvd-download-tool">Windows USB/DVD Tool</a></li></ol></li><li>Install Ubuntu second<ol><li>At the disk/volume option choose ‘alongside’ windows 10</li><li>Create a new ‘ext4’ partition using the wizard.</li><li><a href="https://unetbootin.github.io/">UNetbootin</a></li></ol></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://builtvisible.com/the-ubuntu-installation-guide/">https://builtvisible.com/the-ubuntu-installation-guide/</a></li><li><a href="https://www.youtube.com/watch?v=qNeJvujdB-0">https://www.youtube.com/watch?v=qNeJvujdB-0</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Utilities</title>
      <link href="2018/08/json-utilities/"/>
      <url>2018/08/json-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="Generate-C-classes-from-JSON"><a href="#Generate-C-classes-from-JSON" class="headerlink" title="Generate C# classes from JSON"></a>Generate C# classes from JSON</h3><ul><li><a href="http://json2csharp.com/">http://json2csharp.com</a></li></ul><h3 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h3><ul><li><a href="https://jsonlint.com/">https://jsonlint.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectural Decision Log</title>
      <link href="2018/08/architectural-decision-log/"/>
      <url>2018/08/architectural-decision-log/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>“Architecture for agile projects has to be described and defined differently. Not all decisions will be made at once, nor will all of them be done when the project begins.”</em></p></blockquote><p>An example of this is <code>Dunk Me</code> - an open source pet project:</p><ul><li><a href="https://github.com/carlpaton/DunkMe/tree/master/Docs/ADR">https://github.com/carlpaton/DunkMe/tree/master/Docs/ADR</a></li></ul><p>Here with time I made decisions front end, API and database.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://adr.github.io/madr/">https://adr.github.io/madr/</a></li><li><a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions</a></li><li><a href="http://eclipse.github.io/winery/adr/">http://eclipse.github.io/winery/adr/</a><ul><li><a href="https://github.com/eclipse/winery/tree/master/docs/adr">https://github.com/eclipse/winery/tree/master/docs/adr</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Browser Utilities</title>
      <link href="2018/08/browser-utilities/"/>
      <url>2018/08/browser-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="Chrome-Extensions"><a href="#Chrome-Extensions" class="headerlink" title="Chrome Extensions"></a>Chrome Extensions</h3><p>From Chrome, run <a href="chrome://extensions/">chrome://extensions/</a> or <a href="https://chrome.google.com/webstore/category/extensions">https://chrome.google.com/webstore/category/extensions</a></p><ul><li>Also see <a href="/2020/09/netify/">Netify</a><ul><li><a href="https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj">https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj</a></li></ul></li><li>Ignore X-Frame headers<ul><li>Also see <a href="/2018/06/x-frame-options/">X-Frame-Options</a></li></ul></li><li>Allow-Control-Allow-Origin: *<ul><li>Allows to you request any site with ajax from any source. Adds to response ‘Allow-Control-Allow-Origin: *’ header</li></ul></li><li>UnXSS<ul><li>Intercept and modify or delete websites’ security headers</li></ul></li><li>Postman Interceptor<ul><li>Sends requests fired through the Postman chrome app.</li></ul></li><li>Redux DevTools<ul><li>Query store</li></ul></li><li>Fireshot<ul><li>Screenshot web pages</li></ul></li><li>Wappalyzer<ul><li>Provides information about the page you visited, frameworks, hosting ect</li><li><a href="https://www.wappalyzer.com/">https://www.wappalyzer.com</a></li></ul></li><li>Edit this cookie<ul><li>Edit cookies, nom :D</li><li><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en</a> </li></ul></li><li>Mozbar<ul><li>Display SEO related elements such as meta tags</li><li><a href="https://chrome.google.com/webstore/detail/mozbar/eakacpaijcpapndcfffdgphdiccmpknp?hl=en">https://chrome.google.com/webstore/detail/mozbar/eakacpaijcpapndcfffdgphdiccmpknp?hl=en</a></li></ul></li></ul><h3 id="Firefox-Add-ons"><a href="#Firefox-Add-ons" class="headerlink" title="Firefox Add-ons"></a>Firefox Add-ons</h3><p>From Firefox navigate to <a href="https://addons.mozilla.org/en-US/firefox/">https://addons.mozilla.org/en-US/firefox/</a></p><ul><li><a href="https://addons.mozilla.org/en-US/firefox/addon/video-downloadhelper/?src=search">Video DownloadHelper</a></li></ul><h3 id="Internet-Explorer"><a href="#Internet-Explorer" class="headerlink" title="Internet Explorer"></a>Internet Explorer</h3><p>:D</p><p><img src="/d/browser-utilities/browsers-joke.png" alt="IE LOL"></p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> browser utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora</title>
      <link href="2018/08/typora/"/>
      <url>2018/08/typora/</url>
      
        <content type="html"><![CDATA[<p>This editor is useful for editing GIT readme files.</p><blockquote><p><em>Typora will give you a seamless experience as both a reader and a writer.</em></p></blockquote><ul><li><a href="https://typora.io/">https://typora.io/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitflow Workflow</title>
      <link href="2018/08/gitflow-workflow/"/>
      <url>2018/08/gitflow-workflow/</url>
      
        <content type="html"><![CDATA[<p>This is a development model by <a href="https://nvie.com/about/">Vincent Driessen</a></p><ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/">https://nvie.com/posts/a-successful-git-branching-model/</a><ul><li><a href="https://nvie.com/files/Git-branching-model.pdf">https://nvie.com/files/Git-branching-model.pdf</a></li></ul></li></ul><p><img src="/d/gitflow-workflow/git-1.jpg" alt="Giflow"></p><p><a href="https://pdf2jpg.net/"><em>Converted with https://pdf2jpg.net</em></a></p><p>Other implementations:</p><ul><li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose Demo</title>
      <link href="2018/08/docker-compose-demo/"/>
      <url>2018/08/docker-compose-demo/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/docker-compose-demo/compose-demo-1.png" alt="Dock Compose"></p><p>To demonstrate the power of docker compose and <a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code">Infrastructure as code (IaC)</a> I put together the following functional example. I must also give credit to <a href="https://www.linkedin.com/in/godfrey-sisimogang-73a15a42/">Godfrey Sisimogang</a> for his input into the initial process flow – thank you my mate.</p><p>All of the <a href="https://github.com/carlpaton/DockerCompose">source code</a> is <a href="https://opensource.org/licenses/MIT">open source MIT</a> and I encourage fellow software craftsmen to fork the scripts and adapt for functional use.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The Eco-systems is made up of the following layers</p><ol><li>Database<ol><li><a href="https://store.docker.com/images/postgres">postgres:9.6-alpine</a></li></ol></li><li>Git clone<ol><li>SQL scripts used with <a href="https://flywaydb.org/">flyway</a> to provision/version the database</li><li>Scripts on <a href="https://github.com/carlpaton/SQLStatements/tree/master/postgresql/ComposeDemo">GitHub</a></li></ol></li><li>Flyway<ol><li>fusebox/flyway:5.1<ol><li><a href="https://flywaydb.org/documentation/command/baseline">Baseline</a></li><li><a href="https://flywaydb.org/documentation/command/migrate">Migrate</a></li></ol></li></ol></li><li>API to communicate with the database<ol><li><a href="https://store.docker.com/community/images/postgrest/postgrest">postgrest/postgrest:v0.5.0.0</a></li></ol></li><li>Fizz buzz generator<ol><li><a href="https://store.docker.com/community/images/carlpaton/fizzbuzz">carlpaton/fizzbuzz:v1.1.0</a></li><li><a href="https://github.com/carlpaton/FizzBuzz">Source code</a></li><li>What is <a href="/2018/06/docker-fizzbuzz-image/">Fizz Buzz</a></li><li><a href="/2018/07/building-docker-images/">Steps on how I got this image</a> onto the docker store (community)</li></ol></li><li>Angular Web Application to GET and display the data<ol><li><a href="https://github.com/carlpaton/DockerCompose/tree/master/angular-web">Source code</a> for application and config</li></ol></li></ol><p><img src="/d/docker-compose-demo/compose-demo-2.jpg" alt="Overview"></p><ul><li>Created with <a href="http://draw.io/">http://draw.io</a></li></ul><h3 id="Functional-Use"><a href="#Functional-Use" class="headerlink" title="Functional Use"></a>Functional Use</h3><p>To spin up the entire echo-system run <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">./compose.sh</a></p><p>Once you have run <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">./compose.sh</a> above and then stop the services for what ever reason you can start just the Database and API with <a href="https://github.com/carlpaton/DockerCompose/blob/master/start.sh">./start.sh</a></p><h3 id="Great-but-how-do-I-run-the-shell-scripts"><a href="#Great-but-how-do-I-run-the-shell-scripts" class="headerlink" title="Great but how do I run the shell scripts?"></a>Great but how do I run the shell scripts?</h3><p>In my case my local laptop runs Windows 10 and the docker magic runs in a virtual machine using <a href="/2018/03/virtual-box/">Oracle VM VirtualBox</a>. The virtual machine runs <a href="https://www.ubuntu.com/download/server">Ubuntu Server </a>this I felt was as close to the bare metal servers most corporate companys will be running.</p><ol><li><p>Create a new virtual machine with Virtual Box</p><ol><li>Set the ‘Network’ to ‘<a href="https://www.linuxbabe.com/virtualbox/a-pretty-good-introduction-to-virtualbox-bridged-networking-mode">Bridged Adapter</a>‘, the VM will then get an IP from your local <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">DHCP service</a> and be in the same range as your laptop.<br><img src="/d/docker-compose-demo/compose-demo-3.png" alt="Run Scripts"></li><li>I used ubuntu-17.10.1-server-amd64.iso</li></ol></li><li><p>Boot into the OS &amp; Install Docker CE</p><ol><li>There are steps here where I installed on VMWare Workstation Player<ol><li>I’ve opted to move over to VirtualBox as it plays nicely with Hyper V which will be necessary for <a href="https://kubernetes.io/docs/setup/minikube/">kubernetes &amp; minikube</a></li></ol></li><li>Installing SSH will allow you to <a href="/2018/04/putty/">putty</a> to the server, this helps with the copy and paste steps.</li></ol></li><li><p><a href="/2018/07/docker-compose/">Install docker compose</a></p></li><li><p>Clone these scripts from github to the local windows host</p><ol><li>Its possible to clone directly to the Ubuntu VM but thats up to you</li><li><a href="https://github.com/carlpaton/DockerCompose">https://github.com/carlpaton/DockerCompose</a></li></ol></li><li><p>Create a directory compose-demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir compose-demo</span><br><span class="line">cd compose-demo</span><br></pre></td></tr></table></figure></li></ol><p><img src="/d/docker-compose-demo/compose-demo-4.png" alt="Run Scripts"></p><ol start="6"><li>With nano create the <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">compose.sh</a> shell script and paste in the values from <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">github</a> and mark the script as executable</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo nano compose.sh</span><br><span class="line">right click to paste from your clip board</span><br><span class="line">crtl x</span><br><span class="line">y</span><br><span class="line">[ENTER]</span><br><span class="line"></span><br><span class="line">sudo chmod +x .&#x2F;compose.sh</span><br></pre></td></tr></table></figure><ol start="7"><li><p>Repeat the above for the <a href="https://github.com/carlpaton/DockerCompose/blob/master/start.sh">start.sh</a> shell script</p></li><li><p>With nano create the <a href="https://github.com/carlpaton/DockerCompose/blob/master/docker-compose.yml">docker-compose.yml</a> file and paste in the values from <a href="https://github.com/carlpaton/DockerCompose/blob/master/docker-compose.yml">github</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo nano docker-compose.yml</span><br><span class="line">right click to paste from your clip board </span><br><span class="line">crtl x </span><br><span class="line">y</span><br><span class="line">[ENTER]</span><br></pre></td></tr></table></figure></li><li><p>Create the angular-web directory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir angular-web</span><br><span class="line">cd angular-web</span><br></pre></td></tr></table></figure></li><li><p>Copy or create </p><p>these files</p><p> into the directory ‘angular-web’</p><ol><li><a href="https://github.com/carlpaton/DockerCompose/blob/master/angular-web/Dockerfile">Dockerfile</a></li><li><a href="https://github.com/carlpaton/DockerCompose/blob/master/angular-web/index.html">index.html</a></li><li><a href="https://github.com/carlpaton/DockerCompose/blob/master/angular-web/nginx.conf">nginx.conf</a><br><img src="/d/docker-compose-demo/compose-demo-5.png" alt="Run Scripts"></li></ol></li><li><p>Edit the index.html file to use the IP of the VM and target the API port</p><p><img src="/d/docker-compose-demo/compose-demo-6.png" alt="Run Scripts"></p></li><li><p>Create the flyway-git-clone directory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">mkdir flyway-git-clone</span><br><span class="line">cd flyway-git-clone</span><br></pre></td></tr></table></figure></li><li><p>Copy or create the <a href="https://github.com/carlpaton/DockerCompose/blob/master/flyway-git-clone/Dockerfile">Dockerfile</a> into this directory</p><p><img src="/d/docker-compose-demo/compose-demo-7.png" alt="Run Scripts"></p></li><li><p>Change back up a directory to ‘compose-demo’, your folder should look like this now</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="/d/docker-compose-demo/compose-demo-8.png" alt="Run Scripts"></p><ol start="15"><li>Run <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">compose.sh</a></li></ol><p><strong>NOTE WHAT THE SCRIPT WILL DO:</strong></p><p>a. The removal of containers<br>b. The removal of volumes (if found)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;compose.sh</span><br></pre></td></tr></table></figure><p>This will then run though the overview layers above, once complete you can browse the angular container which will call the API and display the fizz buzz data.</p><p>Exit code 0 means the container completed its life without any issues.</p><p><img src="/d/docker-compose-demo/compose-demo-9.png" alt="Run Scripts"></p><ol start="16"><li><p>Exit compose</p><p><img src="/d/docker-compose-demo/compose-demo-10.png" alt="Run Scripts"></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTRL C</span><br></pre></td></tr></table></figure><ol start="17"><li>Display all the containers, note that the compose containers take their names from the name in the YML file.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p><img src="/d/docker-compose-demo/compose-demo-11.png" alt="Run Scripts"></p><ol start="18"><li>You can now startup just the required containers with start.sh<ol><li>This will only start the database, API and Angular Web containers</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;start.sh</span><br></pre></td></tr></table></figure><p>You can then call the API directly, example <em><a href="http://10.0.0.108:3000/fizzbuzz_data">http://10.0.0.108:3000/fizzbuzz_data</a></em></p><p>The IP of your container will depend on your Host VM and DHCP server.</p><p><img src="/d/docker-compose-demo/compose-demo-12.png" alt="Run Scripts"></p><h3 id="Testing-Angular"><a href="#Testing-Angular" class="headerlink" title="Testing Angular"></a>Testing Angular</h3><p>You can then also call the angular application, example <em><a href="http://10.0.0.108:8080/">http://10.0.0.108:8080/</a></em></p><p><img src="/d/docker-compose-demo/compose-demo-13.png" alt="Run Scripts"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.docker.com/compose/compose-file/#depends_on">https://docs.docker.com/compose/compose-file/#depends_on</a></li><li><a href="https://docs.docker.com/compose/startup-order/">https://docs.docker.com/compose/startup-order/</a></li><li><a href="https://store.docker.com/community/images/boxfuse/flyway">https://store.docker.com/community/images/boxfuse/flyway</a></li><li><a href="https://postgrest.org/en/v5.0/install.html#docker">https://postgrest.org/en/v5.0/install.html#docker</a></li><li><a href="https://www.postgresql.org/docs/9.6/static/index.html">https://www.postgresql.org/docs/9.6/static/index.html</a></li><li><a href="https://store.docker.com/community/images/postgrest/postgrest">https://store.docker.com/community/images/postgrest/postgrest</a></li><li><a href="https://postgrest.org/en/v5.0/api.html#insertions-updates">https://postgrest.org/en/v5.0/api.html#insertions-updates</a></li><li><a href="https://www.w3schools.com/angular/angular_http.asp">https://www.w3schools.com/angular/angular_http.asp</a></li><li><a href="https://github.com/carlpaton/DockerCompose">https://github.com/carlpaton/DockerCompose</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectural Design Tools</title>
      <link href="2018/07/architectural-design-tools/"/>
      <url>2018/07/architectural-design-tools/</url>
      
        <content type="html"><![CDATA[<h3 id="Draw-IO"><a href="#Draw-IO" class="headerlink" title="Draw IO"></a>Draw IO</h3><p><em>“draw.io (formerly Diagramly) is free online diagram software. You can use it as a flowchart maker, network diagram software, to create UML online, as an ER diagram tool, to design database schema, to build BPMN online, as a circuit diagram maker, and more. draw.io can import .vsdx, Gliffy™ and Lucidchart™ files .”</em></p><ul><li><a href="https://www.draw.io/">https://www.draw.io/</a></li></ul><iframe width="644" height="362" src="https://www.youtube.com/embed/Z0D96ZikMkc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.tutorialspoint.com/uml/uml_activity_diagram.htm">https://www.tutorialspoint.com/uml/uml_activity_diagram.htm</a></li><li><a href="https://en.wikipedia.org/wiki/Swim_lane">https://en.wikipedia.org/wiki/Swim_lane</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database Normalization</title>
      <link href="2018/07/database-normalization/"/>
      <url>2018/07/database-normalization/</url>
      
        <content type="html"><![CDATA[<p>Normalization means evaluating and correcting table structures to minimize data redundancies. Normalization takes you through steps that lead to successively higher <strong>normal forms</strong>. In other words, First normal form (1NF), second normal form (2NF), third normal form (3NF), this is the normal form we should really look at achieving.</p><p>Before going on, we need to understand Functional Dependence. It plays quite a role with normalization. The definition of functional dependence is: The attribute A is fully functionally dependent on the attribute B if each value of B determines one and only one value of A.</p><p>Substituted into an example:</p><p><em>The attribute dbo.users.id is fully functionally dependent on the attribute dbo.users.username if each value of username determines one and only one value of id.</em></p><p>Most of the below is from <a href="https://support.microsoft.com/en-us/help/283878/description-of-the-database-normalization-basics">support.microsoft.com (database-normalization-basics)</a></p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><ul><li>Eliminate repeating groups in individual tables.</li><li>Create a separate table for each set of related data.</li><li>Identify each set of related data with a primary key.</li></ul><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><ul><li>Create separate tables for sets of values that apply to multiple records.</li><li>Relate these tables with a foreign key.</li></ul><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><ul><li>Eliminate fields that do not depend on the key.</li><li>Eliminate computable fields (Use a stored procedure)</li></ul><p>This goes up to 6NF however in general 3NF is acceptable.</p><p>Note that database normalization adds a performance impact and in some cases a de-normalization is needed.</p><p>See: <a href="https://en.wikipedia.org/wiki/Denormalization">https://en.wikipedia.org/wiki/Denormalization</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.guru99.com/database-normalization.html">https://www.guru99.com/database-normalization.html</a></li><li><a href="https://www.thoughtco.com/referential-integrity-definition-1019181">https://www.thoughtco.com/referential-integrity-definition-1019181</a></li><li><a href="https://en.wikipedia.org/wiki/Referential_integrity">https://en.wikipedia.org/wiki/Referential_integrity</a></li><li><a href="https://support.microsoft.com/en-us/help/283878/description-of-the-database-normalization-basics">https://support.microsoft.com/en-us/help/283878/description-of-the-database-normalization-basics</a></li><li><a href="https://en.wikipedia.org/wiki/Database_normalization">https://en.wikipedia.org/wiki/Database_normalization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>State Management for Front End</title>
      <link href="2018/07/state-management-front-end/"/>
      <url>2018/07/state-management-front-end/</url>
      
        <content type="html"><![CDATA[<p>There are many state management strategies, these are the ones I have worked with.</p><h3 id="Redux-with-Saga"><a href="#Redux-with-Saga" class="headerlink" title="Redux with Saga"></a>Redux with Saga</h3><p><img src="/d/state-management-front-end/redux-with-saga.jpg" alt="Redux with Saga"></p><h3 id="Redux-Thunk"><a href="#Redux-Thunk" class="headerlink" title="Redux Thunk"></a>Redux Thunk</h3><blockquote><p>Redux Thunk is middleware that allows you to return functions, rather than just actions, within Redux. This allows for delayed actions, including working with promises.</p></blockquote><ul><li><a href="https://www.freecodecamp.org/news/redux-thunk-explained-with-examples/">https://www.freecodecamp.org/news/redux-thunk-explained-with-examples/</a></li><li><a href="https://redux-toolkit.js.org/">https://redux-toolkit.js.org/</a></li></ul><h3 id="Facade-abstraction"><a href="#Facade-abstraction" class="headerlink" title="Facade abstraction"></a>Facade abstraction</h3><p>A facade is used to abstract away the store pattern from the components. </p><p><img src="/d/state-management-front-end/tme.png" alt="Facade Abstraction, Drawn by Kristy Johnstone"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/default-to-open/understanding-a-large-scale-angular-app-with-ngrx-80f9fc5660cc">https://medium.com/default-to-open/understanding-a-large-scale-angular-app-with-ngrx-80f9fc5660cc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> architecture </tag>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose</title>
      <link href="2018/07/docker-compose/"/>
      <url>2018/07/docker-compose/</url>
      
        <content type="html"><![CDATA[<h3 id="Install-Compose"><a href="#Install-Compose" class="headerlink" title="Install Compose"></a>Install Compose</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.21.2&#x2F;docker-compose-$(uname -s)-$(uname -m) -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"></span><br><span class="line">sudo docker-compose --version</span><br></pre></td></tr></table></figure><p>Once installed compose can build your containers in order based on a <a href="https://github.com/charleyza/DockerCompose/blob/master/docker-compose.yml">docker-compose.yml file</a></p><p>The command must be run relative to the above file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#starts up the containers</span><br><span class="line">sudo docker-compose up</span><br><span class="line"></span><br><span class="line">#deletes the containers</span><br><span class="line">sudo docker-compose rm</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></li><li>Jerome Petazzoni – <a href="http://container.training/">http://container.training</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building Docker Images</title>
      <link href="2018/07/building-docker-images/"/>
      <url>2018/07/building-docker-images/</url>
      
        <content type="html"><![CDATA[<h3 id="Hosted-on-store-docker-com"><a href="#Hosted-on-store-docker-com" class="headerlink" title="Hosted on store.docker.com"></a>Hosted on store.docker.com</h3><ol><li>Create an account at <a href="https://hub.docker.com/">https://hub.docker.com/</a><ol><li>Create a repository at <a href="https://hub.docker.com/repositories">https://hub.docker.com/repositories</a></li><li>Link to GitHub</li><li>Ensure you select a build rule on a branch, normally <code>master</code></li><li>Dockerfile is required - <a href="https://github.com/carlpaton/VulnusCloud/blob/master/Dockerfile">https://github.com/carlpaton/VulnusCloud/blob/master/Dockerfile</a></li></ol></li><li>This then builds to <a href="https://hub.docker.com/u/carlpaton">https://hub.docker.com/u/carlpaton</a></li><li>The image can then be pulled from <a href="https://store.docker.com/community/images/carlpaton/vodacommessagingxml2sms">store.docker.com</a> to build as a local container</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull carlpaton&#x2F;vulnuscloud</span><br></pre></td></tr></table></figure><h3 id="Hosted-locally"><a href="#Hosted-locally" class="headerlink" title="Hosted locally"></a>Hosted locally</h3><p>This will still use official base images but the built image that holds your source code is local.</p><ol><li> Build your application that will run as a container</li><li>Example <a href="https://github.com/carlpaton/VodacommessagingXml2sms">vodacom messaging xml2sms</a></li><li>Setup the <a href="/2018/04/docker-containers-the-future/">docker environment</a></li><li>Publish the code locally and zip to a compressed file<ol><li><a href="https://github.com/carlpaton/VodacommessagingXml2sms/blob/master/Docker/copy.bat">Copy to the host</a></li><li>Extract the compressed file</li></ol></li><li>Create your Dockerfile<ol><li><a href="https://github.com/carlpaton/VodacommessagingXml2sms/blob/master/Docker/Dockerfile">Example Dockerfile</a></li></ol></li><li>Create a shell script to build the image &amp; spin up the container<ol><li><a href="https://github.com/carlpaton/VodacommessagingXml2sms/blob/master/Docker/xml2sms.sh">Example script</a></li></ol></li></ol><h3 id="Push-To-AWS-Elastic-Container-Registry"><a href="#Push-To-AWS-Elastic-Container-Registry" class="headerlink" title="Push To AWS Elastic Container Registry"></a>Push To AWS Elastic Container Registry</h3><p><a href="https://carlpaton.github.io/2019/09/aws-elastic-container-registry/">You can push local images to a remote ECR</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.ben-morris.com/using-docker-to-build-and-deploy-net-core-console-applications/">http://www.ben-morris.com/using-docker-to-build-and-deploy-net-core-console-applications/</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core">https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/docker/building-net-docker-images">https://docs.microsoft.com/en-us/dotnet/core/docker/building-net-docker-images</a></li><li><a href="https://andrewlock.net/optimising-asp-net-core-apps-in-docker-avoiding-manually-copying-csproj-files/">https://andrewlock.net/optimising-asp-net-core-apps-in-docker-avoiding-manually-copying-csproj-files/</a></li><li><a href="https://www.youtube.com/watch?v=sl2mfyjnkXk&amp;feature=youtu.be">https://www.youtube.com/watch?v=sl2mfyjnkXk&amp;feature=youtu.be</a></li><li><a href="https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables">https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/run/#parent-command">https://docs.docker.com/engine/reference/commandline/run/#parent-command</a></li><li><a href="https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables">https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sonarqube and Docker</title>
      <link href="2018/07/sonarqube-and-docker/"/>
      <url>2018/07/sonarqube-and-docker/</url>
      
        <content type="html"><![CDATA[<p>Sonarqube provides static code analysis, testing and continuous inspection. <a href="/2018/05/19/quality-assurance-tools/">Also see Quality Assurance Tools</a> </p><p>You can also have these validations as part of your IDE – <a href="https://www.sonarlint.org/visualstudio/">https://www.sonarlint.org/visualstudio/</a></p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>To spin up a docker container you can use the public <a href="https://hub.docker.com/_/sonarqube">sonarqube</a> image and embedded H2 database (not suited for production) however fine for stand alone small projects.</p><ol><li>Spin up a container, <a href="https://github.com/carlpaton/DockerDemo/tree/master/Docker%20%28Linux%29/Ubuntu/sonarqube">there is a shell script here</a><ol><li>Default login is admin/admin</li><li>Create a key and project</li></ol></li><li>Example key – 93292c24ba95f6dc5a9275ec169dd654a3382a2d<ol><li>Example project – <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples">PatternsAndPrinciples</a></li></ol></li><li>Download .Net Core SDK (if your target project is .Net Core)<ol><li><a href="https://dotnet.microsoft.com/download/dotnet-core/2.1">dotnet-sdk-2.1.302-win-x64.exe</a></li><li>If you are targeting classic .net as long as you have msbuild you are fine</li></ol></li><li>Download Java Runtime<ol><li><a href="https://www.oracle.com/technetwork/es/java/javase/downloads/jre8-downloads-2133155.html?printOnly=1">jre-8u181-windows-x64.exe</a></li></ol></li><li>Download sonar-scanner-msbuild<ol><li><a href="https://github.com/SonarSource/sonar-scanner-msbuild/releases">sonar-scanner-msbuild-4.3.1.1372-netcoreapp2.0.zip</a></li><li>extract to C:\sonarscanner-msbuild-netcoreapp2\</li><li>Add the path to your Environmental Variables – Path<ol><li>Ensure you add with the ending \</li></ol></li></ol></li></ol><h3 id="Run-For-Net-Core"><a href="#Run-For-Net-Core" class="headerlink" title="Run For .Net Core"></a>Run For .Net Core</h3><p>Once you have the container up and the above installed, navigate via command prompt to the path your solution is on your local disk, example:</p><ul><li>C:\Dev-Code-School\Boilerplate\Class Library\PatternsAndPrinciples</li></ul><p>Then run the following substituting your container hosts IP and your key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet sonarscanner begin &#x2F;k:&quot;PatternsAndPrinciples&quot; &#x2F;d:sonar.host.url&#x3D;&quot;http:&#x2F;&#x2F;172.29.5.203:9000&quot; &#x2F;d:sonar.login&#x3D;&quot;93292c24ba95f6dc5a9275ec169dd654a3382a2d&quot;</span><br></pre></td></tr></table></figure><p>Then build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure><p>Then end, once done navigate to the sonarcube containers UI and fix what it moans about :D</p><ul><li>Example:  <a href="http://172.29.5.203:9000/">http://172.29.5.203:9000</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet sonarscanner end &#x2F;d:sonar.login&#x3D;&quot;93292c24ba95f6dc5a9275ec169dd654a3382a2d&quot;</span><br></pre></td></tr></table></figure><h4 id="Exclusions"><a href="#Exclusions" class="headerlink" title="Exclusions"></a>Exclusions</h4><p>If you need to exclude a class from quality checks while you are dev/testing just add <code>[ExcludeFromCodeCoverage]</code></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild">https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild</a></li><li><a href="https://docs.sonarqube.org/display/SONAR/Project+Existence">https://docs.sonarqube.org/display/SONAR/Project+Existence</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> static code analysis </tag>
            
            <tag> sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Image for SMS</title>
      <link href="2018/07/docker-image-vodacommessagingxml2sms/"/>
      <url>2018/07/docker-image-vodacommessagingxml2sms/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/docker-image-vodacommessagingxml2sms/sms-1.png" alt="Docker Image for SMS"></p><p>This docker image allows for a microservice to run within your LAN (Local Area Network) to accept POST and GET requests. The POST needs a JSON (Java Script Object Notation) object in its body to sent the SMS and the GET needs a watermark id to query for logs. The logs confirm the status of the message, example “delivered”. Authentication to Vodacom Messaging is handled by the container.</p><p>The image (which builds to a container) is called <em>carlpaton/vodacommessagingxml2sms</em> and is available at <a href="https://store.docker.com/community/images/carlpaton/vodacommessagingxml2sms">https://store.docker.com/community/images/carlpaton/vodacommessagingxml2sms</a></p><p>The code running in the container is written in C# (C-Sharp) and is a Microsoft WEB API project running on .NET Core 2. The Massive value in using .NET Core is it will run on Linux which will appeal to corporates.</p><h3 id="What-is-Vodacom-Messaging-XML2SMS"><a href="#What-is-Vodacom-Messaging-XML2SMS" class="headerlink" title="What is Vodacom Messaging XML2SMS?"></a>What is Vodacom Messaging XML2SMS?</h3><p><a href="https://www.vodacommessaging.co.za/xml2sms.asp">Vodacom Messaging</a> is an online mobile messaging and gateway provider, in a nutshell, their services provide mobile communication tools to send and receive messages in popular formats such as SMS (Short Message Service).</p><p>Although the world has moved on with instant messaging clients like WhatsApp and even E-mail (Electronic mail), in South Africa SMS is still hugely popular with corporates needing to communicate with their client base in a ubiquitous manner.</p><p>The XML2SMS product is a tool aimed at developers to integrate SMS capabilities into their applications, this can be used for a number of event driven messages such as access tokens or OTP (One Time Pin) for banking applications or real-time notifications of spend or activity. Every SMS Is tracked with status updates available of delivery for auditing purposes.</p><h3 id="Ubuntu-Server"><a href="#Ubuntu-Server" class="headerlink" title="Ubuntu Server"></a>Ubuntu Server</h3><p>All my testing was done on Ubuntu Server version 17 running as a virtual machine hosted on my notebook which runs Windows 10. Ubuntu then hosted docker, the images and containers.</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-2.png" alt="This setup reminded me of this meme, its good to laugh at things."></p><p>If you are un-familiar with Docker &amp; its capabilities I suggest you go through my article “<a href="/2018/04/docker-containers-the-future/">Docker -Containers  – The future</a>” before going any further, if you are already using docker and want to either publish your own containers or see a summary of how to use mine see “<a href="https://carlpaton.co.za/building-docker-images/">Building Docker Images</a>”</p><h3 id="Still-Unsure"><a href="#Still-Unsure" class="headerlink" title="Still Unsure?"></a>Still Unsure?</h3><p>If you are reading this and are still puzzling how to use my image perhaps this illustration will help clear things up for you.</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-3.png" alt="Docker Image for SMS"></p><h3 id="Steps-By-Step"><a href="#Steps-By-Step" class="headerlink" title="Steps By Step"></a>Steps By Step</h3><p>You can use <a href="https://carlpaton.co.za/docker-for-windows/">docker for windows</a> but for the purpose of this demo I have focused on Ubuntu Server in the configuration described above.</p><ol><li>Setup Docker on Linux, <a href="https://carlpaton.co.za/setup-docker-on-linux/">there are detailed steps here</a> to setup your VM Player (Virtual Machine Player), the hosted Linux OS (Operating System)</li><li>Create an [environmental properties file](<a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted">https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted</a> on store.docker.com/env_file_name.env), these will be injected into the container when it is created.</li></ol><p>I called mine <em>env_file_name.env,</em> below are the environmental properties the container will need. You can also set these in <a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/VodacommessagingXml2sms/appsettings.json">appsettings.json</a> – if you dont use the env file the container will look at appsettings.json instead.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USERNAME_ENVIRONMENT&#x3D;</span><br><span class="line">PASSWORD_ENVIRONMENT&#x3D;</span><br><span class="line">SMSGW_ENVIRONMENT&#x3D;</span><br></pre></td></tr></table></figure><p>This is the authentication the container will pass to <a href="https://www.vodacommessaging.co.za/contact.asp">Vodacom Messaging, you will need an account with them to send SMS</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESPONSETYPE_ENVIRONMENT&#x3D;json</span><br></pre></td></tr></table></figure><p>This is the flag to set the response from the container, you can have JSON or XML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOCKMODE_ENVIRONMENT&#x3D;1</span><br></pre></td></tr></table></figure><p>During development the container can mock the response from the SMS Gateway, set this flag to 1 for mocking or 0 to send the SMS Request to Vodacom Messaging. The implementation of this in the code is pretty crap, I think it would be better refactored to a factory pattern.</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-4.png" alt="Docker Image for SMS"></p><p>Editing the file on the server with nano</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-5.png" alt="Docker Image for SMS"></p><ol start="3"><li>Create your [shell script to pull the image &amp; spin up the container](<a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted">https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted</a> on store.docker.com/xml2sms.cloud.docker.com.sh) (Remember to mark it executable with chmod +x)</li></ol><p>Below is the content of my script:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--- This tells the script to run with bash</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">--- This pulls the image locally, the tag v1.0.0 can be omitted for latest.</span><br><span class="line">--- I’ve found when developing its best to specify a version so you know the </span><br><span class="line">--- only change is in your own code. </span><br><span class="line">docker pull carlpaton&#x2F;vodacommessagingxml2sms:v1.0.0</span><br><span class="line"></span><br><span class="line">--- If the container is already built and running as xml2sms, stop it.</span><br><span class="line">sudo docker container kill xml2sms</span><br><span class="line"></span><br><span class="line">--- Delete the container you just stopped. </span><br><span class="line">--- The value with the above steps is repatability. </span><br><span class="line">sudo docker rm xml2sms</span><br><span class="line"></span><br><span class="line">--- This spins up the new container. </span><br><span class="line">--- -d means run detached, </span><br><span class="line">--- -p is the port mapping 81 external to Linux and 80 internal to the container, </span><br><span class="line">--- name is the containers name followed by which image to build from. </span><br><span class="line">sudo docker run --env-file&#x3D;env_file_name.env -d -p 81:80 --name xml2sms carlpaton&#x2F;vodacommessagingxml2sms:v1.0.0</span><br><span class="line"></span><br><span class="line">--- start the container you just created</span><br><span class="line">sudo docker start xml2sms</span><br><span class="line"></span><br><span class="line">--- Display all the containers on the host.</span><br><span class="line">sudo docker ps –all</span><br></pre></td></tr></table></figure><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-6.png" alt="Docker Image for SMS"></p><p>Execute the shell script above:</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-7.png" alt="Docker Image for SMS"></p><ol start="4"><li>Send a POST request with a JSON object to the container and note the response.</li></ol><p>If you set MOCKMODE_ENVIRONMENT=1 then the container will not call Vodacom Messaging but rather mock the response. The below are example POST methods from <a href="https://www.getpostman.com/">postman</a>.</p><p><a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/postman.txt">Details on the postman configuration can be found here</a>.</p><p>This shows the postman’s POST:</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-8.png" alt="Docker Image for SMS"></p><p>Note the key returned was 202, this will be used in the GET below.</p><ol start="5"><li>GET a HTTP request to the container with the watermark ID received in the POST above.</li></ol><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-9.png" alt="Docker Image for SMS"></p><p>You can then query the containers logs with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs xml2sms</span><br></pre></td></tr></table></figure><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-10.png" alt="Docker Image for SMS"></p><h3 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h3><p>All this code is open source and licenced MIT (Massachusetts Institute of Technology) so I encourage developers to fork the code and adapt to work for their environment. Some ideas I can think of would include</p><ul><li>HTTPS Traffic to the container from your applications</li><li>Persist the requests / responses to a database (look at my <a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/VodacommessagingXml2sms/Interfaces/ISmsLogger.cs">ISmsLogger.cs</a><strong>)</strong></li><li>Authentication HASH per application</li><li>Additional send options such as EMS (Extended Messaging Service), this already works on Vodacom Messaging and won’t take much effort to add to the container.</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://carlpaton.co.za/building-docker-images/">Building Docker Images</a></li><li><a href="https://carlpaton.co.za/docker-containers-the-future/">Docker -Containers  – The future</a></li><li><a href="https://www.getpostman.com/">Postman</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger – Swashbuckle AspNetCore</title>
      <link href="2018/07/swagger-swashbuckle-aspnetcore/"/>
      <url>2018/07/swagger-swashbuckle-aspnetcore/</url>
      
        <content type="html"><![CDATA[<p>Swagger tools for documenting and testing API’s built on ASP.NET Core</p><ol><li>Install Swashbuckle.AspNetCore from nuget</li><li>In Startup.cs (ConfigureServices) add</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvc();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Swashbuckle (Swagger)</span><br><span class="line">services.AddSwaggerGen(c &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">c.SwaggerDoc(&quot;v1&quot;, new Info &#123; Title &#x3D; &quot;Vodacommessaging Xml2sms&quot;, Version &#x3D; &quot;v1&quot; &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>In Startup.cs (Configure) add</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;In the Configure method, insert middleware to expose the generated Swagger as JSON endpoint(s)</span><br><span class="line">app.UseSwagger();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Optionally insert the swagger-ui middleware if you want to expose interactive documentation, specifying the Swagger JSON endpoint(s) to power it from.</span><br><span class="line">app.UseSwaggerUI(c &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">c.SwaggerEndpoint(&quot;&#x2F;swagger&#x2F;v1&#x2F;swagger.json&quot;, &quot;Vodacommessaging Xml2sms V1&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>Run your application and browse to /swagger</li></ol><p>Example project this has been added to : <a href="https://github.com/charleyza/VodacommessagingXml2sms">https://github.com/charleyza/VodacommessagingXml2sms</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">https://github.com/domaindrivendev/Swashbuckle.AspNetCore</a></li><li><a href="https://stackoverflow.com/questions/43707733/services-addswaggergen-giving-error">https://stackoverflow.com/questions/43707733/services-addswaggergen-giving-error</a></li><li><a href="http://wmpratt.com/swagger-and-asp-net-web-api-part-1/">http://wmpratt.com/swagger-and-asp-net-web-api-part-1/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker FizzBuzz Image</title>
      <link href="2018/06/docker-fizzbuzz-image/"/>
      <url>2018/06/docker-fizzbuzz-image/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/docker-fizzbuzz-image/fizzbuzz-1.png" alt="Docker Fizzbuzz"></p><h3 id="What-is-FizzBuzz"><a href="#What-is-FizzBuzz" class="headerlink" title="What is FizzBuzz?"></a>What is FizzBuzz?</h3><p>A popular interview question is the “FizzBuzz test”, its based on a children’s game where you count from 1 to 100 and for multiples of 3 say “Fizz”, multiples of 5 say “Buzz”, if both say “FizzBuzz” else say the number, example 8.</p><p>Translated into to the code domain the question you could ask is:</p><p>“Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.”</p><h3 id="Whats-this-got-to-do-with-Docker"><a href="#Whats-this-got-to-do-with-Docker" class="headerlink" title="Whats this got to do with Docker?"></a>Whats this got to do with Docker?</h3><p>Well the hello world app from Docker is great but this is a little more fun and I like to put things into containers. FizzBuzz seems like a good candidate and is simpler to understand than the <a href="/2018/07/docker-image-vodacommessagingxml2sms/">Docker Image for SMS</a>.</p><p>The ‘hello world’ example from Docker also starts its life from an image they call ‘SCRATCH’ – this is great but not really useful in real world applications (Well ones I am capable of building anyway)<br>My ‘FizzBuzz’ image starts its life from ‘microsoft/aspnetcore:2.0’ so its far larger but comes with the .net goodness I know and love.</p><p>FizzBuzz is also a great way to demonstrate how easy Docker is to use and the powerful features it has! I hope it inspires developers looking to try their hand at Docker and gives a starting point.</p><p>Perhaps instead of asking a candidate to do the sudo code for you, ask them how they will code and create a docker image :)</p><h3 id="The-Code"><a href="#The-Code" class="headerlink" title="The Code"></a>The Code</h3><p>I used a C# Console Application targeting .Net Core 2 so the resulting container is platform agnostic.</p><p><a href="https://github.com/carlpaton/FizzBuzz">You can download all the source code here</a>.</p><p>Variables are used for the lowerBound, upperBound, fizzAt, buzzAt and outPut values as things need to be maintainable. This demonstrates that things can change, just look at our recent VAT increase!</p><p>These are read from injected environmental variables but do have hard coded defaults set, this is fine for this example however for production applications anything hard coded is frowned upon.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var lowerBound &#x3D; Environment.GetEnvironmentVariable(&quot;lowerBound&quot;) &#x3D;&#x3D; null ? 1 : Convert.ToInt32(Environment.GetEnvironmentVariable(&quot;lowerBound&quot;));</span><br></pre></td></tr></table></figure><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>Docker builds images from Dockerfiles, I used <a href="http://cloud.docker.com/">cloud.docker.com</a> to create a repository which builds the resulting image to <a href="http://hub.docker.com/">hub.docker.com</a>. This can then be pulled from <a href="https://store.docker.com/community/images/carlpaton/fizzbuzz">store.docker.com</a> with the following commmand:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull carlpaton&#x2F;fizzbuzz</span><br></pre></td></tr></table></figure><p>The docker file runs the following steps:</p><ol><li>Creates a builder image from microsoft/dotnet:2.0-sdk</li><li>Copys the solution file</li><li>Copys the project file and restores dependencys (same like your IDE does from Nuget)</li><li>Copys your class files</li><li>Builds &amp; Publishes your code (same like your IDE’s compiler does)</li><li>Finally from microsoft/aspnetcore:2.0 builds the image and copys in the compiled code from the ‘builder’ image</li></ol><p><a href="https://github.com/carlpaton/FizzBuzz/blob/master/Dockerfile">You can view the contents of the Dockerfile I used here</a>.</p><h3 id="Environmental-Variables"><a href="#Environmental-Variables" class="headerlink" title="Environmental Variables"></a>Environmental Variables</h3><p>The variables based on how you want the resulting container to behave need to be injected when you spin up, these need to be in a file thats relative to your current director.</p><p>Example: env_file_name.env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lowerBound&#x3D;1</span><br><span class="line">upperBound&#x3D;100</span><br><span class="line">fizzAt&#x3D;3</span><br><span class="line">buzzAt&#x3D;4</span><br></pre></td></tr></table></figure><p>You then inject with <em>–env-file=env_file_name.env</em></p><h3 id="Shell-script"><a href="#Shell-script" class="headerlink" title="Shell script"></a>Shell script</h3><p>To pull the container and spin up the image you will need to simply run the following shell script.<br>Note that you can pass the environmental variables in the command, or even better you can <a href="/2018/07/docker-compose/">use Docker Compose</a>.</p><p>Example shell script:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">docker pull carlpaton&#x2F;fizzbuzz:v1.0.0</span><br><span class="line">sudo docker container kill fizzbuzz</span><br><span class="line">sudo docker rm fizzbuzz</span><br><span class="line"></span><br><span class="line">sudo docker run --env-file&#x3D;env_file_name.env --name fizzbuzz carlpaton&#x2F;fizzbuzz:v1.0.0</span><br><span class="line"></span><br><span class="line">sudo docker start fizzbuzz</span><br><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlpaton/FizzBuzz/blob/master/fizzbuzz.sh">You can download this shell script here</a>.</p><h3 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h3><p>I believe in sharing things, all the code for the above is free <a href="https://opensource.org/licenses/MIT">MIT</a>.</p><h3 id="References-amp-Perquisites"><a href="#References-amp-Perquisites" class="headerlink" title="References &amp; Perquisites"></a>References &amp; Perquisites</h3><p>Before running the above you will need to <a href="/2018/04/setup-docker-on-linux/">setup Docker</a>.</p><ul><li><a href="https://blog.codinghorror.com/why-cant-programmers-program/">https://blog.codinghorror.com/why-cant-programmers-program/</a></li><li><a href="http://wiki.c2.com/?FizzBuzzTest">http://wiki.c2.com/?FizzBuzzTest</a></li><li><a href="https://www.youtube.com/watch?v=QPZ0pIK_wsc">https://www.youtube.com/watch?v=QPZ0pIK_wsc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Utilities</title>
      <link href="2018/06/docker-utilities/"/>
      <url>2018/06/docker-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="Container-Advisor"><a href="#Container-Advisor" class="headerlink" title="Container Advisor"></a>Container Advisor</h3><p><em>cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers.</em></p><ul><li><a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coveralls</title>
      <link href="2018/06/coveralls/"/>
      <url>2018/06/coveralls/</url>
      
        <content type="html"><![CDATA[<p><em>“Helps you deliver code confidently by showing which parts of your code aren’t covered by your test suite.”</em></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>I have not used this service as yet but can see it rock on this repository - <a href="https://github.com/randsleadershipslack/destalinator">https://github.com/randsleadershipslack/destalinator</a></p><p><img src="/d/coveralls/coveralls.jpg" alt="coveralls"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://coveralls.io/">https://coveralls.io/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> continuous integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana</title>
      <link href="2018/06/grafana/"/>
      <url>2018/06/grafana/</url>
      
        <content type="html"><![CDATA[<p>The analytics platform for <strong>all</strong> your metrics,  Grafana allows you to query, visualize, alert on and <strong>understand</strong> your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a <strong>data driven culture</strong>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://docs.grafana.org/">http://docs.grafana.org/</a></li><li><a href="https://grafana.com/plugins">https://grafana.com/plugins</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travis CI</title>
      <link href="2018/06/travis-ci/"/>
      <url>2018/06/travis-ci/</url>
      
        <content type="html"><![CDATA[<p><em>“Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.”</em></p><ol><li><a href="https://docs.travis-ci.com/user/getting-started/">https://docs.travis-ci.com/user/getting-started/</a><ol><li><p>Link GitHub account</p></li><li><p>Link your repository</p></li><li><p>Add your <a href="https://github.com/carlpaton/Common/blob/master/.travis.yml">.travis.yml file</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">csharp</span></span><br><span class="line"><span class="attr">mono:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">dotnet:</span> <span class="number">2.2</span><span class="number">.104</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">restore</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></li></ol></li><li>Select the ‘BUILD’ option/image at the top<ol><li>From the second drop down select ‘markdown’</li><li>Copy the markdown to your <a href="https://github.com/carlpaton/FizzBuzz/blob/master/README.md">readme</a></li></ol></li></ol><p><img src="/d/travis-ci/markdown.jpg" alt="markdown"></p><p>Your README should then display as follows</p><p><img src="/d/travis-ci/travis-ci.jpg" alt="travis ci"></p><h3 id="Example-Implementation"><a href="#Example-Implementation" class="headerlink" title="Example Implementation"></a>Example Implementation</h3><ul><li><a href="https://github.com/carlpaton/Common">https://github.com/carlpaton/Common</a></li><li><a href="https://github.com/carlpaton/FizzBuzz">https://github.com/carlpaton/FizzBuzz</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.travis-ci.com/user/languages/csharp/">https://docs.travis-ci.com/user/languages/csharp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> continuous integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Driven development (TDD)</title>
      <link href="2018/06/test-driven-development-tdd/"/>
      <url>2018/06/test-driven-development-tdd/</url>
      
        <content type="html"><![CDATA[<p>Test First or Test Driven development is a design pattern that can be summed up as:</p><ol><li><p>Write a test case and fail it (RED)<br>~ This means create your unit tests referencing classes that do not exist<br>~ the project will not compile</p></li><li><p>Put enough code to pass (GREEN)<br>~ This mean create the signature of the classes &amp; methods you are testing (sometimes referred to as stubbing them out)<br>~ Return a default value, example if the return type is int then return 0</p></li><li><p>Re factor (REFACTOR)<br>~ Implement the methods with the intended logic<br>~ Run test cases Pass/Fail</p></li></ol><p><img src="/d/test-driven-development-tdd/tdd.jpg" alt="TDD"></p><h3 id="What-is-the-value"><a href="#What-is-the-value" class="headerlink" title="What is the value?"></a>What is the value?</h3><p>* High test coverage (You are forced to write Unit Tests)<br>* Intentions &amp; requirements are clear<br>* Iterative development and testing<br>* Defects are identified early<br>* Automatic regression</p><p>Also see: <a href="https://dzone.com/articles/fail-fast-principle-in-software-development">https://dzone.com/articles/fail-fast-principle-in-software-development</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.codeproject.com/Articles/560137/NET-TDD-Test-Driven-Development-by-example-Part">https://www.codeproject.com/Articles/560137/NET-TDD-Test-Driven-Development-by-example-Part</a></li><li><a href="https://stackoverflow.com/questions/793850/hello-world-the-tdd-way">https://stackoverflow.com/questions/793850/hello-world-the-tdd-way</a></li><li><a href="https://stackoverflow.com/questions/1365943/how-to-start-unit-testing-or-tdd">https://stackoverflow.com/questions/1365943/how-to-start-unit-testing-or-tdd</a></li><li><a href="https://stackoverflow.com/questions/3840125/useful-design-patterns-for-unit-testing-tdd">https://stackoverflow.com/questions/3840125/useful-design-patterns-for-unit-testing-tdd</a></li><li><a href="https://mva.microsoft.com/en-us/training-courses/testdriven-development-16458?l=iCWHq6vXC_2706218965">https://mva.microsoft.com/en-us/training-courses/testdriven-development-16458?l=iCWHq6vXC_2706218965</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X-Frame-Options</title>
      <link href="2018/06/x-frame-options/"/>
      <url>2018/06/x-frame-options/</url>
      
        <content type="html"><![CDATA[<p>Cross site scripting is frowned upon however there are times when you need to display the content of one site in the iFrame of another. An example is a war board showing a result set of data used for an operations team to monitor. This can be things like new support requests.</p><p>The host can block this by setting the following header in the response:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure><p>If this is set you can stand on your head but your iFrame will not display the content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">--- include jquery</span><br><span class="line">src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-1.11.1.min.js&quot;</span><br><span class="line"></span><br><span class="line">--- js methods</span><br><span class="line"> $(document).ready(function () &#123;</span><br><span class="line">var height &#x3D; $(window).height();</span><br><span class="line">setInterval(&quot;Refresh()&quot;, 150000);</span><br><span class="line">$(&quot;#results&quot;).css(&quot;height&quot;, (height - 9) + &quot;px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">function Refresh() &#123;</span><br><span class="line">var iframe &#x3D; document.getElementById(&#39;results&#39;);</span><br><span class="line">iframe.src &#x3D; iframe.src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- some style</span><br><span class="line"> html, body &#123;</span><br><span class="line">margin: 0px;</span><br><span class="line">border: 0px;</span><br><span class="line">&#125;</span><br><span class="line">#results &#123;</span><br><span class="line">width: 99%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- iFrame</span><br><span class="line">iframe id&#x3D;&quot;results&quot; src&#x3D;&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MIT_License&quot; scrolling&#x3D;&quot;no&quot;</span><br></pre></td></tr></table></figure><h3 id="Work-Around"><a href="#Work-Around" class="headerlink" title="Work Around"></a>Work Around</h3><p>You can removed the configuration from the server (if you have access)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- nginx</span><br><span class="line">Header always append X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- IIS (I have not tried this but saw it on SO, linked below) </span><br><span class="line">&lt; system.webServer&gt;</span><br><span class="line">     &lt; httpProtocol allowKeepAlive&#x3D;&quot;true&quot; &gt;</span><br><span class="line">       &lt; customHeaders&gt;</span><br><span class="line">         &lt; add name&#x3D;&quot;X-Frame-Options&quot; value&#x3D;&quot;*&quot; &#x2F;&gt;</span><br><span class="line">       &lt; &#x2F;customHeaders&gt;</span><br><span class="line">     &lt; &#x2F;httpProtocol&gt;</span><br><span class="line"> &lt; &#x2F;system.webServer&gt;</span><br></pre></td></tr></table></figure><p>If this is for a warboard and you and not hijacking somebody’s website you can install a browser plug, example for <a href="https://chrome.google.com/webstore/detail/ignore-x-frame-headers/gleekbfjekiniecknbkamfmkohkpodhe">chrome is ‘Ignore X-Frame headers’</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/27358966/how-to-set-x-frame-options-on-iframe">https://stackoverflow.com/questions/27358966/how-to-set-x-frame-options-on-iframe</a></li><li><a href="https://stackoverflow.com/questions/38699221/load-denied-by-x-frame-options-does-not-permit-framing">https://stackoverflow.com/questions/38699221/load-denied-by-x-frame-options-does-not-permit-framing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> client side scripting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker, Interactive Container Session</title>
      <link href="2018/06/docker-interactive-container-session/"/>
      <url>2018/06/docker-interactive-container-session/</url>
      
        <content type="html"><![CDATA[<p>While playing with compose I had the need to manually run an Alpine container:</p><p>Spin up docker container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -v &#x2F;test-vol --name&#x3D;voltainer alpine:3.7 &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>Also see <a href="/2018/04/docker-commands/">docker-commands -&gt;  Interactive processes (like a shell)</a></p><p>Update/Upgrade then install GIT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk upgrade</span><br><span class="line">apk add --no-cache bash git openssh</span><br></pre></td></tr></table></figure><p>Create/List directory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>Clone GIT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;carlpaton&#x2F;SQLStatements.git data</span><br></pre></td></tr></table></figure><p>Copy to docker volume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp data&#x2F;ComposeDemo&#x2F;*.sql &#x2F;test-vol</span><br></pre></td></tr></table></figure><p>List installed packages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk info</span><br></pre></td></tr></table></figure><p>Exit interactive session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTRL D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> utilities </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP verbs</title>
      <link href="2018/06/http-verbs/"/>
      <url>2018/06/http-verbs/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Verb</th><th>Description use</th></tr></thead><tbody><tr><td><code>POST</code></td><td>Create/Insert</td></tr><tr><td><code>GET</code></td><td>Read</td></tr><tr><td><code>PUT</code></td><td>Update/Replace</td></tr><tr><td><code>PATCH</code></td><td>Update/Modify</td></tr><tr><td><code>DELETE</code></td><td>Delete</td></tr></tbody></table><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.restapitutorial.com/lessons/httpmethods.html">http://www.restapitutorial.com/lessons/httpmethods.html</a></li><li><a href="https://github.com/carlpaton/RedisAdministrator/tree/master/WebApp/Controllers">https://github.com/carlpaton/RedisAdministrator/tree/master/WebApp/Controllers</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bytes to string</title>
      <link href="2018/06/bytes-to-string-c-sharp/"/>
      <url>2018/06/bytes-to-string-c-sharp/</url>
      
        <content type="html"><![CDATA[<h3 id="Bytes-To-String"><a href="#Bytes-To-String" class="headerlink" title="Bytes To String"></a>Bytes To String</h3><p>Sweet conversion snaffled from stackoverflow.com &lt;3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class BytesToString</span><br><span class="line">&#123;</span><br><span class="line">    public static String Go(long byteCount)</span><br><span class="line">    &#123;</span><br><span class="line">        string[] suf &#x3D; &#123; &quot;B&quot;, &quot;KB&quot;, &quot;MB&quot;, &quot;GB&quot;, &quot;TB&quot;, &quot;PB&quot;, &quot;EB&quot; &#125;; &#x2F;&#x2F;Longs run out around EB</span><br><span class="line">        if (byteCount &#x3D;&#x3D; 0)</span><br><span class="line">        return &quot;0&quot; + suf[0];</span><br><span class="line">        </span><br><span class="line">        long bytes &#x3D; Math.Abs(byteCount);</span><br><span class="line">        int place &#x3D; Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));</span><br><span class="line">        double num &#x3D; Math.Round(bytes &#x2F; Math.Pow(1024, place), 1);</span><br><span class="line">        return (Math.Sign(byteCount) * num).ToString() + suf[place];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/281640/how-do-i-get-a-human-readable-file-size-in-bytes-abbreviation-using-net">https://stackoverflow.com/questions/281640/how-do-i-get-a-human-readable-file-size-in-bytes-abbreviation-using-net</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload File MVC</title>
      <link href="2018/06/upload-file-mvc/"/>
      <url>2018/06/upload-file-mvc/</url>
      
        <content type="html"><![CDATA[<h3 id="Net4-x-MVC"><a href="#Net4-x-MVC" class="headerlink" title=".Net4.x MVC"></a>.Net4.x MVC</h3><p>Upload and save some file.</p><h4 id="FileUploadViewModel"><a href="#FileUploadViewModel" class="headerlink" title="FileUploadViewModel"></a>FileUploadViewModel</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Display(Name = <span class="meta-string">&quot;Some File&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> List&lt;HttpPostedFileBase&gt; Files &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="FileUploadController"><a href="#FileUploadController" class="headerlink" title="FileUploadController"></a>FileUploadController</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">ValidateAntiForgeryToken</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">SomeAction</span>(<span class="params">[Bind(Include = <span class="string">&quot;Foo,Files&quot;</span></span>)] FileUploadViewModel vwModel)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (vwModel.Files[<span class="number">0</span>] != <span class="literal">null</span>)</span><br><span class="line">   &#123;</span><br><span class="line"><span class="keyword">var</span> fileSize = vwModel.Files[<span class="number">0</span>].InputStream.Length;</span><br><span class="line">        <span class="keyword">var</span> limit = Convert.ToInt64(ConfigurationManager.AppSettings[<span class="string">&quot;allowedUploadFilesSize&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fileSize &gt; limit)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">// moan with message that converts `limit` from bytes to string.</span></span><br><span class="line">            <span class="comment">// 10485760 is 10mb as bytes</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       HttpPostedFileBase postedFile = vwModel.Files[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">var</span> fi = <span class="keyword">new</span> FileInfo(postedFile.FileName);</span><br><span class="line">       <span class="keyword">var</span> saveName = $(<span class="string">&quot;&#123;Guid.NewGuid()&#125;&#123;fi.Extension&#125;&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> savePath = $(<span class="string">&quot;&#123;AppDomain.CurrentDomain.BaseDirectory&#125;&#123;saveName&#125;&quot;</span>);</span><br><span class="line">       postedFile.SaveAs(savePath);</span><br></pre></td></tr></table></figure><ul><li><a href="/2018/06/bytes-to-string-c-sharp/">Bytes to string</a></li></ul><h4 id="View-FileUpload-cshtml"><a href="#View-FileUpload-cshtml" class="headerlink" title="View FileUpload.cshtml"></a>View FileUpload.cshtml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@using (Html.BeginForm(&quot;SomeAction&quot;, &quot;FileUpload&quot;, FormMethod.Post, new &#123; encType &#x3D; &quot;multipart&#x2F;form-data&quot;, id &#x3D; &quot;uploadForm&quot; &#125;))</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; wrapper divs and magic here</span><br><span class="line">@Html.LabelFor(model &#x3D;&gt; model.Files, htmlAttributes: new &#123; @class &#x3D; &quot;control-label&quot; &#125;)</span><br><span class="line">@Html.TextBoxFor(m &#x3D;&gt; m.Files, new &#123; type &#x3D; &quot;file&quot;, name &#x3D; &quot;Files&quot;, @class &#x3D; &quot;form-control&quot;, @onchange &#x3D; &quot;Save();&quot; &#125;)</span><br></pre></td></tr></table></figure><p>Client side post-back after the file changes is triggered by <code>@onchange</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">Save</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Loading();</span><br><span class="line">    document.getElementById(<span class="string">&#x27;uploadForm&#x27;</span>).submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calling RESTful endpoints</title>
      <link href="2018/06/calling-restful-endpoints/"/>
      <url>2018/06/calling-restful-endpoints/</url>
      
        <content type="html"><![CDATA[<h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using (var client &#x3D; new HttpClient())</span><br><span class="line">&#123;</span><br><span class="line">    using (var content &#x3D; new StringContent(json, Encoding.UTF8, &quot;application&#x2F;json&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">    var result &#x3D; client.PostAsync(endPoint, content).Result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WebRequest"><a href="#WebRequest" class="headerlink" title="WebRequest"></a>WebRequest</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var endPoint &#x3D; string.Format(&quot;&#123;0&#125;&#x2F;fizzbuzz_event&quot;, ApiUrl);</span><br><span class="line">WebRequest request &#x3D; WebRequest.Create(endPoint);</span><br><span class="line">request.Method &#x3D; &quot;POST&quot;;</span><br><span class="line">request.ContentType &#x3D; &quot;application&#x2F;json&quot;;</span><br><span class="line"></span><br><span class="line">var dataStream &#x3D; request.GetRequestStream();</span><br><span class="line">dataStream.Write(new UTF8Encoding().GetBytes(json), 0, json.Length);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Value Type vs Reference Type</title>
      <link href="2018/06/value-type-vs-reference-type/"/>
      <url>2018/06/value-type-vs-reference-type/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/value-type-vs-reference-type/valref-1.png" alt="Value Type vs Reference Type"></p><p>The Types in .NET Framework are either treated by Value Type or by Reference Type.</p><p>A <strong>Value Type</strong> stores its contents in memory allocated on the stack. When you created a Value Type, a single space in memory is allocated to store the value and that variable directly holds a value.</p><p><em>Example: Struct &amp; all the built-in numeric types</em></p><p><strong>Reference Types</strong> are used by a reference which holds a reference (address) to the object but not the object itself. Because reference types represent the address of the variable rather than the data itself, assigning a reference variable to another doesn’t copy the data. Instead it creates a second copy of the reference, which refers to the same location of the heap as the original value.</p><p><em>Example: Class</em></p><p>By default an a class instance as an object is passed to methods by value, to change this (if you want the method to alter the object, pass it with the ref keyword</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var myObj &#x3D; new SomeClass();</span><br><span class="line">SomeMethodThatChangesTheObjectValues(ref myObj)</span><br><span class="line">&#x2F;&#x2F;do something, perhaps pass back to the view?</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/basic-types">https://docs.microsoft.com/en-us/dotnet/csharp/basic-types</a></li><li><a href="http://net-informations.com/faq/general/valuetype-referencetype.htm">http://net-informations.com/faq/general/valuetype-referencetype.htm</a></li><li><a href="https://stackoverflow.com/questions/5057267/what-is-the-difference-between-a-reference-type-and-value-type-in-c">https://stackoverflow.com/questions/5057267/what-is-the-difference-between-a-reference-type-and-value-type-in-c</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clear Nuget Cache</title>
      <link href="2018/05/clear-nuget-cache/"/>
      <url>2018/05/clear-nuget-cache/</url>
      
        <content type="html"><![CDATA[<p>If library’s have the same name you can clear your cache with these commands. This can happen when you are developing and testing a new version of the library.</p><p>I downloaded the <a href="https://www.nuget.org/packages/NuGet.exe/">Nuget executable from nuget.org</a> then saved it to <em>c:\Data\Nuget</em></p><p>You can save it to any location and add that path to your  Environment Variables’ under “Path” – I didn’t see the value for this exercise.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nuget locals all -list</span><br><span class="line">nuget locals all -clear</span><br></pre></td></tr></table></figure><p>Example output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Carl&gt;cd c:\Data\nuget\</span><br><span class="line"></span><br><span class="line">c:\Data\Nuget&gt;nuget locals all -list</span><br><span class="line">http-cache: C:\Users\Carl\AppData\Local\NuGet\v3-cache</span><br><span class="line">global-packages: C:\Users\Carl\.nuget\packages\</span><br><span class="line">temp: C:\Users\Carl\AppData\Local\Temp\NuGetScratch</span><br><span class="line"></span><br><span class="line">c:\Data\Nuget&gt;nuget locals all -clear</span><br><span class="line">Clearing NuGet HTTP cache: C:\Users\Carl\AppData\Local\NuGet\v3-cache</span><br><span class="line">Clearing NuGet global packages cache: C:\Users\Carl\.nuget\packages\</span><br><span class="line">Clearing NuGet Temp cache: C:\Users\Carl\AppData\Local\Temp\NuGetScratch</span><br><span class="line">Local resources cleared.</span><br><span class="line"></span><br><span class="line">c:\Data\Nuget&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Global Assembly Cache</title>
      <link href="2018/05/global-assembly-cache/"/>
      <url>2018/05/global-assembly-cache/</url>
      
        <content type="html"><![CDATA[<p><em>“Each computer where the Common Language Runtime is installed has a machine-wide code cache called the Global Assembly Cache. The Global Assembly Cache stores assemblies specifically designated to be shared by several applications on the computer.”</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\assembly&gt;dir &#x2F;s *myfile.dll*</span><br><span class="line">C:\Windows\Microsoft.NET\assembly&gt;dir &#x2F;s *myfile.dll*</span><br><span class="line"></span><br><span class="line">I had the most success running the above from C:\Windows\</span><br></pre></td></tr></table></figure><p>If you suspect caching issues then:</p><ol><li>Ensure you are updating the referenced library manifest with the new version number (you can use the same number from your nuspec file if you are using nuget).</li><li>Update all the library’s manually (locations shown in the commands above), you can just copy from your applications /bin directory.</li><li>Run IISReset if your issue is a web application related.</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/19980650/where-is-my-gac-located/19981061">https://stackoverflow.com/questions/19980650/where-is-my-gac-located/19981061</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/gac">https://docs.microsoft.com/en-us/dotnet/framework/app-domains/gac</a></li><li><a href="https://docs.microsoft.com/en-us/previous-versions/commerce-server/ms957500(v=cs.70)">https://docs.microsoft.com/en-us/previous-versions/commerce-server/ms957500(v=cs.70)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Single Responsibility Principle (SRP)</title>
      <link href="2018/05/single-responsibility-principle-srp/"/>
      <url>2018/05/single-responsibility-principle-srp/</url>
      
        <content type="html"><![CDATA[<p>This is the ‘S’ in <a href="/2018/04/solid-object-oriented-design/">SOLID</a></p><p>Responsibility’s can be stated as “a reason to change”, multiple small <a href="https://carlpaton.co.za/interfaces/">interfaces</a> (interface-segregation principle ISP) can help to achieve SRP.</p><p>SRP is also related to the concept of ‘<a href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation Of Concerns</a>‘</p><h3 id="Definition-Robert-C-“Uncle-Bob”-Martin"><a href="#Definition-Robert-C-“Uncle-Bob”-Martin" class="headerlink" title="Definition (Robert C. “Uncle Bob” Martin)"></a>Definition (Robert C. “Uncle Bob” Martin)</h3><p>There should never be more than one reason for a class to change.</p><h3 id="Definition-Wikipedia"><a href="#Definition-Wikipedia" class="headerlink" title="Definition (Wikipedia)"></a>Definition (Wikipedia)</h3><p>The Single Responsibility Principle states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class.</p><h3 id="Cohesion-and-Coupling"><a href="#Cohesion-and-Coupling" class="headerlink" title="Cohesion and Coupling"></a>Cohesion and Coupling</h3><ul><li>Cohesion is how strongly related &amp; focused the responsibilities of a module are</li><li>Coupling is the degree to which each program module relies on each other</li></ul><p>The goal would be to have low coupling and high cohesion.</p><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/5RwhyZnVRS8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li><a href="https://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074">https://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle–net-36074</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quality Assurance Tools</title>
      <link href="2018/05/quality-assurance-tools/"/>
      <url>2018/05/quality-assurance-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>“Selenium automates browsers. That’s it! What you do with that power is entirely up to you. Primarily, it is for automating web applications for testing purposes, but is certainly not limited to just that. Boring web-based administration tasks can (and should!) be automated as well.”</p><p><a href="https://www.seleniumhq.org/">https://www.seleniumhq.org/</a></p><h2 id="Sonarqube"><a href="#Sonarqube" class="headerlink" title="Sonarqube"></a>Sonarqube</h2><p>Static code analysis, Testing and Continuous Inspection.</p><p>“Continuous Inspection. SonarQube provides the capability to not only show health of an application but also to highlight issues newly introduced. With a Quality Gate in place, you can fix the leak and therefore improve code quality systematically.”</p><p><a href="https://www.sonarqube.org/">https://www.sonarqube.org/</a></p><h2 id="HP-Load-Runner"><a href="#HP-Load-Runner" class="headerlink" title="HP Load Runner"></a>HP Load Runner</h2><p>HP LoadRunner is an automated performance and test automation product for application load testing: examining system behavior and performance, while generating actual load.</p><p><a href="https://software.microfocus.com/en-us/products/loadrunner-load-testing/download">https://software.microfocus.com/en-us/products/loadrunner-load-testing/download</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Running a .Net Core Web Application</title>
      <link href="2018/05/running-a-net-core-web-application/"/>
      <url>2018/05/running-a-net-core-web-application/</url>
      
        <content type="html"><![CDATA[<p>Running the code locally your IDE does the work for you but when you deploy to a web server you will need to make some changes / configuration updates:</p><ol><li>Install both the .net core SDK and Runtime<ol><li><a href="https://www.microsoft.com/net/download/all">https://www.microsoft.com/net/download/all</a></li><li>For the .Net Core Runtime you will want the Hosting Bundle Installer</li><li>Reboot the host</li></ol></li><li>Update the sites <strong>Application Pool</strong> , set the <strong>.NET CLR version</strong> to <strong>No Managed Code</strong></li><li>Update the service configuration for <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.iisoptions?view=aspnetcore-2.2">IISOptions</a> in <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.istartup.configureservices?view=aspnetcore-2.2">ConfigureServices</a><ol><li>This will be in ‘Startup.cs’ (see below)</li></ol></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.Configure&lt;IISOptions&gt;(options =&gt; </span><br><span class="line">&#123; </span><br><span class="line">    options.ForwardClientCertificate = <span class="literal">false</span>; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>You may also need to update the BuildWebHost method in ‘Program.cs’ to include:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.UseContentRoot(<span class="string">&quot;c:\\yoursitedir&quot;</span>)=</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/index?view=aspnetcore-2.1&tabs=aspnetcore2x">Host ASP.NET Core on Windows with IIS</a></li><li><a href="https://docs.microsoft.com/en-gb/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-2.1">ASP.NET Core Module</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Reflector / Decompiler</title>
      <link href="2018/05/net-reflector-decompiler/"/>
      <url>2018/05/net-reflector-decompiler/</url>
      
        <content type="html"><![CDATA[<p><em>A decompiler is a computer program that takes an executable file as input, and attempts to create a high level source file which can be recompiled successfully.</em></p><ul><li><a href="https://www.jetbrains.com/decompiler/">https://www.jetbrains.com/decompiler/</a></li><li><a href="https://github.com/icsharpcode/ILSpy">https://github.com/icsharpcode/ILSpy</a></li><li><a href="https://www.telerik.com/products/decompiler.aspx">https://www.telerik.com/products/decompiler.aspx</a></li><li><a href="http://www.devextras.com/decompiler/">http://www.devextras.com/decompiler/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE, Editor and Database Tools</title>
      <link href="2018/05/ide-editor-and-database-tools/"/>
      <url>2018/05/ide-editor-and-database-tools/</url>
      
        <content type="html"><![CDATA[<p>An integrated development environment (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools, and a debugger.</p><h3 id="Local-IDE-amp-Code-Editors"><a href="#Local-IDE-amp-Code-Editors" class="headerlink" title="Local IDE &amp; Code Editors"></a>Local IDE &amp; Code Editors</h3><ul><li><a href="/2019/09/ide-visual-studio-code/">Visual Studio Code ~ code editor</a></li><li><a href="/2019/09/ide-visual-studio/">Visual Studio</a></li><li><a href="/2019/09/ide-webstorm/">Webstorm (Jetbrains)</a></li><li><a href="/2019/09/ide-rider/">Rider (Jetbrains)</a></li><li><a href="https://www.jetbrains.com/pycharm/">PyCharm (Jetbrains)</a> </li></ul><h3 id="Online-IDE"><a href="#Online-IDE" class="headerlink" title="Online IDE"></a>Online IDE</h3><ul><li><a href="https://stackblitz.com/">stackblitz.com</a> , <a href="https://www.youtube.com/watch?v=EBzoTnX6LzU">Using StackBlitz (youtube)</a></li><li><a href="https://codepen.io/">https://codepen.io/</a></li><li><a href="https://repl.it/@carlpaton/">https://repl.it/@carlpaton/</a> </li></ul><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><ul><li><a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></li><li><a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a></li><li><a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads">https://www.microsoft.com/en-us/sql-server/sql-server-downloads</a></li><li><a href="https://www.pgadmin.org/download/">https://www.pgadmin.org/download/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metric to Inch Conversion</title>
      <link href="2018/05/metric-to-inch-conversion/"/>
      <url>2018/05/metric-to-inch-conversion/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Metric Size</th><th>Fractional Inch</th></tr></thead><tbody><tr><td>1 mm</td><td>3/64”</td></tr><tr><td>2 mm</td><td>5/64”</td></tr><tr><td>3 mm</td><td>1/8”</td></tr><tr><td>4 mm</td><td>5/32”</td></tr><tr><td>4.7 mm</td><td>3/16”</td></tr><tr><td>5 mm</td><td>13/64”</td></tr><tr><td>6 mm</td><td>15/64”</td></tr><tr><td>6.3 mm</td><td>1/4”</td></tr><tr><td>7 mm</td><td>9/32”</td></tr><tr><td>8 mm</td><td>5/16”</td></tr><tr><td>9 mm</td><td>23/64”</td></tr><tr><td>9.5 mm</td><td>3/8”</td></tr><tr><td>10 mm</td><td>25/64”</td></tr><tr><td>12.7 mm</td><td>1/2”</td></tr><tr><td>19 mm</td><td>3/4”</td></tr><tr><td>10.16 cm</td><td>4”</td></tr><tr><td>91.44 cm</td><td>36”</td></tr><tr><td>121.92 cm</td><td>48”</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.rapidtables.com/convert/length/mm-to-inch.html">https://www.rapidtables.com/convert/length/mm-to-inch.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Access PostgreSQL database command line terminal in a container</title>
      <link href="2018/05/access-postgresql-database-command-line-terminal-in-a-container/"/>
      <url>2018/05/access-postgresql-database-command-line-terminal-in-a-container/</url>
      
        <content type="html"><![CDATA[<p>Access PostgreSQL database command line terminal in a container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it [CONTAINER NAME] psql -U postgres</span><br></pre></td></tr></table></figure><p>Commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\c [DATABASE NAME] ~ connects to a database</span><br><span class="line">\d ~ checks all tables</span><br><span class="line">\d+ [TABLE NAME] ~ checks </span><br><span class="line">\q ~ quit</span><br></pre></td></tr></table></figure><p>You can also run this as a shell script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">sudo docker exec -it [CONTAINER NAME] psql -U postgres -c &quot;CREATE DATABASE mydatabase OWNER &#x3D; postgres TABLESPACE pg_default;&quot;</span><br><span class="line"></span><br><span class="line">sudo docker exec -it [CONTAINER NAME] psql -d gblcore -U postgres -c &quot;CREATE SCHEMA myschema AUTHORIZATION postgres;&quot;</span><br><span class="line"></span><br><span class="line">sudo docker exec -i [CONTAINER NAME] pg_restore -U postgres -d mydatabase &lt; &#x2F;tmp&#x2F;production20180529.dump</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Db Visualizer</title>
      <link href="2018/05/db-visualizer/"/>
      <url>2018/05/db-visualizer/</url>
      
        <content type="html"><![CDATA[<p>DbVisualizer is the universal database tool for developers,  DBAs and analysts. It is the perfect solution since the same tool can be used on all major operating systems accessing a wide range of databases.</p><p><a href="https://www.dbvis.com/">https://www.dbvis.com/</a></p><h3 id="Page-Setup"><a href="#Page-Setup" class="headerlink" title="Page Setup"></a>Page Setup</h3><p>File -&gt; Page Setup -&gt; <code>A3 (297 x 420mm)</code></p><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p>CTRL ALT E -&gt; JPG</p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Code Analysis</title>
      <link href="2018/05/net-code-analysis/"/>
      <url>2018/05/net-code-analysis/</url>
      
        <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/EvX7WBJuI_g" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://msdn.microsoft.com/en-us/library/bb385914.aspx">https://msdn.microsoft.com/en-us/library/bb385914.aspx</a></li><li><a href="https://dailydotnettips.com/exploring-the-code-metrics-tools-in-visual-studio/">https://dailydotnettips.com/exploring-the-code-metrics-tools-in-visual-studio/</a></li></ul><h3 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h3><p><a href="https://developercommunity.visualstudio.com/content/problem/30872/support-code-metrics-for-net-core-projects.html">https://developercommunity.visualstudio.com/content/problem/30872/support-code-metrics-for-net-core-projects.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> static code analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin Setup &amp; Install</title>
      <link href="2018/05/xamarin-setup-install/"/>
      <url>2018/05/xamarin-setup-install/</url>
      
        <content type="html"><![CDATA[<p><em>“Xamarin is a mobile app development platform for building native iOS, Android, and Windows apps from a common C#/.NET code base.”</em></p><p>To compile for iOS, bring up a <a href="/2018/04/vmware-workstation-player/">VM, pull the macOS High Sierra virtual hard disc</a> and install x-code.<br>VS2017 will do the rest! &lt;3</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/visualstudio/cross-platform/visual-studio-and-xamarin">https://docs.microsoft.com/en-us/visualstudio/cross-platform/visual-studio-and-xamarin</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/cross-platform/learn-app-building-basics-with-xamarin-forms-in-visual-studio">https://docs.microsoft.com/en-us/visualstudio/cross-platform/learn-app-building-basics-with-xamarin-forms-in-visual-studio</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/cross-platform/setup-and-install">https://docs.microsoft.com/en-us/visualstudio/cross-platform/setup-and-install</a></li><li><a href="https://www.xamarin.com/prebuilt">https://www.xamarin.com/prebuilt</a></li><li><a href="https://docs.microsoft.com/en-us/xamarin/xamarin-forms/get-started/hello-xamarin-forms/">https://docs.microsoft.com/en-us/xamarin/xamarin-forms/get-started/hello-xamarin-forms/</a></li><li><a href="https://www.codeproject.com/Articles/1097179/SQLite-with-Xamarin-Forms-Step-by-Step-guide">https://www.codeproject.com/Articles/1097179/SQLite-with-Xamarin-Forms-Step-by-Step-guide</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> xamarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Custom Data Annotations</title>
      <link href="2018/05/mvc-custom-data-annotations/"/>
      <url>2018/05/mvc-custom-data-annotations/</url>
      
        <content type="html"><![CDATA[<h3 id="Custom-Annotation"><a href="#Custom-Annotation" class="headerlink" title="Custom Annotation"></a>Custom Annotation</h3><p>/CustomValidation/ValidateAgeAttribute.cs</p><p>This can be used to apply a custom range validation to the given date time value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.ComponentModel.DataAnnotations;</span><br><span class="line">using System.Web.Mvc;</span><br><span class="line"></span><br><span class="line">namespace PROJECTNAMESPACE.CustomValidation</span><br><span class="line">&#123;</span><br><span class="line"> [AttributeUsage(AttributeTargets.Property, AllowMultiple &#x3D; false, Inherited &#x3D; true)]</span><br><span class="line"> public class ValidateAgeAttribute : ValidationAttribute, IClientValidatable</span><br><span class="line"> &#123;</span><br><span class="line"> private const string DefaultErrorMessage &#x3D; &quot;Your age is invalid, your &#123;0&#125; should fall between &#123;1&#125; and &#123;2&#125;&quot;;</span><br><span class="line"></span><br><span class="line">public DateTime MinimumDateProperty &#123; get; private set; &#125;</span><br><span class="line"> public DateTime MaximumDateProperty &#123; get; private set; &#125;</span><br><span class="line"></span><br><span class="line">public ValidateAgeAttribute(</span><br><span class="line"> int minimumAgeProperty,</span><br><span class="line"> int maximumAgeProperty)</span><br><span class="line"> : base(DefaultErrorMessage)</span><br><span class="line"> &#123;</span><br><span class="line"> MaximumDateProperty &#x3D; DateTime.Now.AddYears(minimumAgeProperty * -1);</span><br><span class="line"> MinimumDateProperty &#x3D; DateTime.Now.AddYears(maximumAgeProperty * -1);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">protected override ValidationResult IsValid(object value, ValidationContext validationContext)</span><br><span class="line"> &#123;</span><br><span class="line"> if (value !&#x3D; null)</span><br><span class="line"> &#123;</span><br><span class="line"> DateTime parsedValue &#x3D; (DateTime)value;</span><br><span class="line"></span><br><span class="line">if (parsedValue &lt;&#x3D; MinimumDateProperty || parsedValue &gt;&#x3D; MaximumDateProperty)</span><br><span class="line"> &#123;</span><br><span class="line"> return new ValidationResult(FormatErrorMessage(validationContext.DisplayName));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return ValidationResult.Success;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> public IEnumerable&lt;ModelClientValidationRule&gt; GetClientValidationRules(ModelMetadata metadata, ControllerContext context)</span><br><span class="line"> &#123;</span><br><span class="line"> var rule &#x3D; new ModelClientValidationRule()</span><br><span class="line"> &#123;</span><br><span class="line"> ValidationType &#x3D; &quot;validateage&quot;,</span><br><span class="line"> ErrorMessage &#x3D; FormatErrorMessage(metadata.GetDisplayName()),</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">rule.ValidationParameters.Add(&quot;minumumdate&quot;, MinimumDateProperty.ToShortDateString());</span><br><span class="line"> rule.ValidationParameters.Add(&quot;maximumdate&quot;, MaximumDateProperty.ToShortDateString());</span><br><span class="line"></span><br><span class="line">yield return rule;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public override string FormatErrorMessage(string name)</span><br><span class="line"> &#123;</span><br><span class="line"> return string.Format(ErrorMessageString, name, MinimumDateProperty.ToShortDateString(), MaximumDateProperty.ToShortDateString());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Applied-to-Model"><a href="#Applied-to-Model" class="headerlink" title="Applied to Model"></a>Applied to Model</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Required]</span><br><span class="line">[Display(Name &#x3D; &quot;Effective From&quot;)]</span><br><span class="line">[DisplayFormat(DataFormatString &#x3D; &quot;&#123;0:dd&#x2F;MM&#x2F;yyyy&#125;&quot;, ApplyFormatInEditMode &#x3D; true)]</span><br><span class="line">[ValidateAge(15, 65)]</span><br><span class="line">public DateTime DateOfBirth &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.macaalay.com/2014/02/24/unobtrusive-client-and-server-side-age-validation-in-mvc-using-custom-data-annotations/">Unobtrusive Client and Server Side Age Validation in MVC using Custom Data Annotations (http://www.macaalay.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Multi Threaded Application</title>
      <link href="2018/05/c-sharp-multi-threaded-application/"/>
      <url>2018/05/c-sharp-multi-threaded-application/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Updated 23/03/2021</strong></em></p><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Running Tasks in parallel is very simple, the collection of tasks below return a string and its workload is simply to create a text file and then delay for x milliseconds to mimic a longer workload.</p><p>The complete code for these snippets is at <a href="https://github.com/carlpaton/ThreadingDemo/tree/main/src/RunTasksInParallel">https://github.com/carlpaton/ThreadingDemo/tree/main/src/RunTasksInParallel</a></p><p>Some configuration</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> millisecondsTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">var</span> taskCount = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>Create the service that does some work and has the mimic of a longer workload. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">HandleAsync</span>(<span class="params"><span class="built_in">int</span> millisecondsTimeout</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dateTime = DateTime.Now;</span><br><span class="line">    <span class="keyword">var</span> fileName = <span class="string">$&quot;<span class="subst">&#123;dateTime.Hour&#125;</span>_<span class="subst">&#123;dateTime.Minute&#125;</span>_<span class="subst">&#123;dateTime.Second&#125;</span>_<span class="subst">&#123;dateTime.Millisecond&#125;</span>.txt&quot;</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0&#125; : &#123;1&#125;&quot;</span>, dateTime, fileName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.Append(<span class="string">$&quot;<span class="subst">&#123;dateTime&#125;</span> <span class="subst">&#123;fileName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> File.WriteAllTextAsync(<span class="string">$&quot;data/<span class="subst">&#123;fileName&#125;</span>&quot;</span>, sb.ToString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Task.Delay(millisecondsTimeout);</span><br><span class="line">    <span class="keyword">return</span> fileName.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create the task list and populate it with the workload.</p><p>Note that adding them to the list is not what starts the tasks, its the <code>File.WriteAllTextAsync</code> that would have been the trigger.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; taskCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">    tasks.Add(createFileService.HandleAsync(millisecondsTimeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then wait for the tasks to all complete</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> Task.WhenAll(tasks);</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenall">https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenall</a></li></ul><h3 id="Task-Array"><a href="#Task-Array" class="headerlink" title="Task Array"></a>Task Array</h3><p>This was adapted from <a href="https://stackoverflow.com/questions/4190949/create-multiple-threads-and-wait-all-of-them-to-complete">stackoverflow.com</a> examples and is very simliar to the list example above however the tasks are started using <code>Task.Factory.StartNew</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listOfSomething = <span class="keyword">new</span> PopulateListOfSomething();</span><br><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> Task[listOfSomething.Count];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listOfSomething.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> someService = <span class="keyword">new</span> SomeService(listOfSomething[i]);</span><br><span class="line">    tasks[i] = Task.Factory.StartNew(() =&gt; someService.Go());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task.WaitAll(tasks);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/4190949/create-multiple-threads-and-wait-all-of-them-to-complete">https://stackoverflow.com/questions/4190949/create-multiple-threads-and-wait-all-of-them-to-complete</a></li><li><a href="https://msdn.microsoft.com/en-us/library/dd537610(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd537610(v=vs.100).aspx</a></li><li><a href="https://msdn.microsoft.com/en-us/library/bb157784.aspx">https://msdn.microsoft.com/en-us/library/bb157784.aspx</a></li><li><a href="http://www.dotnetcurry.com/dotnet/1360/concurrent-programming-dotnet-core">http://www.dotnetcurry.com/dotnet/1360/concurrent-programming-dotnet-core</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> threading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modifying Posted Variable Value In Controller Action</title>
      <link href="2018/05/modifying-posted-variable-value-in-controller-action/"/>
      <url>2018/05/modifying-posted-variable-value-in-controller-action/</url>
      
        <content type="html"><![CDATA[<p>Generally this is not something I would do as the data the user captures is what they intend to persist or send. I have however seen use cases where the controller has a bool field that determines if an UPDATE or INSERT is required.</p><h3 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h3><ol><li>A user partially fills out a form that persists the data to more than one table, each table schema is defined by a property class on the view model</li><li>The user clicks save, the data is then persisted to the database (INSERT required)</li><li>The user then fills out more of the form and then clicks save again (UPDATE required)</li></ol><p>The class could look something like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ClientScheduleViewModel</span><br><span class="line">&#123;</span><br><span class="line">   [Required(ErrorMessage &#x3D; &quot;Client required.&quot;)]</span><br><span class="line">    public string ClientId &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public UserInformationViewModel DisplayInfo &#123; get; set; &#125;</span><br><span class="line">    public UserCaptureModel CaptureInfo &#123; get; set; &#125;</span><br><span class="line">    public bool DoInsert&#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The DisplayInfo and CaptureInfo property’s could be passed to a partial view, one to display and one to capture.</p><p>When the view model data is posted back to the controller, DoInsert being true would indicate a new record is required and false means an update where the lookup on both tables could be done by ClientId.</p><p>When ActionResult returns controls and data binds to the view, DoInsert would still display the value that was posted. This is probably a security thing.</p><p>There are 3 shims to get around this as suggested by <a href="https://stackoverflow.com/users/29407/darin-dimitrov">Darin Dimitrov</a> on stack overflow. (the below has been adapted for my example)</p><ol><li>Remove the value from the modelstate:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line">public ActionResult Foo(SomeModel model)</span><br><span class="line">&#123;</span><br><span class="line">    ModelState.Remove(&quot;DoInsert&quot;);            </span><br><span class="line">    model.DoInsert &#x3D; false; &#x2F;&#x2F;change after doing the insert</span><br><span class="line">    return View(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Manually generate the hidden field</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;DoInsert&quot; value&#x3D;&quot;&lt;%&#x3D; Model.DoInsert %&gt;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>Write a custom helper which will use the value of your model and not the one that’s being POSTed</li></ol><p>Option 2 is probably the best route as there is no hard coding.</p><h3 id="Alternative-Solutions"><a href="#Alternative-Solutions" class="headerlink" title="Alternative Solutions"></a>Alternative Solutions</h3><ol><li>Include the database id as a hidden field (additional validations will be needed to ensure the user did not maliciously change values)</li><li>Store the id in a session or cookie (for the cookie option you should obfuscate or encode the data)</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/4837744/hiddenfor-not-getting-correct-value-from-view-model">Hiddenfor not getting correct value from view model</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Salted Hash</title>
      <link href="2018/05/salted-hash/"/>
      <url>2018/05/salted-hash/</url>
      
        <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Cryptography">cryptography</a>, a <strong>salt</strong> is <a href="https://en.wikipedia.org/wiki/Random_Number_Generator">random</a> data that is used as an additional input to a <a href="https://en.wikipedia.org/wiki/One-way_function">one-way function</a> that “<a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">hashes</a>” <a href="https://en.wikipedia.org/wiki/Data_(computing)">data</a>, a <a href="https://en.wikipedia.org/wiki/Password">password</a> or <a href="https://en.wikipedia.org/wiki/Passphrase">passphrase</a>. Salts are closely related to the concept of <a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce</a>. The primary function of salts is to defend against <a href="https://en.wikipedia.org/wiki/Dictionary_attacks">dictionary attacks</a> or against its hashed equivalent, a pre-computed <a href="https://en.wikipedia.org/wiki/Rainbow_table">rainbow table</a> attack.</p><p>This can be visually demonstrated as:</p><p><img src="/d/salted-hash/password-hash-salt-1.png" alt="visually demonstrated"></p><h3 id="Cool-how-do-we-do-this-in-code"><a href="#Cool-how-do-we-do-this-in-code" class="headerlink" title="Cool, how do we do this in code?"></a>Cool, how do we do this in code?</h3><p>Consider the following username and password:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var email &#x3D; &quot;howdy@carlpaton.co.za&quot;;</span><br><span class="line">var password &#x3D; &quot;qwerty&quot;;</span><br></pre></td></tr></table></figure><p>The password value needs to be hashed and then persisted to the database.</p><ol><li>Create the salt by getting the byte array values of the email, the assumption would be that an email address is unique.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var salt &#x3D; Encoding.ASCII.GetBytes(username);</span><br></pre></td></tr></table></figure><ol start="2"><li>Create a byte array of the password and concatenate the two into one byte array</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var _value &#x3D; Encoding.UTF8.GetBytes(password);</span><br><span class="line">var saltedValue &#x3D; _value.Concat(salt).ToArray();</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a MD5 hash from the ‘salted value’</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; need MD5 to calculate the hash</span><br><span class="line"> byte[] hash &#x3D; ((HashAlgorithm)CryptoConfig.CreateFromName(&quot;MD5&quot;)).ComputeHash(saltedValue);</span><br></pre></td></tr></table></figure><ol start="4"><li>Encode and to string the hash</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; string representation (similar to UNIX format)</span><br><span class="line">string encoded &#x3D; BitConverter.ToString(hash)</span><br><span class="line">&#x2F;&#x2F; without dashes</span><br><span class="line">.Replace(&quot;-&quot;, string.Empty)</span><br><span class="line">&#x2F;&#x2F; make lowercase</span><br><span class="line">&#x2F;&#x2F;.ToLower();</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>This would then result in a value of A9419D55933FBCF43BA46087F8F20B22</p><p>You can also create a random byte array using RNGCryptoServiceProvider but you would then need to persist that byte array to the database and use it in your user authentication challenge routine.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Salt_(cryptography)">https://en.wikipedia.org/wiki/Salt_(cryptography)</a></li><li><a href="http://blogs.quickheal.com/password-security-a-dash-of-salt-and-little-of-hash-to-go-please/">http://blogs.quickheal.com/password-security-a-dash-of-salt-and-little-of-hash-to-go-please/</a></li><li><a href="https://github.com/charleyza/HashDemo">Functional examples of the above can be found here</a>.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Tests Overview</title>
      <link href="2018/05/unit-tests-overview/"/>
      <url>2018/05/unit-tests-overview/</url>
      
        <content type="html"><![CDATA[<p>“<em>UNIT TESTING is a level of software testing where individual units/ components of a software are tested. The purpose is to validate that each unit of the software performs as designed. A unit is the smallest testable part of any software. It usually has one or a few inputs and usually a single output</em>.”</p><p><img src="/d/unit-tests-overview/test-lol.png" alt="Unit Tests"></p><p>Effective unit tests need Clean Code with a Testable design. Your tests need to be Context-aware, that is to say unit tests in project a may not hold the same value of tests in project b.</p><p>Also see <a href="https://github.com/charleyza/Practices/blob/master/UnitTestGuidelines.md"> this forked readme from Rusty Divine (http://osmyn.com/)</a></p><h3 id="Unit-of-Work"><a href="#Unit-of-Work" class="headerlink" title="Unit of Work"></a>Unit of Work</h3><p>Everything that happens from invoking a public method to it returning the results after it’s finished; it’s the work done along the path you see the debugger take through your code.</p><h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>Code that invokes a unit of work within the confines of a project layer while faking external dependencies and validates an assumption about one specific scenario.</p><h3 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test"></a>Integration Test</h3><p>Code that invokes a unit of work that crosses project boundaries, uses actual external dependencies, and/or validates many different aspects about the code under test.</p><h3 id="Stubs"><a href="#Stubs" class="headerlink" title="Stubs"></a>Stubs</h3><p>A substitute for a dependency in the code under test that allows the code to compile and the dependency to return data as specified by the test but importantly cannot itself directly make a test fail.</p><h3 id="Mocks"><a href="#Mocks" class="headerlink" title="Mocks"></a>Mocks</h3><p>A substitute for a dependency in the code under test that knows how many times each of its methods were called an in what order so that it can validate an assumption about how the dependency was used and therefore make a test fail.</p><h3 id="Fakes"><a href="#Fakes" class="headerlink" title="Fakes"></a>Fakes</h3><p>A generic term for a replacement of a real dependency with something the test specifies, which includes both stubs and mocks.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ardalis.com/unit-test-naming-convention">https://ardalis.com/unit-test-naming-convention</a></li><li><a href="http://softwaretestingfundamentals.com/unit-testing/">http://softwaretestingfundamentals.com/unit-testing/</a></li><li><a href="https://www.pluralsight.com/courses/csharp-unit-testing-enterprise-applications">https://www.pluralsight.com/courses/csharp-unit-testing-enterprise-applications</a></li><li><a href="https://www.pluralsight.com/courses/basic-unit-testing-csharp-developers">https://www.pluralsight.com/courses/basic-unit-testing-csharp-developers</a></li><li><a href="https://www.telerik.com/products/mocking/unit-testing.aspx">https://www.telerik.com/products/mocking/unit-testing.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packets larger than max_allowed_packet are not allowed</title>
      <link href="2018/05/packets-larger-than-max_allowed_packet-are-not-allowed/"/>
      <url>2018/05/packets-larger-than-max_allowed_packet-are-not-allowed/</url>
      
        <content type="html"><![CDATA[<p><em>“A communication packet is a single SQL statement sent to the MySQL server, a single row that is sent to the client, or a binary log event sent from a master replication server to a slave.”</em></p><p>You can view this setting:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;max_allowed_packet&#39;;</span><br><span class="line"></span><br><span class="line">Default before change would show: 4194304</span><br></pre></td></tr></table></figure><p>To change this in windows you must find and update the config file for the service:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqld.exe&quot; --defaults-file&#x3D;&quot;C:\ProgramData\MySQL\MySQL Server 5.7\my.ini&quot; MySQL57</span><br></pre></td></tr></table></figure><p>Edit the file and change the ‘max_allowed_packet’ value from 4M to something larger like 10M (this is 10 mb)</p><p>If you are running linux you can try this to set it to 16M</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL max_allowed_packet&#x3D;16777216;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html">https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Controllers</title>
      <link href="2018/05/mvc-controllers/"/>
      <url>2018/05/mvc-controllers/</url>
      
        <content type="html"><![CDATA[<h3 id="Web-Result"><a href="#Web-Result" class="headerlink" title="Web Result"></a>Web Result</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionResult</span><br></pre></td></tr></table></figure><h3 id="Web-Return"><a href="#Web-Return" class="headerlink" title="Web Return"></a>Web Return</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return RedirectToAction(&quot;ActionName&quot;, &quot;ControllerName&quot;, new &#123; id &#x3D; vwModel.SomeId &#125;);</span><br><span class="line">return View(&quot;ViewName&quot;, vwModel);</span><br><span class="line">return PartialView(&quot;_PartialViewName&quot;, vwModel);</span><br></pre></td></tr></table></figure><h3 id="Web-API-Result"><a href="#Web-API-Result" class="headerlink" title="Web API Result"></a>Web API Result</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseMessage</span><br></pre></td></tr></table></figure><h3 id="Web-API-Return"><a href="#Web-API-Return" class="headerlink" title="Web API Return"></a>Web API Return</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return Request.CreateResponse(HttpStatusCode.OK, anyObject);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Data Annotations</title>
      <link href="2018/05/mvc-data-annotations/"/>
      <url>2018/05/mvc-data-annotations/</url>
      
        <content type="html"><![CDATA[<h3 id="Date-formatting"><a href="#Date-formatting" class="headerlink" title="Date formatting"></a>Date formatting</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DisplayFormat(DataFormatString &#x3D; &quot;&#123;0:dd&#x2F;MM&#x2F;yyyy&#125;&quot;, ApplyFormatInEditMode &#x3D; true)]</span><br></pre></td></tr></table></figure><h3 id="Number-formatting"><a href="#Number-formatting" class="headerlink" title="Number formatting"></a>Number formatting</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DisplayFormat(DataFormatString &#x3D; &quot;&#123;0:N&#125;&quot;, ApplyFormatInEditMode &#x3D; true)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Html Helpers</title>
      <link href="2018/05/mvc-html-helpers/"/>
      <url>2018/05/mvc-html-helpers/</url>
      
        <content type="html"><![CDATA[<h3 id="DropDownListFor"><a href="#DropDownListFor" class="headerlink" title="DropDownListFor"></a>DropDownListFor</h3><p>View helper sample code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.DropDownListFor(model &#x3D;&gt; model.OperatorValue, (List&lt;SelectListItem&gt;)ViewData[&quot;OperatorValue_SelectList&quot;], new &#123; @class &#x3D; &quot;form-control&quot; &#125;)</span><br></pre></td></tr></table></figure><p>Controller sample code, this can be in ‘Lookups.cs’ class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;SelectListItem&gt; OperatorSelectList()</span><br><span class="line">&#123;</span><br><span class="line">   var r &#x3D; new List&lt;SelectListItem&gt;</span><br><span class="line">   &#123;</span><br><span class="line">      new SelectListItem &#123; Value &#x3D; &quot;&quot;, Text &#x3D; &quot;-- Please Select --&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value &#x3D; &quot;*&quot;, Text &#x3D; &quot;*&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value &#x3D; &quot;&#x2F;&quot;, Text &#x3D; &quot;&#x2F;&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value &#x3D; &quot;+&quot;, Text &#x3D; &quot;+&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value &#x3D; &quot;-&quot;, Text &#x3D; &quot;-&quot; &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DisplayNameFor"><a href="#DisplayNameFor" class="headerlink" title="DisplayNameFor"></a>DisplayNameFor</h3><p>Display from property that is a list of another class</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class AddViewModel</span><br><span class="line">&#123;</span><br><span class="line">   public double BaseRate &#123; get; set; &#125;</span><br><span class="line">   public DateTime EffectiveFrom &#123; get; set; &#125;</span><br><span class="line">   public List&lt;HistoryViewModel&gt; RatePrimeHistory &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HistoryViewModel</span><br><span class="line">&#123;</span><br><span class="line">   public double BaseRate &#123; get; set; &#125;</span><br><span class="line">   public DateTime EffectiveFrom &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To display the history data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;th&gt;</span><br><span class="line">      @&#123;var dummy &#x3D; Model.RatePrimeHistory.FirstOrDefault(); &#125;</span><br><span class="line">      @Html.DisplayNameFor(model &#x3D;&gt; dummy.BaseRate)</span><br><span class="line">   &lt;&#x2F;th&gt;</span><br><span class="line">   &lt;th&gt;</span><br><span class="line">      @Html.DisplayNameFor(model &#x3D;&gt; dummy.EffectiveFrom)</span><br><span class="line">   &lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">@foreach (var item in Model.RatePrimeHistory)</span><br><span class="line">&#123;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;</span><br><span class="line">      @Html.DisplayFor(modelItem &#x3D;&gt; item.BaseRate)</span><br><span class="line">   &lt;&#x2F;td&gt;</span><br><span class="line">   &lt;td&gt;</span><br><span class="line">      @Html.DisplayFor(modelItem &#x3D;&gt; item.EffectiveFrom)</span><br><span class="line">   &lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/12941465/calling-ienumerable-overload-of-displaynamefor">Calling IEnumerable overload of DisplayNameFor</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth1 And Basic Authentication</title>
      <link href="2018/05/oauth1-and-basic-auth/"/>
      <url>2018/05/oauth1-and-basic-auth/</url>
      
        <content type="html"><![CDATA[<p>I have a library that provides a <code>HttpHeaderModel</code> model - <a href="https://github.com/carlpaton/Common/blob/master/Common/Http/Authorization/HttpHeaderService.cs">HttpHeaderService.cs</a> with unit tests in <a href="https://github.com/carlpaton/Common/blob/master/CommonUnitTest/Http/Authorization/HttpHeaderServiceTest.cs">HttpHeaderServiceTest.cs</a>. These values are what can be used in the code that does the http request.</p><p>This can also be downloaded from Nuget as <a href="https://www.nuget.org/packages/CarlPaton.Common/">CarlPaton.Common</a></p><h3 id="Basic-Authentication"><a href="#Basic-Authentication" class="headerlink" title="Basic Authentication"></a>Basic Authentication</h3><p>This is added to the <code>Header</code> of the request in the format <code>name</code> and <code>value</code>. The name is <code>Authorization</code> and the value is the word <code>Basic</code> and a base 64 encoded string of <code>username:password</code>. Example: <code>Basic dXNlcm5hbWU6cGFzc3dvcmQ=</code> </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> auth = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;:&#123;1&#125;&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> plainTextBytes = Encoding.ASCII.GetBytes(auth);</span><br><span class="line"><span class="keyword">var</span> base64Encoded = System.Convert.ToBase64String(plainTextBytes);</span><br><span class="line"><span class="keyword">var</span> completeHeader = <span class="built_in">string</span>.Format(<span class="string">&quot;Basic &#123;0&#125;&quot;</span>, base64Encoded);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line">request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">request.ContentType = <span class="string">&quot;application/json; charset=utf-8&quot;</span>;</span><br><span class="line">request.Headers.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Basic dXNlcm5hbWU6cGFzc3dvcmQ=&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="OAuth1"><a href="#OAuth1" class="headerlink" title="OAuth1"></a>OAuth1</h3><blockquote><p>OAuth1 is deprecated, please use <a href="/2020/12/oauth2/">OAuth 2.0</a></p></blockquote><p>This is added to the <code>Header</code> of the request in the format <code>name</code> and <code>value</code>. The name is <code>Authorization</code> and the value is the word <code>OAuth</code> followed by concatinated string of key/values <code>oauth_consumer_key</code>, <code>oauth_token</code>, <code>oauth_signature_method</code>, <code>oauth_timestamp</code>, <code>oauth_nonce</code>, <code>oauth_version</code> and <code>oauth_signature</code>.</p><p>The <code>oauth_signature</code> is simply the <code>consumerSecret</code> &amp; <code>tokenSecret</code> joined by <code>&amp;</code> as url-encoding <code>%26</code></p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&quot;OAuth oauth_consumer_key&#x3D;\&quot;&#123;consumerKey&#125;\&quot;,oauth_token&#x3D;\&quot;&#123;accessToken&#125;\&quot;,oauth_signature_method&#x3D;\&quot;PLAINTEXT\&quot;,oauth_timestamp&#x3D;\&quot;&#123;timeStamp&#125;\&quot;,oauth_nonce&#x3D;\&quot;&#123;nonce&#125;\&quot;,oauth_version&#x3D;\&quot;1.0\&quot;,oauth_signature&#x3D;\&quot;&#123;consumerSecret&#125;%26&#123;tokenSecret&#125;\&quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line">request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">request.ContentType = <span class="string">&quot;application/json; charset=utf-8&quot;</span>;</span><br><span class="line">request.Headers.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;OAuth oauth_consumer_key=\&quot;ConsumerKey\&quot;,oauth_token=\&quot;AccessToken\&quot;,oauth_signature_method=\&quot;PLAINTEXT\&quot;,oauth_timestamp=\&quot;1579220112\&quot;,oauth_nonce=\&quot;ShPKxisPFC0\&quot;,oauth_version=\&quot;1.0\&quot;,oauth_signature=\&quot;ConsumerSecret%26TokenSecret\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.add">https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.add</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker, Containers – The future!</title>
      <link href="2018/04/docker-containers-the-future/"/>
      <url>2018/04/docker-containers-the-future/</url>
      
        <content type="html"><![CDATA[<p>Docker, Containers – The future!<img src="/d/docker-containers-the-future/docker-containers-the-future-1.png"></p><p>In the Information Technology space ‘buzz words’ come and go, we heard about ‘Web 2.0’ which to me didn’t really mean anything besides old sites were ugly and we needed to make things better? (HTML5 did a good job of this) ‘Synergy’ was another – it was used so often it lost all meaning. Perhaps my opinion is invalid but the over use of ‘buzz words’ makes smart people sound dumb! Today we have things like ‘IoT’ which is ‘Internet of Things’ – this one makes sense as things in our lives are connected to the internet and ‘Life runs on code’.</p><p>Another one I see coming up a lot is ‘Docker’ and ‘Containers’…</p><p>Now Docker and Containers are not just some ‘buzz words’. Together they are by far the most exciting technology I have seen in ages, honestly the last time I was this excited about something in IT was when I wrote my first compiled application in C# and benched it against what we now call Classic ASP (VB Script) – well the C# code smashed the Classic ASP and I was hooked! Now back to Docker and to quote <a href="https://www.pluralsight.com/authors/nigel-poulton">Nigel Poulton</a> – “if you are in any way into IT, I am telling you now, Docker and containers are going to be a massive part of your future.”</p><p>I cannot agree more, once you catch on how easy Docker is to use you will simply never go back to not using it. Docker runs on Windows, Mac and Linux with most of the commands figuring the ‘voodoo’ out for you. You don’t have to be a systems administrator with years of experience to use this technology – today in IT the lines between ‘Developers’ and ‘Operations’ are blurred. You guessed it there is a buzz word for this too and its “DevOps”.</p><p>The biggest problem with using anything new is either having nothing to apply it to or not really knowing how to apply it to your current problem domain. As a software developer Im often faced with this – I want to use something new and cool but know if I try use it I am probably just going to upset perfectly working code and cost my employer time which means money.</p><p>I hope this article helps at least one person trying to figure out how they can (1) Use docker even if its just in their development environment and (2) Possibly integrate it into their systems.</p><h3 id="Before-We-Start"><a href="#Before-We-Start" class="headerlink" title="Before We Start"></a>Before We Start</h3><p>This short video is well worth watching and explains the fundamentals.</p><p>Learn Docker in 12 Minutes</p><iframe width="560" height="315" src="https://www.youtube.com/embed/YFl2mCHdv24" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Baby-Steps-–-Installing-Docker"><a href="#Baby-Steps-–-Installing-Docker" class="headerlink" title="Baby Steps – Installing Docker"></a>Baby Steps – Installing Docker</h3><p>You can simply install “Docker for Windows”, check “Docker Support” in a new Visual Studio 2017 project and deploy to docker from the IDE. This is pretty cool and will give you the opportunity to quick and easily fiddle with this new technology but this is not the open source path I’d encourage you to follow.</p><p>If you want to work and stay relevant in today’s corporate world you have to understand that there are budget constraints. This means corporates like solutions that are “cheap” or “free”. Based on the “open source” comment above you will either be frowning right now or know that I’m going to tell you to use Linux &amp; .Net Core. You don’t have to be a Systems Administrator to use Linux, “DevOps” is here and you don’t have to dual boot your PC – just install a Virtual Machine (VM) and hack away!</p><p>The “Docker for Windows” setup is pretty cool, it allows you to switch between Windows and Linux containers (The Linux voodoo runs in a Hyper V MobyLinuxVM) but my focus here is a native Windows host (My OS is Windows 10 64 bit) running a Linux Virtual Machine with the docker installation and containers all running in the Linux VM. This approach I feel will lend itself to the containers running on a bare-metal Linux host.</p><h4 id="Step-1-–-Choose-a-VM-Player"><a href="#Step-1-–-Choose-a-VM-Player" class="headerlink" title="Step 1 – Choose a VM Player"></a>Step 1 – Choose a VM Player</h4><p>I really like ‘<a href="/2018/04/vmware-workstation-player/">VMware Workstation Player</a>’ as its simple to use and from what I’ve seen is rock solid. At the time of writing this I was using VMware-player-14.1.1 which does unfortunately clash with the Hyper V settings in ‘Docker For Windows’ so it may not be for everybody.</p><h4 id="Step-2-–-Choose-your-Linux-Operating-System"><a href="#Step-2-–-Choose-your-Linux-Operating-System" class="headerlink" title="Step 2 – Choose your Linux Operating System"></a>Step 2 – Choose your Linux Operating System</h4><p>Ubuntu has 2 points going for it; (1) its popular so chances are somebody has already solved a problem for you and; (2) it comes with enough things installed that you don’t have to write complicated bash scripts to get things to work. Just remember that with all the additional applications installed on the OS there is more potential for an attacker to take advantage of.</p><p>You can use Ubuntu’s Desktop Graphical User Interface (GUI) version but I’d suggest the Server version as this is probably what you will find at most corporates as it will maximize a servers processing power. My local VM runs ‘ubuntu-17.10.1-server’ and I make use of <a href="/2018/04/putty/">Putty</a> to SSH to it.</p><p>The nice thing about Putty is you can copy and paste, I am lazy and would rather copy a known working command with parameters. A lot of developers like to rather type the commands themselves, repetition does improve cognitive function so this has merit too. Just do what works for you.</p><h4 id="Step-3-–-Install-Docker-on-Ubuntu-Server"><a href="#Step-3-–-Install-Docker-on-Ubuntu-Server" class="headerlink" title="Step 3 – Install Docker on Ubuntu Server"></a>Step 3 – Install Docker on Ubuntu Server</h4><p>Follow the <a href="/2018/04/setup-docker-on-linux/">steps here to setup Docker on Linux</a>.</p><h4 id="Functional-Use-Cases-for-Docker"><a href="#Functional-Use-Cases-for-Docker" class="headerlink" title="Functional Use Cases for Docker"></a>Functional Use Cases for Docker</h4><p>The examples below should help you identify somewhere in your development process where you can use Docker. None of these are at scale, all run locally on your notebook and thanks to .Net Core all work on Linux – Now I think that’s pretty cool and worth looking at!</p><ol><li>Database containers<ol><li>Microsoft SQL Express</li><li>MySQL</li><li>PostgreSQL</li></ol></li><li>.Net Core Web API<ol><li>This will be our microservice to talk to the database(es)</li><li>You can use Soap UI or Postman to test them</li></ol></li><li>.Net Core MVC Web Application<ol><li>A web application that consumes the Web API</li></ol></li></ol><p>Although I used 3 database containers, generally an organization will choose one database and stick with it. This was done to demonstrate (1) these database types can and do run in containers on Linux and (2) how simple it is to spin them up. For the database shell scripts you can just leave them in the root users directory but I like to create directorys for each.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;mssql-server-linux&#x2F;mssql-server-linux.sh</span><br></pre></td></tr></table></figure><h3 id="Microsoft-SQL-Express"><a href="#Microsoft-SQL-Express" class="headerlink" title="Microsoft SQL Express"></a>Microsoft SQL Express</h3><p>The <a href="https://github.com/charleyza/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/mssql-server-linux/mssql-server-linux.sh">complete shell script can be downloaded from here</a>, the steps below run though how you can get the shell script onto the Linux VM and how to use it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#create directory </span><br><span class="line">mkdir mssql-server-linux</span><br><span class="line"></span><br><span class="line">#change to this directory</span><br><span class="line">cd mssql-server-linux</span><br><span class="line"></span><br><span class="line">#edit script with nano text editor</span><br><span class="line">sudo nano mssql-server-linux.sh</span><br></pre></td></tr></table></figure><p>Sudo means run as root/admin, nano is a text editor and mssql-server-linux.sh is the name of our shell script.<br>When the editor opens up, paste the commands listed below, then press ‘Ctrl x’ and enter so save the file, Y for yes and then enter.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#pull the image</span><br><span class="line">sudo docker pull microsoft&#x2F;mssql-server-linux:2017-CU5</span><br><span class="line"></span><br><span class="line">#kill the container if its running</span><br><span class="line">sudo docker container kill mssql_p5</span><br><span class="line"></span><br><span class="line">#rm&#x2F;delete the container if it exists</span><br><span class="line">sudo docker rm mssql_p5</span><br><span class="line"></span><br><span class="line">#spin up a detached mssql container</span><br><span class="line">sudo docker run --name&#x3D;mssql-p5 -e &#39;ACCEPT_EULA&#x3D;Y&#39; -e &#39;SA_PASSWORD&#x3D;Password123&#39; -e &#39;MSSQL_PID&#x3D;Express&#39; -p 62005:1433 -d microsoft&#x2F;mssql-server-linux:2017-CU5</span><br><span class="line"></span><br><span class="line">#start the container</span><br><span class="line">sudo docker start mssql_p5</span><br><span class="line"></span><br><span class="line">#list containers</span><br><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p>You don’t have to map the ports like I did with -p 62005:1433; I do this so I can have more than one database container of that type on the same <a href="https://docs.docker.com/network/bridge/#manage-a-user-defined-bridge">network bridge</a>. 2017-CU5 is the tagged version I tested with, if left off it will default to LATEST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x mssql-server-linux.sh</span><br></pre></td></tr></table></figure><p>This marks the shell script as executable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;mssql-server-linux.sh</span><br></pre></td></tr></table></figure><p>This runs the shell script. Once done you can now connect to the ‘mssql_p5’ container on x.x.x.x:62005 with sa/Password123 from a client such as <a href="https://dbeaver.jkiss.org/download/">Dbeaver</a> or <a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio (SSMS)</a>.</p><p>Where x.x.x.x is the ip address of your Linux VM. You can run the following command to get the IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p>Provision the database with the <a href="https://github.com/carlpaton/SQLStatements/tree/master/mssql/test">SQL scripts here</a>. These are needed for the Web API project to function.</p><p>This can be automated with another container running a console application or a flyway container – <a href="https://hub.docker.com/r/boxfuse/flyway/">hub.docker.com/r/boxfuse/flyway</a></p><p>For demo purposes you could even have a seed/provision call in the Web API.</p><h3 id="MySQL-amp-PostgreSQL"><a href="#MySQL-amp-PostgreSQL" class="headerlink" title="MySQL &amp; PostgreSQL"></a>MySQL &amp; PostgreSQL</h3><p>The steps are 90% the same as the above, you can find sample shell scripts &amp; SQL scripts below:</p><ul><li><a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/mysql/mysql.sh">https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/mysql/mysql.sh</a><ul><li><a href="https://github.com/carlpaton/SQLStatements/tree/master/mysql/test">MySQL SQL Scripts</a> to provision the database</li></ul></li><li><a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/postgres/postgres.sh">https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/postgres/postgres.sh</a><ul><li><a href="https://github.com/carlpaton/SQLStatements/tree/master/postgresql/test">PostgreSQL  Scripts</a> to provision the database</li></ul></li></ul><h3 id="Net-Core-Web-API"><a href="#Net-Core-Web-API" class="headerlink" title=".Net Core Web API"></a>.Net Core Web API</h3><p>Up until now we have pulled and used predefined images for the database containers. For our Application Programming Interface (API) we will still use a predefined base image but build on top of it with instructions from something called a ‘<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>’</p><p>You can organize your files in any way you want to, I use the users home directory and then create folders from there grouping things together.</p><p>Create your dotnet folder and Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#change to the root directory (if you are still inside mssql-server-linux)</span><br><span class="line">cd\</span><br><span class="line"></span><br><span class="line">#create directory</span><br><span class="line">mkdir dotnet-webapi</span><br><span class="line"></span><br><span class="line">#change directory</span><br><span class="line">cd dotnet-webapi</span><br><span class="line"></span><br><span class="line">#edit the dockerfile</span><br><span class="line">sudo nano Dockerfile</span><br></pre></td></tr></table></figure><p>Paste this into the Dockerfile and save it. (Check the steps above for the ‘mssql-server-linux.sh’ file if you are a bit lost)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft&#x2F;aspnetcore:2.0</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">COPY .&#x2F;content .</span><br><span class="line">ENTRYPOINT [&quot;dotnet&quot;, &quot;aspnetapp.dll&quot;]</span><br></pre></td></tr></table></figure><p>Create the shell script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano dotnet-webapi.sh</span><br></pre></td></tr></table></figure><p>Paste this into dotnet-webapi.sh and save it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">sudo docker pull microsoft&#x2F;dotnet:2.0-sdk</span><br><span class="line">sudo docker container kill dotnet-webapi</span><br><span class="line">sudo docker rm dotnet-webapi</span><br><span class="line">sudo docker rmi image_name:dotnet_image_webapi</span><br><span class="line">sudo docker build -t dotnet_image_webapi .</span><br><span class="line">sudo docker run -d -p 81:80 --name dotnet-webapi dotnet_image_webapi</span><br><span class="line">sudo docker start dotnet-webapi</span><br><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p>Now the Dockerfile will need some content, you can download <a href="https://github.com/carlpaton/DockerDemo/tree/master/Sample%20Code">the source code</a> from here and publish yourself or you can use <a href="https://github.com/carlpaton/DockerDemo/tree/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/content">the published application</a>. The key for either is to ensure you update the <a href="https://github.com/carlpaton/DockerDemo/blob/master/Sample%20Code/NetCoreWebApi/NetCoreWebApi/appsettings.json">appsettings.json</a> file. (The ConnMySQL, ConnPgSQL &amp; ConnMsSQL values to match you Linux VM &amp; passwords in the shell scripts if you have changed them from the defaults I chose.)</p><p>Once the connection strings are updated you will need to compress the published solution into a <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/content.zip">content.zip archive like this one</a>.</p><p>You will then need to edit <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/copy.bat">https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/copy.bat</a> to have your Linux VM’s IP.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set PATH&#x3D;C:\Program Files\PuTTY</span><br><span class="line"></span><br><span class="line">pscp c:&#x2F;Dev-Code-School&#x2F;DockerDemo&#x2F;&quot;Docker (Linux)&quot;&#x2F;Ubuntu&#x2F;dotnet-webapi&#x2F;content.zip carl@192.168.231.134:&#x2F;home&#x2F;carl&#x2F;dotnet-webapi&#x2F;content.zip</span><br><span class="line"></span><br><span class="line">echo &quot;DONE&quot;</span><br></pre></td></tr></table></figure><p>Run the copy.bat file from your local host (Windows, as administrator); this will copy the compressed content.zip file to the Linux VM. There are probably more efficient ways to get the data to the VM, for me this was the simplest. Im more than happy to listen and learn about other ways to do this? (Any Linux Fundies out there?)</p><p>When your containers are running on a bare metal Linux server this content should be read from a <a href="https://docs.docker.com/storage/volumes/">volumn</a>.</p><p>Ensure you have upzip installed, <a href="/2018/04/linux-commands/">see these linux commands install help it.</a></p><p>Unzip the content.zip file to /dotnet/content</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip content.zip</span><br></pre></td></tr></table></figure><p>Then mark the script as executable and run it, this will spin up the MS SQL Container.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x dotnet-webapi.sh</span><br><span class="line">sudo .&#x2F;dotnet-webapi.sh</span><br></pre></td></tr></table></figure><p>You will now be able to access the API on port 81, below are examples for each database repository (you will need to use the IP of your VM)</p><p>If the API throws an error, make sure you have run the <a href="https://github.com/carlpaton/SQLStatements">SQL commands to provision each database</a>.</p><ul><li><a href="http://192.168.180.130:81/api/values">http://192.168.180.130:81/api/values</a></li><li><a href="http://192.168.180.130:81/api/mssql">http://192.168.180.130:81/api/mssql</a></li><li><a href="http://192.168.180.130:81/api/mysql">http://192.168.180.130:81/api/mysql</a></li><li><a href="http://192.168.180.130:81/api/pgsql">http://192.168.180.130:81/api/pgsql</a></li></ul><p>If the API still doesnt work you can <a href="/2018/04/docker-commands/">check the container logs</a> with the <a href="https://docs.docker.com/config/containers/logging/">logs command</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs dotnet-webapi</span><br><span class="line">sudo docker logs mssql_p5</span><br></pre></td></tr></table></figure><h3 id="Net-Core-MVC-Web-Application"><a href="#Net-Core-MVC-Web-Application" class="headerlink" title=".Net Core MVC Web Application"></a>.Net Core MVC Web Application</h3><p>The steps are so similar to the Web API there is no value in repetition. The key difference is the content changes to the Web Application and the container will listen on port 80 (the Web API is on port 81)</p><ul><li><a href="http://192.168.180.130/">http://192.168.180.130:80</a></li></ul><h3 id="And-Now"><a href="#And-Now" class="headerlink" title="And Now?"></a>And Now?</h3><p>The steps above just scratch the surface of what you can do with containers. If this has peeked your interest and I really hope it has I suggest you look at the <a href="https://docs.docker.com/compose/">docker compose command</a> tool for defining and running multi-container Docker applications.</p><p>Docker Compose in 12 Minutes:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Qw9zlE3t8Ko" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Free-self-paced-courses"><a href="#Free-self-paced-courses" class="headerlink" title="Free self-paced courses"></a>Free self-paced courses</h4><p>Docker wants to make things easy for you and have a wealth of information and <a href="https://training.play-with-docker.com/">free self-paced courses to learn Docker</a></p><p><em>” Check out the Docker Playground or join the Docker Community Slack and Docker Forums to learn, mentor and collaborate with others members of the Docker community. “</em></p><h4 id="Orchestration"><a href="#Orchestration" class="headerlink" title="Orchestration"></a>Orchestration</h4><p><em>” Container Orchestration refers to the automated arrangement, coordination, and management of software containers. Container Orchestration allows users to define how to coordinate the containers in the cloud when the multi-container packaged application is deployed. “</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/HDt_iN1hINA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><h4 id="Training-amp-Mentors"><a href="#Training-amp-Mentors" class="headerlink" title="Training &amp; Mentors"></a>Training &amp; Mentors</h4><ul><li><a href="https://thanethomson.com/">Thane Thomson</a></li><li><a href="http://blog.nigelpoulton.com/category/docker/">Nigel Poulton</a></li><li><a href="https://www.pluralsight.com/courses/docker-getting-started">https://www.pluralsight.com/courses/docker-getting-started</a></li></ul><h4 id="Docker-com"><a href="#Docker-com" class="headerlink" title="Docker.com"></a>Docker.com</h4><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce">https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/logs/">https://docs.docker.com/engine/reference/commandline/logs/</a></li><li><a href="https://docs.docker.com/config/pruning/">https://docs.docker.com/config/pruning/</a></li><li><a href="https://store.docker.com/images/mssql-server-windows-express/">https://store.docker.com/images/mssql-server-windows-express/</a></li><li><a href="https://hub.docker.com/r/microsoft/mssql-server-linux/">https://hub.docker.com/r/microsoft/mssql-server-linux/</a></li><li><a href="https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-docker">https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-docker</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/logs/">https://docs.docker.com/engine/reference/commandline/logs/</a></li><li><a href="https://github.com/Microsoft/mssql-docker/issues/195">https://github.com/Microsoft/mssql-docker/issues/195</a></li><li><a href="https://store.docker.com/images/mysql">https://store.docker.com/images/mysql</a></li><li><a href="https://store.docker.com/images/postgres">https://store.docker.com/images/postgres</a></li><li><a href="https://hub.docker.com/r/microsoft/aspnetcore/">https://hub.docker.com/r/microsoft/aspnetcore/</a></li><li><a href="https://store.docker.com/images/dotnet">https://store.docker.com/images/dotnet</a></li><li><a href="https://docs.docker.com/engine/examples/dotnetcore/#create-a-dockerfile-for-an-aspnet-core-application">https://docs.docker.com/engine/examples/dotnetcore/#create-a-dockerfile-for-an-aspnet-core-application</a></li></ul><h4 id="Linux-Operating-Systems"><a href="#Linux-Operating-Systems" class="headerlink" title="Linux Operating Systems"></a>Linux Operating Systems</h4><ul><li><a href="https://askubuntu.com/questions/223691/how-do-i-create-a-script-file-for-terminal-commands/223698">https://askubuntu.com/questions/223691/how-do-i-create-a-script-file-for-terminal-commands/223698</a></li><li><a href="https://www.ubuntu.com/download/desktop">https://www.ubuntu.com/download/desktop</a></li><li><a href="https://askubuntu.com/questions/938700/how-do-i-install-docker-on-ubuntu-16-04-lts">https://askubuntu.com/questions/938700/how-do-i-install-docker-on-ubuntu-16-04-lts</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker For Windows</title>
      <link href="2018/04/docker-for-windows/"/>
      <url>2018/04/docker-for-windows/</url>
      
        <content type="html"><![CDATA[<p>Download Docker for windows CE from <a href="https://www.docker.com/docker-windows">https://www.docker.com/docker-windows</a></p><ul><li>Run the install, windows will re-boot a few times and install some updates.</li><li>The linux VM lives here, C:\Users\Public\Documents\Hyper-V\Virtual hard disks\ ~ try not to upset it.</li><li>Enable <a href="/2018/04/windows-power-shell/">power shell commands</a></li></ul><p>CD quickly to the location you clone the repository too, I saved this as ‘C:\Users\Carl\CD-CodeLocation.ps1’ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Location -Path C:\Dev-Code-School\DockerDemo</span><br></pre></td></tr></table></figure><h3 id="Windows-Containers"><a href="#Windows-Containers" class="headerlink" title="Windows Containers"></a>Windows Containers</h3><p>aspnet</p><ul><li>NB – Switch docker for windows to run as ‘WINDOWS CONTAINERS’ from the system tray.</li><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/windows%20containers/aspnet/build-container-aspnet.ps1">\DockerDemo\Docker For Windows\windows containers\aspnet\build-container-aspnet.ps1</a></li><li>The initial image pull WILL TAKE SOME TIME, ignore the initial container kill/rm fails on ‘aspnet-site’</li><li>Open the given IP in your browser. The WEB API helpfile is shown from the projects ‘HelpPage’ area</li><li>Source code for the sample API is here ~ \DockerDemo\Sample API Code\WebApi\</li></ul><p>iis</p><ul><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/windows%20containers/iis/build-container-iissite.ps1">\DockerDemo\Docker For Windows\windows containers\iis\build-container-iissite.ps1</a></li><li>The initial image pull will take some time, ignore the initial container kill/rm fails on ‘iis-site’</li><li>Open the given IP in your browser on Port 80, default IIS landing screen is shown</li><li>Open the given IP in your browser on Port 81, content\index.htm is shown</li></ul><h3 id="Linux-Containers"><a href="#Linux-Containers" class="headerlink" title="Linux Containers"></a>Linux Containers</h3><p>mysql</p><ul><li>NB – Switch docker for windows to run as ‘LINUX CONTAINERS’ from the system tray.</li><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/linux%20containers/mysql/create-container-mysql_p5.ps1">\DockerDemo\Docker For Windows\linux containers\mysql\create-container-mysql_p5.ps1</a></li><li>Ignore the initial container kill/rm fails on ‘mysql_p5’</li><li>Connect to the mysql_p5 container instance on 127.0.0.1:62005</li><li>There are some fly scripts at \DockerDemo\linux\mysql\flyway<ul><li>~ These can be added to the powershell script or run manually.</li></ul></li></ul><p>postgresql</p><ul><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/linux%20containers/postgresql/create-container-postgres_p6.ps1">\DockerDemo\Docker For Windows\linux containers\postgresql\create-container-postgres_p6.ps1</a></li><li>Ignore the initial container kill/rm fails on ‘postgres_p6’</li><li>Connect to the postgres_p6 container instance on 127.0.0.1:62006</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/dotnet-architecture/eShopModernizing/wiki/02.-How-to-containerize-the-.NET-Framework-web-apps-with-Windows-Containers-and-Docker">How to containerize the .NET Framework web apps with Windows Containers and Docker</a></li><li><a href="https://github.com/StefanScherer">https://github.com/StefanScherer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 120 Size</title>
      <link href="2018/04/stick-120/"/>
      <url>2018/04/stick-120/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><p>120 Size</p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 160 Size</title>
      <link href="2018/04/stick-160/"/>
      <url>2018/04/stick-160/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="Plans"><a href="#Plans" class="headerlink" title="Plans"></a>Plans</h3><ul><li><a href="http://www.hangarone.co.nz/big-stik-plan-100-span-30cc-size-by-don-anderson-p-6100.html">Big Stik Plan 100″ Span 30cc Size by Don Anderson</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 25 Size</title>
      <link href="2018/04/stick-25/"/>
      <url>2018/04/stick-25/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><p>The HK link says its 1060mm but the wing I got is 1200 without the tips so I’ll go with the slightly longer size. These are some guestimates on wood to be used.</p><p><em>Fuselage</em></p><ul><li>Ply re-enforcement where the landing gear attaches. </li><li>F1 -&gt; 5 or 6mm ply</li><li>F2,3 -&gt; 3mm ply</li><li>F4,5,6 -&gt; 5mm balsa</li><li>Triangle stock -&gt; Probably cut from 3mm balsa scraps</li><li>Gussets -&gt; 2 or 3mm square</li><li>Sides -&gt; 2mm balsa forward grain</li><li>Top/Bottom -&gt; 2mm balsa sideways grain</li><li>Wing seats 2mm balsa vertical grain (Thanks for the tip bro Clive!)</li></ul><p><em>Wing</em></p><ul><li>Main spar &amp; LE -&gt; 8mm square hard balsa</li><li>Forward spar/stringers -&gt; 4mm balsa</li><li>Sheer web -&gt; 2mm balsa</li><li>Ribs &amp; caps, 2mm balsa</li><li>Wing tips, 5 or 6mm balsa</li><li>Sheeting -&gt; 2mm balsa</li><li>TE -&gt; 6mm square (I think)</li><li>Triangle stock -&gt; Probably cut from 3mm balsa scraps</li></ul><p><em>Tail</em></p><ul><li>4mm balsa, I’ll build it up with 2mm to try save weight.</li></ul><p><img src="/d/stick-25/formers.jpg" alt="Formers"></p><p><img src="/d/stick-25/rib-template.jpg" alt="Rib Template"></p><p><img src="/d/stick-25/stick-25-fuse.jpg" alt="Fuselage"></p><p><img src="/d/stick-25/wing-tips.jpg" alt="Wing Tips"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://hobbyking.com/en_us/big-stick-laser-cut-balsa-kit-1060mm-kit.html?___store=en_us">https://hobbyking.com/en_us/big-stick-l … tore=en_us</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 40 Size</title>
      <link href="2018/04/stick-40/"/>
      <url>2018/04/stick-40/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="55in-1397mm-Span-Middle-Stick"><a href="#55in-1397mm-Span-Middle-Stick" class="headerlink" title="55in / 1397mm Span Middle Stick"></a>55in / 1397mm Span Middle Stick</h3><p><img src="/d/stick-40/55in-1397mm-span.jpg" alt="55in 1397mm Span - outerzone.co.uk"></p><ul><li><a href="https://outerzone.co.uk/plan_details.asp?ID=4245">https://outerzone.co.uk/plan_details.asp?ID=4245</a></li><li><a href="https://drive.google.com/drive/folders/1XAJqL9UUzjd-U5ovnpVoFRyiT2gELPlE?usp=sharing">https://drive.google.com/drive/folders/1XAJqL9UUzjd-U5ovnpVoFRyiT2gELPlE?usp=sharing</a></li></ul><h3 id="58in-1480mm-Span-Hangar-9"><a href="#58in-1480mm-Span-Hangar-9" class="headerlink" title="58in / 1480mm Span (Hangar 9)"></a>58in / 1480mm Span (Hangar 9)</h3><p>Fuselage</p><ul><li>F1 to the end of the fuse (excluding rudder) 1100 mm</li><li>F1 is 82 mm high by 80 mm wide, note that the fuse bulges out under the wing to 90×90 mm</li></ul><p>Wing</p><ul><li>1480 mm TE length</li><li>1360 mm LE length</li><li>325 LE Tip to TE tip</li><li>Symmetrical shape ~ <a href="http://airfoiltools.com/airfoil/details?airfoil=raf27-il">simliar to RAF 27 AIRFOIL (raf27-il)</a></li></ul><p>Tail</p><ul><li>552 mm TE length</li><li>485 mm LE length</li><li>220 LE Tip to TE tip</li></ul><p><img src="/d/stick-40/stick-3.jpg" alt="H9 40 Fuse"></p><p><img src="/d/stick-40/stick-4.jpg" alt="H9 40 Wing"></p><h3 id="40-Size-Fiber-Glass-Fuselage"><a href="#40-Size-Fiber-Glass-Fuselage" class="headerlink" title="40 Size (Fiber Glass Fuselage)"></a>40 Size (Fiber Glass Fuselage)</h3><p>Fuselage</p><ul><li>F1 to the end of the fuse (excluding rudder) 970 mm</li><li>F1 is 85 mm high by 80 mm wide</li></ul><p><em>Possible Wing Construction:</em></p><ul><li>Spars are made from spruce 3/16 (5mm) by 1/4 (6mm) or 1/4 square</li><li>Sheeting 2mm for LE (leading edge) and TE (trailing edge)</li><li>Ribs 2mm balsa</li><li>Rib caps 5mm x 1.6mm</li><li>LE is 3/8 square</li><li>TE 3/8 x 1/2</li></ul><p><img src="/d/stick-40/stick-5.jpg" alt="Images from Arthur Colby"></p><p><img src="/d/stick-40/stick-6.jpg" alt="Images from Arthur Colby"></p><p><em>Fuselage Construction:</em></p><ul><li>TBA</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 60 Size</title>
      <link href="2018/04/stick-60/"/>
      <url>2018/04/stick-60/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="62in-1574mm-Original-Das-Ugly"><a href="#62in-1574mm-Original-Das-Ugly" class="headerlink" title="62in / 1574mm Original Das Ugly"></a>62in / 1574mm Original Das Ugly</h3><p><img src="/d/stick-60/62in-1574mm-original-das-ugly.jpg" alt="62in / 1574mm Original Das Ugly - outerzone.co.uk"></p><p>Im not really sure if the original (Phil Kraft 1966) was a 40 or a 60, In my opinion its a 60 but who knows :D</p><ul><li><a href="https://outerzone.co.uk/plan_details.asp?ID=5175">https://outerzone.co.uk/plan_details.asp?ID=5175</a></li><li><a href="https://drive.google.com/drive/folders/1k9kEXjdvclKmiR3R58EC2UsKHXUMC8Oa?usp=sharing">https://drive.google.com/drive/folders/1k9kEXjdvclKmiR3R58EC2UsKHXUMC8Oa?usp=sharing</a></li></ul><h3 id="66in-1680mm-Drastik-60"><a href="#66in-1680mm-Drastik-60" class="headerlink" title="66in / 1680mm Drastik 60"></a>66in / 1680mm Drastik 60</h3><p>I sold my ARF before getting a chance to build it. The over sized wing and fuselage was awesome.</p><p>Wing</p><ul><li>1680 mm TE length</li><li>1530 mm LE length</li><li>400 mm LE Tip to TE tip</li></ul><p>Fuselage</p><ul><li>F1 to the end of the fuse (excluding rudder) 1175 mm</li><li>F1 to end of the rudder 1440 mm</li><li>F1 height 105 mm</li></ul><p><img src="/d/stick-60/stick-7.jpg" alt="Drastik 60"></p><p>These are some snaps of the same model that was for sale on a marketplace, helpful to gauge size.</p><p><img src="/d/stick-60/Drastik-1.jpg" alt="Drastik 60"><br><img src="/d/stick-60/Drastik-2.jpg" alt="Drastik 60"><br><img src="/d/stick-60/Drastik-3.jpg" alt="Drastik 60"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Micro Ultra Stick</title>
      <link href="2018/04/stick-micro/"/>
      <url>2018/04/stick-micro/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="15in-400mm-Span"><a href="#15in-400mm-Span" class="headerlink" title="15in / 400mm Span"></a>15in / 400mm Span</h3><p>Same plan but printed at 50%</p><p><em>Fuselage</em></p><ul><li>F1 - 3mm ply</li><li>F2, F3, F4 and F5 all 1.5mm balsa</li><li>1mm x 3mm for bracing</li></ul><p><em>Wing</em></p><ul><li>Ribs 1.5mm balsa</li><li>1mm balsa for skinning and cap strips</li></ul><p><em>Tail</em></p><ul><li>3mm x 3mm for control surfaces</li></ul><p><img src="/d/stick-micro/400mm-a.jpg" alt="400mm Micro Ultra"></p><p><img src="/d/stick-micro/400mm-b.jpg" alt="400mm Micro Ultra"></p><h3 id="31in-800mm-Span"><a href="#31in-800mm-Span" class="headerlink" title="31in / 800mm Span"></a>31in / 800mm Span</h3><p>335 grams including 1000 Mah 3 Cell Lipo</p><p><em>Fuselage</em></p><ul><li>F1 - 3mm ply</li><li>F2, F3 - 3mm balsa</li><li>F4, F5 - 2mm balsa</li><li>Sheeting (top, bottom, sides) - 2mm balsa</li><li>Wing seat, 3mm balsa vertical grain</li><li>Bracing inside the fuse 3x3mm balsa</li></ul><p><em>Wing</em></p><p>The Airfoil is <a href="/2018/04/airfoils/">Eppler 168 15% width</a></p><ul><li>2mm balsa for skinning and cap strips</li><li>Ribs &amp; sheer webbing 3mm balsa</li><li>5mm trailing edge</li><li>5mm balsa spars</li><li>9.5mm balsa leading edge</li><li>Wing tips 5mm balsa</li></ul><p><em>Tail</em></p><ul><li>5x5mm balsa control surfaces, gussets and triangle bracing (hard would be better)</li></ul><p><strong>Wood Shopping List</strong></p><ul><li>2mm balsa (x4) - <a href="http://www.hangarone.co.nz/balsa-sheet-20mm-100mm-915mm-p-1742.html">http://www.hangarone.co.nz/balsa-sheet-20mm-100mm-915mm-p-1742.html</a></li><li>3mm balsa (x5) - <a href="http://www.hangarone.co.nz/balsa-sheet-30mm-100mm-915mm-18-p-1746.html">http://www.hangarone.co.nz/balsa-sheet-30mm-100mm-915mm-18-p-1746.html</a></li><li>5mm balsa (x2) - <a href="http://www.hangarone.co.nz/balsa-sheet-50mm-100mm-915mm-316-p-1750.html">http://www.hangarone.co.nz/balsa-sheet-50mm-100mm-915mm-316-p-1750.html</a></li><li>9.5mm balsa (x1) - <a href="http://www.hangarone.co.nz/balsa-sheet-95mm-100mm-915mm-38-p-1755.html">http://www.hangarone.co.nz/balsa-sheet-95mm-100mm-915mm-38-p-1755.html</a></li><li>3mm ply (x1) - <a href="http://www.hangarone.co.nz/birch-plywood-30mm-300mm-300mm-18-p-4309.html">http://www.hangarone.co.nz/birch-plywood-30mm-300mm-300mm-18-p-4309.html</a></li></ul><p><img src="/d/stick-micro/800mm-rib.jpg" alt="800mm Micro Ultra Rib"></p><p><img src="/d/stick-micro/800mm.jpg" alt="800mm Micro Ultra"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aerofred.com/details.php?image_id=99469">https://aerofred.com/details.php?image_id=99469</a></li><li><a href="https://drive.google.com/open?id=1UbFKG9-SI9BApiWPF_RSDiL536Q5YlRC">https://drive.google.com/open?id=1UbFKG9-SI9BApiWPF_RSDiL536Q5YlRC</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mini Ultra Stick</title>
      <link href="2018/04/stick-mini/"/>
      <url>2018/04/stick-mini/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="36in-914mm-Span"><a href="#36in-914mm-Span" class="headerlink" title="36in / 914mm Span"></a>36in / 914mm Span</h3><p><em>Engine</em></p><ul><li>.19</li></ul><p><img src="/d/stick-mini/36in-914mm-span.jpg" alt="36in / 914mm Span - outerzone.co.uk"></p><ul><li><a href="https://outerzone.co.uk/plan_details.asp?ID=6144">https://outerzone.co.uk/plan_details.asp?ID=6144</a></li><li><a href="https://drive.google.com/drive/folders/1eHOD-LG8OXDfRZlQf0kE_bLQRbAcrLLj?usp=sharing">https://drive.google.com/drive/folders/1eHOD-LG8OXDfRZlQf0kE_bLQRbAcrLLj?usp=sharing</a></li></ul><h3 id="38in-980mm-Span"><a href="#38in-980mm-Span" class="headerlink" title="38in / 980mm Span"></a>38in / 980mm Span</h3><p>E-Flight used to make these, I rebuilt one and over powered it with a park 480 and a 40 amp esc.</p><p><em>Fuselage</em></p><ul><li>Park 450, 2200 3S, 10x7e prop</li><li>Overall Length: 34 in (865mm)</li><li>Flying Weight: 710g</li></ul><p><em>Wing</em></p><ul><li>Span: 38.75 in (985mm)</li><li>Area: 325 sq in (21 sq dm)</li><li>Estimated height TE to LE: (325 / 38.17 = 8.38 in) =&gt; 212mm (includes ailerons)</li><li>Ailerons throw 15mm Up/Down Low Rate, 19mm High Rate</li></ul><p><em>Tail</em></p><ul><li>Elevator throw 18mm Up/Down Low Rate, 23mm High Rate</li><li>Rudder throw 23mm Right/Left Low Rate, 32mm High Rate</li></ul><p><img src="/d/stick-mini/1.jpg" alt="Mini Ultra"><br><img src="/d/stick-mini/2.jpg" alt="Mini Ultra"><br><img src="/d/stick-mini/3.jpg" alt="Mini Ultra"></p><ul><li><a href="https://www.horizonhobby.com/mini-ultra-stick-arf-efl2250">https://www.horizonhobby.com/mini-ultra-stick-arf-efl2250</a></li><li><a href="https://www.spektrumrc.com/Products/Default.aspx?ProdID=EFL2250">https://www.spektrumrc.com/Products/Default.aspx?ProdID=EFL2250</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK Stack</title>
      <link href="2018/04/elk-stack/"/>
      <url>2018/04/elk-stack/</url>
      
        <content type="html"><![CDATA[<p><em>“”ELK” is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana.”</em></p><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>You can filter the search results to display only those documents that contain a particular value in a field.</p><ul><li><a href="/2019/07/kibana/">Kibana docker container</a></li><li><a href="https://hub.docker.com/_/kibana">https://hub.docker.com/_/kibana</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> elk stack </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Local SSID</title>
      <link href="2018/04/local-ssid/"/>
      <url>2018/04/local-ssid/</url>
      
        <content type="html"><![CDATA[<p>The following scripts use netsh to allow you to create a SSID (Wi-Fi network) on your local notebook, you can then connect your phone, tablet or other mobile device to it.</p><h3 id="Batch-file"><a href="#Batch-file" class="headerlink" title="Batch file"></a>Batch file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo Setup SSID Jackal</span><br><span class="line">@pause</span><br><span class="line">netsh wlan set hostednetwork mode&#x3D;allow ssid&#x3D;&quot;Jackal&quot; key&#x3D;&quot;changeme&quot;</span><br><span class="line"></span><br><span class="line">@echo Start SSID</span><br><span class="line">@pause</span><br><span class="line">netsh wlan start hostednetwork</span><br><span class="line"></span><br><span class="line">@echo Display SSID Status</span><br><span class="line">@pause</span><br><span class="line">netsh wlan show hostednetwork</span><br><span class="line">@pause</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Running a .Net Core console application</title>
      <link href="2018/04/running-a-net-core-console-application/"/>
      <url>2018/04/running-a-net-core-console-application/</url>
      
        <content type="html"><![CDATA[<p>Locally your IDE does the work for you but when you run the console application on a remote server you need to check the following:</p><ol><li>Publish your application<ol><li>Right click the project and select publish</li><li>Copy to the contents of ‘PublishOutput’ remote server, example <code>C:\Data\Application A</code></li><li>Update the ‘appsettings.json’ with your production settings (if relevant)</li></ol></li><li>On the remote server<ol><li>Download the .Net Core SDK at <a href="https://www.microsoft.com/net/download/windows">https://www.microsoft.com/net/download/windows</a></li><li>Add ‘C:\Program Files\dotnet’ to your current users ‘Environment Variables’ under “Path”</li><li>Run your the application with <code>dotnet library.dll</code> where <code>library.dll</code> is the name of your assembly name.</li></ol></li></ol><h3 id="Run-your-the-application"><a href="#Run-your-the-application" class="headerlink" title="Run your the application"></a>Run your the application</h3><p><img src="/d/running-a-net-core-console-application/running-1.png" alt="Run your the application"></p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p><img src="/d/running-a-net-core-console-application/running-2.png" alt="Environment Variables"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-vs">https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-vs</a></li><li><a href="https://www.microsoft.com/net/learn/get-started/windows">https://www.microsoft.com/net/learn/get-started/windows</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/index?tabs=netcore2x">https://docs.microsoft.com/en-us/dotnet/core/tools/index?tabs=netcore2x</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Power Shell</title>
      <link href="2018/04/windows-power-shell/"/>
      <url>2018/04/windows-power-shell/</url>
      
        <content type="html"><![CDATA[<p>Run these commands to allow the ps1 scripts to execute</p><ul><li>Get-ExecutionPolicy</li><li>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned</li></ul><h3 id="invoke-expression"><a href="#invoke-expression" class="headerlink" title="invoke-expression"></a>invoke-expression</h3><p>This will open a new ps window, <code>Read-Host</code> keeps it open.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-expression &#39;cmd &#x2F;c start powershell -Command &#123; write-host &quot;Running stubs!&quot;; set-location &quot;.\stubs\foo\&quot;; docker-compose up ; Read-Host&#125;&#39;;</span><br><span class="line">invoke-expression &#39;cmd &#x2F;c start powershell -Command &#123; write-host &quot;Running Run_Api!&quot;; set-location &quot;.\api\&quot;; .&#x2F;Run_Api.ps1 ; Read-Host&#125;&#39;;</span><br></pre></td></tr></table></figure><p>You can also pass <code>set-location</code> an absolute path, this is generally <em>trash</em> but will work in a pinch!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-location &quot;C:\Dev\foo-app\api\&quot;;</span><br></pre></td></tr></table></figure><h3 id="Internet-Information-Services"><a href="#Internet-Information-Services" class="headerlink" title="Internet Information Services"></a>Internet Information Services</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Restart-IIS</span><br><span class="line">Start-IIS</span><br></pre></td></tr></table></figure><h3 id="write-host"><a href="#write-host" class="headerlink" title="write-host"></a>write-host</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write-host &quot;Do the thing&quot;;</span><br></pre></td></tr></table></figure><h3 id="Argument"><a href="#Argument" class="headerlink" title="Argument"></a>Argument</h3><p><code>foo.ps1 foo bar baz</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write-host &quot;There are a total of $($args.count) arguments&quot;</span><br><span class="line">for ( $i &#x3D; 0; $i -lt $args.count; $i++ ) &#123;</span><br><span class="line">    write-host &quot;Argument  $i is $($args[$i])&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.red-gate.com/simple-talk/sysadmin/powershell/how-to-use-parameters-in-powershell/">https://www.red-gate.com/simple-talk/sysadmin/powershell/how-to-use-parameters-in-powershell/</a></li></ul><h3 id="Named-Parameters"><a href="#Named-Parameters" class="headerlink" title="Named Parameters"></a>Named Parameters</h3><p><code>foo.ps1 -Reset true -BuildSource true</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Param(</span><br><span class="line">    [switch]$Reset,</span><br><span class="line">[switch]$BuildSource</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/VulnusCloud/blob/master/Docs/docker-compose-vulnuscloud/run.ps1">https://github.com/carlpaton/VulnusCloud/blob/master/Docs/docker-compose-vulnuscloud/run.ps1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> power shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design By Contract</title>
      <link href="2018/04/design-by-contract/"/>
      <url>2018/04/design-by-contract/</url>
      
        <content type="html"><![CDATA[<p><em>Prescribes that software designers should define formal, precise and verifiable interface specifications for software components, which extend the ordinary definition of abstract data types with preconditions, postconditions and invariants. These specifications are referred to as “contracts”, in accordance with a conceptual metaphor with the conditions and obligations of business contracts.</em></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Design_by_contract">https://en.wikipedia.org/wiki/Design_by_contract</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Inversion Principle (DIP)</title>
      <link href="2018/04/dependency-inversion-principle-dip/"/>
      <url>2018/04/dependency-inversion-principle-dip/</url>
      
        <content type="html"><![CDATA[<p>This is the ‘D’ in <a href="/2018/04/solid-object-oriented-design/">SOLID</a>, also see <a href="/2018/09/dependency-injection-frameworks/">Dependency Injection Frameworks</a></p><h3 id="Definition-Robert-C-Martin-and-Micah-Martin"><a href="#Definition-Robert-C-Martin-and-Micah-Martin" class="headerlink" title="Definition (Robert C. Martin and Micah Martin)"></a>Definition (Robert C. Martin and Micah Martin)</h3><p>The Dependency Inversion Principle states that high-level modules should not depend on low-level modules.  Both should depend on abstractions. Furthermore, abstractions should not depend on details, but rather details should depend on abstractions. This is from the Agile Principles, Patterns, and Practices in C# book by Robert C. Martin and Micah Martin.</p><h3 id="Definition-Mark-Seemann"><a href="#Definition-Mark-Seemann" class="headerlink" title="Definition (Mark Seemann)"></a>Definition (Mark Seemann)</h3><p>“Dependency Injection is a set of software design principles and patterns that enable us to develop loosely coupled code.”</p><h3 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h3><p><strong>IOC</strong> (Inversion of control) is a general parent term while <strong>DI</strong> (<strong>Dependency injection</strong>) is a subset of <strong>IOC</strong>.<br><strong>IOC</strong> is a concept where the flow of application is inverted. … <strong>DI</strong> provides objects that an object needs. So rather than the dependencies construct themselves they are injected by some external means.</p><ul><li><a href="https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection">https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection</a></li><li><a href="https://www.codeproject.com/Articles/592372/Dependency-Injection-DI-vs-Inversion-of-Control-IO">https://www.codeproject.com/Articles/592372/Dependency-Injection-DI-vs-Inversion-of-Control-IO</a></li></ul><p>Inversion of Control of <code>IoC</code> can be implemented in two ways, one using a Service Locator and another is Dependency Injection.</p><h4 id="Implementation-Dependency-Injection"><a href="#Implementation-Dependency-Injection" class="headerlink" title="Implementation - Dependency Injection"></a>Implementation - Dependency Injection</h4><p>This is a <code>Strategy Pattern</code>. The most common implementation is constructor injection. Dependencies are passed in via the constructor. The constructor then is being honest with the things that call it in that it is explicitly stating the things that it needs in order for it to be in a valid state and to be able to do the work that it expects to be able to do.</p><h5 id="PROS"><a href="#PROS" class="headerlink" title="PROS"></a>PROS</h5><ul><li>Classes are self-document what they need</li><li>Works well with or without a container</li><li>Classes are always in a valid state once constructed.</li></ul><h5 id="CONS"><a href="#CONS" class="headerlink" title="CONS"></a>CONS</h5><ul><li>Constructors can end up with many parameters/dependencies, which is a design smell.</li><li>Some features, EG, serialization, may require a default constructor.</li><li>Some methods in the class may not require things that other methods require, which is a design smell.</li></ul><p>The dependencies can also be injected using:</p><ul><li><a href="https://www.tutorialsteacher.com/ioc/Method-injection-using-unity-container">Method Injection</a></li><li><a href="https://www.tutorialsteacher.com/ioc/property-injection-using-unity-container">Property Injection</a></li></ul><h4 id="Implementation-Service-Locator"><a href="#Implementation-Service-Locator" class="headerlink" title="Implementation - Service Locator"></a>Implementation - Service Locator</h4><p>With the <code>Service Locator</code>, the class is still responsible for creating its dependencies. It just uses the service locator to do it. With DI, the class is given its dependencies.</p><ul><li><a href="https://martinfowler.com/articles/injection.html">https://martinfowler.com/articles/injection.html</a></li><li><a href="https://www.c-sharpcorner.com/UploadFile/dacca2/service-locator-design-pattern/">https://www.c-sharpcorner.com/UploadFile/dacca2/service-locator-design-pattern/</a></li></ul><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/NnZZMkwI6KI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><em>docs.microsoft.com</em></p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1">Dependency injection in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/dependency-injection?view=aspnetcore-2.1">Dependency injection into controllers in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/hands-on-labs/aspnet-mvc-4-dependency-injection">ASP.NET MVC 4 Dependency Injection</a></li></ul><p><em>pluralsight.com</em></p><ul><li><a href="https://www.pluralsight.com/courses/dependency-injection-on-ramp">Jeremy Clark: dependency-injection-on-ramp</a></li></ul><p><em>Other</em></p><ul><li><a href="https://blog.elmah.io/appsettings-in-aspnetcore/">https://blog.elmah.io/appsettings-in-aspnetcore/</a></li><li><a href="https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/">https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/</a></li><li><a href="https://www.codeproject.com/Tips/1033646/SOLID-Principle-with-Csharp-Example">https://www.codeproject.com/Tips/1033646/SOLID-Principle-with-Csharp-Example</a></li><li><a href="https://www.intertech.com/Blog/the-single-responsibility-principle-with-c-examples/">https://www.intertech.com/Blog/the-single-responsibility-principle-with-c-examples/</a></li><li><a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</a></li><li><a href="https://stackoverflow.com/questions/7542051/learning-single-responsibility-principle-with-c-sharp">https://stackoverflow.com/questions/7542051/learning-single-responsibility-principle-with-c-sharp</a></li><li><a href="/2018/05/inversion-of-control-ioc/">/inversion-of-control-ioc/</a></li><li><a href="https://aspnetboilerplate.com/Pages/Documents/Dependency-Injection">https://aspnetboilerplate.com/Pages/Documents/Dependency-Injection</a></li><li><a href="https://medium.com/@ivorobioff/dependency-injection-vs-service-locator-2bb8484c2e20">https://medium.com/@ivorobioff/dependency-injection-vs-service-locator-2bb8484c2e20</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interface Segregation Principle (ISP)</title>
      <link href="2018/04/interface-segregation-principle-isp/"/>
      <url>2018/04/interface-segregation-principle-isp/</url>
      
        <content type="html"><![CDATA[<p>This is the “I” is <a href="/2018/04/solid-object-oriented-design/">SOLID</a></p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><em>“Clients should not be forced to depend on methods they do not use.”</em></p><p>Simply put use small, cohesive interfaces over “fat” interfaces that implement methods and properties that your current problem domain does not care about.</p><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/y1JiMGP51NE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liskov substitution principle (LSP)</title>
      <link href="2018/04/liskov-substitution-principle-lsp/"/>
      <url>2018/04/liskov-substitution-principle-lsp/</url>
      
        <content type="html"><![CDATA[<p>This is the “L” in <a href="/2018/04/solid-object-oriented-design/">SOLID</a>.</p><p>LSP suggests that IS-A relationships between classes should be replaced with IS-SUBSTITUTABLE-FOR</p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><em>“The Liskov Substitution Principle states that Subtypes must be substitutable for their base types.”</em></p><ul><li>Named for Barbara Liskov, who first described the principle in 1988.</li></ul><p>In order for substitutability to work child classes must not:</p><ul><li>Remove base class behavior</li><li>Violate base class invariants, these could be any constraints defined (or reasonable assumed by clients) on the base classes.</li></ul><h3 id="Why-follow-LSP"><a href="#Why-follow-LSP" class="headerlink" title="Why follow LSP?"></a>Why follow LSP?</h3><p>If the classes are none substitutable then polymorphism will not work and there will be code smells added such as if conditions / switches which will be hard to maintain. This also violates the <a href="https://carlpaton.co.za/open-closed-principle-ocp/">Open / Closed Principle (OCP)</a></p><p>You will also have issues such as <code>NotImplementedException();</code> being left in inherited methods. This violates the <a href="https://carlpaton.co.za/interface-segregation-principle-isp/">Interface Segregation Principle (ISP)</a></p><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/-3UXq2krhyw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li><a href="https://dzone.com/articles/solid-principles-liskov-substitution-principle">https://dzone.com/articles/solid-principles-liskov-substitution-principle</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open/Closed Principle (OCP)</title>
      <link href="2018/04/open-closed-principle-ocp/"/>
      <url>2018/04/open-closed-principle-ocp/</url>
      
        <content type="html"><![CDATA[<p>This is the ‘O’ in <a href="/2018/04/solid-object-oriented-design/">SOLID</a></p><p>Simply put:</p><ul><li>Open to extension is to allow new behavior to be added in the future</li><li>Closed to modification is not to change the source/binary code</li></ul><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>“*The Open / Closed Principle states that software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.*” – Wikipedia</p><ul><li>Dr. Bertrand Meyer originated the term in his 1988 book, Object-Oriented Software Construction</li></ul><h3 id="How-do-we-open-things-for-extension"><a href="#How-do-we-open-things-for-extension" class="headerlink" title="How do we open things for extension?"></a>How do we open things for extension?</h3><p>The key is to rely on abstractions, so this is interfaces or an abstract base class. Its however very important <strong>not</strong> to simply apply OCP to every class unless you know based that the business rules are likely to change.</p><p>Its best to focus on “Refactoring to a better design”, this means you should write your code with the least amount of complexity first and when needed refactor it and apply a principal such as OCP. So if it changes once, accept it. If it changes again consider refactoring.</p><h4 id="PROS"><a href="#PROS" class="headerlink" title="PROS"></a>PROS</h4><ul><li>Existing core classes are not changed so you are less likely to introduce regression bugs</li><li>You are adding new classes each time, so you can test and have faith you will not upset things</li></ul><h4 id="CONS"><a href="#CONS" class="headerlink" title="CONS"></a>CONS</h4><ul><li>This add complexity and must be used with caution, dont use OCP to try impress your boss</li></ul><h3 id="Typical-Approaches"><a href="#Typical-Approaches" class="headerlink" title="Typical Approaches"></a>Typical Approaches</h3><ul><li>Parameters<ul><li>By passing parameters to your methods you allow their behavior to change.</li></ul></li><li><a href="/2018/03/pillars-of-object-oriented-programming-oop/">Inheritance</a><ul><li>By using the <code>override</code> keyword in a concrete class you can over-ride the behavior of <code>virtual</code> or <code>abstract</code> methods. </li></ul></li><li>Composition /  <a href="/2018/04/dependency-inversion-principle-dip/">Dependency Injection</a> <ul><li>By injecting an instance of a service defined by its <code>interface</code> the consumer is open to extension but closed for modification.</li><li>An <a href="/2020/02/factory-pattern/">Abstract Factory</a> can ne used if there are different rules the consumer must follow based on its state. An example is <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples">shopping cart price rules</a>.</li></ul></li></ul><h3 id="Sample-Code"><a href="#Sample-Code" class="headerlink" title="Sample Code"></a>Sample Code</h3><p>Shopping cart examples based on work from Steve Smith</p><ul><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples]">https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/Class">https://github.com/carlpaton/Boilerplate/tree/master/Class</a> Library/PatternsAndPrinciples)</li></ul><p>Great examples by <a href="https://ardalis.com/?s=solid">Steve Smith aka Ardalis</a></p><ul><li><a href="https://github.com/carlpaton/SolidSample">https://github.com/carlpaton/SolidSample</a></li><li><a href="https://www.pluralsight.com/courses/csharp-solid-principles">https://www.pluralsight.com/courses/csharp-solid-principles</a></li></ul><p>Other Examples from <a href="https://github.com/bradvin">Brad Vincent</a></p><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/2_OCP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/2_OCP_code_problem.md</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://hackernoon.com/why-the-open-closed-principle-is-the-one-you-need-to-know-but-dont-176f7e4416d">https://hackernoon.com/why-the-open-closed-principle-is-the-one-you-need-to-know-but-dont-176f7e4416d</a></li><li><a href="https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html">https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html</a></li><li><a href="https://codeblog.jonskeet.uk/2013/03/15/the-open-closed-principle-in-review/">https://codeblog.jonskeet.uk/2013/03/15/the-open-closed-principle-in-review/</a></li><li><a href="http://joelabrahamsson.com/a-simple-example-of-the-openclosed-principle/">http://joelabrahamsson.com/a-simple-example-of-the-openclosed-principle/</a></li><li><a href="http://www.debugosaurus.com/solid/2017/03/18/Open-closed.html">http://www.debugosaurus.com/solid/2017/03/18/Open-closed.html</a></li><li><a href="https://code-maze.com/open-closed-principle/">https://code-maze.com/open-closed-principle/</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/VFlk43QGEgc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tell, Dont Ask</title>
      <link href="2018/04/tell-dont-ask/"/>
      <url>2018/04/tell-dont-ask/</url>
      
        <content type="html"><![CDATA[<p><em>Tell-Don’t-Ask is a principle that helps people remember that object-orientation is about bundling data with the functions that operate on that data. It reminds us that rather than asking an object for data and acting on that data, we should instead tell an object what to do. This encourages to move behavior into an object to go with the data.</em></p><ul><li>Don’t interrogate objects for their internals – move behavior to the object</li><li>Tell the object what you want it to do</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.martinfowler.com/bliki/TellDontAsk.html">https://www.martinfowler.com/bliki/TellDontAsk.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Model Airplanes</title>
      <link href="2018/04/model-airplanes/"/>
      <url>2018/04/model-airplanes/</url>
      
        <content type="html"><![CDATA[<p>I fly model airplanes in mode 2 (this mean the throttle and rudder controls are on the left with elevator and aileron control on the right)</p><h3 id="Build-Logs"><a href="#Build-Logs" class="headerlink" title="Build Logs"></a>Build Logs</h3><ul><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=197680">Shotgun scratch build</a></li><li><a href="http://www.avcom.co.za/phpBB3/viewtopic.php?f=16&t=152011">Pilot Extra 260 Repair</a></li><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=154155">Mini Ultra Stick Rebuild / Repair</a></li><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=178725">vmar 60 stick recover</a></li><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=150617">40 Size Stick Rebuild</a></li><li><a href="http://www.avcom.co.za/phpBB3/viewtopic.php?f=16&t=160836">Depron twin motor stick – Silly stick</a></li><li><a href="http://www.avcom.co.za/phpBB3/viewtopic.php?f=16&t=155970&start=45">Depron Cargo Plane Build (ft-guinea)</a></li></ul><h3 id="Online-PDF-Plans"><a href="#Online-PDF-Plans" class="headerlink" title="Online PDF Plans"></a>Online PDF Plans</h3><ul><li><a href="https://outerzone.co.uk/">https://outerzone.co.uk</a></li><li><a href="https://aerofred.com/">https://aerofred.com/</a></li></ul><h3 id="Fond-Memory’s-with-a-foamy-trainer"><a href="#Fond-Memory’s-with-a-foamy-trainer" class="headerlink" title="Fond Memory’s with a foamy trainer"></a>Fond Memory’s with a foamy trainer</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/i45KT8ag-h8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SOLID (object-oriented design)</title>
      <link href="2018/04/solid-object-oriented-design/"/>
      <url>2018/04/solid-object-oriented-design/</url>
      
        <content type="html"><![CDATA[<h3 id="SOLID-object-oriented-design"><a href="#SOLID-object-oriented-design" class="headerlink" title="SOLID (object-oriented design)"></a>SOLID (object-oriented design)</h3><p>In object-oriented computer programming, the term SOLID is a <a href="https://en.wikipedia.org/wiki/Mnemonic">mnemonic acronym</a> for five design principles intended to make software designs more understandable, flexible and maintainable.</p><p>These patterns and principles work together and each problem domain will require a different approach and implementation (or no implementation of the principle at all)</p><ul><li><a href="/2018/05/single-responsibility-principle-srp/">Single responsibility principle (SRP)</a></li><li><a href="/2018/04/open-closed-principle-ocp/">Open/Closed Principle (OCP)</a></li><li><a href="/2018/04/liskov-substitution-principle-lsp/">Liskov substitution principle (LSP)</a></li><li><a href="/2018/04/interface-segregation-principle-isp/">Interface segregation principle (ISP)</a></li><li><a href="/2018/04/dependency-inversion-principle-dip/">Dependency Inversion Principle (DIP)</a></li></ul><h3 id="References-amp-Influences"><a href="#References-amp-Influences" class="headerlink" title="References &amp; Influences"></a>References &amp; Influences</h3><ul><li><a href="https://www.pluralsight.com/courses/principles-oo-design">https://www.pluralsight.com/courses/principles-oo-design (Steve Smith)</a></li><li><a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</a></li><li><a href="https://github.com/charleyza/SOLID">https://github.com/charleyza/SOLID</a></li><li><a href="https://www.youtube.com/playlist?list=PLlbvMh5cf97P0jGgh9Csxg5m-KCM021ZI">https://www.youtube.com/playlist?list=PLlbvMh5cf97P0jGgh9Csxg5m-KCM021ZI</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick sizes</title>
      <link href="2018/04/stick-sizes/"/>
      <url>2018/04/stick-sizes/</url>
      
        <content type="html"><![CDATA[<h3 id="Sizes"><a href="#Sizes" class="headerlink" title="Sizes"></a>Sizes</h3><p>These sizes have never made any sense to me as I had an <a href="https://www.horizonhobby.com/apprentice-s-15e-rtf-with-safe-reg%3B-technology-efl3100">e flite apprentice</a> which had a 1500mm wing but Horizonhobby say its a 15 size, it was electric so who knows! (15-size, 840Kv brushless, 30A ESC, 3S 3200mAh)</p><p>I think the sizes come from the older balsa models so the pilot knew which size <a href="/2018/04/glow-engines/">internal combustion glow engine</a> to use, though it was and still is common for pilots to fit a BIGGER engine :D</p><ul><li><a href="/2018/04/stick-micro/">15in;400mm / 31in;800mm (Micro)</a></li><li><a href="/2018/04/stick-mini/">36in;914mm / 38in;980mm (Mini)</a></li><li><a href="/2018/04/stick-25/">47in;1200mm (25 Size)</a></li><li><a href="/2018/04/stick-40/">55in;1397mm;Middle / 58in;1480mm;H9 (40 Size)</a></li><li><a href="/2018/04/stick-60/">62in;1574mm;DasUgly / 66in;1680mm;Dra  (60 Size)</a></li><li><a href="/2018/04/stick-120/">120 Size</a></li><li><a href="/2018/04/stick-160/">160 Size</a></li></ul><p>A ‘stick’ is a shoulder wing sport / trainer model aircraft originally designed by Phil Kraft in 1966, his was called the Das Ugly Stick and had a round cowl.</p><p>“<em>The original concept of the Ugly Stik was to design a radio controlled aircraft which could be built in an absolute minimum of time. Its purpose was towards a flying test bed for new proportional control developments and an all around shop airplane which could be used as a loaner for visiting flyers, testing repaired equipment, and any use which required an airplane which could be considered as expendable</em>.”</p><p><img src="/d/stick-sizes/stick-1.jpg" alt="June 1966"></p><p>Notable difference between the Das Ugly and a modern Ultra stick is the shape of the tail, the flat trailing edges on the ailerons and elevator &amp; it has no cowling.</p><p><img src="/d/stick-sizes/stick-2.jpg" alt="Ultra Stick"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shotgun</title>
      <link href="2018/04/shotgun/"/>
      <url>2018/04/shotgun/</url>
      
        <content type="html"><![CDATA[<p>A shotgun 5000 is a funfly type of model aircraft with large control surfaces and a wing with a very <a href="https://en.wikipedia.org/wiki/Chord_(aeronautics)">thick chord</a>.</p><p><a href="https://drive.google.com/drive/folders/0B0HFzNerE1b7eFVQX0pGbl9hcWs?usp=sharing">PDF plans for the build can be found here</a>.</p><h3 id="Shotgun-2500"><a href="#Shotgun-2500" class="headerlink" title="Shotgun 2500"></a>Shotgun 2500</h3><p>These are plans of the original printed at 50%</p><p><em>Wing Construction:</em></p><p><img src="/d/shotgun/shotgun-1.jpg" alt="Shotgun Wing"></p><p><em>Fuselage Construction:</em></p><p><img src="/d/shotgun/shotgun-2.jpg" alt="Shotgun Fuselage"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Airfoils</title>
      <link href="2018/04/airfoils/"/>
      <url>2018/04/airfoils/</url>
      
        <content type="html"><![CDATA[<p>An <strong>airfoil</strong> is the shape of a <a href="https://en.wikipedia.org/wiki/Wing">wing </a>. There are many shapes but the most common are symmetrical, asymmetrical or cambered airfoils.</p><p><img src="/d/airfoils/airfoils.jpg" alt="Common Airfoils"></p><h3 id="Common-Airfoils"><a href="#Common-Airfoils" class="headerlink" title="Common Airfoils"></a>Common Airfoils</h3><p>Also see <a href="https://www.amazon.com/Airfoil-Sections-Containing-co-ordinates-aeromodellers/dp/B003XO1PF4">Airfoil Sections by Kiwi John Malkin</a>.</p><h4 id="NACA-0015-naca0015-il-Airfoil"><a href="#NACA-0015-naca0015-il-Airfoil" class="headerlink" title="NACA 0015 (naca0015-il) Airfoil"></a>NACA 0015 (naca0015-il) Airfoil</h4><p><img src="/d/airfoils/naca-0015-airfoil.jpg" alt="naca4digit"></p><ul><li><a href="http://airfoiltools.com/airfoil/details?airfoil=naca0015-il">http://airfoiltools.com/airfoil/details?airfoil=naca0015-il</a></li></ul><h4 id="NACA-0016-Airfoil"><a href="#NACA-0016-Airfoil" class="headerlink" title="NACA 0016 Airfoil"></a>NACA 0016 Airfoil</h4><p><img src="/d/airfoils/naca-0016-airfoil.jpg" alt="naca4digit"></p><ul><li><a href="http://airfoiltools.com/airfoil/naca4digit?MNaca4DigitForm%5Bcamber%5D=0&amp;MNaca4DigitForm%5Bposition%5D=0&amp;MNaca4DigitForm%5Bthick%5D=16&amp;MNaca4DigitForm%5BnumPoints%5D=101&amp;MNaca4DigitForm%5BcosSpace%5D=0&amp;MNaca4DigitForm%5BcosSpace%5D=1&amp;MNaca4DigitForm%5BcloseTe%5D=0&amp;yt0=Plot">http://airfoiltools.com/airfoil/naca4digit?MNaca4DigitForm%5Bcamber%5D=0&amp;MNaca4DigitForm%5Bposition%5D=0&amp;MNaca4DigitForm%5Bthick%5D=16&amp;MNaca4DigitForm%5BnumPoints%5D=101&amp;MNaca4DigitForm%5BcosSpace%5D=0&amp;MNaca4DigitForm%5BcosSpace%5D=1&amp;MNaca4DigitForm%5BcloseTe%5D=0&amp;yt0=Plot</a></li></ul><h4 id="NACA-2412-naca2412-il-Airfoil"><a href="#NACA-2412-naca2412-il-Airfoil" class="headerlink" title="NACA 2412 (naca2412-il) Airfoil"></a>NACA 2412 (naca2412-il) Airfoil</h4><p><img src="/d/airfoils/naca-2412-airfoil.jpg" alt="naca4digit"></p><ul><li><a href="http://airfoiltools.com/airfoil/details?airfoil=naca2412-il">http://airfoiltools.com/airfoil/details?airfoil=naca2412-il</a></li></ul><h4 id="CLARK-Y-Airfoil-clarky-il"><a href="#CLARK-Y-Airfoil-clarky-il" class="headerlink" title="CLARK Y Airfoil (clarky-il)"></a>CLARK Y Airfoil (clarky-il)</h4><p><img src="/d/airfoils/clark-y-airfoil.jpg" alt="Clarke Y"></p><ul><li><a href="http://airfoiltools.com/airfoil/details?airfoil=clarky-il">http://airfoiltools.com/airfoil/details?airfoil=clarky-il</a></li></ul><h4 id="Airfoil-Eppler-168-15-width"><a href="#Airfoil-Eppler-168-15-width" class="headerlink" title="Airfoil Eppler 168 15% width"></a>Airfoil Eppler 168 15% width</h4><p><img src="/d/airfoils/e168-12.45-airfoil.jpg" alt="E168 (12.45%)"></p><ul><li><a href="http://airfoiltools.com/plotter/index?airfoil=e168-il">http://airfoiltools.com/plotter/index?airfoil=e168-il</a></li><li><a href="/2018/04/stick-micro/">Use in for Micro Stick</a></li></ul><h3 id="Javafoil-Simulator"><a href="#Javafoil-Simulator" class="headerlink" title="Javafoil Simulator"></a>Javafoil Simulator</h3><p>Digital airfoil analysis &lt;3</p><ul><li><a href="https://www.mh-aerotools.de/airfoils/javafoil.htm">https://www.mh-aerotools.de/airfoils/javafoil.htm</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/pNx9aVGv_go" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>### How do these work?<p>There are several factors to consider when trying to understand how a wing works, each factor together helps generate the force of lift.</p><h4 id="1-Air-deflection-with-angle-of-attack-amp-Coanda-effect"><a href="#1-Air-deflection-with-angle-of-attack-amp-Coanda-effect" class="headerlink" title="1. Air deflection with angle of attack &amp; Coandă effect"></a>1. Air deflection with angle of attack &amp; Coandă effect</h4><p>This is how a flat wing will fly, air under the wing is deflected down and by the Coandă effect air above the wing is guided along its surface and down as well. The air is slowed and deflected down by the wing it pushes the wing up and back. This is <strong>lift</strong> and <strong>drag</strong>.</p><p>Wings need to deflect air downwards which can be achieved using symmetrical, asymmetrical or cambered airfoils.</p><p><img src="/d/airfoils/slats-and-flaps.jpg" alt="By Cruithne9 - Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=53650245"></p><h4 id="2-Bernoulli’s-principle"><a href="#2-Bernoulli’s-principle" class="headerlink" title="2. Bernoulli’s principle"></a>2. Bernoulli’s principle</h4><p><em>Bernoulli’s principle states that an increase in the speed of a fluid occurs simultaneously with a decrease in pressure or a decrease in the fluid’s potential energy.</em></p><p>This means that faster flowing air (on top of the wing) exerts less pressure than the slower air beneath the wing. This pressure difference creates an upwards force – lift.</p><p>This explanation has obvious problems such as:</p><ul><li>Then how can a plane fly upside down?</li><li>Some models have flat wings, they fly just fine.</li></ul><p>The principle also mentions that the faster air ontop of the wing meets up with the slower flowing air underneath at the trailing edge – this is incorrect.</p><p><img src="/d/airfoils/wing.jpg" alt="https://www.discoverhover.org/infoinstructors/guide8.htm"></p><h4 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h4><p>Yeah cool story bro I just want to watch a video :D</p><iframe width="560" height="315" src="https://www.youtube.com/embed/aFO4PBolwFg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/6UlsArvbTeo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>### References<ul><li><a href="https://en.wikipedia.org/wiki/Airfoil">https://en.wikipedia.org/wiki/Airfoil</a></li><li><a href="https://en.wikipedia.org/wiki/Coand%C4%83_effect">https://en.wikipedia.org/wiki/Coand%C4%83_effect</a></li><li><a href="https://en.wikipedia.org/wiki/Lift_(force)">https://en.wikipedia.org/wiki/Lift_(force)</a></li><li><a href="https://www.grc.nasa.gov/www/k-12/airplane/right2.html">https://www.grc.nasa.gov/www/k-12/airplane/right2.html</a></li><li><a href="http://airfoiltools.com/airfoil/naca4digit">http://airfoiltools.com/airfoil/naca4digit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Commands</title>
      <link href="2018/04/linux-commands/"/>
      <url>2018/04/linux-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Quick-docker-container-to-have-a-hoon"><a href="#Quick-docker-container-to-have-a-hoon" class="headerlink" title="Quick docker container to have a hoon"></a>Quick docker container to have a hoon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name ubuntu-c ubuntu</span><br><span class="line">docker start -i ubuntu-c</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.docker.com/v17.12/edge/engine/reference/commandline/run/">https://docs.docker.com/v17.12/edge/engine/reference/commandline/run/</a></li><li><a href="https://docs.docker.com/v17.12/edge/engine/reference/commandline/start/">https://docs.docker.com/v17.12/edge/engine/reference/commandline/start/</a></li></ul><h3 id="Update-amp-Upgrade"><a href="#Update-amp-Upgrade" class="headerlink" title="Update &amp; Upgrade"></a>Update &amp; Upgrade</h3><p> <code>pt-get update</code> downloads the package lists from the repositories and “updates” them to get information on the newest versions of packages and their dependencies. </p><p> <code>apt-get upgrade</code> will fetch new versions of packages existing on the machine if APT knows about these new versions by way of <code>apt-get update</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line">--- Install application &#96;zip&#96; &amp; &#96;unzip&#96;. Check version and example use.</span><br><span class="line">apt-get install zip unzip</span><br><span class="line">zip --version</span><br><span class="line">unzip content.zip</span><br><span class="line"></span><br><span class="line">--- applications</span><br><span class="line">python3, python</span><br><span class="line">nano</span><br></pre></td></tr></table></figure><h3 id="Misc-Commands-and-magic"><a href="#Misc-Commands-and-magic" class="headerlink" title="Misc Commands and magic"></a>Misc Commands and magic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--- Misc Commands</span><br><span class="line"></span><br><span class="line">ll                                ~ list files (simliar to DIR)</span><br><span class="line">la                                ~ list files horizontally</span><br><span class="line">rm -r [DIRECTORY NAME]            ~ delete directory</span><br><span class="line">rm -fm [DIRECTORY NAME]           ~ delete directory with files in it</span><br><span class="line">mkdir [DIRECTORY NAME]            ~ create directory</span><br><span class="line">sudo .&#x2F;sbin&#x2F;shutdown -r now       ~ reboot</span><br><span class="line">sudo .&#x2F;sbin&#x2F;shutdown -h now       ~ omit now to schedule a shutdown</span><br><span class="line">sudo -i                           ~ switch to the root user</span><br><span class="line"></span><br><span class="line">--- Hardware Related</span><br><span class="line"></span><br><span class="line">htop                              ~ system-monitor process-viewer and process-manager</span><br><span class="line">top                               ~ this is like the windows task manager</span><br><span class="line">grep -c ^processor &#x2F;proc&#x2F;cpuinfo  ~ CPU core count</span><br><span class="line">free -m                           ~ displays memory usage</span><br></pre></td></tr></table></figure><h3 id="Text-Editor"><a href="#Text-Editor" class="headerlink" title="Text Editor"></a>Text Editor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nano postgres.sh                 ~ edit and create the file</span><br><span class="line">chmod +x postgres.sh             ~ mark as executable</span><br><span class="line">.&#x2F;postgres.sh                    ~ runs the script</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm foo.txt</span><br><span class="line">ESC : wq                         ~ save and exit</span><br><span class="line">ESC : q!                         ~ exit dont save</span><br></pre></td></tr></table></figure><ul><li><a href="https://wiki.gentoo.org/wiki/Nano/Basics_Guide">https://wiki.gentoo.org/wiki/Nano/Basics_Guide</a></li><li><a href="https://itsfoss.com/how-to-exit-vim/">https://itsfoss.com/how-to-exit-vim/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation Player</title>
      <link href="2018/04/vmware-workstation-player/"/>
      <url>2018/04/vmware-workstation-player/</url>
      
        <content type="html"><![CDATA[<p>This is a free VM player that can run on Windows 10, you create a new virtual machine and install the OS from an ISO file.</p><ul><li><a href="https://my.vmware.com/en/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0">Download v14</a></li><li><a href="https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/12_0">Download v12</a></li></ul><p>When you create VM Images they reside locally at :</p><ul><li>C:\Users[Windows User name]\Documents\Virtual Machines[Machine Name]</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/JrC65WxFMfE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="macOS-High-Sierra"><a href="#macOS-High-Sierra" class="headerlink" title="macOS High Sierra"></a>macOS High Sierra</h3><p>Currently this only works for version 12 of VMware Workstation Player and you will need to patch it with unlocker208, details in the links below.</p><ul><li><a href="https://techsviewer.com/install-macos-high-sierra-vmware-windows/">https://techsviewer.com/install-macos-high-sierra-vmware-windows/</a></li><li><a href="https://www.pcsteps.com/2157-mac-os-x-virtual-machine-vmware-player/">https://www.pcsteps.com/2157-mac-os-x-virtual-machine-vmware-player/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glow Engines</title>
      <link href="2018/04/glow-engines/"/>
      <url>2018/04/glow-engines/</url>
      
        <content type="html"><![CDATA[<p>A glow plug engine, or <a href="https://en.wikipedia.org/wiki/Glow_plug_(model_engine)">glow engine</a>, is a type of small internal combustion engine typically used in model aircraft, model cars and similar applications. I don’t really fly these engines as petrol engines are more reliable but I do refurbish and collect them.</p><p><img src="/d/glow-engines/glow-engine.jpg" alt="Stripped OS 46 AX"></p><p>The number stamped on the engine is the size or displacement measured in cubic inches (ci). I only understand cubic centimeters (cc) as this is what my car is measured in (1400 cc). To put this into perspective a 61ci glow engine is a 10cc</p><p>These are the engines I had in my collection in South Africa:  ASP 108 A, ASP 91 A, ASP 61-AII, ASP  52-AII, ASP 46a, IRVINE 46, ASP 36-AII, ASP 25-AII, AP 15, OS 15 LA, ASP 12A and ASP 09</p><h3 id="ASP-108-A"><a href="#ASP-108-A" class="headerlink" title="ASP 108 A"></a>ASP 108 A</h3><p>This is a 17cc engine, for is power to weight it is rubbish but I do like the shiny head! The ‘A’ means the carbs high speed needle is located on the carb and not remotely – Im told this is more reliable in terms of fuel/air mixture but its not safe as your fingers get very close to the prop.</p><p><img src="/d/glow-engines/asp108.jpg" alt="ASP 108 A"></p><h3 id="ASP-91-A"><a href="#ASP-91-A" class="headerlink" title="ASP 91 A"></a>ASP 91 A</h3><p>Power to weight this is a very good engine, I have 2 the one has a broken crank shaft and both are missing the high speed needle valves. Perhaps one day I will rebuild and run them both. These are 15cc engines.</p><p><img src="/d/glow-engines/asp91a.jpg" alt="ASP 91 A"></p><h3 id="Irvine-61"><a href="#Irvine-61" class="headerlink" title="Irvine 61"></a>Irvine 61</h3><p>Nice and clean but missing the exhaust nut and bolts. These are no longer made so will have to try match from and ASP if possible.</p><p><img src="/d/glow-engines/irvine61.jpg" alt="Irvine 61"></p><h3 id="ASP-61-AII"><a href="#ASP-61-AII" class="headerlink" title="ASP 61-AII"></a>ASP 61-AII</h3><p>This is a a 10cc engine with a remote carb.</p><p><img src="/d/glow-engines/asp61aii.jpg" alt="ASP 61-AII"></p><h3 id="ASP-52-AII"><a href="#ASP-52-AII" class="headerlink" title="ASP  52-AII"></a>ASP  52-AII</h3><p>This engines remote carb mount is broken but its in very good shape otherwise. This engine is 8.5cc</p><p><img src="/d/glow-engines/asp52aii.jpg" alt="ASP 52-AII"></p><h3 id="ASP-46a"><a href="#ASP-46a" class="headerlink" title="ASP 46a"></a>ASP 46a</h3><p>These are very common engines, mine has an OS 46 exhaust and the one head fin is damaged but it runs 100%. This is a 7.5cc engine.</p><p><img src="/d/glow-engines/asp46a.jpg" alt="ASP 46a"></p><h3 id="Irvine-46"><a href="#Irvine-46" class="headerlink" title="Irvine 46"></a>Irvine 46</h3><p>This engine’s carb mount is broken and its missing its exhaust, the block can be fixed but I will try source another block and rebuild it.</p><p><img src="/d/glow-engines/Irvine46.jpg" alt="Irvine 46"></p><h3 id="ASP-36-AII"><a href="#ASP-36-AII" class="headerlink" title="ASP 36-AII"></a>ASP 36-AII</h3><p>This is a fantastic size engine for a shotgun with a displacement of 5.8cc. This one needs some cleaning but Im reluctant to as I may actually want to fly it.</p><p><img src="/d/glow-engines/asp36aii.jpg" alt="ASP 36-AII"></p><h3 id="ASP-25-AII"><a href="#ASP-25-AII" class="headerlink" title="ASP 25-AII"></a>ASP 25-AII</h3><p>This would probably work pretty well in a shotgun, it has a 4cc displacement. The remote part of the carb has been removed and the high speed needle attached to the carb – I think the previous owner did this for reliability.</p><p><img src="/d/glow-engines/asp25aii.jpg" alt="ASP 25-AII"></p><h3 id="AP-15"><a href="#AP-15" class="headerlink" title="AP 15"></a>AP 15</h3><p>I’m not sure about the history but this ‘AP’ was manufactured by ASP and its a 2.4cc</p><p><img src="/d/glow-engines/ap15.jpg" alt="AP 15"></p><h3 id="OS-15-LA"><a href="#OS-15-LA" class="headerlink" title="OS 15 LA"></a>OS 15 LA</h3><p>I think the LA/AX ect lettering on these OS engines is got something to do with the ports (in/out) in the combustion process. Apparently the AX range are racing engines but I really don’t know. My little 15 LA is pretty dirty and needs a cleanup.</p><p><img src="/d/glow-engines/os15la.jpg" alt="OS 15 LA"></p><h3 id="ASP-12A"><a href="#ASP-12A" class="headerlink" title="ASP 12A"></a>ASP 12A</h3><p>I prefer this ‘classic’ exhaust porting on these tiny engines, this is a 1.9cc</p><p><img src="/d/glow-engines/asp12a.jpg" alt="ASP 12A"></p><p><strong>ASP 09</strong></p><p>This is the smallest I own, the block is exactly the same as the ASP 15. This 09 is a 1.4cc which means my old KIA Rio’s displacement was 1000 times more – really puts things into perspective!</p><p><img src="/d/glow-engines/asp09a.jpg" alt="ASP 09"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Putty</title>
      <link href="2018/04/putty/"/>
      <url>2018/04/putty/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>” PuTTY</strong> (/ˈpʌti/) is a free and open-source terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, <strong>SSH</strong>, Telnet, rlogin, and raw socket connection. It can also connect to a serial port. “</p></blockquote><ul><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/7YNd1tFJfwc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Copy-Files"><a href="#Copy-Files" class="headerlink" title="Copy Files"></a>Copy Files</h3><p>You can copy files to/from the Linux host with batch scripts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set PATH&#x3D;C:\Program Files\PuTTY</span><br><span class="line"></span><br><span class="line">pscp C:\Dev\obfuscation\publish.zip carl@192.168.31.129:&#x2F;home&#x2F;carl&#x2F;obfuscation&#x2F;publish.zip</span><br><span class="line"></span><br><span class="line">echo &quot;DONE&quot;</span><br></pre></td></tr></table></figure><ul><li><a href="https://community.nxp.com/thread/220596">https://community.nxp.com/thread/220596</a></li></ul><h2 id="Tunneling"><a href="#Tunneling" class="headerlink" title="Tunneling"></a>Tunneling</h2><p>If ports on you network are closed off you can use putty to tunnel to the box and hit the intended port, example if your container is running on port 7000:</p><ol><li>open putty, select the entry for your session and click load</li><li>then on the left go to tunnels</li><li>in the bottom half…<ol><li>enter a source port 7000</li></ol></li><li>in destination enter 127.0.0.1:7000<ol><li>click add</li></ol></li><li>You should see it listed in forwarded ports</li><li>go back to sessions (right at the top in the left section)<ol><li>click save</li><li>now when you connected, go to <a href="http://localhost:7000/">http://localhost:7000</a> in your browser</li></ol></li></ol><h3 id="Check-SSH-Server-Running-Is-Running"><a href="#Check-SSH-Server-Running-Is-Running" class="headerlink" title="Check SSH Server Running Is Running"></a>Check SSH Server Running Is Running</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep openssh</span><br></pre></td></tr></table></figure><ul><li>openssh is the server</li><li><a href="https://ubuntuforums.org/showthread.php?t=979955">https://ubuntuforums.org/showthread.php?t=979955</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electric Motors</title>
      <link href="2018/04/electric-motors/"/>
      <url>2018/04/electric-motors/</url>
      
        <content type="html"><![CDATA[<p>The numbers on brushless electric motors vary so much between manufacturers that they are pretty meaningless. The only real way to compare motors is on:</p><ul><li>Stator dimensions (should be specified as diameter, length or height)</li><li>When comparing motors of the same or almost the same Kv, look at the Rm (resistance). That determines how much heat will be generated. Copper loss = Rm x amps².<ul><li>I² x Rm = copper loss (Watts)</li><li>Iron loss = Io x volts (Watts) ~ Io is no-load current.</li></ul></li></ul><p>It doesn’t matter if one motor is fat and short and the other longer and thinner. If the Kv is the same, the torque per amp will be the same.</p><p><img src="/d/electric-motors/electric-1.jpg" alt="Brushless electric"></p><h3 id="Software-Utilities"><a href="#Software-Utilities" class="headerlink" title="Software Utilities"></a>Software Utilities</h3><ul><li><a href="https://www.ecalc.ch/">https://www.ecalc.ch/</a></li><li><a href="https://www.scorpionsystem.com/support/downloads/">https://www.scorpionsystem.com/support/downloads/</a></li></ul><p>Below are the motors I’ve used/researched and information about their possible uses:</p><h3 id="Turnigy-NTM-Prop-Drive-3536-1400KV"><a href="#Turnigy-NTM-Prop-Drive-3536-1400KV" class="headerlink" title="Turnigy NTM Prop Drive 3536 1400KV"></a>Turnigy NTM Prop Drive 3536 1400KV</h3><p><a href="https://www.youtube.com/watch?v=2fv41XSx4YM&t=4s">Experimental Airlines</a> refer to this motor as ‘the powerhouse’</p><p><img src="/d/electric-motors/electric-2.jpg" alt="Prop Drive 3536 1400KV"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Batteries and Chargers</title>
      <link href="2018/04/batteries-and-chargers/"/>
      <url>2018/04/batteries-and-chargers/</url>
      
        <content type="html"><![CDATA[<h3 id="Lithium-Polymer"><a href="#Lithium-Polymer" class="headerlink" title="Lithium Polymer"></a>Lithium Polymer</h3><p><em>Aka Lipo</em></p><ul><li>Typically a full charge is 4.2v per cell</li><li>Avoid discharge below 3.4v per cell</li><li>Storage voltage is 3.70v to 3.85v per cell</li><li>Store at room temperature</li></ul><p>Storing in a fridge does slow the chemical reaction taking place which can prolong lifespan, however taking a battery out from a cold fridge can cause condensation to occur on the inside of the battery. This can make it short.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://thedronegirl.com/2015/02/07/lipo-battery/">http://thedronegirl.com/2015/02/07/lipo-battery/</a></li><li><a href="https://www.rcgroups.com/forums/showthread.php?1436092-Lipo-storage-voltage">https://www.rcgroups.com/forums/showthread.php?1436092-Lipo-storage-voltage</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Model tools and spares</title>
      <link href="2018/04/model-tools-and-spares/"/>
      <url>2018/04/model-tools-and-spares/</url>
      
        <content type="html"><![CDATA[<p>I can never remember the names of a lot of these things and I don’t like bothering domain experts with the same question just because I was too lazy to make my own notes.</p><h3 id="Blind-Nut-Nutsert"><a href="#Blind-Nut-Nutsert" class="headerlink" title="Blind Nut / Nutsert"></a>Blind Nut / Nutsert</h3><p>This gives your cap-screw or bolt a solid thread to screw into – useful for mounting motors and to attach a wing to the fuselage with nylon wing bolts.</p><p><img src="/d/model-tools-and-spares/blind-nut.png" alt="Blind Nut / Nutsert"></p><h3 id="Razor-Saw"><a href="#Razor-Saw" class="headerlink" title="Razor Saw"></a>Razor Saw</h3><p>This saw has many teeth and gives a nice fine cut, helpful when cutting notches into ribs for spars / stringers. Ive also seen it called a mitre saw (I think its because it can be used with a mitrebox to hold the material you are cutting)</p><p>54 or 42 Teeth Per Inch (TPI) will give a nice clean cut.</p><p><img src="/d/model-tools-and-spares/razor-saw.jpg" alt="Razor Saw"></p><h3 id="Nylon-Steel-Landing-Gear-Staps"><a href="#Nylon-Steel-Landing-Gear-Staps" class="headerlink" title="Nylon/Steel Landing Gear Staps"></a>Nylon/Steel Landing Gear Staps</h3><p><img src="/d/model-tools-and-spares/wire-landing-1.jpg" alt="Landing Gear Staps"></p><p><img src="/d/model-tools-and-spares/wire-landing-2.jpg" alt="Landing Gear Staps"></p><h3 id="Wire-landing-Gear-Small-push-rods"><a href="#Wire-landing-Gear-Small-push-rods" class="headerlink" title="Wire landing Gear / Small push rods"></a>Wire landing Gear / Small push rods</h3><p>This is called Piano wire / music wire also known as <a href="https://en.wikipedia.org/wiki/Spring_steel">spring steel</a></p><p>Small models (25 size and under) would use 1mm (0.39 inch) as pushrods and 2mm for landing gear</p><p>40 to 60 size you can use 5 or 6 mm for landing gear.</p><p><img src="/d/model-tools-and-spares/pianno-wire.jpg" alt="Pianno Wire"></p><h3 id="Drill-amp-Tap"><a href="#Drill-amp-Tap" class="headerlink" title="Drill &amp; Tap"></a>Drill &amp; Tap</h3><p><strong>10</strong>–<strong>32</strong> threads are historically the original rack screw type. The term <strong>10</strong>–<strong>32</strong> comes from Unified and American Screw Threads for Bolts, Nuts, and Machine Screws standards published by ANSI B1.1-1974. The number “<strong>10</strong>” is simply a size designator with no numerical <strong>meaning</strong>. The number “<strong>32</strong>” refers to <strong>32</strong> threads per inch.</p><p>Steel tap and drill bit for preparing holes to accept bolts</p><p><img src="/d/model-tools-and-spares/tap.jpg" alt="Drill &amp; Tap"></p><h4 id="Reamer"><a href="#Reamer" class="headerlink" title="Reamer"></a>Reamer</h4><p>I’ve used these to ream a new prop hole bigger to suite an engine.</p><p><img src="/d/model-tools-and-spares/reamer-1.jpg" alt="Great Planes Precision Prop Reamer – (5/16″ &amp; 3/8″)"></p><p><img src="/d/model-tools-and-spares/reamer-2.jpg" alt="General purpose reamer, also used with rc car bodys"></p><h3 id="Pin-Vice"><a href="#Pin-Vice" class="headerlink" title="Pin Vice"></a>Pin Vice</h3><p>I have used these to manually (by hand) drill holes in models.</p><p><img src="/d/model-tools-and-spares/pin-vice.jpg" alt="Pin vice"></p><h4 id="Laser-Cutting"><a href="#Laser-Cutting" class="headerlink" title="Laser Cutting"></a>Laser Cutting</h4><p>Max Cutting Area 1200x900mm, materials would be 3,4mm ply and balsa</p><h4 id="Wood-Glue"><a href="#Wood-Glue" class="headerlink" title="Wood Glue"></a>Wood Glue</h4><p>This is the recommended glue for all models.</p><p><img src="/d/model-tools-and-spares/wood-glue.jpg" alt="Wood Glue"></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><ul><li><a href="https://www.firebrandaerorc.co.nz/ignition-glow-system-items">Sullivan On-board Glow Driver</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT Commands</title>
      <link href="2018/04/git-commands/"/>
      <url>2018/04/git-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .                              ~ add all changes</span><br><span class="line">git add foo\bar\baz.md                 ~ add just one file</span><br><span class="line"></span><br><span class="line">git reset                              ~ un-stage any files added</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-add">https://git-scm.com/docs/git-add</a></li><li><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch                             ~ display the current local branches</span><br><span class="line">git branch -d cool-new-branch        ~ delete local branch (to delete on the server see PUSH)</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-branch">https://git-scm.com/docs/git-branch</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging</a></li></ul><h3 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b cool-new-branch        ~ create new branch and switch to it </span><br><span class="line">git checkout cool-branch-name          ~ Switch to another branch</span><br><span class="line">git checkout -- *                      ~ Clear tracked modified files not committed</span><br><span class="line">git checkout -- foo&#x2F;bar&#x2F;file.cs        ~ Clear tracked modified &#96;file.cs&#96; not committed</span><br><span class="line">git checkout [revision]                ~ Fall back to revision (run &#39;git log&#39; to see commits)</span><br><span class="line">                                       ~ run &#96;git switch -&#96; to revert the head detachment</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-checkout">https://git-scm.com/docs/git-checkout</a> </li></ul><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clean -d --dry-run                 ~ Purge untracked files&#x2F;dirs</span><br><span class="line">git clean -d -f                        ~ -f is required if clean.requireForce is not set to false</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-clean">https://git-scm.com/docs/git-clean</a></li></ul><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;carlpaton&#x2F;RedisAdministrator.git</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-clone">https://git-scm.com/docs/git-clone</a></li></ul><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --list                                                                                                        ~ useful things include: user.name&#x3D; user.email&#x3D;</span><br><span class="line">git config --global http.sslCAinfo &quot;c:&#x2F;data&#x2F;certs&#x2F;certname.crt&quot;                                                          ~ update to self signed cert</span><br><span class="line">git config --global http.sslCAInfo &quot;C:\Program Files\Git\etc\pki\ca-trust\extracted\openssl\ca-bundle.trust.crt&quot;         ~ update to default cert</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></li></ul><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p>Commit local changes after <code>add</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;commit message&quot;</span><br><span class="line">git commit -a                                      ~ automatically stage files that have been modified and deleted (excludes new files)</span><br></pre></td></tr></table></figure><p>If you are pushing to your own branch and made a silly mistake such a typo, this will create noise in the commits to fix, to get around this you can <code>amend</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ... hack hack hack ...</span><br><span class="line">git add .</span><br><span class="line">git commit --amend</span><br><span class="line">git push origin abc-123-feature-branch-name -f</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-commit">https://git-scm.com/docs/git-commit</a></li></ul><h3 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h3><p>View changes, press <code>Q</code> to quit.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-diff">https://git-scm.com/docs/git-diff</a></li></ul><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log -5                                   ~ shows last 5 logs</span><br><span class="line">git log --graph --decorate --oneline --all   ~ shows all log nicely</span><br><span class="line">git log --walk-reflogs cool-branch-name      ~ show logs for your branch only (Kindof works)            </span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-log">https://git-scm.com/docs/git-log</a></li></ul><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull                               ~ Pull anything new from remote server (for origin)</span><br><span class="line">git pull upstream master               ~ Pull anything new from the remote name (upstream) on branch master</span><br><span class="line">git pull upstream master --rebase      ~ Rebase the current branch on top of the upstream branch after fetching.</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-pull">https://git-scm.com/docs/git-pull</a></li></ul><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push                               ~ Push staged and committed to remote (for origin)</span><br><span class="line">git push -d origin cool-branch-name    ~ Push and delete the branch</span><br><span class="line">git push origin master                 ~ Push changes to origin, you will do this if you have run &#96;git pull upstream master&#96;</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-push">https://git-scm.com/docs/git-push</a></li></ul><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p>Reapply commits on top of another base tip, normally master :D</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master                   ~ switch to master branch</span><br><span class="line">git pull upstream master --rebase     ~ rebase your copy of master with any changes in &#96;upstream&#96;</span><br><span class="line">git checkout cool-branch-name         ~ switch to feature branch</span><br><span class="line">git rebase master                     ~ rebase your feature branch with master</span><br><span class="line">git push origin cool-branch-name -f   ~ when pushing you may need to force push if you are now changing history on pushed branches </span><br></pre></td></tr></table></figure><p>If there are conflicts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status                            ~ to see which files are unmerged</span><br><span class="line"># ... resolve conflict</span><br><span class="line">git add &lt;conflicted_files&gt;            ~ mark files as resolved, you could also &#96;rm&#96; if you dont want the file</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p>If this are totally sideways run <code>git rebase --abort</code></p><ul><li><a href="https://git-scm.com/docs/git-rebase">https://git-scm.com/docs/git-rebase</a></li></ul><h4 id="Update-commit-history"><a href="#Update-commit-history" class="headerlink" title="Update commit history"></a>Update commit history</h4><p>Change the commit message of older commits.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2               </span><br></pre></td></tr></table></figure><p>Displays the last 2 commit message in your configured editor, change <code>pick</code> for the line you wish to update to be <code>reword</code>, save and close.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 0e0e0e0 last commit</span><br><span class="line">pick 0e0e0e1 first commit</span><br></pre></td></tr></table></figure><p>That commit message will then open with the option for you to change it from <code>first commit</code> to <code>sweet first commit</code>. You then need to force the changes to the remote repository.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure><h3 id="Rm"><a href="#Rm" class="headerlink" title="Rm"></a>Rm</h3><p>If you have a file that is tracked by source control and you need it removed.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm &#39;foo&#x2F;.vs&#x2F;foo&#x2F;v16&#x2F;.suo&#39;                 ~ after doing this update .gitignore to include *.suo</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;remove .suo tracking&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-rm">https://git-scm.com/docs/git-rm</a></li></ul><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p>You can jump any amount of heads below, example <code>HEAD~2</code> will jump back 2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1 --mixed              ~ Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated.</span><br><span class="line">git reset head --hard                 ~ clear the local changes that were reset above (that are now un-commited)</span><br><span class="line">git push origin cool-branch-name -f   ~ forces the changes you did with the above resets to origin</span><br></pre></td></tr></table></figure><p>This was useful when I had run <code>git commit --amend</code> on the wrong head</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD@&#123;1&#125;             ~ Undo git commit amend</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><h3 id="Reset-2"><a href="#Reset-2" class="headerlink" title="Reset 2"></a>Reset 2</h3><p>Revert to a previous commit and trash whats local</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 88039ae                    ~ revert to 88039ae</span><br><span class="line">git push origin cool-branch-name -f         ~ you can then update the remote repository</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><h3 id="Remotes"><a href="#Remotes" class="headerlink" title="Remotes"></a>Remotes</h3><p><a href="https://www.git-tower.com/learn/git/glossary/remote#:~:text=A%20remote%20in%20Git%20is,of%20the%20project's%20current%20state.">A remote in Git is a common repository that all team members use to exchange their changes</a>. Generally the repository you forked from is called <code>upstream</code> and your copy in your namespace ie: <code>carlpaton</code> is the <code>origin</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                                                     ~ display remotes</span><br></pre></td></tr></table></figure><p>If you forked from for example from <a href="https://github.com/bradvin/SOLID">https://github.com/bradvin/SOLID</a> to your own repository  <a href="https://github.com/carlpaton/SOLID">https://github.com/carlpaton/SOLID</a> then <code>bradvin/SOLID</code> is <code>upstream</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https:&#x2F;&#x2F;github.com&#x2F;bradvin&#x2F;SOLID.git</span><br></pre></td></tr></table></figure><p>You can then pull from this <code>upstream</code> source and push the changes to your own fork. (See push and pull above)</p><ul><li><a href="https://git-scm.com/docs/git-remote">https://git-scm.com/docs/git-remote</a></li></ul><h3 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h3><p>Show local changes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-status">https://git-scm.com/docs/git-status</a></li></ul><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><p>Lets you stash local changes, keep them local and pop them back if you want them again</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash                    ~ stash anything that is not committed</span><br><span class="line">git stash list               ~ list stack-order of stashed file changes</span><br><span class="line">git stash pop                ~ pop stashed items back</span><br><span class="line">git stash drop               ~ discard the changes from top of stash stack</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-stash">https://git-scm.com/docs/git-stash</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://git-scm.com/docs/">https://git-scm.com/docs/</a></li><li><a href="https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/">https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/</a></li><li><a href="https://education.github.com/git-cheat-sheet-education.pdf">https://education.github.com/git-cheat-sheet-education.pdf</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resolving GIT Merge Conflicts</title>
      <link href="2018/04/resolving-git-merge-conflicts/"/>
      <url>2018/04/resolving-git-merge-conflicts/</url>
      
        <content type="html"><![CDATA[<p>Merge conflicts are inevitable, they can easily be resolved using free tools such as <a href="https://download.tortoisegit.org/tgit/2.3.0.0/">Tortoise Git</a> and <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p><p>Example: Merging feature-branch → sprint-branch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout sprint-branch</span><br><span class="line">git fetch origin</span><br><span class="line">git merge origin&#x2F;feature-branch</span><br><span class="line"></span><br><span class="line">(now resolve conflicts in VS Code)</span><br><span class="line">~ VS Code displays the conflicts for you and give you the option to select what you want.</span><br><span class="line">~ Sweet! Now save local file.</span><br><span class="line"></span><br><span class="line">git push origin sprint-branch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convert List to string with delimiter</title>
      <link href="2018/04/convert-list-to-string-with-delimiter/"/>
      <url>2018/04/convert-list-to-string-with-delimiter/</url>
      
        <content type="html"><![CDATA[<p><strong>*Convert List, string.</strong> Think of a sentence. It contains some words. We could represent a sentence as a single string—one with spaces. But a list of strings (of words) is sometimes better.*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EG1</span><br><span class="line">var dogCsv &#x3D; string.Join(&quot;,&quot;, dogs.ToArray());</span><br><span class="line"></span><br><span class="line">EG2</span><br><span class="line">var names &#x3D; new List&lt;string&gt;() &#123; &quot;John&quot;, &quot;Anna&quot;, &quot;Monica&quot; &#125;; </span><br><span class="line">var result &#x3D; String.Join(&quot;, &quot;, names.ToArray());</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.dotnetperls.com/convert-list-string">https://www.dotnetperls.com/convert-list-string</a></li><li><a href="https://stackoverflow.com/questions/3575029/c-sharp-liststring-to-string-with-delimiter">https://stackoverflow.com/questions/3575029/c-sharp-liststring-to-string-with-delimiter</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCRUM, a subset of AGILE Software Development</title>
      <link href="2018/04/scrum-a-subset-of-agile-software-development/"/>
      <url>2018/04/scrum-a-subset-of-agile-software-development/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/scrum-a-subset/scrum-1.jpeg" alt="SCRUM, a subset of AGILE Software Development"></p><p>The Basic Life Cycle of any project generally follows the following steps: Requirements -&gt; Analysis -&gt; Design -&gt; Code -&gt; Test. This is the waterfall model which most companies are following without even knowing it is indeed a documented methodology.</p><p>Many software developers don’t even document their code, this is not an assumption on my part but rather an observation from working with several developers on separate projects though my career and also snorkeling though code examples online.</p><p>Generally if you ask a developer “What is software testing?” you will receive comments like “My code compiled… what more do you want from me?” or “Dude, I wrote some unit tests…” or even worse “I think we did some Agile”</p><p>Besides the last example, for general small projects this is normally enough, the requirements may have been scribbled on a piece of paper or white board and 5 minutes later the developer was frantically mashing his keyboard to meet a ridiculous deadline and building a solution he doesn’t really understand. For many of us this is the reality however you are not working smart, you will eventually burn out and your software will not be something you can be proud of.</p><p>If this sounds like your organization then you need to change. The first step is to take a step back and try understand what the software development life cycle is, how you are already managing it in your business and how you can improve things.</p><p><img src="/d/scrum-a-subset/scrum-2.jpeg" alt="Oh boy"></p><p>The seven most expensive words in business: are “<a href="https://www.linkedin.com/feed/update/urn:li:activity:6257351448409972736/">We have always done it that way.</a>”</p><p>The following is my understanding of SCRUM, a subset of AGILE software development methodologies to help promote a disciplined and collaborative working environment within a team.</p><h3 id="Stake-Holders"><a href="#Stake-Holders" class="headerlink" title="Stake Holders"></a>Stake Holders</h3><p>Stake holders in this context refers to anybody that the project or software touches. This includes Business owner(s), Project Manager(s), Development team even the end users.</p><h3 id="Sprint-Planning-and-Defining-Acceptance-Criteria"><a href="#Sprint-Planning-and-Defining-Acceptance-Criteria" class="headerlink" title="Sprint Planning and Defining Acceptance Criteria"></a>Sprint Planning and Defining Acceptance Criteria</h3><p>Few developers have the privilege to start a brand new project with a well-documented specification, for the bulk of us we will work on existing systems with a product backlog of features and known bugs. This is not a bad thing, detailed specification documents are not a requirement for quality software. Few companies can afford to document software as well as, <a href="https://msdn.microsoft.com/en-us/library/ms228593.aspx">for example the C# Language Specification</a>.</p><p>At the sprint planning meeting items from the product backlog are prioritized and a select number of items are included in the sprint based on the size of the team. Your sprints should be two weeks long and each developer have at least 60 hours’ worth of work for that sprint. This is around 6 hours a day which takes into account interruptions and cognitive load, remember if you are working smart you don’t have to work that hard. Never over load your best staff with all the workload – its very bad management to punish a hard worker simply because they are good at their job. Rather share the load and try upskill the rest of the team. This way after a few sprints you will a team of skilled staff.</p><p>The hours per sprint have to be attainable, if developers have to work overtime to meet the sprint deadline you need to go back to the drawing board in your planning meeting and probably acceptance criteria. Rather let them deliver quality code than poorly planned and buggy software.</p><p>The software does not have to be release at the end of each sprint, several sprints can make up a single release.</p><p>Before you begin doing anything your tasks requirements or “Acceptance Criteria” needs to as clear as possible written in plain English using the Ubiquitous Language for references as defined by your business. This should preferably be done by the Project Manager with input from all stakeholders at the sprint planning meeting.</p><p>The sprint planning meeting can unfortunately take up an entire day but as your team matures this meeting will shorten and the rewards will be very clear.</p><p>Once the Acceptance Criteria is defined this is what will be built by the developer, tested by the Quality Assurance testers, Tested by Business at User Acceptance and released into live. It cannot change during the sprint as this will cause development creep which is not agile.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>A story is the feature or module that the developer is going to build. It would include the acceptance criteria along with a brief description of the feature or bug fix. It’s a good idea to include testing data for both the developers and Quality Assurance teams – remember they may not have domain knowledge of the business / underlying business data so try give them all the information up front.</p><p>Example: Testing data can include database id’s to query, names to lookup on, date ranges ect. It will be determined by the story.</p><h3 id="Story-Points"><a href="#Story-Points" class="headerlink" title="Story Points"></a>Story Points</h3><p>Story points is an interesting measurement as it is determined by the team at sprint planning and is based on their understanding of the story, the team being all stake holders. Everybody has their say and often your story points can change based on others input when they motivate their “choice”.</p><blockquote><p><strong>*Story point</strong> is an arbitrary measure used by Scrum teams. This is used to measure the effort required to implement a <strong>story</strong>. In simple terms its a number that tells the team how hard the <strong>story</strong> is. Hard could be related to complexity, Unknowns and effort.*</p></blockquote><p>I have found that using the <a href="https://www.livescience.com/37470-fibonacci-sequence.html">fibonacci sequence</a> on que cards speeds up this process as it reduces guess work.</p><p>Printing que cards is rather silly as there are several apps for your smartphone that allow you to chooses these numbers. Example: <a href="https://play.google.com/store/apps/details?id=artarmin.android.scrum.poker&hl=en">Scrum Poker Cards (Agile)</a> by <a href="https://play.google.com/store/apps/dev?id=9135165741484938670&hl=en">artArmin</a></p><p>The format is very simple:</p><p><strong>Round 1</strong> – the team will be briefed on the story, everybody gets a vote using their que cards. The highest and lowest numbers need to then motivate their choice. For example a low point of 1 would then need to be motivated why they feel it’s a simple change or fix. Likewise a higher point of say 40 would need to motivate why the feel this is a difficult change or fix. This is extremely valuable as the team will learn from each other – business would understand the code domain better and developers will gain knowledge of the business domain.</p><p><strong>Round 2</strong> – repeat the votes based on what you have just heard. It’s important to take this seriously and not just vote random numbers. If you don’t have knowledge of the area rather abstain or better ask questions. Remember the only stupid question is the one you don’t ask.</p><p>The majority vote then carries and that is then used as the story point score for that story.</p><h3 id="Stand-Up"><a href="#Stand-Up" class="headerlink" title="Stand-Up!"></a>Stand-Up!</h3><p><em>WHO: Scrum team</em></p><p>Every day, preferably in the mornings the team need to have a stand-up, they each need to answer and ask some simple questions:</p><ul><li>What did you work on yesterday?</li><li>What are you working on today?</li><li>What obstacles are in your way?</li></ul><p>This will help the team work together and also assure business that their needs are indeed being worked on. All stakeholders need to be present or at very least have a proxy present to voice their concerns / progress ect.</p><h3 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h3><p>During development it is a good idea to produce release notes and send them out via email once a day, they don’t have to be overly complicated. A simple table showing the reference number linking back to your project tracking system, the story headline and its location or who its assigned to.</p><p><img src="/d/scrum-a-subset/scrum-3.jpeg" alt="Release Notes"></p><h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><p>This is helpful for managers to motivate for things like incentives, new team members or to simply justify a team’s size or even existence.</p><blockquote><p><em>The metric is calculated by reviewing work the team successfully completed during previous sprints; for example, if the team completed 10 stories during a two-week *<em>sprint</em></em> and each story was worth 3 story points, then the team’s <strong>velocity</strong> is 30 story points per <strong>sprint</strong>.*</p></blockquote><p>It also helps identify mental fatigue or when it’s time to move developers into another team or role.</p><h3 id="Sprint-Retrospective"><a href="#Sprint-Retrospective" class="headerlink" title="Sprint Retrospective"></a>Sprint Retrospective</h3><p><em>WHO: Scrum team</em></p><p>This is such an important meeting as it is an open form for the stakeholders to express how they felt the past sprint went. Simple questions to ask include:</p><ul><li>What worked in the sprint?</li><li>What did not work?</li><li>How can we improve for the next sprint?</li></ul><p>The idea is never to ostracize a staff member, if somebody constantly is not pulling their weight it is for their managers to deal with. Never judge a peer when they drop the ball, judge them by how quickly they pick it up again and run with the task.</p><h3 id="Sprint-Review"><a href="#Sprint-Review" class="headerlink" title="Sprint Review"></a>Sprint Review</h3><p><em>WHO: Scrum team &amp; Stakeholders</em></p><p>Opportunity for</p><ul><li>Product Owner to showcase what the team has been working on, highlight risks, what we will look at next and time lines in this quarter and the next quarter. This sets expectations.</li><li>Designers to showcase their visions and alignment to company wide copy.</li><li>Developers to demo technical things or functional product slices.</li></ul><p>Its common for large companys to combine these reviews by pods/squads that serve a common slice of the business. </p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Agile teams are constantly evolving, when something doesn’t work try change it for the better. This is a mind-set that needs to be achieved.</p><p>Research what other teams are doing but never try implement something for the sake of it – if your team is performing well even with antiquated techniques it’s not always a good idea to change things.</p><p>Never forget <strong>Product</strong> is a Team sport.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.agilenutshell.com/scrum">http://www.agilenutshell.com/scrum</a></li><li><a href="http://whatis.techtarget.com/definition/Agile-velocity">http://whatis.techtarget.com/definition/Agile-velocity</a></li><li><a href="https://agilefaq.wordpress.com/2007/11/13/what-is-a-story-point/">https://agilefaq.wordpress.com/2007/11/13/what-is-a-story-point/</a></li><li><a href="http://www.livescience.com/37470-fibonacci-sequence.html">http://www.livescience.com/37470-fibonacci-sequence.html</a></li><li><a href="https://www.cprime.com/resources/what-is-agile-what-is-scrum/">https://www.cprime.com/resources/what-is-agile-what-is-scrum/</a></li><li><a href="https://www.scrumalliance.org/why-scrum">https://www.scrumalliance.org/why-scrum</a></li><li><a href="http://www.tamingdata.com/2010/07/08/the-project-management-tree-swing-cartoon-past-and-present/">http://www.tamingdata.com/2010/07/08/the-project-management-tree-swing-cartoon-past-and-present/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stopwatch</title>
      <link href="2018/04/stopwatch/"/>
      <url>2018/04/stopwatch/</url>
      
        <content type="html"><![CDATA[<p>Stopwatch code to time some other code, the namespace is <em>System.Diagnostics</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var sw &#x3D; new Stopwatch();</span><br><span class="line">sw.Start();</span><br></pre></td></tr></table></figure><p>Now allow your code to execute, you can test this with a loop or wait</p><p>Then stop and display the time taken:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sw.Stop();</span><br><span class="line">Console.WriteLine(sw.Elapsed);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Abstract Class</title>
      <link href="2018/04/abstract-classes/"/>
      <url>2018/04/abstract-classes/</url>
      
        <content type="html"><![CDATA[<p>An abstract class cannot be instantiated. The purpose of an abstract class is to provide a common definition of a base class that multiple derived classes can share. For example, a class library may define an abstract class that is used as a parameter to many of its functions, and require programmers using that library to provide their own implementation of the class by creating a derived class.</p><h3 id="How-does-an-Interface-differ-from-an-Abstract-Class"><a href="#How-does-an-Interface-differ-from-an-Abstract-Class" class="headerlink" title="How does an Interface differ from an Abstract Class?"></a>How does an Interface differ from an Abstract Class?</h3><p>An <a href="/2018/04/c-sharp-interfaces/">interface</a> is not a class, it has no implementation where an abstract class does have implementation that the inheriting class must use.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members</a></li><li><a href="https://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class">https://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add appsettings.json to a .Net Core Console Application</title>
      <link href="2018/04/adding-appsettings-json-to-a-net-core-console-application/"/>
      <url>2018/04/adding-appsettings-json-to-a-net-core-console-application/</url>
      
        <content type="html"><![CDATA[<p>Firstly add the appsettings.json file to the solution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;AppSettings&quot;: &#123;</span><br><span class="line">   &quot;Key1&quot;: &quot;This is the value for Key1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set the .json file to copy to the output directory (this is the bin folder)</p><p><img src="/d/adding-appsettings-json-to-a-net-core-console-application/appsettings-1.png" alt="Copy if newer"></p><p>Add Microsoft.Extensions.Configuration.Json from Nuget</p><p><img src="/d/adding-appsettings-json-to-a-net-core-console-application/appsettings-2.png" alt="Microsoft.Extensions.Configuration.Json"></p><p>The read the file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IConfiguration config &#x3D; new ConfigurationBuilder()</span><br><span class="line"> .AddJsonFile(&quot;appsettings.json&quot;, true, true)</span><br><span class="line"> .Build();</span><br><span class="line"></span><br><span class="line">var key1 &#x3D; config[&quot;AppSettings:Key1&quot;];</span><br><span class="line">Console.WriteLine(key1);</span><br></pre></td></tr></table></figure><p>Run the code!</p><p><img src="/d/adding-appsettings-json-to-a-net-core-console-application/appsettings-3.png" alt="Run the code"></p>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Docker on Linux</title>
      <link href="2018/04/setup-docker-on-linux/"/>
      <url>2018/04/setup-docker-on-linux/</url>
      
        <content type="html"><![CDATA[<p>NOTE – if you are going to run <a href="/2018/04/setup-kubernetes-local-machine-solutions/">kubernetes</a> then you will need Hyper-V which will fight with VMWare, rather use <a href="/2018/03/virtual-box/">virtual-box</a>.</p><p>Steps to install #docker on Ubuntu</p><ol><li>Download <a href="/2018/04/vmware-workstation-player/">VMWare Workstation Player</a></li><li>Download linux ISO<ol><li>ubuntu-17.10.1-desktop-amd64.iso</li><li>ubuntu-17.10.1-server-amd64.iso (GUIs face :D)</li></ol></li><li>Add to VMware-player<ol><li>(Docker VM) un/pw carl/carl</li><li>(PSQL VM) un/pw carl/carl</li></ol></li><li>After the install, allow Putty Session for remote management<ol><li><a href="http://linux-sys-adm.com/how-to-install-and-configure-ssh-on-ubuntu-server-14.04-lts-step-by-step/">How to install and configure SSH on Ubuntu (Server) 14.04 LTS Step-by-Step</a></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p><a href="https://help.ubuntu.com/lts/serverguide/ftp-server.html.en">** Also see other FTP Server Options **</a></p><ol start="5"><li><a href="/2018/04/putty/">Putty</a> to the server on the IP from the above command, then run the following commands</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#(1) Set up the docker repository</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#(2) Install Docker CE</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#(3) Verify the installation</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>If you have different flavors you may need to add different repository’s as seen below.</p><h3 id="Artful"><a href="#Artful" class="headerlink" title="Artful"></a>Artful</h3><p>If you are running ‘artful’ you will need to use this repository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu artful stable&quot;</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu bionic test&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><ul><li><a href="https://askubuntu.com/questions/1030179/package-docker-ce-has-no-installation-candidate-in-18-04">https://askubuntu.com/questions/1030179/package-docker-ce-has-no-installation-candidate-in-18-04</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Senior Telemaster</title>
      <link href="2018/04/senior-telemaster/"/>
      <url>2018/04/senior-telemaster/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/senior-telemaster/senior-telemaster.jpg" alt="Senior Telemaster"></p><p>Based on suggestions by domain experts the wing should be built with zero dihedral: <a href="https://en.wikipedia.org/wiki/Dihedral_(aeronautics)">https://en.wikipedia.org/wiki/Dihedral_(aeronautics)</a></p><p><em>Wing Construction (2 piece, removable spar):</em></p><ul><li>Wing ribs, stab ribs &amp; tips are 7~OF <a href="http://www.hangarone.co.nz/balsa-sheet-30mm-100mm-915mm-18-p-1746.html">3.0mm x 100mm x 915mm ~ 1/8”</a> </li><li>Spars are spruce/basswood 4~OF <a href="http://www.hangarone.co.nz/spruce-stick-95mm-125mm-915mm-38-12-p-5903.html">9.5mm x 12.5mm x 915mm (3/8” x 1/2”)</a></li><li>Center ribs where wings join 1~OF <a href="http://www.hangarone.co.nz/poplar-plywood-30mm-300mm-300mm-18-p-2942.html">Poplar Plywood 3.0mm x 300mm x 300mm (1/8”)</a></li></ul><p><em>Wing Construction (1 piece):</em></p><ul><li>Spar is balsa 1~OF <a href="http://www.hangarone.co.nz/balsa-sheet-125mm-100mm-915mm-12-p-1740.html">9.5mm x 12.7mm x 121.92cm (3/8” x 1/2” x 48”)</a> cut into strips 9.5mm x 19 mm (3/8” x 3/4”)</li></ul><p><em>Fuselage Construction:</em></p><ul><li>TBA</li></ul><h3 id="Size-Conversions"><a href="#Size-Conversions" class="headerlink" title="Size Conversions"></a>Size Conversions</h3><p><img src="/d/senior-telemaster/size-conversions.jpg" alt="Size Conversions, Inches upset me!"></p><h3 id="Downloaded-Plans-outerzone"><a href="#Downloaded-Plans-outerzone" class="headerlink" title="Downloaded Plans (outerzone)"></a>Downloaded Plans (outerzone)</h3><ul><li><a href="https://drive.google.com/open?id=1gU3CzGUCB7fbwq_sdx9nckl4LB4rSPy2">Senior_Telemaster_oz5044.pdf</a></li><li><a href="https://drive.google.com/open?id=1qr8jtGDC8Aga9VZYb8otmgPfkFqUfAr0">Senior_Telemaster_oz5044_review.pdf</a></li><li><a href="https://drive.google.com/open?id=1csRCnNbPrn07F1McOedZVvsDwcJVfU6L">Senior_Telemaster_oz5044_article.pdf</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.rcgroups.com/forums/showthread.php?1068781-senior-telemaster-2-piece-wing">https://www.rcgroups.com/forums/showthread.php?1068781-senior-telemaster-2-piece-wing</a></li><li><a href="https://outerzone.co.uk/plan_details.asp?ID=5044">https://outerzone.co.uk/plan_details.asp?ID=5044</a></li><li><a href="http://www.hangarone.co.nz/senior-telemaster-plan-94-span-60-size-by-alex-angel-p-6089.html">http://www.hangarone.co.nz/senior-telemaster-plan-94-span-60-size-by-alex-angel-p-6089.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wot 4</title>
      <link href="2018/04/wot4/"/>
      <url>2018/04/wot4/</url>
      
        <content type="html"><![CDATA[<ul><li>Wingspan 1205mm / 47.4’</li><li>Length 1050mm / 41’</li><li>3536 820kv motor with 40 amp ESC</li></ul><p><img src="/d/wot4/wot-1.jpg" alt="Wot4"></p><p><img src="/d/wot4/wot-2.jpg" alt="Wot4"></p><p><img src="/d/wot4/wot-3.jpg" alt="Wot4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Enum</title>
      <link href="2018/04/c-sharp-enum/"/>
      <url>2018/04/c-sharp-enum/</url>
      
        <content type="html"><![CDATA[<h3 id="Enumeration-types"><a href="#Enumeration-types" class="headerlink" title="Enumeration types"></a>Enumeration types</h3><p>The <code>enum</code> keyword is used to declare an enumeration, a distinct type that consists of a set of named constants called the enumerator list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static class GenericStatus</span><br><span class="line">&#123;</span><br><span class="line">   public enum GenStatusEnum</span><br><span class="line">   &#123;</span><br><span class="line">      Pending,</span><br><span class="line">      Approved,</span><br><span class="line">      Declined</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static string ReadStatus(int id)</span><br><span class="line">   &#123;</span><br><span class="line">      GenStatus s;</span><br><span class="line">      Enum.TryParse&lt;GenStatus&gt;(id.ToString(), out s);</span><br><span class="line">      return s.ToString();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum</a></li></ul><h3 id="Enumeration-types-as-bit-flags"><a href="#Enumeration-types-as-bit-flags" class="headerlink" title="Enumeration types as bit flags"></a>Enumeration types as bit flags</h3><ul><li><a href="https://github.com/carlpaton/EnumDemo">https://github.com/carlpaton/EnumDemo</a></li></ul><p>You can use an enumeration type to define bit flags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace EnumDemo.Enum</span><br><span class="line">&#123;</span><br><span class="line">    [Flags]</span><br><span class="line">    public enum Days</span><br><span class="line">    &#123;</span><br><span class="line">        None &#x3D; 0,</span><br><span class="line">        Sunday &#x3D; 1,</span><br><span class="line">        Monday &#x3D; 2,</span><br><span class="line">        Tuesday &#x3D; 4,</span><br><span class="line">        Wednesday &#x3D; 8,</span><br><span class="line">        Thursday &#x3D; 16,</span><br><span class="line">        Friday &#x3D; 32,</span><br><span class="line">        Saturday &#x3D; 64</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You create a bit flags enum by applying the System.FlagsAttribute attribute and defining the values appropriately so that AND, OR, NOT and XOR <strong>bitwise operations</strong> can be performed on them.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using EnumDemo.Enum;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace EnumDemo</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Initialize with two flags using bitwise OR.</span><br><span class="line">            var meetingDays &#x3D; Days.Tuesday | Days.Thursday | Days.Friday;</span><br><span class="line">            Console.WriteLine($&quot;Meeting days are &#123;meetingDays&#125; with flag value &#123;(int)meetingDays&#125;&quot;);</span><br><span class="line">            &#x2F;&#x2F; Meeting days are Tuesday, Thursday, Friday with flag value 52</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Toggle a flag using bitwise XOR, this will remove &#96;Days.Tuesday&#96; from &#96;meetingDays&#96;</span><br><span class="line">            meetingDays &#x3D; meetingDays ^ Days.Tuesday;</span><br><span class="line">            Console.WriteLine($&quot;Meeting days are &#123;meetingDays&#125; with flag value &#123;(int)meetingDays&#125;&quot;);</span><br><span class="line">            &#x2F;&#x2F; Meeting days are Thursday, Friday with flag value 48</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Test value of flags using bitwise AND, this is checking for the existance of &#96;Days.Thursday&#96; in &#96;meetingDays&#96;</span><br><span class="line">            bool test &#x3D; (meetingDays &amp; Days.Thursday) &#x3D;&#x3D; Days.Thursday;</span><br><span class="line">            Console.WriteLine($&quot;Thursday &#123;(test &#x3D;&#x3D; true ? &quot;is&quot; : &quot;is not&quot;)&#125; a meeting day.&quot;);</span><br><span class="line">            &#x2F;&#x2F; Thursday is a meeting day.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/enumeration-types#enumeration-types-as-bit-flags">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/enumeration-types#enumeration-types-as-bit-flags</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Interface</title>
      <link href="2018/04/c-sharp-interfaces/"/>
      <url>2018/04/c-sharp-interfaces/</url>
      
        <content type="html"><![CDATA[<p>An interface is a contract / empty shell containing only signatures of the methods or property’s the inheriting class must implement. The interface can’t do anything. It’s just a pattern.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Commands</title>
      <link href="2018/04/docker-commands/"/>
      <url>2018/04/docker-commands/</url>
      
        <content type="html"><![CDATA[<p>Prefix with sudo if the current user is not root (admin) ~ applicable to Linux environment.</p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker version ~ display version</span><br><span class="line">docker run hello-world ~ run hello-world test container</span><br><span class="line">docker logs [CONTAINER NAME] ~ works even if the container is stopped</span><br><span class="line">docker images</span><br><span class="line">docker ps –all ~ list containers</span><br><span class="line">docker network ls ~ list networks</span><br><span class="line"></span><br><span class="line">docker rm $(docker ps -a -q) ~ deletes all excited containers</span><br><span class="line">​first run sudo -i ~ switch to root</span><br></pre></td></tr></table></figure><h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p>Along with the linux memory usage command ~ sudo free -m you can also check each containers stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stats [CONTAINER NAME]</span><br><span class="line"></span><br><span class="line">(CTRL C to quit)</span><br></pre></td></tr></table></figure><h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><p>Copy from the logs dir to the host</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp [CONTAINER NAME]:&#x2F;app&#x2F;logs&#x2F; &#x2F;home&#x2F;carl&#x2F;obfuscation&#x2F;</span><br><span class="line">you can also specify the current dir with a period .</span><br></pre></td></tr></table></figure><p>Copy to container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp &#x2F;path&#x2F;on&#x2F;host [CONTAINER NAME]:&#x2F;path&#x2F;on&#x2F;container</span><br></pre></td></tr></table></figure><h3 id="EXEC-session-to-container"><a href="#EXEC-session-to-container" class="headerlink" title="EXEC session to container"></a>EXEC session to container</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it 279 sh (where 279 is the start of the container ID)</span><br></pre></td></tr></table></figure><ul><li><p>then you can PING [CONTAINER NAME] (note the container you ping needs to be on the same bridge, example golden-gate)</p></li><li><p>CRTL C ~ quit ping</p></li><li><p>CTRL PQ ~ quit EXEC session</p></li><li><p>Also see <a href="/2018/05/access-postgresql-database-command-line-terminal-in-a-container/">access-postgresql-database-command-line-terminal-in-a-container</a></p></li><li><p>For bash run</p><ul><li>sudo docker exec -it [CONTAINER-NAME] /bin/bash</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec compose-angular-web cat &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">sudo docker exec compose-angular-web ls &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br></pre></td></tr></table></figure><h3 id="Interactive-processes-like-a-shell"><a href="#Interactive-processes-like-a-shell" class="headerlink" title="Interactive processes (like a shell)"></a>Interactive processes (like a shell)</h3><p>This was helpful when debugging pgDash when the container would not start and we needed to run in interactive mode, run from bash their command to start the app and then cat out the logs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it –entrypoint &#x2F;bin&#x2F;bash pgdash_image    (note the – – before entrypoint)</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;pgdashd</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;pgdash&#x2F;pgdash.log</span><br></pre></td></tr></table></figure><p>&lt;* <a href="https://docs.docker.com/engine/reference/run/#operator-exclusive-options&gt;">https://docs.docker.com/engine/reference/run/#operator-exclusive-options&gt;</a></p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network connect golden-gate [CONTAINER NAME]</span><br><span class="line">sudo docker network connect bridge [CONTAINER NAME]</span><br><span class="line">sudo docker network disconnect golden-gate [CONTAINER NAME]</span><br></pre></td></tr></table></figure><h3 id="Inspect"><a href="#Inspect" class="headerlink" title="Inspect"></a>Inspect</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect [NETWORK NAME]</span><br><span class="line">docker container inspect [CONTAINER NAME]</span><br><span class="line">docker inspect -f “&#123;&#123; .NetworkSettings.Networks.nat.IPAddress &#125;&#125;” [CONTAINER NAME]</span><br><span class="line">~ shows its IP to get around the WinNAT plow</span><br></pre></td></tr></table></figure><h3 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br><span class="line">docker volume inspect my-vol</span><br><span class="line">sudo docker volume prune ~ deletes volumes not in use</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.docker.com/storage/volumes/">https://docs.docker.com/storage/volumes/</a></li></ul><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>Options are passed after commands, I can never rememeber what they all do :)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t                 ~ Name and optionally a tag in the ‘name:tag’ format</span><br><span class="line">                   ~ docker build -t docker101tutorial .</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Statements</title>
      <link href="2018/04/mysql-statements/"/>
      <url>2018/04/mysql-statements/</url>
      
        <content type="html"><![CDATA[<ul><li>[identify-large-tables.sql](<a href="https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc">https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc</a> examples/identify-large-tables.sql)</li><li>[mysql.user.sql](<a href="https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc">https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc</a> examples/mysql.user.sql)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Kubernetes Local-machine</title>
      <link href="2018/04/setup-kubernetes-local-machine-solutions/"/>
      <url>2018/04/setup-kubernetes-local-machine-solutions/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs/setup/learning-environment/minikube/">Minikube</a> is the recommended method for creating a local, single-node Kubernetes cluster for development and testing. Setup is completely automated and doesn’t require a cloud provider account.</p><h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><ol><li>Enable Hyper V in your BIOS and turn on the windows feature ‘Hyper-V’<ol><li><a href="https://docs.microsoft.com/en-gb/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v">Also see: Install Hyper-V on Windows 10</a></li></ol></li><li>Install <a href="/2018/03/chocolatey/">chocolatey</a> package manager</li><li>Install <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">choco install kubernetes-cli</span><br><span class="line">kubectl version</span><br><span class="line">cd C:\users\Carl (where Carl is your home dir)</span><br><span class="line">mkdir .kube</span><br><span class="line">cd .kube</span><br><span class="line">New-Item config -type file</span><br></pre></td></tr></table></figure><ol start="4"><li>Install <ol><li>minikube</li></ol></li><li>At the time of writing this the latest <a href="https://github.com/kubernetes/minikube/releases/tag/v0.28.0">version was v0.28.0</a></li></ol><blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://kubernetes.io/docs/setup/pick-right-solution/#local-machine-solutions">https://kubernetes.io/docs/setup/pick-right-solution/#local-machine-solutions</a></li><li><a href="https://kubernetes.io/docs/setup/minikube/">https://kubernetes.io/docs/setup/minikube/</a></li><li><a href="https://stackoverflow.com/questions/50053255/virtualbox-raw-mode-is-unavailable-courtesy-of-hyper-v-windows-10">https://stackoverflow.com/questions/50053255/virtualbox-raw-mode-is-unavailable-courtesy-of-hyper-v-windows-10</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL on a Linux VM</title>
      <link href="2018/04/postgresql-on-a-linux-vm/"/>
      <url>2018/04/postgresql-on-a-linux-vm/</url>
      
        <content type="html"><![CDATA[<p>You will need to install Ubuntu on your virtual host, I used <a href="https://carlpaton.co.za/vmware-workstation-player/">VMware Workstation Player</a> and ubuntu-17.10.1-server-amd64.iso</p><p>I called my instance ‘Ubuntu PSQL’ and used carl/carl username and password for authentication. Once the VM is running you can install postgresql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install postgresql postgresql-contrib</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p>You can then <a href="https://carlpaton.co.za/putty/">putty</a> to the server, this is easier as you can paste commands.</p><p>To check the PostgreSQL server is running you can query it with <em>psql –version</em></p><p>All of my examples below were on version 9.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Check the PSQL version</span><br><span class="line">psql --version</span><br><span class="line"></span><br><span class="line">#Check status</span><br><span class="line">service --status-all</span><br><span class="line">sudo pg_lsclusters</span><br><span class="line"></span><br><span class="line">#Other service commands</span><br><span class="line">sudo service postgresql status</span><br><span class="line">sudo service postgresql restart</span><br><span class="line">sudo service postgresql stop</span><br><span class="line">sudo service postgresql start</span><br></pre></td></tr></table></figure><h3 id="Configuration-updates"><a href="#Configuration-updates" class="headerlink" title="Configuration updates"></a>Configuration updates</h3><p>The following configuration updates will be needed, I used nano to edit the files but you can use any other editor such as <a href="http://www.informit.com/articles/article.aspx?p=1670957&seqNum=3">vi</a></p><h4 id="pg-hba-conf"><a href="#pg-hba-conf" class="headerlink" title="pg_hba.conf"></a>pg_hba.conf</h4><p>Set the METHOD to ‘trust’ under ‘# Database administrative login by Unix domain socket’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;postgresql&#x2F;9.6&#x2F;main&#x2F;pg_hba.conf</span><br><span class="line"></span><br><span class="line"># Database administrative login by Unix domain socket</span><br><span class="line">local all postgres trust</span><br></pre></td></tr></table></figure><p>You can also restrict access by IP or IP range:</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.254&#x2F;32 &#x3D; ip address of 192.168.0.254</span><br><span class="line">192.168.0.1&#x2F;24 &#x3D; range of ip&#39;s from 192.168.0.1 to 192.168.0.1.255</span><br></pre></td></tr></table></figure><p>Also see <a href="https://en.wikipedia.org/wiki/Subnetwork">Subnet mask</a></p><p>Allow all connections:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- allow the lot</span><br><span class="line">host all all all md5</span><br><span class="line"></span><br><span class="line">-- allow by username</span><br><span class="line">host all USERNAME 0.0.0.0&#x2F;0 md5</span><br></pre></td></tr></table></figure><h4 id="postgresql-conf"><a href="#postgresql-conf" class="headerlink" title="postgresql.conf"></a>postgresql.conf</h4><p>Set the the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;postgresql&#x2F;9.6&#x2F;main&#x2F;postgresql.conf</span><br><span class="line"></span><br><span class="line">listen_addresses &#x3D; &#39;*&#39;</span><br><span class="line">log_statement &#x3D; &#39;all&#39; </span><br><span class="line">log_hostname &#x3D; on</span><br><span class="line">log_line_prefix &#x3D; &#39;%m [%p] [%r] %q%u@%d &#39;</span><br></pre></td></tr></table></figure><h3 id="Update-password"><a href="#Update-password" class="headerlink" title="Update password"></a>Update password</h3><p>You can update the root password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#set password</span><br><span class="line">sudo -u postgres psql postgres</span><br><span class="line">\password postgres</span><br><span class="line">[newpassword]</span><br><span class="line">\q</span><br><span class="line">#test user&#x2F;pass </span><br><span class="line">(Requires pg_hba.conf change to trust)</span><br><span class="line"></span><br><span class="line">psql -U postgres -W</span><br><span class="line">[newpassword]</span><br></pre></td></tr></table></figure><h3 id="Tail-logs"><a href="#Tail-logs" class="headerlink" title="Tail logs"></a>Tail logs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;postgresql&#x2F;postgresql-9.6-main.log</span><br><span class="line">CRTL C ~ to quit</span><br></pre></td></tr></table></figure><h3 id="Backup-amp-Restore"><a href="#Backup-amp-Restore" class="headerlink" title="Backup &amp; Restore"></a>Backup &amp; Restore</h3><p>See <a href="https://carlpaton.co.za/putty/">putty</a> if you need to copy a dump file to the server from your windows PC.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Create the dump file</span><br><span class="line">sudo -Su postgres PGCLUSTER&#x3D;&quot;9.6&#x2F;main&quot; pg_dump -v -Fc productiondbname -f &#x2F;tmp&#x2F;production20180503.dump</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Create a new database</span><br><span class="line">sudo -u postgres psql -c &quot;CREATE DATABASE production20180503 OWNER &#x3D; postgres TABLESPACE pg_default;&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Restore</span><br><span class="line">sudo -u postgres pg_restore --dbname &quot;production20180503&quot; --verbose &#x2F;tmp&#x2F;production20180503.dump</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://suite.opengeo.org/docs/latest/dataadmin/pgGettingStarted/firstconnect.html">http://suite.opengeo.org/docs/latest/dataadmin/pgGettingStarted/firstconnect.html</a></li><li><a href="https://www.postgresql.org/docs/9.1/static/runtime-config-logging.html">https://www.postgresql.org/docs/9.1/static/runtime-config-logging.html</a></li><li><a href="https://www.cisco.com/c/en/us/about/press/internet-protocol-journal/back-issues/table-contents-12/ip-addresses.html">https://www.cisco.com/c/en/us/about/press/internet-protocol-journal/back-issues/table-contents-12/ip-addresses.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLog</title>
      <link href="2018/03/nlog/"/>
      <url>2018/03/nlog/</url>
      
        <content type="html"><![CDATA[<p>Creates and manages instances of <a href="https://nlog-project.org/documentation/v4.3.0/html/T_NLog_Logger.htm">Logger</a> objects.</p><p>Install from nuget: <code>NLog 4.7.0</code></p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol><li>Create <code>NLog.config</code> with default template data</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autoReload</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">throwExceptions</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogLevel</span>=<span class="string">&quot;Off&quot;</span> <span class="attr">internalLogFile</span>=<span class="string">&quot;c:\temp\nlog-internal.log&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional, add some variables</span></span><br><span class="line"><span class="comment">  https://github.com/nlog/NLog/wiki/Configuration-file#variables</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">&quot;myvar&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myvalue&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  See https://github.com/nlog/nlog/wiki/Configuration-file</span></span><br><span class="line"><span class="comment">  for information on customizing logging rules and outputs.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    add your targets here</span></span><br><span class="line"><span class="comment">    See https://github.com/nlog/NLog/wiki/Targets for possible targets.</span></span><br><span class="line"><span class="comment">    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Write events to a file with the date in the filename.</span></span><br><span class="line"><span class="comment">    &lt;target xsi:type=&quot;File&quot; name=&quot;f&quot; fileName=&quot;$&#123;basedir&#125;/logs/$&#123;shortdate&#125;.log&quot;</span></span><br><span class="line"><span class="comment">            layout=&quot;$&#123;longdate&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;message&#125;&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- add your logging rules here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to &quot;f&quot;</span></span><br><span class="line"><span class="comment">    &lt;logger name=&quot;*&quot; minlevel=&quot;Debug&quot; writeTo=&quot;f&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This came from: </p><ul><li><a href="https://raw.githubusercontent.com/NLog/NLog/dev/src/NuGet/NLog.Config/content/NLog.config">https://raw.githubusercontent.com/NLog/NLog/dev/src/NuGet/NLog.Config/content/NLog.config</a></li></ul><ol start="2"><li>Set the file to always copy</li></ol><p><img src="/d/nlog/always-copy.jpg" alt="Always Copy"></p><ol start="3"><li>Configure the file</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;logfile&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">archiveNumbering</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">archiveEvery</span>=<span class="string">&quot;Day&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bufferSize</span>=<span class="string">&quot;102400&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fileName</span>=<span class="string">&quot;appname.log&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;logfile&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Example-use"><a href="#Example-use" class="headerlink" title="Example use"></a>Example use</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = NLog.LogManager.GetCurrentClassLogger();</span><br><span class="line"></span><br><span class="line">logger.Debug(<span class="string">&quot;Some debug&quot;</span>);</span><br><span class="line">logger.Debug(<span class="string">&quot;Some other debug&quot;</span>); </span><br><span class="line">logger.Info(<span class="string">&quot;Some info.&quot;</span>);</span><br><span class="line"></span><br><span class="line">~ <span class="keyword">this</span> will then create `appname.log` <span class="keyword">in</span> your executing bin directory.</span><br></pre></td></tr></table></figure><h3 id="Configure-for-Dependency-Injection"><a href="#Configure-for-Dependency-Injection" class="headerlink" title="Configure for Dependency Injection"></a>Configure for Dependency Injection</h3><p>Install from nuget: <code>NLog.Web.AspNetCore 4.9.2</code></p><ol><li>Update <code>Program.cs</code></li></ol><p>BEFORE</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameUI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">                .UseStartup&lt;Startup&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AFTER</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> NLog.Web;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameUI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// NLog: setup the logger first to catch all errors</span></span><br><span class="line">            <span class="keyword">var</span> logger = NLog.Web.NLogBuilder.ConfigureNLog(<span class="string">&quot;nlog.config&quot;</span>).GetCurrentClassLogger();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                logger.Debug(<span class="string">&quot;init main&quot;</span>);</span><br><span class="line">                CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//NLog: catch setup errors</span></span><br><span class="line">                logger.Error(ex, <span class="string">&quot;Stopped program because of exception&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)</span></span><br><span class="line">                NLog.LogManager.Shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> WebHost.CreateDefaultBuilder(args)</span><br><span class="line">            .UseStartup&lt;Startup&gt;()</span><br><span class="line">            .ConfigureLogging(logging =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                logging.ClearProviders();</span><br><span class="line">                logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);</span><br><span class="line">            &#125;)</span><br><span class="line">            .UseNLog();  <span class="comment">// NLog: setup NLog for Dependency injection</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Configure appsettings.json</li></ol><p>If you are debugging locally make the changes in <code>appsettings.Development.json</code></p><blockquote><p>The Logging configuration specified in <code>appsettings.json</code> overrides any call to <code>SetMinimumLevel</code>. So either remove <code>&quot;Default&quot;:</code> or adjust it correctly to your needs.     - github.com/NLog</p></blockquote><p>BEFORE</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Default&quot;</span>: <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AFTER</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Default&quot;</span>: <span class="string">&quot;Trace&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Microsoft&quot;</span>: <span class="string">&quot;Information&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;           </span><br></pre></td></tr></table></figure><ol start="3"><li>Inject into your constructor</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerMoveHard</span> : <span class="title">IComputerMove</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ComputerMoveHard&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerMoveHard</span>(<span class="params">ILogger&lt;ComputerMoveHard&gt; logger</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SetPosition</span>(<span class="params">...</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _logger.LogTrace(<span class="string">&quot;This is LogTrace&quot;</span>);</span><br><span class="line">        _logger.LogDebug(<span class="string">&quot;This is LogDebug&quot;</span>);</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;This is LogInformation&quot;</span>);</span><br><span class="line">        _logger.LogWarning(<span class="string">&quot;This is LogWarning&quot;</span>);</span><br><span class="line">        _logger.LogError(<span class="string">&quot;This is LogError&quot;</span>);</span><br><span class="line">        _logger.LogCritical(<span class="string">&quot;This is LogCritical&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-2">https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-2</a></li></ul><h3 id="Log-Levels"><a href="#Log-Levels" class="headerlink" title="Log Levels"></a>Log Levels</h3><p>These levels work from minimum (Trace) to maximum (Critical), so if you set your level to <code>Information</code> you will not get logs for <code>Trace</code> and <code>Debug</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Trace - Very detailed log messages, potentially of a high frequency and volume</span><br><span class="line">Debug - Less detailed and&#x2F;or less frequent debugging messages</span><br><span class="line">Information - Informational messages</span><br><span class="line">Warning - Warnings which don&#39;t appear to the user of the application</span><br><span class="line">Error - Error messages</span><br><span class="line">Critical - Fatal error messages. After a fatal error, the application usually terminates.</span><br><span class="line">None - No logging</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.codeproject.com/Articles/10631/Introduction-to-NLog">https://www.codeproject.com/Articles/10631/Introduction-to-NLog</a></li></ul><h3 id="Logging-To-Different-Files"><a href="#Logging-To-Different-Files" class="headerlink" title="Logging To Different Files"></a>Logging To Different Files</h3><p>You can specify logging to files by class and wildcard, super useful for debugging code flows. For the below I needed only logs for <code>moverules</code> from the name space <code>GameEngine.Services.ComputerMove.MoveRules.*</code></p><p>So for the below I would include <code>_logger.LogTrace(&quot;This is LogTrace&quot;);</code> in the code for the <strong>MoveRules</strong> classes and this data will go into <code>moverules.log</code> </p><p>Note that appsettings needs to then be set to <code>Trace</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;moverules&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveNumbering</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveEvery</span>=<span class="string">&quot;Day&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bufferSize</span>=<span class="string">&quot;102400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fileName</span>=<span class="string">&quot;moverules.log&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;tictactoe&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveNumbering</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveEvery</span>=<span class="string">&quot;Day&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bufferSize</span>=<span class="string">&quot;102400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fileName</span>=<span class="string">&quot;tictactoe.log&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;GameEngine.Services.ComputerMove.MoveRules.*&quot;</span> <span class="attr">level</span>=<span class="string">&quot;Trace&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;moverules&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Debug&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;tictactoe&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/nlog/nlog/wiki/NLog-Install">https://github.com/nlog/nlog/wiki/NLog-Install</a></li><li><a href="https://nlog-project.org/documentation/v4.3.0/html/T_NLog_LogManager.htm">https://nlog-project.org/documentation/v4.3.0/html/T_NLog_LogManager.htm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simple text logging for a C# console application</title>
      <link href="2018/03/simple-text-logging-for-a-c-console-application/"/>
      <url>2018/03/simple-text-logging-for-a-c-console-application/</url>
      
        <content type="html"><![CDATA[<p>Simple logging to text file into a directory called ‘logs’ inside the directory of the executing image.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private static object objLock &#x3D; new object();</span><br><span class="line"></span><br><span class="line">public static void LogInfo(string d)</span><br><span class="line">&#123;</span><br><span class="line">   var sb &#x3D; new StringBuilder();</span><br><span class="line">   sb.AppendFormat(&quot;INFO : &#123;0&#125; &#123;1&#125;&quot;, DateTime.Now.ToString(&quot;dd&#x2F;MM&#x2F;yyyy hh:mm:ss&quot;), Environment.NewLine);</span><br><span class="line">   sb.Append(d);</span><br><span class="line">   Log(sb.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void LogError(Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">   var sb &#x3D; new StringBuilder();</span><br><span class="line">   sb.AppendFormat(&quot;EXCEPTION : &#123;0&#125; &#123;1&#125;&quot;, DateTime.Now.ToString(&quot;dd&#x2F;MM&#x2F;yyyy hh:mm:ss&quot;), Environment.NewLine);</span><br><span class="line">   sb.AppendFormat(&quot;&#123;0&#125;&#123;1&#125;&quot;, ex.Message, Environment.NewLine);</span><br><span class="line">   sb.AppendFormat(&quot;&#123;0&#125;&#123;1&#125;&quot;, ex.StackTrace, Environment.NewLine);</span><br><span class="line">   Log(sb.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Log(string d)</span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine(d);</span><br><span class="line">   var _logsDir &#x3D; &quot;logs&quot;;</span><br><span class="line"></span><br><span class="line">   if (!Directory.Exists(_logsDir))</span><br><span class="line">      Directory.CreateDirectory(_logsDir);</span><br><span class="line"></span><br><span class="line">   lock (objLock)</span><br><span class="line">   &#123;</span><br><span class="line">      var path &#x3D; Path.Combine(&quot;logs&quot;, LogFileName());</span><br><span class="line">      using (StreamWriter sw &#x3D; new StreamWriter(path, true))</span><br><span class="line">      &#123;</span><br><span class="line">         sw.WriteLine(d);</span><br><span class="line">         sw.WriteLine(&quot; &quot;);</span><br><span class="line">         sw.Close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static string LogFileName()</span><br><span class="line">&#123;</span><br><span class="line">   return DateTime.Now.ToString(&quot;ddMMyyyy&quot;) + &quot;.log&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Virtual Box</title>
      <link href="2018/03/virtual-box/"/>
      <url>2018/03/virtual-box/</url>
      
        <content type="html"><![CDATA[<p><em>VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use.</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/SHErR5NBqsc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress</title>
      <link href="2018/03/wordpress/"/>
      <url>2018/03/wordpress/</url>
      
        <content type="html"><![CDATA[<p>To display and debug error messages on the remote server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;wp-config.php</span><br><span class="line">define(&#39;WP_DEBUG&#39;, true);</span><br></pre></td></tr></table></figure><p>To disable a plugin that is misbehaving simply rename the folder it lives in</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;public_html&#x2F;wp-content&#x2F;plugins&#x2F;contact-form-7-backup</span><br></pre></td></tr></table></figure><h3 id="Sweet-Plugins"><a href="#Sweet-Plugins" class="headerlink" title="Sweet Plugins"></a>Sweet Plugins</h3><ul><li> WP Content Copy Protection &amp; No Right Click </li><li> Contact Form 7 </li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li> <a href="https://www.wpbeginner.com/wp-tutorials/how-to-set-up-wordpress-error-logs-in-wp-config/">https://www.wpbeginner.com/wp-tutorials/how-to-set-up-wordpress-error-logs-in-wp-config/</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillars Of Object Oriented Programming (OOP)</title>
      <link href="2018/03/pillars-of-object-oriented-programming-oop/"/>
      <url>2018/03/pillars-of-object-oriented-programming-oop/</url>
      
        <content type="html"><![CDATA[<ul><li>Encapsulation</li><li>Inheritance</li><li>Polymorphism</li><li>Abstraction</li></ul><p>Everything in life that is structured will follow a blue print or pattern that is based on proven design methods whether they are concept based or concrete. That is to say the result is tangible.</p><p>Software development regardless of language too has patterns and principles which if effectively applied to your solutions will result in code that is maintainable, testable and ultimately flexible enough to change as scope or business requirements evolve.</p><p>Always remember that software development is an iterative process, your job is never done.</p><p>These days we as software developers are spoilt with access to information on the internet detailing different design patterns and principles. It would be very presumptuous for any developer to assume they understand every pattern or principle however there are some foundational points that I personally feel every developer should be au fait with or at very least have a functional understanding thereof.</p><p><strong>Object-oriented programming</strong> (<strong>OOP</strong>) is a programming language model organized around objects rather than “actions” and data rather than logic.</p><h3 id="Pillars-of-OOP"><a href="#Pillars-of-OOP" class="headerlink" title="Pillars of OOP"></a>Pillars of OOP</h3><p>In all literature I have seen surrounding object orientated programming these 3 points always come up and are the foundation or “Pillars” of Object Orientated Programming. I share the personal view of <a href="https://app.pluralsight.com/profile/author/scott-allen">Scott Allen</a> that encapsulation is the primary pillar as without encapsulation we could never build applications on a large scale.</p><p><a href="https://app.pluralsight.com/profile/author/scott-allen">https://app.pluralsight.com/profile/author/scott-allen</a></p><p><em>Encapsulation is the primary pillar of object-oriented programming, and most classes and training tend to overemphasize inheritance and polymorphism as being more useful than they really in day to day programming. ~ Scott Allen</em></p><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>Encapsulation is simply data hiding where by your classes encapsulate their internal state and complexity, this means when building your solution you only need to know about your current cognitive load as the encapsulated state will look after itself. The only access to the state (the data) would be though well-defined functions on the class or property setters. The constructor is responsible for setting the property values on instantiation so they are in a useful state when you go looking for them.</p><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Class inheritance allows developers to create new classes that reuse behaviour (functions and properties) from their base classes. The class that is inheriting from a base class (or classes) is called a derived class.</p><p>Inheritance leverages re-use of existing code classes, this results in code that is easier to maintain and faster to develop.</p><ul><li><a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Note that it is however better to choose composition over inheritance</a>.</li></ul><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>If the word is broken in half; “Poly” – means many and “Morphism” – means to change. So “Polymorphism” means having many forms. In OOP polymorphism can be expressed as ‘One interface, multiple functions.’</p><h3 id="Building-on-the-Pillars"><a href="#Building-on-the-Pillars" class="headerlink" title="Building on the Pillars"></a>Building on the Pillars</h3><p>The following are key points that build on our Pillars of OOP and are of critical importance to produce solutions that are of high quality.</p><h4 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h4><p>Abstraction is not a pattern but rather a principle and many developers don’t consider abstraction a pillar however this is opinion based. I am of the opinion that it’s a pillar as classes with high cohesion are far simpler to test and maintain.</p><p><em>In computer programming, cohesion refers to the degree to which the elements inside a module belong together.</em></p><p>Abstraction in terms of class files is to simplify them to have a high level of cohesion. Simply put this means the properties and methods directly relate to the class you are building.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.c-sharpcorner.com/UploadFile/e6a07d/pillars-of-oop/">http://www.c-sharpcorner.com/UploadFile/e6a07d/pillars-of-oop/</a></li><li><a href="https://www.quora.com/What-are-the-4-pillars-of-OOPs">https://www.quora.com/What-are-the-4-pillars-of-OOPs</a></li><li><a href="http://mrbool.com/the-4-pillars-of-object-oriented-programming-in-java/33900">http://mrbool.com/the-4-pillars-of-object-oriented-programming-in-java/33900</a></li><li><a href="https://www.safaribooksonline.com/library/view/programming-visual-basic/0596004389/ch04s04.html">https://www.safaribooksonline.com/library/view/programming-visual-basic/0596004389/ch04s04.html</a></li><li><a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)">https://en.wikipedia.org/wiki/Cohesion_(computer_science)</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chocolatey</title>
      <link href="2018/03/chocolatey/"/>
      <url>2018/03/chocolatey/</url>
      
        <content type="html"><![CDATA[<p>The <strong>package manager</strong> for Windows.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://chocolatey.org/">https://chocolatey.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netstat</title>
      <link href="2018/03/netstat/"/>
      <url>2018/03/netstat/</url>
      
        <content type="html"><![CDATA[<p>If you have heaps of things running locally in docker containers and other development realted things you may run into port clashes, you can use <code>netstat</code> which should be installed with Windows to identify used ports.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -a -n</span><br></pre></td></tr></table></figure><p>What do those switches mean?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-aDisplays all active TCP connections and the TCP and UDP ports on which the computer is listening.</span><br><span class="line">-nDisplays active TCP connections, however, addresses and port numbers are expressed numerically and no attempt is made to determine names.</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoapUI and ASP.NET Web API</title>
      <link href="2018/02/soapui-aspnet-web-api/"/>
      <url>2018/02/soapui-aspnet-web-api/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/soapui-aspnet-web-api/soapui-aspnet-web-api-header.jpg" alt="SoapUI Rocks!"></p><p>In today’s software driven world life literately runs on code, from our smart phone alarm in the morning, coffee machine set to brew at 6am, to the drive to work where your Korean car intelligently reminds you its due for a service. Software is all around us and its here to stay.</p><p>While the above examples don’t need to communicate to the outside world, the manufacturers certainly did and there are many instances where cross platform communication is needed. It is possible for your smart phone to talk to your coffee machine or in-fact your car.</p><p>This compatibility can be achieved is numerous ways with the most common being an Application Programming Interface (API). Today every provider and his dog has an API exposing their services to be consumed by vendors and customers.</p><blockquote><p><em>In computer programming, an application programming interface is a set of subroutine definitions, protocols, and tools for building application software.</em> - <a href="https://en.wikipedia.org/wiki/Application_programming_interface">Wikipedia</a></p></blockquote><p>In software development it is common to develop microservices that run independently of other services. Instead of exposing functionality in code though a well defined class constructor the functionality is shared with an API.</p><p>I’m fond of RESTful services that accept and respond to JSON requests as this means a scripting language like PHP can consume and use a .NET Web API service. As long as the JSON request is documented and the authentication challenge is passed they can talk nicely.</p><p>The problem with the above scenario is software is not always segregated into LIVE, UAT, QA or stand box environments. A vendor could either only have a LIVE environment or in some cases the API is still being built. In this case the developer building the software to consume the API will only need to know a few things:</p><ol><li>The method signature to call, with Web API this can be as simple as</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain.com/api/saveorder</span><br></pre></td></tr></table></figure><ol start="2"><li>The class structure to be represented as JSON notation:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;Id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;ProductId&quot;</span>: <span class="number">91</span>,</span><br><span class="line"><span class="attr">&quot;ClientId&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;OrderCount&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;Id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ProductId&quot;</span>: <span class="number">103</span>,</span><br><span class="line"><span class="attr">&quot;ClientId&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;OrderCount&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>This is simply a list of orders:</p><p>clientId 1 is placing an order for productId 91 (1 of) and productId 103 (2 of)</p><p>I created the above JSON online with <a href="https://codebeautify.org/jsonviewer">codebeautify.org</a></p><p>This service is awesome as it allowed me to generate a sample JSON request, update it based on my order parameters and verify the JSON is valid.</p><ol start="3"><li>The expected response:</li></ol><p>This can be the same list above with the id parameter now populated or simply a order list of id’s.</p><p>As long as the expected response is known (JSON in the body) and the response code is standard (200 ok, 404 not found, 500 error ect) the developer is good to go.</p><h3 id="Mock-API-with-SoapUI"><a href="#Mock-API-with-SoapUI" class="headerlink" title="Mock API with SoapUI"></a>Mock API with SoapUI</h3><p>If the API is not ready for testing or is not available due to other constraints the developer can create a mock API using software such as SoapUI. This is a great tool that can be used to test existing APIs or to simply Mock the API response on the developers local machine. There is a tutorial online at <a href="https://www.soapui.org/soap-mocking/getting-started.html#2-Creating-a-MockService">www.soapui.org</a></p><p>The steps using my ‘save order’ example are:</p><ol><li>Create a new dummy REST request to ‘domain.com/api/saveorder’</li></ol><p><img src="/d/soapui-aspnet-web-api/dummy-rest-request.jpg" alt="dummy REST request"></p><ol start="2"><li>If you run this request you will get 404 as ‘api/saveorder’ doesn’t exist but I see some clown is squatting on ‘domain.com’</li></ol><p>If it was a valid API the response would be shown. If you know the ‘LIVE to be’ details of your API you should rather use them as you can then use this test profile later.</p><p><img src="/d/soapui-aspnet-web-api/live-to-be-details.jpg" alt="&#39;LIVE to be&#39; details of your API"></p><ol start="3"><li>Now to mock the service to response with the JSON example simply right click and select ‘Generate REST Mock Service’ and give it a useful name such as </li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;api/saveorder&#x27;</span><br></pre></td></tr></table></figure><p><img src="/d/soapui-aspnet-web-api/generate-rest-mock-service.jpg" alt="Generate REST Mock Service"></p><ol start="4"><li>The mock service will start right away on an available port - my test used 8089</li></ol><p><img src="/d/soapui-aspnet-web-api/mock-service-running.jpg" alt="The mock service"></p><ol start="5"><li>You can then stop the service and update several of the response property’s such as the HTTP status code, add header values and the body content type and values.</li></ol><p><img src="/d/soapui-aspnet-web-api/update-response-propertys.jpg" alt="update response property&#39;s"></p><ol start="6"><li>You can now consume this service at <em><a href="http://localhost/api/saveorder">http://localhost/api/saveorder</a></em> using SoapUI</li></ol><p><img src="/d/soapui-aspnet-web-api/consume-with-soapui.jpg" alt="Consume with SoapUI"></p><ol start="7"><li>You can also consume this from code, for simplicity all my applications are grouped under the solution ‘WebApiDemo’</li></ol><p><img src="/d/soapui-aspnet-web-api/consume-with-code.jpg" alt="Consume with Code"></p><p>a. Simply run ‘WebAPI’ from the IDE, note the port ~ example <a href="http://localhost:53610/">http://localhost:53610/</a></p><p>b. Stop the application and update ConsoleApplication.Program API value with the port (remember to re-build)</p><p><img src="/d/soapui-aspnet-web-api/code-port-update.jpg" alt="Code port update"></p><p>c. Run ‘WebAPI’ again from the IDE</p><p>d. Run manually run ‘<em>\WebApiDemo\ConsoleApplication\bin\Debug\ConsoleApplication.exe</em>‘</p><p><img src="/d/soapui-aspnet-web-api/console-app-reads-api.jpg" alt="Console App Reads API"></p><h3 id="Web-API-Solution"><a href="#Web-API-Solution" class="headerlink" title="Web API Solution"></a><strong>Web API Solution</strong></h3><p>The above solution is made up of the following projects and the source code is <a href="https://github.com/charleyza/WebApiDemo">available from GitHub</a></p><h4 id="ConsoleApplication"><a href="#ConsoleApplication" class="headerlink" title="ConsoleApplication"></a>ConsoleApplication</h4><p>This is simply to demonstrate how to call the API from code. Changing the value of ‘var api’ switches between SoapUI and the WebAPI project.</p><h4 id="SharedModels"><a href="#SharedModels" class="headerlink" title="SharedModels"></a>SharedModels</h4><p>Still on the fence with shared data models! The data model is ‘OrderModel’ which has some dummy propertys Id, ProductId, ClientId and OrderCount.</p><h4 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h4><p>This is a .NET Web API project that has a ‘SaveOrderController’ which maps to ‘/api/saveorder/‘</p><p>The demo simply takes the posted ‘List<OrderModel> obj’ and updates the Id value to simulate a database persist.</p><p>It has the ‘ApiKeyValidationAttribute’ which validates against apiPassKey which was passed in the header of the request.</p><p>If the validation/challange failes the API will respond with HttpStatusCode.BadRequest</p><h4 id="WebAPI-Tests"><a href="#WebAPI-Tests" class="headerlink" title="WebAPI.Tests"></a>WebAPI.Tests</h4><p>Simple unit test project to test the public ‘Post’ method on the WebAPI controller</p><p><img src="/d/soapui-aspnet-web-api/integration-tests.jpg" alt="Integration tests"></p><h3 id="Other-API-Testing-tools"><a href="#Other-API-Testing-tools" class="headerlink" title="Other API Testing tools"></a>Other API Testing tools</h3><p>Another API development environment tool that works really well and has mocking abilities is POSTMAN - <a href="https://www.getpostman.com/postman">www.getpostman.com/postman</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/WebApiDemo">https://github.com/carlpaton/WebApiDemo</a></li><li><a href="https://en.wikipedia.org/wiki/Application_programming_interface">https://en.wikipedia.org/wiki/Application_programming_interface</a></li><li><a href="https://www.soapui.org/soap-mocking/getting-started.html#2-Creating-a-MockService">https://www.soapui.org/soap-mocking/getting-started.html#2-Creating-a-MockService</a></li><li><a href="https://codebeautify.org/jsonviewer">https://codebeautify.org/jsonviewer</a></li><li><a href="https://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx">https://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> web api </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Excel with EPPlus (.NET library)</title>
      <link href="2018/01/reading-excel-with-epplus-dot-net-library/"/>
      <url>2018/01/reading-excel-with-epplus-dot-net-library/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/reading-excel-with-epplus-dot-net-library/epplus.jpg" alt="EPPlus"></p><p>Excel documents are popular in all forms of business as they can be used to manage and calculate just about every kind of business process. They are especially useful for data manipulation where the business domain expert can supply data in a state useful to the relevant developer - who we hope is an expert!</p><p>Manually capturing data is often cheaper than having a developer build import classes however it does remove a lot of the human error risk. Once an import procedure is well defined and tested it can be re-used so it depends on the budget and how complex the spreadsheets are.</p><p>My ‘<a href="https://github.com/carlpaton/ExcelDocumentDemo">ExcelDocumentDemo</a>‘ project is a simple console application that imports excel documents and maps them to sample class called <code>ExcelDataModel</code></p><h3 id="EPPlus-Excel-2007-2010"><a href="#EPPlus-Excel-2007-2010" class="headerlink" title="EPPlus (Excel 2007/2010+)"></a>EPPlus (Excel 2007/2010+)</h3><p>I am a massive fan of EPPlus as its very easy to manipulate .xlsx documents. </p><p>This is a great article on <a href="https://www.codeproject.com/Articles/680421/Create-Read-Edit-Advance-Excel-Report-in">codeproject.com by Debopam Pal</a> explaining how to get up and running with EPP.</p><p>My class ‘ReadXLSX’ is based on such articles and simply maps the excel data to a List of ‘ExcelDataModel’</p><h3 id="Microsoft-Office-Interop-Excel-legacy-office-97-2003"><a href="#Microsoft-Office-Interop-Excel-legacy-office-97-2003" class="headerlink" title="Microsoft.Office.Interop.Excel (legacy office 97/2003)"></a>Microsoft.Office.Interop.Excel (legacy office 97/2003)</h3><p>My class ‘ReadXLS’ is for legacy offce 97/2003 support AND OR stubborn users that remain fond of these older .xls excel documents, these should be migrated over to the newer .xlsx format.</p><p>Although older .xls files are widely depricated its not a bad idea to know how to at very least read from them. My class ReadXLS maps the excel data to a List of ‘ExcelDataModel’</p><h3 id="Example-Results"><a href="#Example-Results" class="headerlink" title="Example Results"></a>Example Results</h3><p>Both .xlsx and .xls sample files are included in my solution:</p><ul><li><a href="https://github.com/carlpaton/ExcelDocumentDemo/tree/master/ExcelDocumentDemo/Data">https://github.com/carlpaton/ExcelDocumentDemo/tree/master/ExcelDocumentDemo/Data</a></li></ul><p>This is the spreadsheet data viewed in excel</p><p><img src="/d/reading-excel-with-epplus-dot-net-library/excel-document.jpg" alt="Excel Document"></p><p>Once mapped this is the data as seen from Visual Studio</p><p><img src="/d/reading-excel-with-epplus-dot-net-library/excel-data.jpg" alt="Excel Data"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.codeproject.com/Articles/680421/Create-Read-Edit-Advance-Excel-2007-2010-Report-in">https://www.codeproject.com/Articles/680421/Create-Read-Edit-Advance-Excel-2007-2010-Report-in</a></li><li><a href="http://csharp.net-informations.com/excel/csharp-read-excel.htm">http://csharp.net-informations.com/excel/csharp-read-excel.htm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> .net library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Serializer</title>
      <link href="2017/12/binary-serializer/"/>
      <url>2017/12/binary-serializer/</url>
      
        <content type="html"><![CDATA[<p>Other <a href="/2017/12/serialization/">Serialization technologies</a> include <strong>XML</strong> and <strong>JSON</strong> Serialization.</p><h3 id="System-Runtime-Serialization-Formatters-Binary"><a href="#System-Runtime-Serialization-Formatters-Binary" class="headerlink" title="System.Runtime.Serialization.Formatters.Binary"></a>System.Runtime.Serialization.Formatters.Binary</h3><p>The <code>stream</code> should be wrapped in a <strong>using</strong> statement for production ready code.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="keyword">var</span> formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">formatter.Serialize(stream, someObject);</span><br><span class="line">stream.Seek(<span class="number">0</span>, SeekOrigin.Begin); <span class="comment">// Rewind the stream with offset of 0 from the begining</span></span><br><span class="line">stream.Close();</span><br></pre></td></tr></table></figure><h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>The object being serialized needs to have the <code>[Serializable]</code> attribute / annotation.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]">https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net">https://github.com/carlpaton/Boilerplate/tree/master/.Net</a> Core Console Application/Serialization)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/basic-serialization">https://docs.microsoft.com/en-us/dotnet/standard/serialization/basic-serialization</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/binary-serialization">https://docs.microsoft.com/en-us/dotnet/standard/serialization/binary-serialization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Calculate Percentage</title>
      <link href="2017/12/c-sharp-calc-percentage/"/>
      <url>2017/12/c-sharp-calc-percentage/</url>
      
        <content type="html"><![CDATA[<p>Simple percentage calculation as an <a href="/2018/04/dependency-inversion-principle-dip/">injectable</a> service. </p><p>Yeah I got tired of <a href="https://www.urbandictionary.com/define.php?term=google%27ling">Google’ling</a> which number number you divide by each time I needed to do this in code :)</p><p>Simply put this is: <code>(100 * scoreAchieved) / outOf</code> which is generally <code>(100 * small number) / big number</code>.</p><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Foo.Common.Maths.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPercentageCalculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Calculate the score achieved as a percentage out of the given value `outOf`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;scoreAchieved&quot;&gt;</span>Example: 73<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;outOf&quot;&gt;</span>Example: 100<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>73.00 as the default decimal spacing is .00 (2 digits)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Calculate the score achieved as a percentage out of the given value `outOf`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;scoreAchieved&quot;&gt;</span>Example: 73<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;outOf&quot;&gt;</span>Example: 100<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;digits&quot;&gt;</span>Example: 3<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>73.000<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf, <span class="built_in">int</span> digits</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Foo.Common.Maths</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PercentageCalculator</span> : <span class="title">IPercentageCalculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> DIGITS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scoreAchieved == <span class="number">0</span> || outOf == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetPercentage(scoreAchieved, outOf, DIGITS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf, <span class="built_in">int</span> digits</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scoreAchieved == <span class="number">0</span> || outOf == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Math.Round((<span class="built_in">double</span>)(<span class="number">100</span> * scoreAchieved) / outOf, digits);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://helpingwithmath.com/calculating-percentages/">https://helpingwithmath.com/calculating-percentages/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serialization</title>
      <link href="2017/12/serialization/"/>
      <url>2017/12/serialization/</url>
      
        <content type="html"><![CDATA[<p>Serialization is the process of converting the state of an object into a form that can be <strong>persisted</strong> or <strong>transported</strong>. The complement of serialization is <strong>deserialization</strong>, which converts a stream into an object. Together, these processes allow data to be stored and transferred.</p><h3 id="Serialization-technologies"><a href="#Serialization-technologies" class="headerlink" title="Serialization technologies"></a>Serialization technologies</h3><ul><li><a href="/2017/12/binary-serializer/">Binary</a></li><li><a href="/2020/01/json-serializers/">JSON</a></li><li><a href="/2017/12/xml-serializer/">XML &amp; SOAP</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/">https://docs.microsoft.com/en-us/dotnet/standard/serialization/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML Serializer</title>
      <link href="2017/12/xml-serializer/"/>
      <url>2017/12/xml-serializer/</url>
      
        <content type="html"><![CDATA[<p>Other <a href="/2017/12/serialization/">Serialization technologies</a> include <strong>Binary</strong> and <strong>JSON</strong> Serialization.</p><h3 id="System-Xml-Serialization"><a href="#System-Xml-Serialization" class="headerlink" title="System.Xml.Serialization"></a>System.Xml.Serialization</h3><p>The <code>stream</code> should be wrapped in a <strong>using</strong> statement for production ready code.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="keyword">var</span> xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(someObject));</span><br><span class="line">xmlSerializer.Serialize(stream, self);</span><br><span class="line">stream.Position = <span class="number">0</span>; <span class="comment">// same as `stream.Seek(0, SeekOrigin.Begin);`</span></span><br><span class="line">stream.Close();</span><br></pre></td></tr></table></figure><h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>The object being serialized needs to have a <strong>parameterless</strong> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors">constructor</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123; </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]">https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net">https://github.com/carlpaton/Boilerplate/tree/master/.Net</a> Core Console Application/Serialization)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer">https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-and-soap-serialization">https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-and-soap-serialization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Event Logs</title>
      <link href="2017/11/windows-event-logs/"/>
      <url>2017/11/windows-event-logs/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/windows-event-logs/windows-event-logs.jpg" alt="Windows Event Logs"></p><p>Plain text files are most commonly used to log software application events such as exceptions, warnings, information or verbose data to try identify a specific problem. Although using text files can have a performance impact there are tools optimized to handle this kind of logging such as <a href="https://logging.apache.org/log4net/">log4net</a> or <a href="https://serilog.net/">serilog</a>. These work very well and many developers are fans of them.</p><ul><li><a href="https://www.codeproject.com/Articles/140911/log-net-Tutorial">This is a great read if you are interested in learning more about log4net</a>.</li></ul><p>I’m a fan of windows event logs as they are optimized by the operating system and I can view logs in the same place. That said, tools like <a href="https://www.elastic.co/products/logstash/">logstash</a> can parse and transform a variety of logs such as windows event logs or text logs to be viewed in once place, so it just depends on your organizations setup and maturity in terms of logging infrastructure.</p><blockquote><p><em>KIBANA is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster.</em></p></blockquote><p>Developers generally should not have access to production servers but the operations team can extract and provide the exported windows event viewer logs (.evtx files)</p><p>It is possible to open these logs with the built in windows “Event Viewer” but the ‘Find…’ function is in my opinion not very helpful when we are trying to identify a pattern and/or display records based on custom criteria.</p><p>I like to import the logs into a database and then run SQL querys to identify patterns or specific logs that are of importance to my problem domain. My ‘EventViewer’ solution was written in C# .NET and is made up of the following projects: EvtxImporter, LogViewWebApplication, Common, Repository, Sharedmodels and Tests.</p><ul><li><a href="https://github.com/carlpaton/EventViewer">The source code for my application can be found here.</a></li></ul><h3 id="EvtxImporter"><a href="#EvtxImporter" class="headerlink" title="EvtxImporter"></a>EvtxImporter</h3><p>This is a console application that simply reads the .evtx file to memory and bulk inserts the data to our database. The data is not <a href="http://www.studytonight.com/dbms/database-normalization.php">normalized </a>and really should be however for simplicity I’ve imported it ‘as is’ so the SQL columns matches the columns in the .evtx file and is mapped to <code>SharedModels.EventLogModel</code></p><p>The high level process flow is:</p><ol><li>Check file location ‘LogPath’ for ‘*.evtx’ files</li><li>Check if the files have been processed by looking at a watermark file <code>hamster.json</code>, this is stored in the location WaterMarkFile’</li><li>Read the file and map it to <code>SharedModels.EventLogModel</code></li><li>There was no count property so I manually counted the file records by looping twice using a <a href="/2020/04/c-sharp-delegates/">delegate </a>to either call my ‘Count’ or ‘Append’ methods</li><li>The data is then bulk inserted</li><li>The watermark is then updated</li></ol><h3 id="LogViewWebApplication"><a href="#LogViewWebApplication" class="headerlink" title="LogViewWebApplication"></a>LogViewWebApplication</h3><p>This is a simple MVC Web Application to read the log files, this could be used by your help desk as they will either not know how to construct SQL querys or care about them.</p><h3 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h3><p>This is a class library for common classes.</p><p>CategoryModel can be used to identify software events using the built in .NET ‘EventLog.WriteEntry’ method.</p><p>Short range -32,768 to 32,767 can be used to identify logs from parts of the application. This can be anything from the users Id to values representing classes withing the application.</p><p>In my class I have a ‘Categorys’ enum with values UserLogin=1, DebtorsCapture, CreditorsCapture which I use in my ‘Tests’ project. They can be anything really.</p><p>The ‘EventLogger’ class is used to write to the windows event log.</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>This is a normal repository pattern class library with a PostgreSQL implementation, <a href="/2017/10/sllite-with-repository-pattern/">for more information on a repository pattern see this article</a>.</p><h3 id="SharedModels"><a href="#SharedModels" class="headerlink" title="SharedModels"></a>SharedModels</h3><p>Im on the fence with sharing data models as this can be messy but I guess as long as your data models (repository) and view models (mvc models) are seprated you will be ok.</p><p>The big advanage for my application was to share ‘EventLogModel’ between ‘EvtxImporter’ and ‘Repository’ as this model exactly represents the .evtx file which is read and persisted to the database.</p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>The general rule is every class you write needs a unit test - this is often not done for several reasons including time, business requirements/policys and simply overkill. My import tool as 2 test groups.</p><p>‘EventLoggerTests’ to create ‘dummy’ event logs to test with. This is not a true unit test but the ability to quickly run specifc classes and insert some test data was very useful.</p><p>‘ReadEvtxFileTests’ to test reading .evtx files.</p><p>Tests for the ‘Repository’ and ‘EvtxImporter.CheckFileLocation’ are still to come! \ :D /</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.tutorialspoint.com/csharp/csharp_delegates.htm">https://www.tutorialspoint.com/csharp/csharp_delegates.htm</a></li><li><a href="https://stackoverflow.com/questions/30809133/read-event-log-file-from-path">https://stackoverflow.com/questions/30809133/read-event-log-file-from-path</a></li><li><a href="https://stackoverflow.com/questions/609533/how-do-you-open-the-event-log-programatically">https://stackoverflow.com/questions/609533/how-do-you-open-the-event-log-programatically</a></li><li><a href="https://en.wikipedia.org/wiki/Kibana">https://en.wikipedia.org/wiki/Kibana</a></li><li><a href="https://logging.apache.org/log4net/">https://logging.apache.org/log4net/</a></li><li><a href="https://serilog.net/">https://serilog.net/</a></li><li><a href="http://www.studytonight.com/dbms/database-normalization.php">http://www.studytonight.com/dbms/database-normalization.php</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite with a Repository Pattern</title>
      <link href="2017/10/sqlite-with-repository-pattern/"/>
      <url>2017/10/sqlite-with-repository-pattern/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/sllite-with-repository-pattern/sllite-with-repository-pattern-header.jpg" alt="SQLite with a Repository Pattern"></p><p>For its size vs performance SQLite is perfect for mobile applications and simple standalone projects. It’s ideal for solutions that need to keep track of relatively small amounts of data and want to make use of a relational database.</p><ul><li><a href="https://www.nuget.org/packages/System.Data.SQLite/">The nuget package name is System.Data.SQLite</a></li></ul><blockquote><p><em>SQLite is an in-process library that implements a</em> <a href="https://www.sqlite.org/selfcontained.html">self-contained</a><em>,</em> <a href="https://www.sqlite.org/serverless.html">serverless</a><em>,</em> <a href="https://www.sqlite.org/zeroconf.html">zero-configuration</a><em>,</em> <a href="https://www.sqlite.org/transactional.html">transactional</a> <em>SQL database engine.</em> </p></blockquote><p>For the purpose of this article I will focus on my “Bunny App” which is an application that keeps track of Bunny Chows that my colleagues and I have enjoyed. It simply allows us to log the date and place we had a bunny and then rate the bunny with a simple “triple T” matrix being Temperature, Taste and Tomorrow…</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>In terms of the directory structures the most common sorting I have seen is to group classes by relevance or function within the business domain, this is a functional approach. That is to say anything to do with a user can be kept in a “Users” folder, anything to do with a financial account can be kept in a “debtors” or “creditors” folder. This is really open to preference so I’m pretty sure each developer will have their own idea on a “functional approach”.</p><p>Although setting up all these folders can be cumbersome its useful when new developers join. Maintenance is relatively low and simple providing you understand the business model.</p><p>As my Bunny App is very simple I have kept my folder structure to the bare minimum but still allowing for possible database migrations.</p><h3 id="Schema-Folder"><a href="#Schema-Folder" class="headerlink" title="Schema Folder"></a>Schema Folder</h3><p>This contains the schema of the database that our ORM (Object Relational Mapper) will map the database columns to. I am fan of Dapper for its speed and simplicity so have used this ORM in my Bunny.Repository project. The schema properties are generally represented by built in primitive types although none primitive such as DateTime are very common.</p><p><img src="/d/sllite-with-repository-pattern/schema-folder.jpg" alt="Schema folder"></p><h3 id="Interface-Folder"><a href="#Interface-Folder" class="headerlink" title="Interface Folder"></a>Interface Folder</h3><p>Each class file represents the interface (or contract) that repository must fulfill. Although <a href="https://en.wikipedia.org/wiki/Hungarian_notation">Hungarian Notation</a> has been widely deprecated I still prefix my class files with “I” as this is the way I was taught and although change is good, this is a last vested syntax I still enjoy.</p><p><img src="/d/sllite-with-repository-pattern/injterface-folder.jpg" alt="Schema folder"></p><h3 id="Implementation-Folder"><a href="#Implementation-Folder" class="headerlink" title="Implementation Folder"></a>Implementation Folder</h3><p>I like to group my implementations by database type, this is simply a sub folder within “Implementation” as the database name, in my example this is “SQLite” – there could be other folders such as “MySQL”, “PostgreSQL” or “MSSQL” to represent Microsoft SQL. The idea is that should Business decide to migrate to a new database your code is not heavily tied (or closely coupled) to that database. In the route of “Implementation” is IBaseContext.cs which caters for most of the database events:</p><ul><li>Open; Check the connection state and open it if its closed</li><li>Select; To return a single object</li><li>SelectList; to return a list of objects</li><li>Insert; to persist an object and return the new database auto Id</li><li>InsertBulk; to persist a list of data and return void</li><li>Update; to persist an update to the database, returns void</li><li>Delete; to delete a record from the database returns void</li><li>ExecuteNonQuery; I used this to drop, create and seed the database, generally I don’t use it for anything else or even include it in this interface. Its sometimes better to version your database with tools such as <a href="https://flywaydb.org/">flyway </a>or <a href="http://www.liquibase.org/">liquibase </a>but this depends on your business mandate for auditing and accountability.</li></ul><p>Then per database I have a ‘DBContext’ to cater for connection strings and database connections. In my example I have SQLiteContext.cs which implements system’s IDisposable and my custom IBaseContext.</p><p><img src="/d/sllite-with-repository-pattern/sql-lite-context.jpg" alt="SQL Lite Context"></p><p>This will then create BunnyDb.db in the given path, for the example above it will be in the application executing directory.</p><p><img src="/d/sllite-with-repository-pattern/bin-folder.jpg" alt="Bin Folder"></p><p>I like to then keep the repository methods the same as these base methods as this keeps things tidy and simple to understand.</p><p><img src="/d/sllite-with-repository-pattern/score-repository.jpg" alt="Score Repository"></p><p>It is a bit of extra work but I then manually remove the word “Implementation” from the repository’s namespace, ie: in the class file ‘UserRepository.cs’. This makes resolving the namespace simpler. Ie: <code>Bunny.Repository.Implementation.SQLite</code> is changed to <code>Bunny.Repository.SQLite</code></p><p><img src="/d/sllite-with-repository-pattern/sql-lite-new-old.jpg" alt="Namespace Fix"></p><h3 id="SQLite-Folder"><a href="#SQLite-Folder" class="headerlink" title="SQLite Folder"></a>SQLite Folder</h3><p>Each class file implements its corresponding Interface. If the database instance is installed on the operating system of a dedicated server then it’s a good idea to have the SQL commands stored as stored procedures, this will keep maintenance in one place and be language agnostic. However for SQLite this doesn’t make sense so I have kept the database command text inside the repository class files.</p><p><img src="/d/sllite-with-repository-pattern/sql-command-text.jpg" alt="Command Text"></p><p>The connection string should also be passed to the DbContext in its constructor or read from configuration, however for SQLite this is not necessary as there is no authentication needed and in my case there is no reason for the .db file name to change.</p><p><img src="/d/sllite-with-repository-pattern/sql-lite-context2.jpg" alt="SQL Lite Context"></p><h3 id="DBeaver"><a href="#DBeaver" class="headerlink" title="DBeaver"></a>DBeaver</h3><p><a href="https://dbeaver.io/">DBeaver</a> is a universal SQL Client that can be used to view your SQLite database file. Below is a screenshot visually showing the database my <code>Bunny.Tests.CreateRepositoryTest</code> create_structure/seed_db methods created.</p><blockquote><p><em>DBeaver is a free multi-platform database tool for developers, SQL programmers, database administrators and analysts. Supports all popular databases: MySQL, PostgreSQL, MariaDB, SQLite, Oracle, DB2, SQL Server, Sybase, MS Access, Teradata, Firebird, Derby, etc.</em></p></blockquote><p><img src="/d/sllite-with-repository-pattern/dbeaver.jpg" alt="DBeaver"></p><p>Our applications can now make use of the repository classes as shown in my test cases.</p><p><img src="/d/sllite-with-repository-pattern/integration-tests.jpg" alt="Integration Tests"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://sqlitebrowser.org/">http://sqlitebrowser.org/</a></li><li><a href="https://github.com/carlpaton/Bunny">https://github.com/carlpaton/Bunny</a></li><li><a href="https://app.pluralsight.com/library/courses/dotnet-micro-orms-introduction/table-of-contents">https://app.pluralsight.com/library/courses/dotnet-micro-orms-introduction/table-of-contents</a></li><li><a href="http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/">http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/</a></li><li><a href="http://passwordsgenerator.net/md5-hash-generator/">http://passwordsgenerator.net/md5-hash-generator/</a></li><li><a href="https://dbeaver.io/">https://dbeaver.io/</a></li><li><a href="https://en.wikipedia.org/wiki/Hungarian_notation">https://en.wikipedia.org/wiki/Hungarian_notation</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> orm </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loader - Client Side</title>
      <link href="2017/08/loader-client-side/"/>
      <url>2017/08/loader-client-side/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/loader-client-side/loader.jpg" alt="Loader - Client Side"></p><p>All cloud based software at some point has to wait for the database or web hosting instance to respond.</p><p>This can be for a number of reasons including slow mobile connections or finger trouble resulting in multiple requests. (Read: impatient user)</p><p>We need to always think of the users experience, if they click on something and it doesn’t respond right away they will click again or even close your application saying it’s broken. The simplest way is to prompt the user with a ‘please wait’ notice. This immediately tells the user that the software received the event and its busy doing something.</p><blockquote><p><em>‘Any product that needs a manual to work is broken’ - Elon Musk</em></p></blockquote><p>These ‘please wait’ events go by many names such as ‘wait model’, model, loader, ajax loader, spinner - all have merit and if something works leave it alone.</p><p>I like to call them a ‘loader’ as this is generally what I have found clients to understand them as and this helps with the vocabulary of their <a href="/2017/04/ubiquitous-language-ul/">Ubiquitous Language (UL)</a>.</p><p>Some code samples to follow.</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>Add this to /Views/Shared/_Layout.cshtml if you are using ASP.NET MVC. If you are using Web Forms you can add it to your xxx.Master page</p><p>Side Note: perhaps you should look at moving away from Web Forms :D</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Create-your-GIF-file"><a href="#Create-your-GIF-file" class="headerlink" title="Create your .GIF file"></a>Create your .GIF file</h3><p>Sites like <a href="http://www.ajaxload.info/">ajaxload.info</a> allow you to generate your ajax-loader.gif file.</p><blockquote><p><em>The Graphics Interchange Format (better known by its acronym GIF) is a bitmap image.</em></p></blockquote><p>Although you could use CSS (Cascading Style Sheets) to generate a <a href="https://www.w3schools.com/howto/howto_css_loader.asp">cool spinning loader</a> it may not work on all devices - it depends on your target audience.</p><p>You can also use a .PNG (Portable Network Graphics) file although I have had issues with these files on mobile devices.</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>The CSS (Cascading Style Sheet) snippet below was taken from <a href="https://stackoverflow.com/questions/1964839/how-can-i-create-a-please-wait-loading-animation-using-jquery">stackoverflow.com</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.modal &#123; </span><br><span class="line">display:    none;</span><br><span class="line">position:   fixed;</span><br><span class="line">z-index:    <span class="number">1000</span>;</span><br><span class="line">top:        <span class="number">0</span>;</span><br><span class="line">left:       <span class="number">0</span>;</span><br><span class="line">height:     <span class="number">100</span>%;</span><br><span class="line">width:      <span class="number">100</span>%;</span><br><span class="line">background: rgba( <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">.8</span> )</span><br><span class="line">            url(<span class="string">&#x27;ajax-loader.gif&#x27;</span>)</span><br><span class="line">            <span class="number">50</span>% <span class="number">50</span>%</span><br><span class="line">            no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* When the body has the loading class, we turn</span></span><br><span class="line"><span class="comment">   the scrollbar off with overflow:hidden */</span></span><br><span class="line"> </span><br><span class="line">body.loading &#123;</span><br><span class="line">    overflow: hidden;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Anytime the body has the loading class, our</span></span><br><span class="line"><span class="comment">   modal element will be visible */</span></span><br><span class="line"> </span><br><span class="line">body.loading .modal &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trigger-jQuery-AJAX"><a href="#Trigger-jQuery-AJAX" class="headerlink" title="Trigger jQuery AJAX"></a>Trigger jQuery AJAX</h3><p>This will automatically trigger your loader when a jQuery AJAX request is done.)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$body = $(<span class="string">&quot;body&quot;</span>);</span><br><span class="line"> </span><br><span class="line">$(<span class="built_in">document</span>).on(&#123;</span><br><span class="line">    ajaxStart: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; $body.addClass(<span class="string">&quot;loading&quot;</span>);    &#125;,</span><br><span class="line">     ajaxStop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; $body.removeClass(<span class="string">&quot;loading&quot;</span>); &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><em>AJAX stands for Asynchronous JavaScript and XML.</em></p></blockquote><h3 id="Manual-Trigger"><a href="#Manual-Trigger" class="headerlink" title="Manual Trigger"></a>Manual Trigger</h3><p>You can manually trigger your loader with the below in any of your native Javascript methods.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;body&quot;</span>).addClass(<span class="string">&quot;loading&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Trigger-if-you-are-using-System-Web-Mvc-Ajax-BeginForm"><a href="#Trigger-if-you-are-using-System-Web-Mvc-Ajax-BeginForm" class="headerlink" title="Trigger if you are using System.Web.Mvc.Ajax.BeginForm"></a>Trigger if you are using System.Web.Mvc.Ajax.BeginForm</h3><p>Simply Add the image to your page:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;ajax-loader&quot;</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/img/ajax-loader.gif&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Then set the LoadingElementId property when the form is created</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@using (Ajax.BeginForm(<span class="string">&quot;ActionName&quot;</span>, <span class="string">&quot;ControllerName&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> AjaxOptions</span><br><span class="line">                &#123;</span><br><span class="line">                                HttpMethod = <span class="string">&quot;Get&quot;</span>,</span><br><span class="line">                                InsertionMode = InsertionMode.Replace,</span><br><span class="line">                                UpdateTargetId = <span class="string">&quot;divResults&quot;</span>,</span><br><span class="line">                                LoadingElementId = <span class="string">&quot;ajax-loader&quot;</span>                            </span><br><span class="line">                &#125;))</span><br></pre></td></tr></table></figure><p>The framework will then handle displaying and hiding your ajax-loader.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.ajaxload.info/">http://www.ajaxload.info/</a></li><li><a href="https://www.w3schools.com/howto/howto_css_loader.asp">https://www.w3schools.com/howto/howto_css_loader.asp</a></li><li><a href="https://stackoverflow.com/questions/1964839/how-can-i-create-a-please-wait-loading-animation-using-jquery">https://stackoverflow.com/questions/1964839/how-can-i-create-a-please-wait-loading-animation-using-jquery</a></li><li><a href="https://en.wikipedia.org/wiki/GIF">https://en.wikipedia.org/wiki/GIF</a></li><li><a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics">https://en.wikipedia.org/wiki/Portable_Network_Graphics</a></li><li><a href="https://www.w3schools.com/css/css_intro.asp">https://www.w3schools.com/css/css_intro.asp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> client side scripting </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csv Helper (.NET library)</title>
      <link href="2017/06/csv-helper-dot-net-library/"/>
      <url>2017/06/csv-helper-dot-net-library/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/csv-helper-dot-net-library/csv-helper.jpg" alt="Csv Helper"></p><p>If you have ever tried to manually read a CSV (Comma-separated values) file using the .NET Framework’s File and StreamReader classes you may have run into issues such as:</p><ul><li>Out of range exceptions</li><li>Encoding issues</li><li>Column order changes ect</li></ul><p>There are probably many more depending on the files size and complexity.</p><p>First prize is to read the CSV file and map the columns to a POCO object (Plain Old CLR) </p><blockquote><p><em>In software engineering, a plain old CLR object (POCO) is a simple object created in the Common Language Runtime (CLR) of the .NET Framework which is unencumbered by inheritance or attributes.</em></p></blockquote><p>Enter the CsvHelper library to help reading and writing CSV files by Josh Close.</p><blockquote><p><em>CsvHelper is a .NET library for reading and writing CSV files. Extremely fast, flexible and easy to use. Supports reading and writing of custom class objects.</em></p></blockquote><p>Consider the following CSV file with headings Internal Id,Activity,Project Name,Date,Time Spent In Hours,User</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Internal Id,Activity,Project Name,Date,Time Spent In Hours,User</span><br><span class="line"></span><br><span class="line">123,Cloned repository and familiarize with code base,Accounts Project,01-01-2017,2,Joe Soap</span><br><span class="line"></span><br><span class="line">124,Refactor class a for xyz,Accounts Project,01-01-2017,1,Joe Soap</span><br><span class="line"></span><br><span class="line">89,Complete task xyz,Accounts Project,01-01-2017,4,Sue Skye</span><br><span class="line"></span><br><span class="line">55,Complete task abc,Accounts Project,01-01-2017,1,Sue Skye</span><br></pre></td></tr></table></figure><p><em>(You can check your system separator under ‘Region’ -&gt; ‘Additional settings…’ -&gt; ‘Numbers’ -&gt; ‘List separator’)</em></p><p>Create your POCO class:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CsvContentModel</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> InternalId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Activity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> ProjectName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> TimeSpentInHours&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** For simplicity I made all the properties of type string. You can use CsvHelper’s type converter if you want to convert the integer/dates automatically.*</p><p>Create a DefinitionMap to help map the columns with spaces in the names.</p><p>If you don’t supply a mapping file, auto mapping will be used. Auto mapping will map the properties in your class in the order they appear in.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">CsvContentModelDefinitionMap</span> : <span class="title">CsvClassMap</span>&lt;<span class="title">CsvContentModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CsvContentModelDefinitionMap</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Map(m =&gt; m.User).Name(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.InternalId).Name(<span class="string">&quot;Internal Id&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.Activity).Name(<span class="string">&quot;Activity&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.ProjectName).Name(<span class="string">&quot;Project Name&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.Date).Name(<span class="string">&quot;Date&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.TimeSpentInHours).Name(<span class="string">&quot;Time Spent In Hours&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Organize your CsvHelper logic into a class.</p><p>Your catch blocks should do something more helpful with the Exceptions :)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReadFile</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> FilePath;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ReadFile</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    FilePath = filePath;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;CsvContentModel&gt; <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (FilePath == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> List&lt;CsvContentModel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FilePath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> List&lt;CsvContentModel&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;CsvContentModel&gt; records = <span class="keyword">new</span> List&lt;CsvContentModel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (TextReader reader = File.OpenText(FilePath))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader);</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;CsvContentModelDefinitionMap&gt;();</span><br><span class="line">        records = csv.GetRecords&lt;CsvContentModel&gt;().ToList();</span><br><span class="line">      &#125;</span><br><span class="line">      catch (CsvMissingFieldException ex)</span><br><span class="line">      &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">        Console.WriteLine(ex.StackTrace);</span><br><span class="line">      &#125;</span><br><span class="line">      catch (Exception ex)</span><br><span class="line">      &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">        Console.WriteLine(ex.StackTrace);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> records;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then call the class</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> ReadFile(<span class="string">&quot;sample.csv&quot;</span>).Get();</span><br></pre></td></tr></table></figure><p>The instance of data will now have a reference to a list of type CsvContentModel for your business logic.</p><p><img src="/d/csv-helper-dot-net-library/csv-helper-object.jpg" alt="Csv Helper"></p><p>CsvHelper has several other powerful features such as Type Converter and Configuration Delimiter.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://joshclose.github.io/CsvHelper/">https://joshclose.github.io/CsvHelper/</a></li><li><a href="https://en.wikipedia.org/wiki/Plain_old_CLR_object">https://en.wikipedia.org/wiki/Plain_old_CLR_object</a></li><li><a href="https://en.wikipedia.org/wiki/Comma-separated_values">https://en.wikipedia.org/wiki/Comma-separated_values</a></li><li><a href="https://github.com/carlpaton/CsvHelperDemo">https://github.com/carlpaton/CsvHelperDemo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> csv </tag>
            
            <tag> .net library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json.NET (.NET library)</title>
      <link href="2017/06/jsonnet-dot-net-library/"/>
      <url>2017/06/jsonnet-dot-net-library/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/jsonnet-dot-net-library/jsonnet.jpg" alt="Json.NET"></p><p>Json.NET is a popular high-performance JSON framework for .NET available via Nuget as <code>Newtonsoft.Json</code></p><p>JSON (JavaScript Object Notation) is widely used and I find it easier to read than XML (eXtensible Markup Language.) I doubt XML is going anywhere and the differences will be opinion based so I have no intention to insinuate JSON is better.</p><blockquote><p><strong>JSON</strong> <em>is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999.</em></p></blockquote><p>Modern Web API projects can be configured to automatically return JSON with the JsonFormatter class however there are plenty legacy systems that will still follow the below structure so it’s good to understand them anyway.</p><p>In some cases your class instances need to be persisted to a log file or database, the simplest way to do this is with the JsonConvert class from Json.Net and it is faster than the JavaScriptSerializer class normally used in older .ASMX files.</p><blockquote><p><em>.ASMX is an abbreviation for Active Server Method File, a file with the</em> <strong>ASMX</strong> <em>file extension is an ASP.NET Web Service Source file.</em></p></blockquote><p>The below is a pre Web API example of web a web service called ‘AjaxServer.asmx’ that uses JavaScriptSerializer</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Web.Services;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JsonNetWebAppDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Summary description for AjaxServer</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">WebService(Namespace = <span class="meta-string">&quot;http://tempuri.org/&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)</span>]</span><br><span class="line">    [<span class="meta">System.ComponentModel.ToolboxItem(false)</span>]</span><br><span class="line">    <span class="comment">// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. </span></span><br><span class="line">    <span class="comment">// [System.Web.Script.Services.ScriptService]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AjaxServer</span> : <span class="title">System.Web.Services.WebService</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">WebMethod(EnableSession = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">DoSomething</span>(<span class="params"><span class="built_in">string</span> param1, <span class="built_in">string</span> param2</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (param1 == <span class="string">&quot;&quot;</span> &amp;&amp; param2 == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            list.Add(<span class="string">&quot;some string value&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (Session[<span class="string">&quot;someSessionValue&quot;</span>] != <span class="literal">null</span>)</span><br><span class="line">                list.Add(Session[<span class="string">&quot;someSessionValue&quot;</span>].ToString());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//slower built in &#x27;JavaScriptSerializer&#x27;</span></span><br><span class="line">            <span class="keyword">var</span> json = <span class="keyword">new</span> JavaScriptSerializer().Serialize(list);</span><br><span class="line">            <span class="keyword">return</span> json;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//faster &#x27;JsonConvert&#x27;</span></span><br><span class="line">            <span class="comment">//var json2 = JsonConvert.SerializeObject(list);</span></span><br><span class="line">            <span class="comment">//return json2;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This can then be consumed from the client side. The simplest way is with jQuery’s $.ajax to post to the service and $.parseJSON to de-serialize the response. </p><blockquote><p><em>NOTE: As of jQuery 3.0, $.parseJSON is deprecated. To parse JSON strings use the native JSON.parse method instead.</em></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = jQuery.parseJSON( <span class="string">&#x27;&#123; &quot;name&quot;: &quot;John&quot; &#125;&#x27;</span> );</span><br><span class="line">alert( obj.name === <span class="string">&quot;John&quot;</span> );</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse( <span class="string">&#x27;&#123; &quot;name&quot;: &quot;John&quot; &#125;&#x27;</span> );</span><br><span class="line">alert( obj2.name === <span class="string">&quot;John&quot;</span> );</span><br></pre></td></tr></table></figure><h3 id="Json-NET"><a href="#Json-NET" class="headerlink" title="Json.NET"></a>Json.NET</h3><p>The json object instance from the ‘AjaxServer.asmx’ example above can then be replaced with JsonConvert.SerializeObject(list)</p><p>JsonConvert.DeserializeAnonymousType is also very helpful for unit testing Web API projects.</p><p>The examples from newtonsoft.com are very simple and clearly show how to Serialize and Deserialize json notation.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//******* Serialize JSON</span></span><br><span class="line"> </span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.Name = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">product.Expiry = <span class="keyword">new</span> DateTime(<span class="number">2008</span>, <span class="number">12</span>, <span class="number">28</span>);</span><br><span class="line">product.Sizes = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Small&quot;</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> json = JsonConvert.SerializeObject(product);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;Name&quot;: &quot;Apple&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;Expiry&quot;: &quot;2008-12-28T00:00:00&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;Sizes&quot;: [</span></span><br><span class="line"><span class="comment">//     &quot;Small&quot;</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">﻿</span><br><span class="line"><span class="comment">//******* Deserialize JSON </span></span><br><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;&#123;</span></span><br><span class="line"><span class="string">  &#x27;Name&#x27;: &#x27;Bad Boys&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;ReleaseDate&#x27;: &#x27;1995-4-7T00:00:00&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Genres&#x27;: [</span></span><br><span class="line"><span class="string">    &#x27;Action&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;Comedy&#x27;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">Movie m = JsonConvert.DeserializeObject&lt;Movie&gt;(json);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> name = m.Name;</span><br><span class="line"><span class="comment">// Bad Boys</span></span><br></pre></td></tr></table></figure><p>Some humour instead of closing thoughts as I really enjoyed ‘The Transporter’ movies :D</p><p><img src="/d/jsonnet-dot-net-library/json-statham.jpg" alt="JSON Statham :D"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.newtonsoft.com/json">https://www.newtonsoft.com/json</a></li><li><a href="https://www.nuget.org/packages/Newtonsoft.Json/">https://www.nuget.org/packages/Newtonsoft.Json/</a></li><li><a href="https://github.com/JamesNK/Newtonsoft.Json">https://github.com/JamesNK/Newtonsoft.Json</a></li><li><a href="https://api.jquery.com/jquery.parsejson/">https://api.jquery.com/jquery.parsejson/</a></li><li><a href="http://www.json.org/">http://www.json.org/</a></li><li><a href="https://github.com/carlpaton/JsonNetWebAppDemo">https://github.com/carlpaton/JsonNetWebAppDemo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> serialization </tag>
            
            <tag> .net library </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Work In Progress</title>
      <link href="2017/06/work-in-progress/"/>
      <url>2017/06/work-in-progress/</url>
      
        <content type="html"><![CDATA[<p><a href="/tags/wip/">See all WIP posts</a></p><p>Work In Progress (WIP) are posts that are currently… well work in progress. This could be an idea I have, something I have read about or heard about from a peer. While doing research and trying things out I work though the post and try flesh it out.</p><p><img src="/d/work-in-progress/work-in-progress.jpg" alt="WIP"></p><p>Sometimes I loose interest or it just gets lost in other posts. Im hoping this <a href="/tags/wip/">WIP Tag</a> will keep me honest!</p>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log Parser</title>
      <link href="2017/05/log-parser/"/>
      <url>2017/05/log-parser/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/log-parser/log-parser.jpg" alt="Log Parser"></p><p>Log parser is a powerful tool by Microsoft that can be used to import log files from several applications. In the past I have found it extremely useful when debugging IIS (Internet Information Services) logs for an array of issues including slow web page response to memory leaks.</p><blockquote><p><em>Log parser is a powerful, versatile tool that provides universal query access to text-based data such as log files, XML files and CSV files, as well as key data sources on the Windows® operating system such as the Event Log, the Registry, the file system, and Active Directory®.</em></p></blockquote><p>For this article I will focus on importing and manipulating IIS logs. I assume you have access to the webserver, have installed Log Parser, SQL Server express and SQL Server Management studio. If you have not please see “References” below for download links.</p><h3 id="Locate-IIS-log-files"><a href="#Locate-IIS-log-files" class="headerlink" title="Locate IIS log files"></a>Locate IIS log files</h3><p>By default the IIS logs are stored on the webserver in W3C format in the location <code>%SystemDrive%\inetpub\logs\LogFiles\</code></p><p>This can be checked from IIS by selecting the “host instance” and then double clicking on “Logging”</p><p><img src="/d/log-parser/iis-logging.jpg" alt="IIS Logging"></p><p>The folders inside “LogFiles” correspond to the site instance ID which can be checked by selecting “Sites” then the “Site Name” and selecting “Advanced Settings…”</p><p><img src="/d/log-parser/iis-logging-1.jpg" alt="IIS Logging"></p><p>For the above example the folder would be “W3SVC3” where “VC3” matches the ID 3. The files inside the folder are then stored by date stamp yyMMdd</p><p><img src="/d/log-parser/iis-logging-2.jpg" alt="IIS Logging"></p><h3 id="Import-Logs"><a href="#Import-Logs" class="headerlink" title="Import Logs"></a>Import Logs</h3><p>Firstly create the SQL database <code>webLog</code> on your local instance, the import will automatically create the tables for you if you include the <code>-createTable:ON</code> parameter.</p><p><img src="/d/log-parser/sql.jpg" alt="SQL"></p><p>You can add Log Parser to your environmental variables or simply run it from “C:\Program Files (x86)\Log Parser 2.2”. I prefer to copy the files one at a time to the above location and run the import from command prompt. Once I’m done I delete the .log file to avoid confusion.</p><p>For the below example I copied “u_ex161129.log” to C:\Program Files (x86)\Log Parser 2.2” from the webserver at “C:\inetpub\logs\LogFiles\W3SVC3”</p><p>The import command would then be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOGPARSER &quot;SELECT * INTO webLog2 FROM u_ex161129.log&quot; </span><br><span class="line">-i:W3C </span><br><span class="line">-o:SQL </span><br><span class="line">-server: DESKTOP-EBV6Q8D </span><br><span class="line">-database:webLog </span><br><span class="line">-driver:&quot;SQL Server&quot; </span><br><span class="line">-createTable:ON </span><br><span class="line">-username:sa </span><br><span class="line">-password:sasa</span><br></pre></td></tr></table></figure><p>The successful import will then show statistics of elements processed and execution time.</p><p><img src="/d/log-parser/import.jpg" alt="Import"></p><p>The data can then be seen in SQL Management Studio</p><p><img src="/d/log-parser/sql-1.jpg" alt="SQL"></p><h3 id="Query-data-by-status-code"><a href="#Query-data-by-status-code" class="headerlink" title="Query data by status code"></a>Query data by status code</h3><p>From here you can check the status codes and their counts by date. This can help you determine pages or elements such as images that your site is having issues with.</p><p>Examples:</p><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p><em>The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.</em></p><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p><em>The server encountered an unexpected condition which prevented it from fulfilling the request.</em></p><p>Sample SQL statement to sort by status:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">count([csUriStem]) as cnt, [csUriStem]</span><br><span class="line">FROM [webLog].[dbo].[webLog2]</span><br><span class="line">where scStatus &#x3D; 404</span><br><span class="line">and date &#x3D; &#39;2016-11-29 00:00:00.000&#39;</span><br><span class="line">group by [csUriStem]</span><br><span class="line">order by cnt desc</span><br></pre></td></tr></table></figure><p>Sample results</p><p><img src="/d/log-parser/sql-2.jpg" alt="SQL"></p><p>This means the code looked for “/images/ui-bg_inset-soft_50_fff_1x100.png” 143 times and error 404 file not found was returned.</p><p>The above can be repeated for server error 500 but additional information such as the query string can be helpful</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">[csUriStem]</span><br><span class="line">,[csUriQuery]</span><br><span class="line">,[timeTaken]</span><br><span class="line">,[timeTaken] &#x2F; 60000 as timeTakenInMin</span><br><span class="line">FROM [webLog].[dbo].[webLog2]</span><br><span class="line">where scStatus &#x3D; 500</span><br><span class="line">and date &#x3D; &#39;2016-11-29 00:00:00.000&#39;</span><br><span class="line">order by timeTaken desc</span><br></pre></td></tr></table></figure><p>This would then show pages that are broken or break under different conditions. You can also use the timeTaken field to understand how long a page is taking to break or even time out.</p><h3 id="Query-data-by-execution-time"><a href="#Query-data-by-execution-time" class="headerlink" title="Query data by execution time"></a>Query data by execution time</h3><p>As mentioned above you can query the logs to see how long pages are taking to respond, this is helpful for pages that work but users complain it takes a long time to respond. Often you will get tasks such as “The website is slow” which is not very helpful so you need to figure things out for yourself.</p><p>Sample SQL statement:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">[csUriStem]</span><br><span class="line">,[csUriQuery]</span><br><span class="line">,[timeTaken]</span><br><span class="line">,[timeTaken] &#x2F; 60000 as timeTakenInMin</span><br><span class="line">FROM [webLog].[dbo].[webLog2]</span><br><span class="line">where scStatus &#x3D; 200</span><br><span class="line">and date &#x3D; &#39;2016-11-29 00:00:00.000&#39;</span><br><span class="line">order by timeTaken desc</span><br></pre></td></tr></table></figure><p>Sample results:</p><p><img src="/d/log-parser/sql-3.jpg" alt="SQL"></p><p>From the above results you can see that “/Payments.aspx” is the slowest page for the period taking 3 minutes to respond with status 200. It’s not broken, it’s just slow – so you may need to optimize your code or possibly index the database.</p><p>The second slowest page is <code>/PrintStatement.aspx</code> with the query string <code>type=43</code> this means you can debug this page with these parameters to see why it takes 3 minutes to respond.</p><p>I hope this article is useful to other software developers trying to make sense of their IIS logs. If anybody has other tips or advice on how to query the imported data please comment below.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">W3 Web Status codes</a></li><li><a href="https://technet.microsoft.com/en-us/scriptcenter/dd919274.aspx">Log Parser 2.2 (technet.microsoft.com)</a></li><li><a href="https://www.microsoft.com/en-za/download/details.aspx?id=24659">Download Log Parser 2.2</a></li><li><a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads">Download Microsoft SQL Server express</a></li><li><a href="https://www.microsoft.com/en-za/download/details.aspx?id=8961">Download Microsoft SQL Server Management</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fusion Charts</title>
      <link href="2017/04/fusion-charts/"/>
      <url>2017/04/fusion-charts/</url>
      
        <content type="html"><![CDATA[<p>Version: <code>3.12.1</code> examples.</p><ul><li><a href="https://docs.fusioncharts.com/archive/3.12.1/getting-started/list-of-charts.html">https://docs.fusioncharts.com/archive/3.12.1/getting-started/list-of-charts.html</a></li></ul><h3 id="Single-Series-Charts"><a href="#Single-Series-Charts" class="headerlink" title="Single Series Charts"></a>Single Series Charts</h3><p>Set as <code>ChartModel.type</code>, there are some <a href="/d/fusion-charts/3.12.1/single-series-charts.html">single series chart examples here</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">column3d,</span><br><span class="line">pie3d,</span><br><span class="line">bar3d</span><br></pre></td></tr></table></figure><h4 id="ChartModel"><a href="#ChartModel" class="headerlink" title="ChartModel"></a>ChartModel</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChartModel</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ChartModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">      dataSource = <span class="keyword">new</span> dataSource();</span><br><span class="line">      dataSource.chart = <span class="keyword">new</span> chart();</span><br><span class="line">      dataSource.data = <span class="keyword">new</span> List&lt;data&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> renderAt &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> dataFormat &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> dataSource dataSource &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">dataSource</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> chart chart &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> List&lt;data&gt; data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">chart</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> caption &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> subCaption &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> xAxisName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> yAxisName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> theme &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> If set to 3 displays the value as x.xxx in the tool tip</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> decimals &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> showValues &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">data</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> label &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">value</span> &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Combination-Charts"><a href="#Combination-Charts" class="headerlink" title="Combination Charts"></a>Combination Charts</h3><p><a href="/d/fusion-charts/3.12.1/combination-charts.html">Combination charts examples here</a>.</p><ul><li><a href="https://www.fusioncharts.com/charts/combination-charts-single-y/same-axis-column-line-and-area-chart?framework=javascript">https://www.fusioncharts.com/charts/combination-charts-single-y/same-axis-column-line-and-area-chart?framework=javascript</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubiquitous Language (UL)</title>
      <link href="2017/04/ubiquitous-language-ul/"/>
      <url>2017/04/ubiquitous-language-ul/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/ubiquitous-language-ul/ubiquitous-language-ul-1.jpg" alt="Ubiquitous Language (UL)"></p><p>I have been interacting with clients for years and each client in their respective industry is always a learning curve. It would be an insult to your client if you assume you understand their industry as well as they do, they are running the business while you are simply there to facilitate automation based on their existing knowledge.</p><p>As Software Developers we must never forget that our clients are not interested in our software, the language its written in or which patterns &amp; principles we used. They are interested in what it can do for them and which problems it solves within their respective business domain.</p><p>The problem is always translating the business domain to the code domain in an effective manner and understanding what your client is talking about.</p><p>Enter the Ubiquitous Language (UL)…</p><blockquote><p><em>Ubiquitous Language is the term Eric Evans uses in Domain Driven Design for the practice of building up a common, rigorous language between developers and users.</em></p></blockquote><p>This is a common and business orientated language; the primary goal of the language is to mitigate misunderstandings and bad assumptions. Concretely the Ubiquitous Language (UL) is a vocabulary of domain-specific terms sharer by all parties involved in the project.</p><p>Domain specific terms translate the business domain to the code domain.</p><blockquote><p><em>“A simple definition of a ubiquitous language is to come up with terms that’ll be commonly used when discussing a particular subdomain.” – Steve Smith</em></p></blockquote><p>This includes but is not limited to nouns, verbs, adjectives, idiomatic expressions and even adverbs. Once defined the language should be used in all forms of written and spoken communication thus becoming the universal language of the business.</p><p>In other words a common terminology helps making sense of the user requirements and maintenance of the software. This UL is not static and is continuously updated and refined as the project matures.</p><p>It would be advisable to add an “APPENDIX x, Ubiquitous Language” to your specification document or the client’s collaborations tool, such as their wiki or intranet.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://blog.carbonfive.com/2016/10/04/ubiquitous-language-the-joy-of-naming/">Ubiquitous-language-the-joy-of-naming (Andrew Hao)</a></li><li><a href="https://www.linkedin.com/pulse/ubiquitous-language-serpent-many-heads-javier-hern%C3%A1ndez?articleId=6227452220296691712">Ubiquitous language, a serpent of many heads (Javier Hernández)</a></li><li><a href="https://app.pluralsight.com/player?course=domain-driven-design-fundamentals&author=julie-lerman&name=domain-driven-design-fundamentals-m1&clip=11&mode=live&start=108.236">Domain-Driven Design Fundamentals (Julie Lerman and Steve Smith)</a></li><li><a href="https://www.pluralsight.com/courses/modern-software-architecture-domain-models-cqrs-event-sourcing">Modern-software-architecture-domain-models-cqrs-event-sourcing</a></li><li><a href="https://www.pluralsight.com/courses/domain-driven-design-fundamentals">Domain-driven-design-fundamentals</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ddd </tag>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Custom Authentication</title>
      <link href="2015/05/custom-authentication/"/>
      <url>2015/05/custom-authentication/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Disclaimer, this example uses a static API Key. Rather look at <a href="/2020/12/oauth2-client-credentials-flow/">OAuth 2.0 Client Credentials Flow</a> to request access tokens that would expire.</p></blockquote><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>We needed a simple way to secure an internal Notifications API. It needed to act as a message broker &amp; queue. The flow would be to have actions like</p><ol><li>Queue email to be sent, this would just database it in a queue.</li><li>Process email queue, this would read the queue table and send the emails / updating a <code>done</code> flag. </li></ol><p>The simplest way to secure this is to add an <code>Api-Key</code> to the request header and check its existance and equality in a filter.</p><h3 id="Setup-NotificationApi"><a href="#Setup-NotificationApi" class="headerlink" title="Setup: NotificationApi"></a>Setup: NotificationApi</h3><h4 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NotificationApi.Filters</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyValidationAttribute</span> : <span class="title">FilterAttribute</span>, <span class="title">IAuthorizationFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;HttpResponseMessage&gt; <span class="title">ExecuteAuthorizationFilterAsync</span>(<span class="params">HttpActionContext actionContext, CancellationToken cancellationToken, Func&lt;Task&lt;HttpResponseMessage&gt;&gt; continuation</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> expected = ConfigurationManager.AppSettings.Get(<span class="string">&quot;apikey&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> actual = actionContext.Request.Headers.GetValues(<span class="string">&quot;Api-Key&quot;</span>).FirstOrDefault();</span><br><span class="line">                <span class="keyword">if</span> (String.IsNullOrWhiteSpace(actual) || actual != expected)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// some logging would be sweet</span></span><br><span class="line"></span><br><span class="line">                actionContext.Response = actionContext.Request.CreateErrorResponse(HttpStatusCode.Unauthorized, <span class="string">&quot;Missing or invalid Api-Key&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> source = <span class="keyword">new</span> TaskCompletionSource&lt;HttpResponseMessage&gt;();</span><br><span class="line">                source.SetResult(actionContext.Response);</span><br><span class="line">                <span class="keyword">return</span> source.Task;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> continuation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="App-start"><a href="#App-start" class="headerlink" title="App start"></a>App start</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NotificationApi.Filters;</span><br><span class="line"><span class="keyword">using</span> System.Web.Http;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http.Headers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NotificationApi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WebApiConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">HttpConfiguration config</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            config.Routes.MapHttpRoute(</span><br><span class="line">                name: <span class="string">&quot;DefaultApi&quot;</span>,</span><br><span class="line">                routeTemplate: <span class="string">&quot;api/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;</span>,</span><br><span class="line">                defaults: <span class="keyword">new</span> &#123; id = RouteParameter.Optional &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// JSON responses please</span></span><br><span class="line">            config.Formatters.JsonFormatter.SupportedMediaTypes</span><br><span class="line">                .Add(<span class="keyword">new</span> MediaTypeHeaderValue(<span class="string">&quot;text/html&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add the filter to check the APIKEY</span></span><br><span class="line">            config.Filters.Add(<span class="keyword">new</span> ApiKeyValidationAttribute());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h4><p>No <code>Authorize</code> attribute/annotation is required on the controllers.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SelectList - view whats in the Queue table. (email_queue.processed = false)        </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> http://localhost:50829/api/email/selectlist</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">SelectList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Insert a new Email into the Queue (dbo.email_queue)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">Insert</span>(<span class="params">[FromBody] EmailModel obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Process whats in the Queue table</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> http://localhost:50829/api/email/process</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="comment">// [HttpPut] - not really a PUT as nothing is sent &#x27;TO&#x27; &#x27;Process()&#x27; to be persisted</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">Process</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="Setup-Consumer"><a href="#Setup-Consumer" class="headerlink" title="Setup: Consumer"></a>Setup: Consumer</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://localhost:50829/api/email/insert&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = (HttpWebRequest)WebRequest.Create(<span class="keyword">new</span> Uri(url));</span><br><span class="line">http.Accept = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">http.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">http.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">http.Headers.Add(<span class="string">&quot;Api-Key&quot;</span>, ConfigurationManager.AppSettings[<span class="string">&quot;apiKey&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/aspnet/hh944103(v=vs.108)">https://docs.microsoft.com/en-us/previous-versions/aspnet/hh944103(v=vs.108)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zucchini</title>
      <link href="1970/01/zucchini/"/>
      <url>1970/01/zucchini/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/zucchini/zucchini.jpg" alt="Ya Zucchini"></p>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
