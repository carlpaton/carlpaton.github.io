<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AWS Secrets</title>
      <link href="/2025/05/aws-secrets/"/>
      <url>/2025/05/aws-secrets/</url>
      
        <content type="html"><![CDATA[<p>Secrets are any authentication details like a password that allow a user potentially <a href="/2020/12/oauth2-authorization-code-flow/">using authorization code flow</a> or a service potentially <a href="/2020/12/oauth2-client-credentials-flow/">using client credentials flow</a> to verify their identity. </p><p>AWS has a few ways to manage these secrets and often functionality overlaps, this is how I have found these to be useful.</p><h2 id="Pre-cursor"><a href="#Pre-cursor" class="headerlink" title="Pre-cursor"></a>Pre-cursor</h2><p>The IAM role will need these policy statements</p><ul><li><code>Action: kms:Decrypt</code></li><li><code>Action: ssm:GetParameters</code></li><li><code>Action: secretsmanager:GetSecretValue</code> (if using secretsmanager programatically which is not the flows described below)</li></ul><h2 id="AWS-Systems-Manager-SSM-Parameter-Store"><a href="#AWS-Systems-Manager-SSM-Parameter-Store" class="headerlink" title="AWS Systems Manager (SSM) - Parameter Store"></a>AWS Systems Manager (SSM) - Parameter Store</h2><blockquote><p>Use Case: Simple encrypted secret storage for your application to access</p></blockquote><p>Note that KMS does support <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotating-keys-enable.html">rotation-period</a> if you wish.</p><p><a href="https://docs.aws.amazon.com/systems-manager/">AWS Systems Manager</a> (SSM) with <code>Parameter Store</code> (Secure String) is a great way to store secrets which your application can read at runtime, then store as environment variables. With .Net these can override <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration">appsettings</a>. To get started you follow these high level steps</p><ol><li>Create a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">Key Management Service (KMS) key</a>, for the purpose of simple <a href="https://docs.aws.amazon.com/kms/latest/developerguide/overview.html">data encryption</a> at rest, you can use a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-symmetric-cmk.html">symmetric encryption KMS key</a>. I normally use the AWS console, so their <a href="https://console.aws.amazon.com/console/">website</a> to create these keys but you can also use the CLI with command <code>aws kms create-key</code></li></ol><p>You will need the <code>KMS-KEY-ARN</code>, it will look something like <code>arn:aws:kms:&#123;REGION&#125;:&#123;ACCOUNT-NUMBER&#125;:key/mrk-00000000000000000000000000000000</code></p><ol start="2"><li>Create parameter, the simplest way is with the CLI because its hidden in the console and I always have to click around to find it</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws ssm put-parameter \</span><br><span class="line">--name &#x27;&#123;NAME&#125;&#x27; \</span><br><span class="line">--description &#x27;&#123;DESCRIPTION&#125;&#x27; \</span><br><span class="line">--value &#x27;&#123;PLAIN-TEXT-SECRET-VALUE&#125;&#x27; \</span><br><span class="line">--type SecureString \</span><br><span class="line">--key-id &#x27;&#123;KMS-KEY-ARN&#125;&#x27; \</span><br><span class="line">--tags &#x27;[&#123;&quot;Key&quot;:&quot;created-with&quot;,&quot;Value&quot;:&quot;aws-cli&quot;&#125;]&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>Using the KMS key access the secret from parameter store, at a high level this could look like</li></ol><p>Create a <code>GetSecureParameterAsync</code> in an abstracted service:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Amazon;</span><br><span class="line"><span class="keyword">using</span> Amazon.Runtime;</span><br><span class="line"><span class="keyword">using</span> Amazon.SSM;</span><br><span class="line"><span class="keyword">using</span> Amazon.SSM.Model;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetSecureParameterAsync</span>(<span class="params"><span class="built_in">string</span> parameterName, <span class="built_in">string</span> regionEndpoint</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Specify your AWS credentials. If running on an EC2 instance with an IAM role</span></span><br><span class="line">    <span class="comment">// or if your AWS CLI is configured, you can often omit this.</span></span><br><span class="line">    <span class="comment">// Replace with your actual access key and secret key if needed.</span></span><br><span class="line">    <span class="comment">// var credentials = new BasicAWSCredentials(&quot;YOUR_ACCESS_KEY&quot;, &quot;YOUR_SECRET_KEY&quot;);</span></span><br><span class="line">    <span class="comment">// var config = new AmazonSSMConfig &#123; RegionEndpoint = RegionEndpoint.GetBySystemName(regionEndpoint) &#125;;</span></span><br><span class="line">    <span class="comment">// using (var ssmClient = new AmazonSSMClient(credentials, config))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If you have default AWS credentials configured (e.g., IAM role, AWS CLI), you can use:</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> ssmClient = <span class="keyword">new</span> AmazonSSMClient(RegionEndpoint.GetBySystemName(regionEndpoint)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> GetParameterRequest</span><br><span class="line">        &#123;</span><br><span class="line">            Name = parameterName,</span><br><span class="line">            WithDecryption = <span class="literal">true</span> <span class="comment">// This is crucial for secure parameters</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> ssmClient.GetParameterAsync(request);</span><br><span class="line">            <span class="keyword">return</span> response.Parameter.Value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AmazonSSMException e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Error retrieving parameter &#x27;<span class="subst">&#123;parameterName&#125;</span>&#x27;: <span class="subst">&#123;e.Message&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call the method <code>GetSecureParameterAsync</code> and use the secret in your application.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> parameterName = <span class="string">&quot;/path/to/your/secret&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> awsRegion = <span class="string">&quot;ap-southeast-2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> secretValue = <span class="keyword">await</span> GetSecureParameterAsync(parameterName, awsRegion);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(secretValue))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Successfully retrieved secret &#x27;<span class="subst">&#123;parameterName&#125;</span>&#x27;: <span class="subst">&#123;secretValue&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Failed to retrieve secret &#x27;<span class="subst">&#123;parameterName&#125;</span>&#x27;.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Secrets-Manager"><a href="#Secrets-Manager" class="headerlink" title="Secrets Manager"></a>Secrets Manager</h2><blockquote><p>Use Case: Simple encrypted secret storage for secrets you want to rotate and generally access manually by humans</p></blockquote><p>Note, you can also programatically access <a href="https://docs.aws.amazon.com/sdkfornet/v4/apidocs/items/SecretsManager/NSecretsManager.html">Secrets Manager</a> if you wish.</p><ol><li><p>Create the KMS, same as details above.</p></li><li><p>Create the secret, the simplest way is with the CLI</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws secretsmanager create-secret \</span><br><span class="line">--name &#x27;&#123;NAME&#125;&#x27; \</span><br><span class="line">--description &#x27;&#123;DESCRIPTION&#125;&#x27; \</span><br><span class="line">--key-id &#x27;&#123;KMS-KEY-ARN&#125;&#x27; \</span><br><span class="line">--secret-string &#x27;&#123;PLAIN-TEXT-SECRET-VALUE&#125;&#x27; \</span><br><span class="line">--tags &#x27;[&#123;&quot;Key&quot;:&quot;created-with&quot;,&quot;Value&quot;:&quot;aws-cli&quot;&#125;]&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>Access the secret manually in the console</li></ol><p>If you want to instead use this for secrets in your code, the method to get the secret could look like</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetSecretValueAsync</span>(<span class="params"><span class="built_in">string</span> secretName, <span class="built_in">string</span> regionEndpoint</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Specify your AWS credentials if needed (less recommended for production).</span></span><br><span class="line">    <span class="comment">// var credentials = new BasicAWSCredentials(&quot;YOUR_ACCESS_KEY&quot;, &quot;YOUR_SECRET_KEY&quot;);</span></span><br><span class="line">    <span class="comment">// var config = new AmazonSecretsManagerConfig &#123; RegionEndpoint = RegionEndpoint.GetBySystemName(regionEndpoint) &#125;;</span></span><br><span class="line">    <span class="comment">// using (var client = new AmazonSecretsManagerClient(credentials, config))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use default AWS credentials (IAM role, AWS CLI, etc.) - recommended for production.</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> AmazonSecretsManagerClient(RegionEndpoint.GetBySystemName(regionEndpoint)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> GetSecretValueRequest</span><br><span class="line">        &#123;</span><br><span class="line">            SecretId = secretName</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetSecretValueAsync(request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Secrets can be a string or binary data.</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(response.SecretString))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> response.SecretString;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (response.SecretBinary != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Handle binary secret (e.g., decode from Base64)</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> System.IO.StreamReader(response.SecretBinary))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> reader.ReadToEndAsync(); <span class="comment">// Or process as needed</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Secret &#x27;<span class="subst">&#123;secretName&#125;</span>&#x27; has no String or Binary value.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AmazonSecretsManagerException e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Error retrieving secret &#x27;<span class="subst">&#123;secretName&#125;</span>&#x27;: <span class="subst">&#123;e.Message&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamics 365 Business Central API Integration</title>
      <link href="/2025/04/dynamics-365-business-central-api-integration/"/>
      <url>/2025/04/dynamics-365-business-central-api-integration/</url>
      
        <content type="html"><![CDATA[<p>I needed a way to integrate with Dynamics 365 Business Central and a .Net application running in Azure. (see <a href="/2024/12/deploying-dotnet-applications-azure/">Deploying .NET Applications To Azure</a>), these are the high level steps.</p><h2 id="Entra"><a href="#Entra" class="headerlink" title="Entra"></a>Entra</h2><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><p>Your user will need the following access</p><ol><li>Access to the tenant</li><li>Needs the roles <code>Application Administrator</code> and <code>Cloud Application Administrator</code></li></ol><ul><li><a href="https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/concept-understand-roles">https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/concept-understand-roles</a></li></ul><h3 id="App-Registration"><a href="#App-Registration" class="headerlink" title="App Registration"></a>App Registration</h3><ol><li>Register the application in Entra, you will need the application (client) ID, its a GUID, example <code>00000000-0000-0000-0000-000000000001</code></li></ol><ul><li><a href="https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app">https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app</a></li></ul><ol start="2"><li>Optionally set App Roles if required, see <a href="/2025/01/entra-roll-based-access-control-for-applications/">Entra RBAC For Applications</a></li><li>Create the app secret and set its expiry date, the secret is a string, example <code>SSs00~SSSSSSSSSSSssssssssss.SSSSSsss~Sss</code></li></ol><ul><li><a href="https://learn.microsoft.com/en-nz/dynamics365/business-central/dev-itpro/administration/administration-center-api">https://learn.microsoft.com/en-nz/dynamics365/business-central/dev-itpro/administration/administration-center-api</a></li></ul><ol start="4"><li>Set the API permission</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AdminCenter.ReadWrite.All</span><br><span class="line">API.ReadWrite.All</span><br></pre></td></tr></table></figure><ul><li><a href="https://learn.microsoft.com/en-nz/dynamics365/business-central/dev-itpro/administration/administration-center-api">https://learn.microsoft.com/en-nz/dynamics365/business-central/dev-itpro/administration/administration-center-api</a></li><li><a href="https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/configure-user-consent">https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/configure-user-consent</a></li></ul><h3 id="Testing-with-postman"><a href="#Testing-with-postman" class="headerlink" title="Testing with postman"></a>Testing with postman</h3><ol><li>Construct the request</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST: https://login.microsoftonline.com/&#123;&#123;tenant-id&#125;&#125;/oauth2/v2.0/token</span><br><span class="line">Auth Basic: `&#123;&#123;client-id&#125;&#125;` `&#123;&#123;client-secret&#125;&#125;`</span><br><span class="line"></span><br><span class="line">BODY: x-www-form-urlencoded</span><br><span class="line">grant_type: client_credentials</span><br><span class="line">scope: https://api.businesscentral.dynamics.com/.default</span><br></pre></td></tr></table></figure><p>Optional test to set the <a href="/2022/06/authorization-using-jwt/">JWT</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function main()&#123;</span><br><span class="line">    var jsonData = JSON.parse(responseBody);</span><br><span class="line">    var jwt = jsonData.access_token;</span><br><span class="line">    postman.setEnvironmentVariable(&quot;access_token&quot;, jwt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><ol start="2"><li>Validate token</li></ol><p>Example roles as seen when running the token through <a href="https://jwt.io/">https://jwt.io/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;roles&quot;: [</span><br><span class="line">    &quot;Automation.ReadWrite.All&quot;,</span><br><span class="line">    &quot;app_access&quot;,</span><br><span class="line">    &quot;AdminCenter.ReadWrite.All&quot;,</span><br><span class="line">    &quot;API.ReadWrite.All&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><ul><li><a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-develop-connect-apps">https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-develop-connect-apps</a></li></ul><h2 id="Dynamics"><a href="#Dynamics" class="headerlink" title="Dynamics"></a>Dynamics</h2><ol><li>Set up the Microsoft Entra application in Business Central</li></ol><p>Example permission</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADMINISTRATOR</span><br></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/administration/automation-apis-using-s2s-authentication#task-2-set-up-the-microsoft-entra-application-in-">https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/administration/automation-apis-using-s2s-authentication#task-2-set-up-the-microsoft-entra-application-in-</a></p><h2 id="Dyanamis-API"><a href="#Dyanamis-API" class="headerlink" title="Dyanamis API"></a>Dyanamis API</h2><p>Using the token as a bearer you can then make requests, these are all GET and <code>&#123;&#123;env&#125;&#125;</code> can be <code>production|sandbox</code></p><p>Base to discovery the API and get all companies</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0</span><br><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0/subscriptions</span><br><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0/companies</span><br></pre></td></tr></table></figure><p>Then to find some data using a <code>company-id</code> from the above, it will be a guid, example <code>00000000-0000-0000-0000-000000000002</code>. You can also filter by <code>sales-quote-id</code> which is also a guid, example <code>00000000-0000-0000-0000-000000000003</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0/companies(&#123;&#123;company-id&#125;&#125;)/salesQuotes</span><br><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0/companies(&#123;&#123;company-id&#125;&#125;)/salesQuotes(&#123;&#123;sales-quote-id&#125;&#125;)</span><br></pre></td></tr></table></figure><p>It also supports filters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Number greater than 430</span><br><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0/companies(&#123;&#123;company-id&#125;&#125;)/salesQuotes?$filter=number gt &#x27;SQ000430&#x27;</span><br><span class="line"></span><br><span class="line"># DocumentDate greater than 2025-05-02 where the format is YYYY-MM-DD</span><br><span class="line">https://api.businesscentral.dynamics.com/v2.0/&#123;&#123;env&#125;&#125;/api/v2.0/companies(&#123;&#123;company-id&#125;&#125;)/salesQuotes?$filter=documentDate gt 2025-05-02</span><br></pre></td></tr></table></figure><ul><li><a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/api-reference/v1.0/dynamics-open-api">https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/api-reference/v1.0/dynamics-open-api</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> azure </tag>
            
            <tag> entra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS Records</title>
      <link href="/2025/03/dns-records/"/>
      <url>/2025/03/dns-records/</url>
      
        <content type="html"><![CDATA[<p>I needed to understand the building blocks of domains, some providers call the same thing by different names. Many more record types exist and you can use tooling like <a href="https://www.nslookup.io/">https://www.nslookup.io</a> to query these values. DNS stands for Domain Name System, its most basic job is to resolve Domain names to IP address. DNS has a hierarchy of 3 main servers <code>Root Server</code> -&gt; <code>Top Level Domain Server</code> (TLD) -&gt; <code>Authoritative Name Server</code></p><p>Example request to example.com</p><ul><li><strong>Root Server</strong>, looks at the request and forwards the request to the correct TLD, <code>example.com</code> needs to go to the <code>.com</code> TLD</li><li><strong>Top Level Domain Server</strong>, looks at the request and forwards the request to the correct Authoritative Name Server as it only knows information about top level domains like <code>.com .org</code> ect</li><li><strong>Authoritative Name Server</strong>, knows everything about a domain, example IP address, so it resolves <code>example.com</code> to <code>12.34.56.78</code> using its zone file</li></ul><p>Understanding the stucture, computers read the domain from right to left</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www.example.com.</span><br><span class="line">               Root domain, its a hidden `.` at the end</span><br><span class="line">            Top level domain, its the `com`</span><br><span class="line">    2nd level domain, so the `example` bit</span><br><span class="line">Subdomain, so the `www` bit</span><br></pre></td></tr></table></figure><p>All records have a time to live (TTL) which is how long they should be cached for on the machine making the request. Example <code>7200</code> which is seconds, so 2 hours. (7200 / 60 minutes/hour = 120 minutes, 120 minutes / 60 minutes/hour = 2 hours). </p><h2 id="A-Record-Address"><a href="#A-Record-Address" class="headerlink" title="A Record (Address)"></a>A Record (Address)</h2><p>This is the most common record, this is an IPv4 address (32 bit numeric address) that is resolved from the <code>apex</code> / <code>root</code> domain. Note an <code>AAAA</code> is the same thing but for IPv6 (128 bit alphanumeric address).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Type  | Value               | Resolves to                      | Notes                                                                      |</span><br><span class="line">------|---------------------|----------------------------------| ---------------------------------------------------------------------------|</span><br><span class="line">A     | example.com         | 12.34.56.78                      | Commonly denoted with @, the address is IPv4                               |</span><br><span class="line">AAAA  | example.com         | 2501:0:53b::3330:c2f4            | IPv6                                                                       |</span><br><span class="line">CNAME | www.example.com     | example.com                      |                                                                            |</span><br><span class="line">CNAME | ftp.example.com     | example.com                      | The webserver then directs the traffic to the FTP service based on the URL |</span><br><span class="line">TXT   | _dnsauth            | _dx0vfgiwo433rjgh39zcv3ox8fxnlje |                                                                            |</span><br></pre></td></tr></table></figure><h2 id="CNAME-Record-Canonical"><a href="#CNAME-Record-Canonical" class="headerlink" title="CNAME Record (Canonical)"></a>CNAME Record (Canonical)</h2><p>Typically used to resolve a subdomain such as <code>www</code> or <code>mail</code> to the domain hosting that subdomain’s content.</p><p>The root domain it resolves to however doesnt have to be the same, example <code>www.foo.com</code> can have a CNAME of <code>bar.com</code></p><p>This is basically and ALIAS and you can also create an A record to point <code>www.example.com</code> -&gt; <code>example.com</code></p><h3 id="CNAME-Flattening"><a href="#CNAME-Flattening" class="headerlink" title="CNAME Flattening"></a>CNAME Flattening</h3><p>This is not a standard <code>CNAME</code> and is as a workaround, allowing you to effectively proxy your apex domain.</p><p>Note that <code>CNAME Flattening</code>, <code>DNS chasing</code>, <code>ANAME</code> and <code>ALIAS</code> are all the same thing and allow you to get the root ip addresses for a domain from a different domain. So that would allow the provider to maintain all the clients host records from a domain they control.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client1.com                          -&gt; CNAME for client1.myagencyrecords.net is -&gt; A record for server1.myagencyrecords.net</span><br><span class="line">CNAME is client1.myagencyrecords.net    server1.myagencyrecords.net                 is 135.148.47.71</span><br></pre></td></tr></table></figure><ul><li><a href="https://simpledns.plus/kb/2-alias-records-auto-resolved-alias">https://simpledns.plus/kb/2-alias-records-auto-resolved-alias</a></li><li><a href="https://www.youtube.com/watch?v=TC9zwYiVU7o">Adam Lowe: CNAME Flattening for Web Agencies</a></li></ul><h2 id="TXT-Record"><a href="#TXT-Record" class="headerlink" title="TXT Record"></a>TXT Record</h2><p>Miscellaneouse domain information, can be used to verify domain ownership, ensure email security, and prevent spam and phishing. Also used to handle outgoing email.</p><h2 id="MX-Record"><a href="#MX-Record" class="headerlink" title="MX Record"></a>MX Record</h2><p>Mail exchanger record used for email. When you send an email to <code>spam@example.com</code> the mail transfer agent (MTA) will query the MX records for example.com looking for the email server(s). The DNS could respond back with mail1.example.com which is where it should send the email to.</p><p>There are normally two entries, primary and secondary. This is denoted based on the priority field, lower is primary.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Type  | Priority | Name        | Host                     |</span><br><span class="line">------|----------|-------------|--------------------------|</span><br><span class="line">MX    | 10       | example.com | mail1.example.com        |</span><br><span class="line">MX    | 20       | example.com | mail2.example.com        |</span><br></pre></td></tr></table></figure><h2 id="SOA-Record"><a href="#SOA-Record" class="headerlink" title="SOA Record"></a>SOA Record</h2><p>Start of authority, stores administrative information about a DNS zone. A DNS zone is a section of a domain name space that a certain administrator has been delegated control over. DNS zones allow a domain namespace to be devided into different sections. Examples <code>shop.example.com</code>, <code>blog.example.com</code> and <code>support.example.com</code></p><p>You could have DNS ZONE 1 for <code>shop.example.com</code> and <code>blog.example.com</code> if together they only have a few computers and have one administrator to manage it. Then have DNS ZONE 2 for <code>support.example.com</code> if it has several times more computers and another administrator to manage it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type  | MName (Primary name server)  | RName (email of the administrator, the left dot is actually an @) | Serial # (version in the zone) | Retry |</span><br><span class="line">------|----------------------------- |-------------------------------------------------------------------|--------------------------------|-------|</span><br><span class="line">SOA   | ns1.example.com              | admin.example.com                                                 | 510025                         | 60    |</span><br></pre></td></tr></table></figure><h2 id="NS-Record"><a href="#NS-Record" class="headerlink" title="NS Record"></a>NS Record</h2><p>Name Server record provides the name of the authoritative name sever within a domain.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Type  | Value            | Name        | Notes      |</span><br><span class="line">------|--------------------------------|------------|</span><br><span class="line">NS    | ns1.example.com  | example.com | Primary    |</span><br><span class="line">NS    | ns2.example.com  | example.com | Secondary  |</span><br></pre></td></tr></table></figure><h2 id="SRV-Record"><a href="#SRV-Record" class="headerlink" title="SRV Record"></a>SRV Record</h2><p>Service record, points to a server including a port number, this is useful for Voice Over IP (VOIP), instant messaging, printers ect</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type  | Priority | Service             | Port | Name        | Weight |</span><br><span class="line">------|----------|---------------------|------|-------------|--------| </span><br><span class="line">SRV   | 10       | service.example.com | 999  | example.com | 0      |</span><br></pre></td></tr></table></figure><h2 id="PTR-Record"><a href="#PTR-Record" class="headerlink" title="PTR Record"></a>PTR Record</h2><p>Pointer record, this is basically the reverse of an A or AAAA record, so you give the IP <code>12.34.56.78</code> and get the DNS <code>example.com</code>. They are attached to email and are used to prevent email spam.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type  | IP Address  | Name        |</span><br><span class="line">------|-------------|-------------| </span><br><span class="line">PTR   | 12.34.56.78 | example.com |</span><br></pre></td></tr></table></figure><p>Examples, so an email sent from <code>gmail.com</code> should include <code>209.85.220.41</code>, if it doesnt it will be flagged as spam.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IP            | Email domain |</span><br><span class="line">--------------|--------------| </span><br><span class="line">98.137.68.31  | yahoo.com    |</span><br><span class="line">209.85.220.41 | gmail.com    |</span><br><span class="line">12.101.27.50  | aol.com      |</span><br><span class="line">25.145.71.56  | hotmain.com  |</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.youtube.com/watch?v=HnUDtycXSNE">PowerCert Animated Videos: DNS Records Explained</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSQL Performance</title>
      <link href="/2025/03/psql-performance/"/>
      <url>/2025/03/psql-performance/</url>
      
        <content type="html"><![CDATA[<p>I needed a way to performance tune a <a href="https://www.postgresql.org/">Postgresql</a> database focusing on a simple table and select statement. I did this locally using Docker, PgAdmin and a blank table.</p><p>This is simliar to <a href="/2020/09/mysql-performance/">MySQL Performance</a> and <a href="/2020/02/sql-execution-plans/">SQL Execution Plans</a>.</p><h2 id="Local-setup"><a href="#Local-setup" class="headerlink" title="Local setup"></a>Local setup</h2><ol><li>Use the <a href="https://hub.docker.com/_/postgres">postgres docker</a> image to run a local instance </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5432:5432 -e POSTGRES_USER=myuser -e POSTGRES_PASSWORD=mypassword -e POSTGRES_DB=mydatabase -e POSTGRES_SCHEMA=myschema --name my-postgres postgres:17.4</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Connect to the database using <a href="https://www.pgadmin.org/download/pgadmin-4-windows/">PgAdmin</a>, I used <a href="https://www.postgresql.org/ftp/pgadmin/pgadmin4/v9.1/windows/">v9.1</a></p></li><li><p>Create a test table, here I copied Milans example and created in <code>pgtest.mydatabase.public.user_notes</code></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_notes (</span><br><span class="line">    id UUID <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    user_id UUID <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    note <span class="type">CHARACTER</span> <span class="type">varying</span>(<span class="number">500</span>),</span><br><span class="line">    <span class="type">date</span> <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk_user_notes <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="4"><li>Based on <a href="/2019/12/sql-gen-random-data/">Generate Random Data</a> create 1,000,000 records, on my machine this took <code>22 seconds</code> to complete</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL uses DECLARE within a DO $$ ... $$ block (an anonymous code block) to declare variables.</span></span><br><span class="line">DO $$ </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    count <span class="type">INT</span> :<span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- := is used for assignment during declaration.</span></span><br><span class="line">    upper_bound <span class="type">INT</span> :<span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    half_way <span class="type">INT</span> :<span class="operator">=</span> upper_bound <span class="operator">/</span> <span class="number">2</span>;</span><br><span class="line">    random_user_id UUID;</span><br><span class="line">    random_note <span class="type">VARCHAR</span>(<span class="number">500</span>);</span><br><span class="line">    random_date <span class="type">TIMESTAMP</span>;</span><br><span class="line">    random_id UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    RAISE NOTICE <span class="string">&#x27;Inserting test data with % records&#x27;</span>, upper_bound;</span><br><span class="line"></span><br><span class="line">    WHILE count <span class="operator">&lt;=</span> upper_bound LOOP</span><br><span class="line">        random_user_id :<span class="operator">=</span> gen_random_uuid();</span><br><span class="line">        random_note :<span class="operator">=</span> substr(md5(random()::text), <span class="number">1</span>, <span class="number">100</span>); <span class="comment">-- Generate a random string for the note, up to 100 characters</span></span><br><span class="line">        <span class="comment">-- random_date := (clock_timestamp() - (random() * 365 * 24 * interval &#x27;1 hour&#x27;)); -- Generate a random date time within the last year</span></span><br><span class="line">        random_date :<span class="operator">=</span> clock_timestamp();</span><br><span class="line">        random_id :<span class="operator">=</span> gen_random_uuid();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_notes (id, user_id, note, <span class="type">date</span>)</span><br><span class="line">        <span class="keyword">VALUES</span> (random_id, random_user_id, random_note, random_date);</span><br><span class="line"></span><br><span class="line">        IF count <span class="operator">%</span> <span class="number">50000</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">            RAISE NOTICE <span class="string">&#x27;%&#x27;</span>, count;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">        IF count <span class="operator">=</span> half_way <span class="keyword">THEN</span></span><br><span class="line">            RAISE NOTICE <span class="string">&#x27;** Halfway bro! **&#x27;</span>;</span><br><span class="line">            RAISE NOTICE <span class="string">&#x27;%&#x27;</span>, random_id;</span><br><span class="line">            RAISE NOTICE <span class="string">&#x27;%&#x27;</span>, random_date;</span><br><span class="line">        <span class="keyword">END</span> IF;        </span><br><span class="line"></span><br><span class="line">        count :<span class="operator">=</span> count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> LOOP;</span><br><span class="line"></span><br><span class="line">    RAISE NOTICE <span class="string">&#x27;DONE!&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> $$;</span><br></pre></td></tr></table></figure><ol start="5"><li>Note the data halfway, this is useful later based on the data access patterns, its almost like I knew how the data was going to be accessed ahead of time 💩</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NOTICE:  450000</span><br><span class="line">NOTICE:  500000</span><br><span class="line">NOTICE:  ** Halfway bro! **</span><br><span class="line">NOTICE:  782103c1-a971-4b5d-b7da-5e29af12ce60</span><br><span class="line">NOTICE:  2025-03-07 05:36:56.091957</span><br><span class="line">NOTICE:  550000</span><br><span class="line">NOTICE:  600000</span><br></pre></td></tr></table></figure><ol start="6"><li>Confirm the data exists</li></ol><p>Count and expect <code>1,000,000</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt <span class="keyword">FROM</span> user_notes</span><br></pre></td></tr></table></figure><p><img src="/d/psql-performance/count.jpg" alt="Count"></p><h2 id="Identify-data-access-patterns"><a href="#Identify-data-access-patterns" class="headerlink" title="Identify data access patterns"></a>Identify data access patterns</h2><ol><li>Here Im just using the same SQL command Milan was using for his cursor example and the predicate values from my data seeding above</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, <span class="type">date</span>, note, user_id</span><br><span class="line"><span class="keyword">FROM</span> user_notes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">date</span> <span class="operator">&gt;</span> <span class="string">&#x27;2025-03-07 05:36:56.091957&#x27;</span> </span><br><span class="line"><span class="keyword">OR</span> (<span class="type">date</span> <span class="operator">=</span> <span class="string">&#x27;2025-03-07 05:36:56.091957&#x27;</span> <span class="keyword">AND</span> id <span class="operator">&gt;=</span> <span class="string">&#x27;782103c1-a971-4b5d-b7da-5e29af12ce60&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span> <span class="keyword">DESC</span>, id <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h2><p>There are a few ways to analyze the query</p><h3 id="Visually"><a href="#Visually" class="headerlink" title="Visually"></a>Visually</h3><ol><li>Under <code>Explain Settings</code> Check <code>Costs</code>. The cost is not a time measurement, its just a number that represents the effort to run the query where lower is good. If you have a complex query, you would look at the cost per step and then focus on the highest cost.</li></ol><p><img src="/d/psql-performance/explain_settings_cost.jpg" alt="Explain Settings Costs"></p><ol start="2"><li>Select <code>Explain Analyze</code>, then click <code>Graphical</code>, the thick lines are indicative of inefficiency, this is a simple example but for more complex commands they could help you pin point where to start looking first. If you de-select <code>Costs</code> from step 1 and run again you will notice the lines are skinny.</li></ol><p>So I guess SQL is telling us if we are too fat we will be slow? Thats not very nice! 🤬</p><p><img src="/d/psql-performance/analyze_explain_graphical.jpg" alt="Analyze Explain Graphical"></p><ol start="3"><li>Selecting <code>Analysis</code> you can see the cost per step, a table <strong>scan on user_notes</strong> is bad, this means its scanning the whole table. Generally a seek is more efficient.</li></ol><p><img src="/d/psql-performance/analyze_explain_analysis.jpg" alt="Analyze Explain Analysis"></p><h3 id="Explain-Analyze"><a href="#Explain-Analyze" class="headerlink" title="Explain Analyze"></a>Explain Analyze</h3><ol><li>Just add <code>EXPLAIN ANALYZE</code> to the beginning of the SQL command and execute the script. The SQL command should look like the below:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN ANALYZE <span class="keyword">SELECT</span> id, <span class="type">date</span>, note, user_id</span><br><span class="line"><span class="keyword">FROM</span> user_notes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">date</span> <span class="operator">&gt;</span> <span class="string">&#x27;2025-03-07 05:36:56.091957&#x27;</span> </span><br><span class="line"><span class="keyword">OR</span> (<span class="type">date</span> <span class="operator">=</span> <span class="string">&#x27;2025-03-07 05:36:56.091957&#x27;</span> <span class="keyword">AND</span> id <span class="operator">&gt;=</span> <span class="string">&#x27;782103c1-a971-4b5d-b7da-5e29af12ce60&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span> <span class="keyword">DESC</span>, id <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Looking at the results, the execution time is <code>149.880 ms</code>. Also same as the above, you can see a table <strong>scan on user_notes</strong> which is bad.</li></ol><p><img src="/d/psql-performance/analyze_explain.jpg" alt="Analyze Explain"></p><h2 id="Adding-an-index"><a href="#Adding-an-index" class="headerlink" title="Adding an index"></a>Adding an index</h2><p>Based on the contrived example above and seeing what Milan did, its clear we need an index on <code>date</code> and <code>id</code> with the same sorting. An index is just a sorted table that will point to the data. Its bad to index every column because there is a performance hit, everytime you insert or delete, the index becomes more fragmented.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_notes_date_id <span class="keyword">ON</span> user_notes (<span class="type">date</span> <span class="keyword">DESC</span>, id <span class="keyword">DESC</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--DROP INDEX idx_user_notes_date_id; -- you can drop the index if its dodgy</span></span><br></pre></td></tr></table></figure><h2 id="Analyze-with-index"><a href="#Analyze-with-index" class="headerlink" title="Analyze (with index)"></a>Analyze (with index)</h2><p>Life is better with an index :)</p><h3 id="Visually-with-index"><a href="#Visually-with-index" class="headerlink" title="Visually (with index)"></a>Visually (with index)</h3><ol><li>Remember that under <code>Explain Settings</code> to check <code>Costs</code>, then running the SQL command with <code>Explain Analyze</code> and click <code>Graphical</code>. You will now see <strong>idx_user_notes_date_id</strong> is being used, there is still a tick line for the limit, indexes are not a silver bullet :)</li></ol><p><img src="/d/psql-performance/analyze_explain_graphical_with_index.jpg" alt="Analyze Explain Graphical With Index"></p><ol start="2"><li>Selecting <code>Analysis</code> you can now see a scan using the index, this is better</li></ol><p><img src="/d/psql-performance/analyze_explain_analysis_with_index.jpg" alt="Analyze Explain Analysis With Index"></p><h2 id="Explain-Analyze-with-index"><a href="#Explain-Analyze-with-index" class="headerlink" title="Explain Analyze (with index)"></a>Explain Analyze (with index)</h2><ol><li>Same as above add just add <code>EXPLAIN ANALYZE</code> to the beginning of the SQL command and execute the script, this time the execution time is <code>0.042 ms</code></li></ol><p><img src="/d/psql-performance/analyze_explain_with_index.jpg" alt="Analyze Explain With Index"></p><ol start="2"><li>So if you compare the speed gain with and without the index, its night and day!</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  0.042 ms -&gt; with index</span><br><span class="line">149.880 ms -&gt; without index</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=XHRk16b2vc0">Database Star: How to Understand the pgAdmin Execution Plan</a></li><li><a href="https://www.youtube.com/watch?v=U3LcKY19z_4">Milan Jovanović: THIS ONE Trick Made My Database Query 400x FASTER! (Cursor Pagination EXPOSED)</a></li><li><a href="https://www.milanjovanovic.tech/blog/understanding-cursor-pagination-and-why-its-so-fast-deep-dive">milanjovanovic.tech - Understanding Cursor Pagination and Why It’s So Fast (Deep Dive)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Onshape</title>
      <link href="/2025/02/onshape/"/>
      <url>/2025/02/onshape/</url>
      
        <content type="html"><![CDATA[<p>I love the ease of use of <a href="https://www.onshape.com/en/">Onshape</a>, its <a href="https://www.onshape.com/en/legal/terms-of-use">free to use</a> and the objects are public by default, sounds great for a maker with an open source mindset. These are some of the short-cuts and notes I use - which I keep forgetting, hence this post 🙃</p><p>I find the print tolerence to be about <code>0.3mm</code> betweem my design and the actual print on my K1C with mostly default settings.</p><p><strong>Shortcuts</strong></p><ul><li><code>F</code> zoom to fit</li><li><code>N</code> normal view, rotates to it</li><li><code>P</code> toggle planes</li><li><code>Q</code> construction</li><li><code>I</code> constraint</li><li><code>D</code> dimension</li><li><code>U</code> use tool</li></ul><p><strong>New plane at angle</strong></p><ul><li>New plane -&gt; Line angle -&gt; select line -&gt; set angle, eg <code>45 degrees</code></li></ul><p><strong>Create second sketch</strong><br>You add on by replicating a piece of geometry (thats just a part of the object you are build on), this is the starting point</p><ul><li>select sketch -&gt; select a face -&gt; press <code>U</code> for use tool &amp; select geometry to trace to the sketch -&gt; now draw on that</li></ul><p><strong>Download STL</strong></p><ul><li>parts -&gt; export -&gt; <code>STL</code> -&gt; fine resolution -&gt; units in <code>MM</code></li></ul><p><strong>Quick 3D Print</strong></p><ul><li>useful when checking hole spacing -&gt; <code>Shift-E</code> (extrude) -&gt; <code>0.6mm</code> is 3 layers</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cad </tag>
            
            <tag> onshape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entra RBAC For Applications</title>
      <link href="/2025/01/entra-roll-based-access-control-for-applications/"/>
      <url>/2025/01/entra-roll-based-access-control-for-applications/</url>
      
        <content type="html"><![CDATA[<p>Using ASP.NET I needed a way to identify users by role, these users are managed by <a href="https://www.microsoft.com/en-nz/security/business/identity-access/microsoft-entra-id">Entra ID</a>, the roles are configured in Entra under the registered application and the assigned to the user.</p><p>These steps assume you already have an <a href="https://learn.microsoft.com/en-us/entra/fundamentals/sign-up-organization">Entra ID</a> and an <a href="https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app">application registered with Entra</a>, I didnt use the Entra UI but rather <a href="https://learn.microsoft.com/en-us/entra/external-id/customers/visual-studio-connected-service">Visual Studio Connected Services</a></p><h2 id="Entra-UI-Steps"><a href="#Entra-UI-Steps" class="headerlink" title="Entra UI Steps"></a>Entra UI Steps</h2><p>MS will probably update their UI tomorrow but these steps are correct as of 15/01/2025</p><h3 id="Create-User"><a href="#Create-User" class="headerlink" title="Create User"></a>Create User</h3><ol><li>Log into <a href="https://entra.microsoft.com/">https://entra.microsoft.com/</a></li><li>On the left select <code>Users</code> -&gt; <code>All Users</code> -&gt; <code>+ New User</code> -&gt; <code>Crate new user</code></li><li>Populate the required fields, these are values referenced below in this post</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User principal name: carl.test</span><br><span class="line">Display name:        Carl Test</span><br></pre></td></tr></table></figure><ol start="4"><li>Dont add any groups/roles here, just create</li></ol><h3 id="Create-Roles"><a href="#Create-Roles" class="headerlink" title="Create Roles"></a>Create Roles</h3><ol><li>Log into <a href="https://entra.microsoft.com/">https://entra.microsoft.com/</a></li><li>On the left select <code>Applications</code> -&gt; <code>App registrations</code> -&gt; select the owned application instance</li><li>On the left select <code>App roles</code> -&gt; <code>+ Create app role</code></li><li>Populate the details as follows, the <code>Value</code> is what will be checked for in the code</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Display name   | Allowed member types   | Value     | Description</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">App Foo Role   | Users/Groups           | App.Foo   | App Foo Role</span><br><span class="line">App Baz Role   | Users/Groups           | App.Baz   | App Baz Role</span><br></pre></td></tr></table></figure><p><img src="/d/entra-roll-based-access-control-for-applications/app-roles.jpg" alt="Created App Roles"></p><ol start="5"><li>Select <code>Overview</code> -&gt; <code>Managed application in local directory</code> (its near the top right)</li><li>On the left select <code>Users and groups</code> -&gt; <code>+ Add user/group</code></li><li>Users -&gt; click <code>None Selected</code> -&gt; Check next to <code>Carl Test</code> and click <code>Select</code></li><li>Select a role -&gt; click <code>None Selected</code> -&gt; click <code>App Foo Role</code> and click <code>Assign</code></li><li>Repeat for other roles like <code>App Baz Role</code></li></ol><p><img src="/d/entra-roll-based-access-control-for-applications/assigned-app-roles.jpg" alt="Assigned App Roles"></p><h2 id="Code-Steps-Auth-Policy"><a href="#Code-Steps-Auth-Policy" class="headerlink" title="Code Steps (Auth Policy)"></a>Code Steps (Auth Policy)</h2><p>Simliar to <a href="/2024/10/auth-policy-checking-scope/">Auth Policy Checking Scope</a> we can create Policies based claims</p><ol><li>In <code>program.cs</code> build the policy</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddAuthorizationBuilder()</span><br><span class="line">    .AddPolicy(<span class="string">&quot;AppFooPolicy&quot;</span>, policy =&gt; policy.RequireRole(<span class="string">&quot;App.Foo&quot;</span>))</span><br><span class="line">    .AddPolicy(<span class="string">&quot;AppBazPolicy&quot;</span>, policy =&gt; policy.RequireRole(<span class="string">&quot;App.Baz&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>In the controller add the annotation</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(Policy = <span class="string">&quot;AppFooPolicy&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Alternatively just check for the Role directly</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(Roles = <span class="string">&quot;App.Foo&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Code-Steps-Logic-by-Role"><a href="#Code-Steps-Logic-by-Role" class="headerlink" title="Code Steps (Logic by Role)"></a>Code Steps (Logic by Role)</h2><p>We can confirm all the users claims by checking the context</p><ol><li>Register the ContextAccessor In <code>program.cs</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddHttpContextAccessor();</span><br></pre></td></tr></table></figure><ol start="2"><li>Inject <code>IHttpContextAccessor</code> and query all claims</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger, IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (httpContextAccessor.HttpContext!.User.Identity?.IsAuthenticated == <span class="literal">true</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> claims = httpContextAccessor.HttpContext!.User.Claims.ToList();</span><br></pre></td></tr></table></figure><ol start="3"><li>This will give a key value of all claims, the ones we care about are <code>App.Foo</code> and <code>App.Baz</code>. In this case the claim is a role.</li></ol><p><img src="/d/entra-roll-based-access-control-for-applications/claims.jpg" alt="Claims"></p><ol start="4"><li>You can then build a service that instead takes <code>IHttpContextAccessor</code> and returns true/false by role using <a href="https://learn.microsoft.com/en-us/dotnet/api/system.web.security.roleprincipal.isinrole">IsInRole</a>.</li></ol><p>This can then programatically show/hide parts of the application or dictate logical flow.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoleService</span>(<span class="params">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasAppFooRole</span>()</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span> (!IsAuthenticated())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpContextAccessor.HttpContext!.User.IsInRole(<span class="string">&quot;App.Foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsAuthenticated</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> httpContextAccessor</span><br><span class="line">            .HttpContext!</span><br><span class="line">            .User</span><br><span class="line">            .Identity?</span><br><span class="line">            .IsAuthenticated == <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Code-Steps-Logic-by-Group"><a href="#Code-Steps-Logic-by-Group" class="headerlink" title="Code Steps (Logic by Group)"></a>Code Steps (Logic by Group)</h2><p>This can also be done with groups using the same policy approach as above with <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authorization.authorizationpolicybuilder.requireclaim">RequireClaim</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddAuthorization(o =&gt;</span><br><span class="line">&#123;</span><br><span class="line">  o.AddPolicy(<span class="string">&quot;UserIsInGroup&quot;</span>, p =&gt; </span><br><span class="line">    p.RequireClaim(<span class="string">&quot;groups&quot;</span>, <span class="string">&quot;&#123;YOUR-GROUP-GUID&#125;&quot;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You get the group GUID from Entra and assign it the user.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/en-us/aspnet/core/security/authorization/roles">https://learn.microsoft.com/en-us/aspnet/core/security/authorization/roles</a></li><li><a href="https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims">https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims</a></li><li><a href="https://learn.microsoft.com/en-us/entra/identity-platform/howto-add-app-roles-in-apps">https://learn.microsoft.com/en-us/entra/identity-platform/howto-add-app-roles-in-apps</a></li><li><a href="https://learn.microsoft.com/en-us/entra/identity-platform/access-token-claims-reference">https://learn.microsoft.com/en-us/entra/identity-platform/access-token-claims-reference</a></li><li><a href="https://www.youtube.com/watch?v=Sc1y4WBHP2k">https://www.youtube.com/watch?v=Sc1y4WBHP2k</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> entra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying .NET Applications To Azure</title>
      <link href="/2024/12/deploying-dotnet-applications-azure/"/>
      <url>/2024/12/deploying-dotnet-applications-azure/</url>
      
        <content type="html"><![CDATA[<p>Overview of my notes for Deploying .NET Applications To Azure, the idea is to be able to follow them again later and apply to other deployments.</p><p>For a guided tutorial I highly recommend <a href="https://dometrain.com/course/from-zero-to-hero-deploying-dotnet-apps-to-azure/">Dometrain - From Zero to Hero: Deploying .NET Applications to Azure by Mohamad Lawand</a></p><p>Example container app ingress : <a href="https://demo-aca-bb8c7a39-dev.bluefield-f45026b3.australiaeast.azurecontainerapps.io/swagger/index.html">https://demo-aca-bb8c7a39-dev.bluefield-f45026b3.australiaeast.azurecontainerapps.io/swagger/index.html</a>, so <code>demo-aca-bb8c7a39-dev</code> comes from <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac_example/container_app.tf#L3">container_app.tf</a></p><h2 id="Local-Setup"><a href="#Local-Setup" class="headerlink" title="Local Setup"></a>Local Setup</h2><p><strong>Terraform CLI</strong></p><ol><li>Install terraform CLI, see <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli#install-terraform">https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli#install-terraform</a></li><li>Check its available after installing, this should show a version, example <code>v1.9.8</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform version</span><br></pre></td></tr></table></figure><p><strong>Sample code</strong></p><ol><li>Clone <a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/src/DemoApi">DemoApi</a>. </li></ol><p>I built this simple CRUD(ish) app based on the Microsoft templates and adapted it to use <a href="/2021/02/entity-framework-core/">EF Core</a> and <a href="https://hub.docker.com/_/postgres">Postgres</a></p><ol start="2"><li>Run the database locally using docker compose, there are 2 dbs because the tutorial used MS SQL but PGSQL is cheaper and the one that I would use for actual deployments.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up</span><br></pre></td></tr></table></figure><p>The default passwords are</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Type        | User        | Password                             | Port</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">MS SQL      | sa          | 00000000-0000-0000-0000-919333ac7aaf | 1433</span><br><span class="line">PostgreSQL  | postgres    | 00000000-0000-0000-0000-919333ac7aaf | 5432</span><br></pre></td></tr></table></figure><ol start="3"><li>Run the API, its .NET 8.0 so still has <a href="https://github.com/dotnet/aspnetcore/issues/54599">Swagger</a>. The DB migrations should run <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/2a3f10fe8d9c8de2b93a0eb4d0bee9741f9d144b/src/DemoApi/Program.cs#L34">automagically</a> when the app starts.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure><p><em>Swagger is enabled for all environments so I can use the Swagger UI when deployed to Azure, normally this is only for local development or demo purposes.</em></p><p>The manual steps to run the migrations when testing were as follows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-ef                                                     ~ globally install the EF tooling</span><br><span class="line">dotnet build                                                                               ~ build the solution</span><br><span class="line"></span><br><span class="line">dotnet ef migrations add Initial_Migration --project .\src\DemoApi\DemoApi.csproj          ~ add a migration based on the application models</span><br><span class="line">dotnet ef database update --project .\src\DemoApi\DemoApi.csproj                           ~ apply the migration</span><br></pre></td></tr></table></figure><ol start="4"><li>Check the app can locally insert and read data from the database</li></ol><h2 id="Create-Azure-Infrastructure-With-Terraform"><a href="#Create-Azure-Infrastructure-With-Terraform" class="headerlink" title="Create Azure Infrastructure With Terraform"></a>Create Azure Infrastructure With Terraform</h2><p>You will need to know your tenant id, its just a GUID like 00000000-0000-0000-0000-000000000001</p><ol><li>Login to Azure, select and note the subscription</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">az login --tenant 00000000-0000-0000-0000-000000000001       ~ logs you into the tenant, will open Azure portal login</span><br><span class="line">az account show --query tenantId                             ~ shows which tenant you are logged in as</span><br></pre></td></tr></table></figure><ol start="2"><li>Copy <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac_example/vars.tf">vars.tf</a> from <code>iac_example</code> into <code>iac</code> and update some values</li></ol><ul><li><code>subscription_id</code> which came from az login (this is just temp while creating the infra from local)</li><li><code>sql_pass</code>, example <code>dfb18358-5994-4470-b75a-109981a3fcf9</code>, this is just a <a href="https://guidgenerator.com/">random GUID</a></li><li><code>sql_user</code>, example <code>sqldemo-admin</code></li><li><code>group_key</code>, example <code>bb8c7a39</code> (Some Azure resources need to be unique, while testing its helpful to use the start of a random GUID)</li></ul><p>This CLI command was helpful when I was trying to understand the regions which I stored as <code>location</code> in <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac_example/vars.tf">vars.tf</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az account list-locations -o table      ~ list of Azure regions</span><br></pre></td></tr></table></figure><ol start="3"><li>Copy <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac_example/setup.tf">setup.tf</a> and check the <code>hashicorp/azurerm</code> provider version is current, example <code>4.14.0</code></li></ol><ul><li>sets the cloud provider, API versions and account to connect to by subscription id</li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest">azurerm</a></li></ul><ol start="4"><li>Run <code>terraform init</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">terraform init    ~ local initialization, and tracking with `.terraform.lock.hcl` to record the provider selections made</span><br><span class="line">                  ~ Per the docs: Include this file in your version control repository </span><br><span class="line">                  ~ so that Terraform can guarantee to make the same selections by default when you run &quot;terraform init&quot; in the future.</span><br></pre></td></tr></table></figure><ol start="5"><li>Copy the files listed below, one at a time, in order of the list, each time run <code>terraform plan</code> and <code>terraform apply</code>, this will create the infrastructure needed to run the application in Azure </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">terraform plan    ~ test run, compare local tf with azure, show the difference</span><br><span class="line"></span><br><span class="line">terraform apply   ~ execute, should create the resources described in tf plan</span><br><span class="line">                  ~ this will then create `terraform.tfstate` which is used to compare local to Azure</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac_example/resource-group.tf">resource-group.tf</a><ul><li>groups resources in Azure</li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/resource_group">resource-group</a></li></ul></li><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/iac_example/container-registry.tf">container-registry.tf</a><ul><li>registry to store and manage docker images by version</li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_registry">container_registry</a></li></ul></li><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/iac_example/log_analytics_workspace.tf">log_analytics_workspace.tf</a><ul><li>logging and analytics</li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/log_analytics_workspace">log_analytics_workspace</a></li></ul></li><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/iac_example/container_app_environment.tf">container_app_environment.tf</a><ul><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_app_environment">container_app_environment</a></li></ul></li><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/iac_example/container_app.tf">container_app.tf</a><ul><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_app">container_app</a></li></ul></li><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/iac_example/mssql.tf">mssql.tf</a><ul><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_server">mssql_server</a></li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_database">mssql_database</a></li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mssql_firewall_rule">mssql_firewall_rule</a></li></ul></li></ul><p>Note: <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_flexible_server">azurerm_postgresql_flexible_server</a> replaces the single server used <a href="https://learn.microsoft.com/en-us/azure/postgresql/migrate/whats-happening-to-postgresql-single-server">March 28, 2025</a></p><ul><li><a href="https://github.com/carlpaton/deploying-dotnet-azure/tree/main/iac_example/pgsql.tf">pgsql.tf</a> (Single Server)<ul><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_server">postgresql_server</a></li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_database">postgresql_database</a></li><li>see <a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/postgresql_firewall_rule">postgresql_firewall_rule</a></li></ul></li></ul><p>The end result seen from Azure showed the resources in my Resource Group:</p><p><img src="/d/deploying-dotnet-applications-azure/initial-resources-created.jpg" alt="Resources created in Azure"></p><p>You can also view the groups from the CLI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az group list --output table            ~ list resource groups</span><br></pre></td></tr></table></figure><p>You can also format the terraform files with <code>terraform fmt</code></p><h2 id="Test-Connect-To-SQL"><a href="#Test-Connect-To-SQL" class="headerlink" title="Test Connect To SQL"></a>Test Connect To SQL</h2><p>The username and DNS shown here was just for the demo, best practice is never to commit or share any secrets.</p><p>I then added my own IP address to the firewall by navigating to Resource Group (<code>demo-rg-bb8c7a39-dev</code>) -&gt; selected the SQL server (<code>demo-sql-bb8c7a39-dev</code>) -&gt; <code>Security</code> -&gt; <code>Networking</code> -&gt; Firewall rules -&gt; Add your client IPv4 address (xxx.xxx.xxx.xxx) -&gt; Azure automagically filled mine in -&gt; Rule name <code>Carl home IP</code> -&gt; Save. Your IP wont be static so will probs need an update later.</p><p>I then needed to get the server address for SQL in Azure by navigating to SQL server (<code>demo-sql-bb8c7a39-dev</code>), my server name was <em>demo-sql-bb8c7a39-dev.database.windows.net</em>, so the suffix comes from <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac/mssql.tf#L3">mssql.tf where we set the server name</a></p><p>Based on the <code>sql_pass/user</code> values in <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac/vars.tf#L26">vars.tf</a> I build then connected using <a href="https://dbeaver.io/">DBeaver</a> </p><p><img src="/d/deploying-dotnet-applications-azure/test-sql-connection.jpg" alt="Test sql connection"></p><h2 id="Create-Github-Secrets-and-Variables"><a href="#Create-Github-Secrets-and-Variables" class="headerlink" title="Create Github Secrets and Variables"></a>Create Github Secrets and Variables</h2><p>Github Settings -&gt; Secrets and variables -&gt; actions</p><ul><li>Secrets tab -&gt; Repository secrets -&gt; New repository secret</li><li>Variables tab -&gt; Repository variables -&gt; New repository variable</li></ul><p><strong>For Azure Container Registry</strong></p><p>To get these values navigate to Container Registry <code>demoacrbb8c7a39dev</code> -&gt; Settings -&gt; Access keys</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123; vars.ACR_SERVER &#125;&#125;              ~ demoacrbb8c7a39dev.azurecr.io</span><br><span class="line">$&#123;&#123; secrets.ACR_USER &#125;&#125;             ~ demoacrbb8c7a39dev</span><br><span class="line">$&#123;&#123; secrets.ACR_PASSWORD &#125;&#125;         ~ 000000000000000000000/000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p><strong>For Logging into Azure</strong></p><p>Create a <code>Service Principle</code> (SP) and configure its access to Azure resources, here we copy the entire JSON object and save as <code>AZ_CREDENTIALS</code> github secret. This SP is used when logging into Azure to deploy both the Application and IAC.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az ad sp create-for-rbac --name github-auth --role contributor --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/demo-rg-bb8c7a39-dev --json-auth --output json</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123; secrets.AZ_CREDENTIALS &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>For IAC (RBAC)</strong></p><p>Create a another <code>Service Principle</code> (SP), here we copy values out of the JSON and save as individual github secrets. This SP has no <code>role</code> or <code>scopes</code> and is used with the terraform deployment itself.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az ad sp create-for-rbac --name iac-terraform-auth</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123; secrets.ARM_CLIENT_ID &#125;&#125;         ~ appId</span><br><span class="line">$&#123;&#123; secrets.ARM_CLIENT_SECRET &#125;&#125;     ~ password</span><br><span class="line">$&#123;&#123; secrets.ARM_SUBSCRIPTION_ID &#125;&#125;   ~ you get this from `az login` or the Azure portal under and resource</span><br><span class="line">$&#123;&#123; secrets.ARM_TENANT_ID &#125;&#125;         ~ tenant</span><br></pre></td></tr></table></figure><ul><li><a href="https://learn.microsoft.com/en-us/cli/azure/ad/sp?view=azure-cli-latest#az-ad-sp-create-for-rbac">https://learn.microsoft.com/en-us/cli/azure/ad/sp?view=azure-cli-latest#az-ad-sp-create-for-rbac</a></li><li><a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret">https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret</a></li></ul><p><strong>For IAC (SQL Secrets)</strong></p><p>These are the values manually added to to <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac/vars.tf#L26">vars.tf</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123; secrets.TF_VAR_DB_PASSWORD &#125;&#125;    ~ used with `Terraform plan` as var `sql_pass`, example dfb18358-5994-4470-b75a-109981a3fcf9</span><br><span class="line">$&#123;&#123; secrets.TF_VAR_DB_USER &#125;&#125;        ~ used with `Terraform plan` as var `sql_user`, example sqldemo-admin</span><br></pre></td></tr></table></figure><p>This will look something like <code>Server=demo-sql-bb8c7a39-dev.database.windows.net,1433; Initial Catalog=demo_db; User=sqldemo-admin; Password=dfb18358-5994-4470-b75a-109981a3fcf9; Encrypt=False;</code></p><p>ENSURE its added wrapped in quotes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&#123; secrets.AZ_MSSQL_DB_CONN &#125;&#125;      ~ used when deploying, changes app settings ConnectionStrings__SqlServer</span><br></pre></td></tr></table></figure><h2 id="Github-Actions-Deploy-Application"><a href="#Github-Actions-Deploy-Application" class="headerlink" title="Github Actions - Deploy Application"></a>Github Actions - Deploy Application</h2><ol><li>Copy <code>\.github\examples\deploy-api.yaml</code> to <code>\.github\workflows\deploy-api.yaml</code></li><li>Update the config values, potentially this could be from a config but this is more intentional and these values wont change for the applications life span.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demoacrdev (few instance values)     -&gt; demoacrbb8c7a39dev</span><br><span class="line">containerAppName                     -&gt; demo-aca-bb8c7a39-dev</span><br><span class="line">containerAppEnvironment              -&gt; demo-cae-bb8c7a39-dev</span><br><span class="line">resourceGroup                        -&gt; demo-rg-bb8c7a39-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>Commit it and check it deploys, example <a href="https://github.com/carlpaton/deploying-dotnet-azure/actions/runs/12670053312">https://github.com/carlpaton/deploying-dotnet-azure/actions/runs/12670053312</a></li></ol><p>Overview of <code>deploy-api.yaml</code></p><ul><li><strong>JOB</strong>: <ul><li>build-and-push-image<ul><li><strong>STEPS</strong>: <ul><li>Checkout repository</li><li>Setup WebApi .NET</li><li>Configure Azure Container Registry (ACR)</li><li>Get commit SHA</li><li>Build and push image to Azure Container Registry (ACR)</li></ul></li></ul></li><li>deploy-image-to-container-service<ul><li><strong>STEPS</strong><ul><li>Login to Azure</li><li>Deploy to Azure Container Apps (ACA)</li></ul></li></ul></li></ul></li></ul><h2 id="Finding-Logs-in-Azure"><a href="#Finding-Logs-in-Azure" class="headerlink" title="Finding Logs in Azure"></a>Finding Logs in Azure</h2><ol><li>Find the Revision</li></ol><ul><li>Resource group -&gt; <code>demo-rg-bb8c7a39-dev</code> -&gt; Container App -&gt; <code>demo-aca-bb8c7a39-dev</code> -&gt; Activity Log -&gt; <code>Create or Update Container App</code> -&gt; <code>Create or Update Container App</code> -&gt; Change history -&gt; <code>properties.provisioningState</code></li></ul><p>Look for <code>image</code>, here the version <code>965d7c3</code> is my <a href="https://github.com/carlpaton/deploying-dotnet-azure/commit/965d7c33205384ee7550924571389fd83c896984">commit Sha</a> so I can see what code I changed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old                                                   new</span><br><span class="line">&quot;image&quot;: &quot;demoacrdev.azurecr.io/demoacrdev:478d482&quot;   &quot;image&quot;: &quot;demoacrdev.azurecr.io/demoacrdev:965d7c3&quot;</span><br></pre></td></tr></table></figure><p>Then look for <code>latestRevisionName</code>, here <code>kj2aaos</code> is the revision running in Azure</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old                                                   new</span><br><span class="line">&quot;latestRevisionName&quot;: &quot;demo-acadev--gw4qzwk&quot;          &quot;latestRevisionName&quot;: &quot;demo-acadev--kj2aaos&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>Find the container logs by Revision</li></ol><ul><li>Resource group -&gt; <code>demo-rg-bb8c7a39-dev</code> -&gt; Container App -&gt; <code>demo-aca-bb8c7a39-dev</code> -&gt; Monitoring<ul><li><code>Log stream</code> select the Revision matching <code>kj2aaos</code>, this is going to give you the running container logs, so you can see why you code code sucks :D</li><li><code>Logs</code> you can write and execute your own log queries, this is helpful when you have heaps of logs and need to diagnose problems.</li></ul></li></ul><h2 id="Github-Actions-Deploy-IAC"><a href="#Github-Actions-Deploy-IAC" class="headerlink" title="Github Actions - Deploy IAC"></a>Github Actions - Deploy IAC</h2><p>We need to migrate the TF state, <code>terraform.tfstate</code> and <code>terraform.tfstate.backup</code> from being stored locally to being stored in the cloud.</p><ol><li>Create a new resource group in Azure using the portal -&gt; <code>Resource groups</code> -&gt; <code>Create</code></li></ol><ul><li>Name -&gt; <code>reference-rg</code></li><li>Region -&gt; <code>(Asia Pacific) Australia East</code></li><li>Tags -&gt; <code>environment=dev, source=azure-portal, group_key=bb8c7a39</code></li><li><code>Review and create</code> -&gt; <code>Create</code></li></ul><ol start="2"><li>Add storage in the portal -&gt; <code>reference-rg</code> -&gt; create -&gt; search -&gt; <code>storage account</code> -&gt; select <code>Storage account</code> by Microsoft | Azure Service</li></ol><ul><li>Plan -&gt; <code>Storage account</code> -&gt; <code>Create</code></li><li>Storage account name -&gt; <code>demoiacbb8c7a39</code></li><li>Region -&gt; <code>(Asia Pacific) Australia East</code></li><li>Primary service -&gt; <code>Azure Blob Storage or Azure Data Lake Storage Gen 2</code></li><li>Performance -&gt; <code>Standard</code></li><li>Redundancy -&gt; <code>Locally-redundant storage (LRS)</code></li><li><code>Review and create</code> -&gt; <code>Create</code> … <em>this will take a minute or so to create and says <code>Deployment is in progress</code></em></li><li><code>Go to resource</code> -&gt; <code>Data storage</code> -&gt; <code>Containers</code> -&gt; <code>+ Container</code> (New Container)</li><li>Name -&gt; <code>terraform</code> -&gt; Create</li></ul><ol start="3"><li>Update <a href="https://github.com/carlpaton/deploying-dotnet-azure/blob/main/iac_example/setup.tf">setup.tf</a> to include the backend</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  backend &quot;azurerm&quot; &#123;</span><br><span class="line">    resource_group_name = &quot;reference-rg&quot;</span><br><span class="line">    storage_account_name = &quot;demoiacbb8c7a39&quot;</span><br><span class="line">    container_name = &quot;terraform&quot;</span><br><span class="line">    key = &quot;terraform.tfstate&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Migrate the terraform files from local to the new blob storage</li></ol><ul><li>run <code>terraform plan</code>, this should error with <code>Error: Backend initialization required, please run &quot;terraform init&quot;</code> because we added a new backend</li><li>run <code>terraform init</code>, this will ask <code>Do you want to copy existing state to the new backend?</code>, type <code>yes</code></li></ul><p><img src="/d/deploying-dotnet-applications-azure/tfstate-in-blob.jpg" alt="tfstate was copied to blob storage"></p><p>Locally <code>terraform.tfstate</code> should now be blank.</p><ol start="5"><li>Copy <code>\.github\examples\deploy-iac.yaml</code> to <code>\.github\workflows\deploy-iac.yaml</code>, no changes needed, commit and push.</li></ol><p>Overview of <code>deploy-iac.yaml</code></p><ul><li><strong>JOB</strong>: <ul><li>terraform-deploy<ul><li><strong>STEPS</strong>: <ul><li>Checkout repository</li><li>Login to Azure</li><li>Terraform install</li><li>Terraform initialization</li><li>Terraform validate</li><li>Terraform plan</li><li>Terraform apply</li><li>Notify failure</li></ul></li></ul></li></ul></li></ul><ol start="6"><li>Add a tag change, commit &amp; push</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;azurerm_resource_group&quot; &quot;demo-rg&quot; &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">...</span><br><span class="line">    testtag     = &quot;testtag1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there are state lock issues run like <code>Error: Error acquiring the state lock</code> -&gt; <code>Error message: state blob is already locked</code> then this can be unlocked from the CLI where <code>092ff1c9-467a-39a4-d0cf-b72ae52e5805</code> is the lock ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform force-unlock -force 092ff1c9-467a-39a4-d0cf-b72ae52e5805</span><br></pre></td></tr></table></figure><p>This should now deploy IAC changes.</p><h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><p><strong>ContainerAppRegistryInUse</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: updating Container App (Subscription: &quot;00000000-0000-0000-0000-000000000002&quot;</span><br><span class="line">│ Resource Group Name: &quot;demo-rg-bb8c7a39-dev&quot;</span><br><span class="line">│ Container App Name: &quot;demo-aca-bb8c7a39-dev&quot;): performing CreateOrUpdate: unexpected status 409 (409 Conflict) with error: ContainerAppRegistryInUse: Container App &#x27;demo-aca-bb8c7a39-dev&#x27; has active revisions pulling images from the registries you are trying to delete. Please add back registries demoacrbb8c7a39dev.azurecr.io or deactive the revisions: demo-aca-bb8c7a39-dev--3rq25p3,demo-aca-bb8c7a39-dev--6x8q5l4,demo-aca-bb8c7a39-dev--c9gj9sn,demo-aca-bb8c7a39-dev--ffvr4sc,demo-aca-bb8c7a39-dev--indydxx,demo-aca-bb8c7a39-dev--os0hfry,demo-aca-bb8c7a39-dev--qri6938,demo-aca-bb8c7a39-dev--ttk7uqx pulling images from these registries.</span><br></pre></td></tr></table></figure><p>Deactivate revision</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az containerapp revision deactivate --revision demo-aca-bb8c7a39-dev--os0hfry --resource-group demo-rg-bb8c7a39-dev</span><br></pre></td></tr></table></figure><p><img src="/d/deploying-dotnet-applications-azure/multiple-revisions.jpg" alt="multiple revisions"></p><p>Also check if you actuall need <code>revision_mode=Multiple</code></p><ul><li><a href="https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_app#arguments-reference">https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/container_app#arguments-reference</a></li></ul><p><strong>MissingSubscriptionRegistration</strong></p><p>While trying to add azurerm_container_app_environment it shat the bed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">azurerm_container_app_environment.demo-cae: Creating...</span><br><span class="line">╷</span><br><span class="line">│ Error: creating Managed Environment (Subscription: &quot;00000000-0000-0000-0000-000000000002&quot;</span><br><span class="line">│ Resource Group Name: &quot;demo-rg&quot;</span><br><span class="line">│ Managed Environment Name: &quot;demo-cae-dev&quot;): performing CreateOrUpdate: unexpected status 409 (409 Conflict) with error: MissingSubscriptionRegistration: The subscription is not registered to use namespace &#x27;Microsoft.App&#x27;. See https://aka.ms/rps-not-found for how to register subscriptions.</span><br><span class="line">│</span><br><span class="line">│   with azurerm_container_app_environment.demo-cae,</span><br><span class="line">│   on container_app_environment.tf line 1, in resource &quot;azurerm_container_app_environment&quot; &quot;demo-cae&quot;:</span><br><span class="line">│    1: resource &quot;azurerm_container_app_environment&quot; &quot;demo-cae&quot; &#123;</span><br><span class="line">│</span><br><span class="line">│ creating Managed Environment (Subscription: &quot;00000000-0000-0000-0000-000000000002&quot;</span><br><span class="line">│ Resource Group Name: &quot;demo-rg&quot;</span><br><span class="line">│ Managed Environment Name: &quot;demo-cae-dev&quot;): performing CreateOrUpdate: unexpected status 409 (409 Conflict) with error: MissingSubscriptionRegistration: The subscription is not registered to use namespace &#x27;Microsoft.App&#x27;. See</span><br><span class="line">│ https://aka.ms/rps-not-found for how to register subscriptions.</span><br></pre></td></tr></table></figure><p>Here <a href="https://aka.ms/rps-not-found">https://aka.ms/rps-not-found</a> helped us out and showed the commands to run.</p><ol><li>Query the provide</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az provider list --query &quot;[?namespace==&#x27;Microsoft.App&#x27;]&quot; --output table</span><br></pre></td></tr></table></figure><p>Should output: <code>NotRegistered</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Namespace      RegistrationState    RegistrationPolicy</span><br><span class="line">-------------  -------------------  --------------------</span><br><span class="line">Microsoft.App  NotRegistered        RegistrationRequired</span><br></pre></td></tr></table></figure><ol start="2"><li>Register which should output <code>Registering is still on-going. You can monitor using &#39;az provider show -n Microsoft.App&#39;</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az provider register --namespace Microsoft.App</span><br></pre></td></tr></table></figure><ol start="3"><li>Check the status</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az provider list --query &quot;[?namespace==&#x27;Microsoft.App&#x27;]&quot; --output table</span><br></pre></td></tr></table></figure><p>Registering</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Namespace      RegistrationState    RegistrationPolicy</span><br><span class="line">-------------  -------------------  --------------------</span><br><span class="line">Microsoft.App  Registering          RegistrationRequired</span><br></pre></td></tr></table></figure><p>Registered</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Namespace      RegistrationState    RegistrationPolicy</span><br><span class="line">-------------  -------------------  --------------------</span><br><span class="line">Microsoft.App  Registered           RegistrationRequired</span><br></pre></td></tr></table></figure><p><strong>AuthorizationFailed</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">│ Error: Failed to get existing workspaces: Error retrieving keys for Storage Account &quot;demoiacbb8c7a39&quot;: storage.AccountsClient#ListKeys: Failure responding to request: StatusCode=403 -- Original Error: autorest/azure: Service returned an error. Status=403 Code=&quot;AuthorizationFailed&quot; Message=&quot;The client &#x27;a22c2ac0-df8d-4b13-9e6c-d56b2c13ebf6&#x27; with object id &#x27;a22c2ac0-df8d-4b13-9e6c-d56b2c13ebf6&#x27; does not have authorization to perform action &#x27;Microsoft.Storage/storageAccounts/listKeys/action&#x27; over scope &#x27;/subscriptions/***/resourceGroups/reference-rg/providers/Microsoft.Storage/storageAccounts/demoiacbb8c7a39&#x27; or the scope is invalid. If access was recently granted, please refresh your credentials.&quot;</span><br></pre></td></tr></table></figure><p>We need to apply a role to this client</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az role assignment create --assignee a22c2ac0-df8d-4b13-9e6c-d56b2c13ebf6 --role Contributor --scope /subscriptions/00000000-0000-0000-0000-000000000002</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.npgsql.org/efcore/?tabs=onconfiguring">https://www.npgsql.org/efcore/?tabs=onconfiguring</a></li><li><a href="https://datacenters.microsoft.com/globe/explore">https://datacenters.microsoft.com/globe/explore</a></li><li><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/common-deployment-errors">https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/common-deployment-errors</a></li><li><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/error-register-resource-provider">https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/error-register-resource-provider</a></li><li><a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli">https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli</a></li></ul><p><strong>Technologies Used</strong></p><ul><li><a href="https://azure.microsoft.com/en-us/products/container-registry">Azure Container Registry</a> (Build store and manage container images)</li><li><a href="https://azure.microsoft.com/en-us/products/container-apps">Azure Container Apps</a> (Built on K8s, is Serverless &amp; Fully managed by Azure)</li><li><a href="https://azure.microsoft.com/en-us/products/azure-sql/database">Azure SQL Database</a> (Managed PaaS database engine)</li><li><a href="https://learn.microsoft.com/en-us/azure/azure-monitor/logs/log-analytics-workspace-overview">Azure Log Analytics Workspace</a> (Observability and Analytics)</li><li><a href="/2024/08/github-actions-workflow/">Github Actions</a></li><li><a href="https://developer.hashicorp.com/terraform">Terraform</a> (Consistently build infrastructure using automation)</li><li><a href="https://dotnet.microsoft.com/en-us/download">.NET SDK</a></li></ul><p><strong>Costings</strong></p><ul><li>Database<ul><li><a href="https://azure.microsoft.com/en-us/pricing/details/azure-sql-database/single/">https://azure.microsoft.com/en-us/pricing/details/azure-sql-database/single/</a></li><li><a href="https://azure.microsoft.com/en-us/pricing/details/postgresql/flexible-server/">https://azure.microsoft.com/en-us/pricing/details/postgresql/flexible-server/</a></li><li><a href="https://azure.microsoft.com/en-us/pricing/details/mysql/">https://azure.microsoft.com/en-us/pricing/details/mysql/</a></li></ul></li><li>Container App<ul><li><a href="https://azure.microsoft.com/en-us/pricing/details/container-apps/">https://azure.microsoft.com/en-us/pricing/details/container-apps/</a></li></ul></li><li>Container Registry<ul><li><a href="https://azure.microsoft.com/en-us/pricing/details/container-registry/">https://azure.microsoft.com/en-us/pricing/details/container-registry/</a></li></ul></li><li>Storage<ul><li><a href="https://azure.microsoft.com/en-us/pricing/details/storage/blobs/">https://azure.microsoft.com/en-us/pricing/details/storage/blobs/</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> infrastructure as code </tag>
            
            <tag> azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flyway Database Migration Using Github Actions</title>
      <link href="/2024/12/flyway-database-migration-using-github-actions/"/>
      <url>/2024/12/flyway-database-migration-using-github-actions/</url>
      
        <content type="html"><![CDATA[<p>Ah boo, when will this lazy dev do some work</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>x</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> infrastructure as code </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flyway Database Migration (Local Dev)</title>
      <link href="/2024/11/flyway-database-migration/"/>
      <url>/2024/11/flyway-database-migration/</url>
      
        <content type="html"><![CDATA[<p>This flow will spin up a Postgresql database and apply migrations to it using raw SQL commands, this is simliar to my <a href="/2018/08/docker-compose-demo/">Docker Compose Demo</a> but the raw SQL resides with the code and the baseline command is auto-magic💕 This is useful for applying migrations locally.</p><p>The code I use in this post can be found at <a href="https://github.com/carlpaton/flyway-migration-demo/tree/main">https://github.com/carlpaton/flyway-migration-demo/tree/main</a></p><p>Disclaimer: I personally think a <a href="/2021/02/entity-framework-core/">Model First approach like EF Core</a> is easier but there is merit in knowing more than one way to do db migrations.</p><h2 id="Define-Raw-SQL"><a href="#Define-Raw-SQL" class="headerlink" title="Define Raw SQL"></a>Define Raw SQL</h2><p><strong>Migrations</strong></p><p>Flyway has a <a href="https://www.red-gate.com/blog/database-devops/flyway-naming-patterns-matter">naming pattern</a> that we need to follow, for simplicity I just used an existing example in my public github</p><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/postgresql/ComposeDemo/V1.0.1__fizzbuzz_event.sql">V1.0.1__fizzbuzz_event.sql</a></li><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/postgresql/ComposeDemo/V1.0.2__fizzbuzz_data.sql">V1.0.2__fizzbuzz_data.sql</a></li></ul><p><strong>Initialization Scripts</strong></p><p>This is useful to create <code>users</code>, <code>schemas</code>, set <code>roles</code> ect and is auto-magically run though a docker volumn mapped to <code>docker-entrypoint-initdb.d</code>, this script will only run the first time the container started as it checks the data directory. Also see <a href="https://hub.docker.com/_/postgres">hub.docker.com - postgres</a></p><p>I called my file <a href="https://github.com/carlpaton/flyway-migration-demo/blob/main/initialize-database.sql">initialize-database.sql</a>, its sensible to have users with different access level, the application user should not have elevated access like this, it should only be allowed to do what the application does, normally just <a href="https://www.codecademy.com/article/what-is-crud">CRUD</a> stuff.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> demo_schema_manager <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> demo_schema_manager <span class="keyword">WITH</span> CREATEROLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA demo;</span><br><span class="line"><span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> SCHEMA demo <span class="keyword">TO</span> demo_schema_manager;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ON</span> SCHEMA demo <span class="keyword">TO</span> demo_schema_manager;</span><br><span class="line"><span class="keyword">ALTER</span> SCHEMA demo OWNER <span class="keyword">TO</span> demo_schema_manager;</span><br></pre></td></tr></table></figure><h2 id="Define-Compose-File"><a href="#Define-Compose-File" class="headerlink" title="Define Compose File"></a>Define Compose File</h2><p>This needs to run services <code>demo-db</code>, <code>demo-db-migration</code> and <code>demo-pgadmin</code></p><p><strong>demo-db</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">demo-db:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">postgres:17.2</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">POSTGRES_DB:</span> <span class="string">demo_db</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./initialize-database.sql:/docker-entrypoint-initdb.d/initialize-database.sql</span></span><br><span class="line">  <span class="attr">healthcheck:</span></span><br><span class="line">    <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;pg_isready -U postgres&quot;</span>]</span><br><span class="line">    <span class="attr">interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://hub.docker.com/_/postgres">https://hub.docker.com/_/postgres</a></li></ul><p><strong>demo-db-migration</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">demo-db-migration:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">flyway/flyway:11</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="attr">demo-db:</span></span><br><span class="line">      <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">FLYWAY_URL:</span> <span class="string">jdbc:postgresql://demo-db:5432/demo_db</span></span><br><span class="line">    <span class="attr">FLYWAY_USER:</span> <span class="string">demo_schema_manager</span></span><br><span class="line">    <span class="attr">FLYWAY_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">FLYWAY_LOCATIONS:</span> <span class="string">filesystem:/flyway/migration_scripts</span></span><br><span class="line">    <span class="attr">FLYWAY_DEFAULT_SCHEMA:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">FLYWAY_VALIDATE_MIGRATION_NAMING:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">migrate</span> <span class="string">-connectRetries=5</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./migrations:/flyway/migration_scripts</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://hub.docker.com/r/flyway/flyway">https://hub.docker.com/r/flyway/flyway</a></li></ul><p><strong>demo-pgadmin</strong></p><p><a href="https://github.com/carlpaton/flyway-migration-demo/blob/main/pgadmin4-server-file.json">pgadmin4-server-file.json</a> just imports my server configuration, you can take out the env <code>PGADMIN_SERVER_JSON_FILE</code> if you just want to use the UI to define your own.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">demo-pgadmin:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">dpage/pgadmin4:8.14</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">5050</span><span class="string">:80</span>    </span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="attr">demo-db:</span></span><br><span class="line">      <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">PGADMIN_DEFAULT_EMAIL:</span> <span class="string">user@domain.com</span></span><br><span class="line">    <span class="attr">PGADMIN_DEFAULT_PASSWORD:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">PGADMIN_SERVER_JSON_FILE:</span> <span class="string">/pgadmin4-server-file.json</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./pgadmin4-server-file.json:/pgadmin4-server-file.json</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://hub.docker.com/r/dpage/pgadmin4">https://hub.docker.com/r/dpage/pgadmin4</a></li></ul><h2 id="Run-The-Migrations-Locally"><a href="#Run-The-Migrations-Locally" class="headerlink" title="Run The Migrations Locally"></a>Run The Migrations Locally</h2><p>You can just clone <a href="https://github.com/carlpaton/flyway-migration-demo/tree/main">flyway-migration-demo</a> or copy the examples above but I encourage you to type it out, think about what you actually typing, you will learn more this way.</p><ol><li>Save the files as<ul><li>migrations in <code>C:\dev\flyway-migration-demo\migrations</code></li><li>initialize file in the root <code>C:\dev\flyway-migration-demo\initialize-database.sql</code>- </li><li>compose file in the root <code>C:\dev\flyway-migration-demo\docker-compose.yml</code></li></ul></li><li>Run <code>docker compose up --wait</code> (docker desktop may ask for permissions to share the files to the volumns)</li><li>Wait for compose to confirm the services are healthy</li></ol><p><img src="/d/flyway-database-migration/services-are-healthy.png" alt="services are healthy"></p><ol start="4"><li>Wait a few seconds for pgAdmin to load the servers and then navigate to <a href="http://localhost:5050/browser/">http://localhost:5050/browser/</a><ul><li>The login is <code>user@domain.com</code> and password is <code>postgres</code></li><li>The server will need a password, its <code>postgres</code> because we are using the administrator user</li></ul></li></ol><p>You could also install <a href="https://www.pgadmin.org/download/">pgAdmin locally</a> if you dont want to use the container.</p><ol start="5"><li>Check the migrations have been applied</li></ol><p><img src="/d/flyway-database-migration/migrations-applied-102.png" alt="migrations applied 102"></p><ol start="6"><li>(OPTIONAL) To tear down the containers run <code>docker compose down</code></li></ol><ul><li><a href="https://documentation.red-gate.com/fd/command-line-migrate-184127414.html">https://documentation.red-gate.com/fd/command-line-migrate-184127414.html</a></li></ul><h2 id="Future-Migrations"><a href="#Future-Migrations" class="headerlink" title="Future Migrations"></a>Future Migrations</h2><p><strong>Tear Down Approach</strong></p><ol><li>Locally add a new migration, example <a href="https://github.com/carlpaton/flyway-migration-demo/blob/main/migrations-new/V1.0.3__fizzbuzz_data2.sql">migrations-new/V1.0.3__fizzbuzz_data2.sql</a><ul><li>This needs to be added to the <code>migrations</code> folder with the v101 and v102 files</li></ul></li><li>Tear down the stack with <code>docker compose down</code></li><li>Run <code>docker compose up --wait</code> and follow the steps above to see the applied migrations</li></ol><p><strong>Rolling Forward</strong></p><p>You may care about your local test data that was not auto-magically seeded or you want to test the new migration the same way it would be applied in Production you can use most of the above and run the <code>info</code> command in another short lived container.</p><ol><li>Use a new container to connect to the db and run the <code>flyway info</code> command. It would be sensible to add this command to a <a href="/2024/11/make/">make file</a>, alternatively you can use the <a href="https://documentation.red-gate.com/flyway/flyway-cli-and-api">Flyway CLI</a> locally and store the configuration as <a href="https://documentation.red-gate.com/fd/toml-configuration-file-224919679.html">TOML</a>.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name flyway-manual-commands flyway/flyway:11 -user=demo_schema_manager -password=password -url=jdbc:postgresql://host.docker.internal:5432/demo_db -defaultSchema=demo info</span><br></pre></td></tr></table></figure><p>Expected output below, as we only checking flyways <code>info</code> command the <code>WARNING</code> doesnt matter.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WARNING: No locations configured and default location &#x27;sql&#x27; not found.</span><br><span class="line">Flyway OSS Edition 11.1.0 by Redgate</span><br><span class="line"></span><br><span class="line">See release notes here: https://rd.gt/416ObMi</span><br><span class="line">Database: jdbc:postgresql://host.docker.internal:5432/demo_db (PostgreSQL 17.2)</span><br><span class="line">Schema version: 1.0.2</span><br><span class="line"></span><br><span class="line">+-----------+---------+----------------+------+---------------------+--------+----------+</span><br><span class="line">| Category  | Version | Description    | Type | Installed On        | State  | Undoable |</span><br><span class="line">+-----------+---------+----------------+------+---------------------+--------+----------+</span><br><span class="line">| Versioned | 1.0.1   | fizzbuzz event | SQL  | 2024-12-19 03:36:47 | Future | No       |</span><br><span class="line">| Versioned | 1.0.2   | fizzbuzz data  | SQL  | 2024-12-19 03:36:47 | Future | No       |</span><br><span class="line">+-----------+---------+----------------+------+---------------------+--------+----------+</span><br></pre></td></tr></table></figure><p>This is the same data as checking <code>demo.flyway_schema_history</code> but I think the <code>info</code> command is cool and helps understand the possible CLI commands. </p><ul><li><a href="https://documentation.red-gate.com/fd/command-line-info-184127413.html">https://documentation.red-gate.com/fd/command-line-info-184127413.html</a></li></ul><ol start="2"><li><p>Copy the new migration into the <code>migrations</code> folder, same example as <a href="https://github.com/carlpaton/flyway-migration-demo/blob/main/migrations-new/V1.0.3__fizzbuzz_data2.sql">migrations-new/V1.0.3__fizzbuzz_data2.sql</a></p></li><li><p>Run the <code>MIGRATE</code> command using the existing compose container</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up demo-db-migration</span><br></pre></td></tr></table></figure><p>Expected output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[+] Running 2/0</span><br><span class="line"> ✔ Container flyway-migration-demo-demo-db-1            Running                                                    0.0s</span><br><span class="line"> ✔ Container flyway-migration-demo-demo-db-migration-1  C...                                                       0.0s</span><br><span class="line">Attaching to demo-db-migration-1</span><br><span class="line">demo-db-migration-1  | Flyway OSS Edition 11.1.0 by Redgate</span><br><span class="line">demo-db-migration-1  |</span><br><span class="line">demo-db-migration-1  | See release notes here: https://rd.gt/416ObMi</span><br><span class="line">demo-db-migration-1  | Database: jdbc:postgresql://demo-db:5432/demo_db (PostgreSQL 17.2)</span><br><span class="line">demo-db-migration-1  | Successfully validated 3 migrations (execution time 00:00.053s)</span><br><span class="line">demo-db-migration-1  | Current version of schema &quot;demo&quot;: 1.0.2</span><br><span class="line">demo-db-migration-1  | Migrating schema &quot;demo&quot; to version &quot;1.0.3 - fizzbuzz data2&quot;</span><br><span class="line">demo-db-migration-1  | Successfully applied 1 migration to schema &quot;demo&quot;, now at version v1.0.3 (execution time 00:00.021s)</span><br><span class="line">demo-db-migration-1 exited with code 0</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Running the <code>INFO</code> command again should then show version <code>1.0.3.</code></p></li><li><p>Check the migrations have been applied, feels repetitive … but I do what I want ( ͡° ͜ʖ ͡°)</p></li></ol><p><img src="/d/flyway-database-migration/migrations-applied-103.png" alt="migrations applied 103"></p><p>Next steps would be to apply the migration in a <a href="/2024/12/flyway-database-migration-using-github-actions/">CICD pipeline, Github Actions</a> is the cool kid on the block right?</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://documentation.red-gate.com/flyway/flyway-cli-and-api/commands">https://documentation.red-gate.com/flyway/flyway-cli-and-api/commands</a></li><li><a href="https://documentation.red-gate.com/fd/migrations-184127470.html">https://documentation.red-gate.com/fd/migrations-184127470.html</a></li><li><a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> infrastructure as code </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make</title>
      <link href="/2024/11/make/"/>
      <url>/2024/11/make/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“GNU Make is a tool which controls the generation of executables and other non-source files of a program from the program’s source files.” - gnu.org</p></blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>I use <a href="https://chocolatey.org/">https://chocolatey.org/</a> for Windows installs but you can also install by manually <a href="https://www.gnu.org/software/make/#download">downloading the exe</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install make</span><br></pre></td></tr></table></figure><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>The <code>Makefile</code> then resides in the root of the project source, the <a href="https://www.gnu.org/software/make/manual/html_node/Rule-Introduction.html">docs</a> describe the shape of the make commands.</p><h3 id="Docker-Compose-Local-Dependency"><a href="#Docker-Compose-Local-Dependency" class="headerlink" title="Docker Compose Local Dependency"></a>Docker Compose Local Dependency</h3><ol><li>Define in the file the action to carry out, here its <code>start-local-dependency</code>, everything to the right are the commands for the action.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start-local-dependency:</span><br><span class="line">docker compose up \</span><br><span class="line">--wait \</span><br><span class="line">my-database \</span><br><span class="line">my-dependancy-api \</span><br><span class="line">my-identity-service</span><br></pre></td></tr></table></figure><ol start="2"><li>Run <code>make start-local-dependency</code></li></ol><h3 id="Define-AWS-CLI-Commands"><a href="#Define-AWS-CLI-Commands" class="headerlink" title="Define AWS CLI Commands"></a>Define AWS CLI Commands</h3><ol><li>Define the action <code>create-aws-secret</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create-aws-secret:</span><br><span class="line">echo &quot;Creating AWS Secret&quot;</span><br><span class="line">aws secretsmanager create-secret \</span><br><span class="line">--name &#x27;$(NAME)&#x27; \</span><br><span class="line">--description &#x27;$(DESC)&#x27; \</span><br><span class="line">--kms-key-id &#x27;arn:aws:kms:ap-southeast-2:000000000001:key/xxx-e11111111111111e11cd1111d1e11111&#x27; \</span><br><span class="line">--secret-string &#x27;$(SEC)&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>Run <code>make create-aws-secret NAME=foo DESC=bar SEC=secret</code></li></ol><h2 id="Pipeline-Use-Case"><a href="#Pipeline-Use-Case" class="headerlink" title="Pipeline Use Case"></a>Pipeline Use Case</h2><p>This can be used in a <a href="/2024/08/github-actions-workflow/">GitHub Actions Workflow</a> to run <a href="/2022/01/component-tests/">Component</a> / <a href="/2022/01/integration-tests/">Intergration tests</a> that require external dependency like <code>my-database</code>, <code>my-dependancy-api</code> or <code>my-identity-service</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  start-local-dependency</span><br><span class="line">    name: Sweet Tests</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v4.1.7</span><br><span class="line">      - name: Setup .NET SDK</span><br><span class="line">        uses: actions/setup-dotnet@v4</span><br><span class="line">        with:</span><br><span class="line">          dotnet-version: 8.0.x        </span><br><span class="line">      - name: Start Local Dependency</span><br><span class="line">        shell: bash</span><br><span class="line">        run: make start-local-dependency</span><br><span class="line">      - name: Run Tests</span><br><span class="line">        working-directory: src</span><br><span class="line">        run: dotnet test        </span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.gnu.org/software/make/#documentation">https://www.gnu.org/software/make/#documentation</a></li><li><a href="https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html">https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> infrastructure as code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sumologic With Terraform</title>
      <link href="/2024/11/sumolgic_with_terraform/"/>
      <url>/2024/11/sumolgic_with_terraform/</url>
      
        <content type="html"><![CDATA[<p>I was too lazy to flesh these out :D</p><p>Logs</p><ul><li>provider</li><li>sumologic_folder (space to store queries)</li><li>sumologic_content (query)</li></ul><p>Dashboard</p><ul><li>provider (shared if already exists)</li><li>sumologic_folder (can be shared if exists, space to store queries)</li><li>sumologic_dashboard</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> infrastructure as code </tag>
            
            <tag> terraform </tag>
            
            <tag> sumologic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Relic With Terraform</title>
      <link href="/2024/10/newrelic_with_terraform/"/>
      <url>/2024/10/newrelic_with_terraform/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 17/04/2025</strong></p><blockquote><p>“Terraform is a popular infrastructure-as-code software tool built by HashiCorp. You use it to provision all kinds of infrastructure and services, including New Relic dashboards and alerts.” - docs.newrelic.com</p></blockquote><p>In this post I will create an <code>Error</code> New Relic alert via Terraform, I see this Error Rate as <code>Availability</code> and the resulting New Relic resources would be a <code>provider</code>, <code>alert policy</code> which is the parent, <code>alert condition</code> which are children to the parent and <code>alert trigger</code></p><h2 id="Four-Golden-Signals"><a href="#Four-Golden-Signals" class="headerlink" title="Four Golden Signals"></a>Four Golden Signals</h2><p>For your alerts you need to think about whats sensible to alert on, <a href="https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals">Goole SRE</a> is the golden standard, because you know… its Google :D … so you can re-invent the wheel or learn from their Golden Signals:</p><ul><li><a href="https://sre.google/sre-book/monitoring-distributed-systems/#errors">Error rate</a> (Availability)</li><li><a href="https://sre.google/sre-book/monitoring-distributed-systems/#latency">Latency</a></li><li><a href="https://sre.google/sre-book/monitoring-distributed-systems/#traffic">Traffic</a></li><li><a href="https://sre.google/sre-book/monitoring-distributed-systems/#saturation">Saturation</a></li></ul><h2 id="High-Level-Commands-amp-Flow"><a href="#High-Level-Commands-amp-Flow" class="headerlink" title="High Level Commands &amp; Flow"></a>High Level Commands &amp; Flow</h2><ul><li>terraform configuration (or clone existing), for new configuration the <strong>provider</strong> the minimum requirement</li><li><a href="https://developer.hashicorp.com/terraform/cli/commands/init">terraform init</a></li><li><a href="https://developer.hashicorp.com/terraform/cli/commands/validate">terraform validate</a></li><li><a href="https://developer.hashicorp.com/terraform/cli/commands/plan">terraform plan</a></li><li><a href="https://developer.hashicorp.com/terraform/cli/commands/apply">terraform apply</a></li></ul><h2 id="Required-Terraform-Config"><a href="#Required-Terraform-Config" class="headerlink" title="Required Terraform Config"></a>Required Terraform Config</h2><p>The <a href="https://docs.newrelic.com/docs/infrastructure-as-code/terraform/terraform-intro/">Newrelic docs have a great example</a> which I based the below on, you will notice they are also focused on the <a href="https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals">Goole SRE Golden Signals</a></p><p>The high level config that I used to create my <code>.tf</code> files are</p><ul><li><code>providers.tf</code><ul><li>creates <code>terraform</code> &amp; <code>provider</code> resources</li><li>optionally includes a backend which is just a space to keep the <code>terraform.tfstate</code>, Ive seen AWS S3 and Dynamo being used here<ul><li>See <a href="https://developer.hashicorp.com/terraform/cli/commands/init#backend-initialization">Backend Initialization</a> and <a href="https://developer.hashicorp.com/terraform/language/backend">Backend block configuration overview</a>, the default is <a href="https://developer.hashicorp.com/terraform/language/backend/local">local</a></li></ul></li></ul></li><li><code>alerts.tf</code><ul><li>alert policy (this is the parent)</li><li>alert conditions (these are the children)</li><li>alert triggers </li></ul></li><li><code>locals.tf</code> (optional)</li><li><code>variables.tf</code> (optional)</li></ul><details>  <summary>Additional abstractions</summary><p><strong>Locals</strong></p><p>Locals are like constants in terraform, example <code>locals.tf</code> file with property <code>newrelic_account_id</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  newrelic_account_id = &quot;123456789&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To access <code>newrelic_account_id</code> in another file like <code>providers.tf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;newrelic&quot; &#123;</span><br><span class="line">  account_id = local.newrelic_account_id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Variables</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;environment&quot; &#123;</span><br><span class="line">  type = string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;newrelic_slack_channels&quot; &#123;</span><br><span class="line">  type = map(string)</span><br><span class="line">  default = &#123;</span><br><span class="line">    uat  = &quot;X05LBNSKMHU&quot;</span><br><span class="line">    prod = &quot;X05LIBNLBYJ&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I set the <code>environment</code> in <code>prod.tfvars, uat.tfvars</code> files, example value <code>environment = &quot;uat&quot;</code></p><p>You can access the map <code>newrelic_slack_channels</code> in a file, example <code>locals.tf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  newrelic_slack_channel_id = var.newrelic_slack_channels[var.environment]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="Example-Setup"><a href="#Example-Setup" class="headerlink" title="Example Setup"></a>Example Setup</h2><ol><li>Install Terraform</li></ol><p><a href="https://docs.chocolatey.org/en-us/getting-started">Chocolatey</a> makes this easy for windows users like me … <code>sudo apt-get</code> this 🖕</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">choco install terraform</span><br><span class="line">terraform -version</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli</a></li></ul><ol start="2"><li>Create your initial config with <code>providers.tf</code> and <code>locals.tf</code></li></ol><p><strong>providers.tf</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = &quot;~&gt; 1.9.8&quot;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    newrelic = &#123;</span><br><span class="line">      source  = &quot;newrelic/newrelic&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider &quot;newrelic&quot; &#123;</span><br><span class="line">  account_id = local.newrelic_account_id</span><br><span class="line">  api_key    = local.api_key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>locals.tf</strong></p><p>You can get this from your NR account under <code>Administration</code> -&gt; <code>API Keys</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  newrelic_account_id = &quot;0000000&quot;</span><br><span class="line">  api_key             = &quot;NRAK-00000000000000000000000000&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Run <code>terraform init</code> which will initialize the backend and provider plugins, mine created these files/folder locally. I manually modified my <code>locals.tf</code> with my account id and api key.</li></ol><p><img src="/d/newrelic_with_terraform/terraform-init.png"></p><p>I then also updated my .gitignore with the config below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.terraform/*</span><br><span class="line">.terraform.lock.hcl</span><br></pre></td></tr></table></figure><ol start="4"><li>Create <code>Alert Policy</code> (parent) and <code>Alert Condition</code> (children) inside <code>alerts.tf</code>, here the alert condition is selecting from <code>Transaction</code> which would be for web traffic originating from a <a href="/2023/01/newrelic/">NR client</a>.</li></ol><p><strong>alerts.tf</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// *** Alert policy</span><br><span class="line"></span><br><span class="line">resource &quot;newrelic_alert_policy&quot; &quot;hoonapi_alert_policy&quot; &#123;</span><br><span class="line">  name  = &quot;Hoon API Alert Policy $&#123;var.environment&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// *** Alert conditions</span><br><span class="line"></span><br><span class="line">resource &quot;newrelic_nrql_alert_condition&quot; &quot;error_rate&quot; &#123;</span><br><span class="line">  name                         = &quot;Golden Shower Error Rate&quot;</span><br><span class="line">  account_id                   = local.newrelic_account_id</span><br><span class="line">  policy_id                    = newrelic_alert_policy.hoonapi_alert_policy[count.index].id</span><br><span class="line">  type                         = &quot;static&quot;</span><br><span class="line">  enabled                      = true</span><br><span class="line">  violation_time_limit_seconds = 259200</span><br><span class="line">  runbook_url                  = &quot;https://carlpaton.github.io/2023/01/newrelic/&quot;</span><br><span class="line"></span><br><span class="line">  nrql &#123;</span><br><span class="line">    query = &quot;FROM Transaction SELECT percentage(count(*), WHERE `response.status` LIKE &#x27;5%&#x27;) WHERE appName in (&#x27;NewRelicHoon&#x27;) AND request.uri NOT IN (&#x27;/foo&#x27;, &#x27;/bar&#x27;)&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  critical &#123;</span><br><span class="line">    operator              = &quot;above&quot;</span><br><span class="line">    threshold             = 2</span><br><span class="line">    threshold_duration    = 300</span><br><span class="line">    threshold_occurrences = &quot;all&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fill_option        = &quot;none&quot;</span><br><span class="line">  aggregation_window = 60</span><br><span class="line">  aggregation_method = &quot;event_flow&quot;</span><br><span class="line">  aggregation_delay  = 120</span><br><span class="line">  slide_by           = 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/nrql_alert_condition">https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/nrql_alert_condition</a></li><li><a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/infra_alert_condition">https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/infra_alert_condition</a></li></ul><p><strong>variables.tf</strong></p><p>Additionally create <code>variables.tf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;environment&quot; &#123;</span><br><span class="line">  type = string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>Run <code>terraform validate</code> and fix any errors.</p></li><li><p>Run <code>terraform plan</code> and specify the environment as <code>test</code></p></li><li><p>Run <code>terraform apply</code></p></li></ol><p>The console will confirm the actions</p><p><img src="/d/newrelic_with_terraform/terraform-apply-1.png"></p><p>Additionall the local <code>terraform.tfstate</code> file will be created</p><p><img src="/d/newrelic_with_terraform/terraformtfstate.png"></p><ol start="8"><li>Log in to <a href="https://login.newrelic.com/login">New Relic</a> and navigate to <a href="https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/create-edit-or-find-alert-policy/#alert-policy-view">Alert Policies</a> to confirm that Terraform created your new policy.</li></ol><p>Alert Parent policy</p><p><img src="/d/newrelic_with_terraform/policy.png"></p><p>Child Alert Condition</p><p><img src="/d/newrelic_with_terraform/alert-condition.png"></p><ol start="9"><li>Add triggers, the example below is of type <code>EMAIL</code>, others exist like <code>SLACK</code></li></ol><p><strong>trigger.tf</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;newrelic_notification_destination&quot; &quot;team_email_destination&quot; &#123;</span><br><span class="line">  name = &quot;email-example&quot;</span><br><span class="line">  type = &quot;EMAIL&quot;</span><br><span class="line"></span><br><span class="line">  property &#123;</span><br><span class="line">    key = &quot;email&quot;</span><br><span class="line">    value = &quot;team.member1@email.com,team.member2@email.com,team.member3@email.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;newrelic_notification_channel&quot; &quot;team_email_channel&quot; &#123;</span><br><span class="line">  name = &quot;email-example&quot;</span><br><span class="line">  type = &quot;EMAIL&quot;</span><br><span class="line">  destination_id = newrelic_notification_destination.team_email_destination.id</span><br><span class="line">  product = &quot;IINT&quot;</span><br><span class="line"></span><br><span class="line">  property &#123;</span><br><span class="line">    key = &quot;subject&quot;</span><br><span class="line">    value = &quot;New Subject&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;newrelic_workflow&quot; &quot;team_workflow&quot; &#123;</span><br><span class="line">  name = &quot;Hoon API Workflow $&#123;var.environment&#125;&quot;</span><br><span class="line">  muting_rules_handling = &quot;NOTIFY_ALL_ISSUES&quot;</span><br><span class="line"></span><br><span class="line">  issues_filter &#123;</span><br><span class="line">    name = &quot;alerts_filter&quot;</span><br><span class="line">    type = &quot;FILTER&quot;</span><br><span class="line"></span><br><span class="line">    predicate &#123;</span><br><span class="line">      attribute = &quot;labels.policyIds&quot;</span><br><span class="line">      operator  = &quot;EXACTLY_MATCHES&quot;</span><br><span class="line">      values    = [newrelic_alert_policy.hoonapi_alert_policy.id]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    predicate &#123;</span><br><span class="line">      attribute = &quot;priority&quot;</span><br><span class="line">      operator  = &quot;EQUAL&quot;</span><br><span class="line">      values    = [&quot;CRITICAL&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destination &#123;</span><br><span class="line">    channel_id = newrelic_notification_channel.team_email_channel.id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li><p>Run <code>terraform validate</code> and fix any errors.</p></li><li><p>Run <code>terraform plan</code> and specify the environment as <code>test</code></p></li><li><p>Run <code>terraform apply</code></p></li></ol><p>You will notice the state updates and it creates a backup file for its internal process</p><p><img src="/d/newrelic_with_terraform/state-update.png"></p><p>Then the notification can be seen under the policy</p><p><img src="/d/newrelic_with_terraform/notification.png"></p><h2 id="Synthetic-Monitoring"><a href="#Synthetic-Monitoring" class="headerlink" title="Synthetic Monitoring"></a>Synthetic Monitoring</h2><blockquote><p><em>“You can think of our synthetic monitors as crash test dummies for your websites, applications, and API endpoints.”</em> - <a href="https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/using-monitors/intro-synthetic-monitoring/">docs.newrelic.com</a></p></blockquote><p>There are 3 types of monitors</p><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><ul><li>Would generally call a <code>/ping</code> endpoint not needing any authentication but I have seen teams call <code>/health</code> endpoints with this type</li><li>Doesnt have a synthetic script it runs</li><li>The default is <code>type=&quot;SIMPLE&quot;</code> but can also have a <code>type=&quot;BROWSER&quot;</code>, the docs call it a <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_monitor#example-usage">SIMPLE BROWSER</a></li><li>Terraform resource is <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_monitor">newrelic_synthetics_monitor</a></li></ul><h3 id="Scripted-API"><a href="#Scripted-API" class="headerlink" title="Scripted API"></a>Scripted API</h3><ul><li>Can be used to call a script, the script then calls an endpoint</li><li>Terraform resource is <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_script_monitor">newrelic_synthetics_script_monitor</a> with <code>type=&quot;SCRIPT_API&quot;</code></li></ul><details>  <summary>Example Scripted API From New Relic</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$http.<span class="title function_">post</span>(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,</span><br><span class="line">  <span class="comment">// Post data</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">json</span>: &#123;</span><br><span class="line">      <span class="attr">widgetType</span>: <span class="string">&#x27;gear&#x27;</span>,</span><br><span class="line">      <span class="attr">widgetCount</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Callback</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(response.<span class="property">statusCode</span>, <span class="number">200</span>, <span class="string">&#x27;Expected a 200 OK response&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Response:&#x27;</span>, body.<span class="property">json</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(body.<span class="property">json</span>.<span class="property">widgetType</span>, <span class="string">&#x27;gear&#x27;</span>, <span class="string">&#x27;Expected a gear widget type&#x27;</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(body.<span class="property">json</span>.<span class="property">widgetCount</span>, <span class="number">10</span>, <span class="string">&#x27;Expected 10 widgets&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></details><details>  <summary>Real world Example Scripted API</summary><p>This is still doing the same post and callback like the above but factors in how you could use this with an authentication mechanism (example <a href="/2020/12/oauth2-client-credentials-flow/">OAuth2 Client Credentials Flow</a>) and pass potential required headers ect.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;uuid&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> auth = &#123;</span><br><span class="line">  <span class="attr">uri</span>: <span class="string">&quot;https://authorisation-service.local/token&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">form</span>: &#123;</span><br><span class="line">    <span class="attr">grant_type</span>: <span class="string">&quot;client_credentials&quot;</span>,</span><br><span class="line">    <span class="attr">client_id</span>: <span class="string">&quot;my-client-id&quot;</span>,</span><br><span class="line">    <span class="attr">client_secret</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&quot;foo.read&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> callback = <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> correlationId = <span class="title function_">uuidv4</span>();</span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="attr">uri</span>: <span class="string">&quot;https://app-service.local/foo/bar&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;body.access_token&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&quot;Correlation-Id&quot;</span>: correlationId,</span><br><span class="line">      <span class="string">&quot;User-Id&quot;</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.<span class="title function_">get</span>(options, <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(response.<span class="property">statusCode</span>, <span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.<span class="title function_">post</span>(auth, callback);</span><br></pre></td></tr></table></figure></details><h3 id="Scripted-Browser"><a href="#Scripted-Browser" class="headerlink" title="Scripted Browser"></a>Scripted Browser</h3><ul><li>Can be used to call a script, the script then calls your website and performs actions like login, asssert elements exist</li><li>Terraform resource is <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_script_monitor">newrelic_synthetics_script_monitor</a> with <code>type=&quot;SCRIPT_BROWSER&quot;</code></li></ul><details>  <summary>Example Scripted Browser From New Relic</summary><p>This example is written using Selenium Webdriver version 3.6, so variables like <code>$driver</code> and <code>$browser</code> The current <a href="https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/scripting-monitors/synthetic-scripted-browser-reference-monitor-versions-chrome-100/">NR docs for Synthetic scripted browser</a> use Selenium Webdriver version 4.1, so variables like <code>$webDriver</code></p><ul><li><a href="https://www.selenium.dev/documentation/webdriver/">https://www.selenium.dev/documentation/webdriver/</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$browser.<span class="title function_">get</span>(<span class="string">&#x27;http://example.com&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// Check the H1 title matches &quot;Example Domain&quot;</span></span><br><span class="line">  <span class="keyword">return</span> $browser.<span class="title function_">findElement</span>($driver.<span class="property">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;h1&#x27;</span>)).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">getText</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">text</span>)&#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(<span class="string">&#x27;Example Domain&#x27;</span>, text, <span class="string">&#x27;Page H1 title did not match&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// Check that the external link matches &quot;https://www.iana.org/domains/example&quot;</span></span><br><span class="line">  <span class="keyword">return</span> $browser.<span class="title function_">findElement</span>($driver.<span class="property">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;div &gt; p &gt; a&#x27;</span>)).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">link</span>)&#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(<span class="string">&#x27;https://www.iana.org/domains/example&#x27;</span>, link, <span class="string">&#x27;More information link did not match&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></details><details>  <summary>Real world Example Scripted Browser</summary><p>This too is the same as the above but adapted something closer to real world.</p><p>Its sensible for the script to assert the existance of elements by a HTML property like <code>data-automationid</code>. While the data-automationid HTML property is not a formal web standard recognized by bodies like the W3C, it has become a widely adopted best practice and a de facto standard within the software testing and quality assurance community, especially for synthetic testing.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">$browser</span><br><span class="line">  .<span class="title function_">addHostnamesToBlacklist</span>([ <span class="comment">// can blacklist anything</span></span><br><span class="line">    <span class="string">&quot;*.newrelic.com&quot;</span>, </span><br><span class="line">    <span class="string">&quot;*.facebook.net&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*.linkedin.com&quot;</span>,</span><br><span class="line">  ])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> $browser.<span class="title function_">get</span>(<span class="string">&quot;https://app-service.local/foo/bar&quot;</span>)) <span class="comment">// expect auth to be challanged, the app redirects to its authority</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser.<span class="title function_">wait</span>(</span><br><span class="line">      <span class="function">() =&gt;</span></span><br><span class="line">        $browser</span><br><span class="line">          .<span class="title function_">getCurrentUrl</span>()</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> url.<span class="title function_">startsWith</span>(<span class="string">&quot;https://authorisation-service.local&quot;</span>)), <span class="comment">// wait to be at authority url</span></span><br><span class="line">      <span class="number">10000</span></span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser</span><br><span class="line">      .<span class="title function_">findElement</span>($driver.<span class="property">By</span>.<span class="title function_">xpath</span>(<span class="string">&#x27;//input[data-automationid=&quot;passwordField-input&quot;]&#x27;</span>)) <span class="comment">// provide the password</span></span><br><span class="line">      .<span class="title function_">sendKeys</span>(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser</span><br><span class="line">      .<span class="title function_">findElement</span>($driver.<span class="property">By</span>.<span class="title function_">xpath</span>(<span class="string">&#x27;//input[data-automationid=&quot;usernameField-input&quot;]&#x27;</span>)) <span class="comment">// provide the username</span></span><br><span class="line">      .<span class="title function_">sendKeys</span>(<span class="string">&quot;username@example.com&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser</span><br><span class="line">      .<span class="title function_">findElement</span>($driver.<span class="property">By</span>.<span class="title function_">xpath</span>(<span class="string">&#x27;//button[@data-automationid=&quot;submitLogin-button&quot;]&#x27;</span>)) <span class="comment">// click the login button</span></span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser.<span class="title function_">wait</span>(</span><br><span class="line">      <span class="function">() =&gt;</span></span><br><span class="line">        $browser</span><br><span class="line">          .<span class="title function_">getCurrentUrl</span>()</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> url == <span class="string">&quot;https://app-service.local/foo/bar&quot;</span>), <span class="comment">// wait for the authorised user to be redirected back to the app</span></span><br><span class="line">      <span class="number">10000</span></span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser.<span class="title function_">waitForElement</span>(</span><br><span class="line">      $driver.<span class="property">By</span>.<span class="title function_">xpath</span>(<span class="string">&#x27;//*[@data-automationid=&quot;Foo-button&quot;]&#x27;</span>), <span class="comment">// validate the existance of an element</span></span><br><span class="line">      <span class="number">10000</span></span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">    $browser.<span class="title function_">waitForElement</span>(</span><br><span class="line">      $driver.<span class="property">By</span>.<span class="title function_">xpath</span>(<span class="string">&#x27;//*[@data-automationid=&quot;Foo-element&quot;]&#x27;</span>), <span class="comment">// validate the existance of another element</span></span><br><span class="line">      <span class="number">10000</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></details><h4 id="Secrets-Security"><a href="#Secrets-Security" class="headerlink" title="Secrets Security"></a>Secrets Security</h4><p>We dont want secrets commited to source control, the examples above were <code>password</code></p><p>We can use a resource <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_secure_credential">newrelic_synthetics_secure_credential</a> to instead manage the secret, the example below is from the docs, you would then reference it in the alerts above using <code>$secure.MY_KEY</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;newrelic_synthetics_secure_credential&quot; &quot;foo&quot; &#123;</span><br><span class="line">  key = &quot;MY_KEY&quot;</span><br><span class="line">  value = &quot;My value&quot;</span><br><span class="line">  description = &quot;My description&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After applying the above, from NR UI -&gt; <code>Synthetics Monitoring</code> -&gt; <code>Secure credentials</code> -&gt; locate by name -&gt; <code>Edit secure credential</code></p><h3 id="Alerts"><a href="#Alerts" class="headerlink" title="Alerts"></a>Alerts</h3><p>Synthetic Monitoring Alerts use the same resource type <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/nrql_alert_condition">newrelic_nrql_alert_condition</a> as mentioned above for the <strong>alerts.tf</strong> file, the only difference is where they select their data from:</p><p>Example <code>Ping</code> (The simple one)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrql_query  = &quot;FROM SyntheticCheck SELECT percentage(count(*),WHERE result != &#x27;SUCCESS&#x27;) WHERE monitorName = &#x27;Foo - Synthetic Availability&#x27;&quot;</span><br></pre></td></tr></table></figure><p>Example <code>Scripted Browser</code> or <code>Scripted API</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nrql_query  = &quot;SELECT count(result) FROM SyntheticCheck WHERE result = &#x27;FAILED&#x27; AND monitorName = &#x27;Foo - Page Load Synthetic&#x27;&quot;</span><br><span class="line">nrql_query  = &quot;SELECT count(result) FROM SyntheticCheck WHERE result = &#x27;FAILED&#x27; AND monitorName = &#x27;Foo - Endpoint Synthetic&#x27;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> infrastructure as code </tag>
            
            <tag> newrelic </tag>
            
            <tag> terraform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mockoon</title>
      <link href="/2024/10/mockoon/"/>
      <url>/2024/10/mockoon/</url>
      
        <content type="html"><![CDATA[<p>Also see <a href="/2021/05/wiremocks/">Wiremocks</a></p><blockquote><p>“Mockoon is the easiest and quickest way to design and run mock REST APIs. - mockoon.com”</p></blockquote><h2 id="Create-Local"><a href="#Create-Local" class="headerlink" title="Create Local"></a>Create Local</h2><ol><li><p>Using the <a href="https://mockoon.com/download/">Mockoon desktop</a> application create a new local environment and save it locally, I use <code>C:\dev\SWEETAPI\.localdev\mock-server</code> and call the json file something related to the mocks, eg: <code>mock-netsuite.json</code></p></li><li><p>An example route could be <code>GET /contact</code> with response</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Count&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;HasMore&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ExternalId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123e4567-e89b-12d3-a456-426614174000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Company&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CompanyName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Acme Corporation&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;FirstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;LastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;john.doe@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;555-123-4567&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ExternalId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;987f6543-dcba-9876-fedc-0123456789ab&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Company&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CompanyName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Globex Industries&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;FirstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;LastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jane.smith@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;555-987-6543&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TotalResults&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>You can then use Mockoon desktop to run the collection but its more useful to be part of the local development pipeline running in a container. <a href="/2018/08/docker-compose-demo/">Docker Compose</a> is a good candidate because you will probably add other service mocks, cache stores, databases ect</li></ol><p>You could orchestrate the commands with <a href="/2024/11/make/">Make</a> or just use Powershell per the eamples below.</p><p>Define the <code>docker-compose.yml</code> file, create a service using the image <a href="https://hub.docker.com/r/mockoon/cli/tags">mockoon/cli</a> and point the volume to the location of the Mockoon local environment</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mockoon:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mockoon/cli:9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mockoon</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/mock-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.localdev/mock-server:/mock-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3001</span><span class="string">:3001</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Run the mocks using Powershell, create <code>run-local.ps1</code> in the root and execute the docker compose command</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up --wait mockoon</span><br></pre></td></tr></table></figure><p>Here I explicily called the service <code>mockoon</code> and if this was your only mock, you could just run the container, this came from the docs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --mount type=bind,source=/home/your-data-file.json,target=/data,readonly -p 3000:3000 mockoon/cli:latest --data data --port 3000</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://mockoon.com/cli/">https://mockoon.com/cli/</a></li><li><a href="https://hub.docker.com/r/mockoon/cli">https://hub.docker.com/r/mockoon/cli</a></li><li><a href="https://github.com/mockoon/mockoon/tree/main/packages/cli#using-the-generic-docker-image">https://github.com/mockoon/mockoon/tree/main/packages/cli#using-the-generic-docker-image</a></li><li><a href="https://mockoon.com/docs/latest/about/">https://mockoon.com/docs/latest/about/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Auth Policy Checking Scope</title>
      <link href="/2024/10/auth-policy-checking-scope/"/>
      <url>/2024/10/auth-policy-checking-scope/</url>
      
        <content type="html"><![CDATA[<p>I needed a way to create Policies that checked for a scope which is provided to my API via JWT. The encoded JWT could look like the below, this I created at <a href="https://jwt.io/">https://jwt.io/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJzY29wZSI6WyJmb28iLCJiYXIiXX0.4xcnT8dVtguK2TsiyDvHtMkZAdzoEbGyiYUyON9F2qQ</span><br></pre></td></tr></table></figure><p>Initially I thought I had to create <a href="/2021/02/filters-in-asp-net-core/">AuthorizationRequirement and Handlers</a> but after looking at <a href="https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims">Claims-based authorization</a> and <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.identity.web.policybuilderextensions.requirescope">Extensions.RequireScope Method</a> I realized I could just add a policy that is built from a delegate with the provided name.</p><p>The decoded JWT’s payload data looks like the below, so a scope Im looking for is <code>foo</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;bar&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>Register the policy in the applications services registration, here the builder is of type <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder">WebApplicationBuilder</a>, “CheckForFooPolicy” is the policy name and I pass an Action deligate to <code>.AddPolicy</code> calling the <code>.RequireScope</code> extension instructing it to check for “foo”</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder</span><br><span class="line">  .Services</span><br><span class="line">  .AddAuthorizationBuilder()</span><br><span class="line">  .AddPolicy(<span class="string">&quot;CheckForFooPolicy&quot;</span>, p =&gt; p.RequireScope(<span class="string">&quot;foo&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>Add the <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authorization.authorizeattribute">AuthorizeAttribute Class</a> specifiying the policy</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SweetController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Authorize(Policy = <span class="string">&quot;CheckForFooPolicy&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">HttpGet(Name = <span class="string">&quot;SweetGet&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;Guid&gt;&gt; GetTheThing(CancellationToken cancellationToken)</span><br><span class="line">    &#123;</span><br></pre></td></tr></table></figure><p>If you are one of the leet nerds using endpoints because, you know controllers are dinosaurs, you can specify the Authorize as a parameter. See <a href="https://learn.microsoft.com/en-us/entra/identity-platform/tutorial-web-api-dotnet-protect-endpoint">Tutorial: Implement a protected endpoint to your API</a> for more details.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.MapGet(<span class="string">&quot;/sweetget&quot;</span>, [Authorize(Policy = <span class="string">&quot;CheckForFooPolicy&quot;</span>)] () =&gt;</span><br><span class="line">  &#123;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims">https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.identity.web.policybuilderextensions.requirescope">https://learn.microsoft.com/en-us/dotnet/api/microsoft.identity.web.policybuilderextensions.requirescope</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Testing When SUT Has Static Methods</title>
      <link href="/2024/09/unit-testing-static-methods/"/>
      <url>/2024/09/unit-testing-static-methods/</url>
      
        <content type="html"><![CDATA[<ul><li>Also see <a href="/2021/01/unit-testing-protected-methods/">Unit Testing When SUT Has Protected Methods</a></li></ul><p>I have a simple repository <code>InvoiceRepository</code> which is my SUT (software under test), its using <a href="https://www.learndapper.com/">Dapper extension methods</a> and I want to <a href="/2019/06/unit-testing-with-xunit/">unit test</a> the repository methods and <a href="https://github.com/devlooped/moq">mock</a> out the database calls. As Im not using <a href="/2021/02/entity-framework-core/">Entity Framework</a>‘s <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.inmemorydbcontextoptionsextensions.useinmemorydatabase">UseInMemoryDatabase</a> so I need to mock the connection which dapper extends. Additionally I have a factory that returns the connection because thats how the cool kids do it.</p><p><em>See <a href="/2022/03/minimal-api/">Minimal API example</a> for a functional example of UseInMemoryDatabase.</em></p><p>So the code looks like this, ooh fancy its got a <a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/primary-constructors">primary contructor</a>, must be nice to work on modern code 🤓</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvoiceRepository</span>(<span class="params">ISqlConnectionFactory factory</span>) : IInvoiceRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;MyInvoice&gt; <span class="title">GetAsync</span>(<span class="params">Guid id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> connection = factory.CreateConnection(); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> connection</span><br><span class="line">            .QueryFirstAsync&lt;MyInvoice&gt;(<span class="string">&quot;SELECT * FROM dbo.my_invoice WHERE id = @id&quot;</span>, <span class="keyword">new</span> &#123; id &#125;);</span><br></pre></td></tr></table></figure><p>Note that <code>CreateConnection</code> returns <a href="https://learn.microsoft.com/en-us/dotnet/api/system.data.idbconnection">IDbConnection</a> and <a href="https://www.learndapper.com/dapper-query/selecting-single-rows#dapper-queryfirstasync">QueryFirstAsync</a> is the dapper extension method.</p><p>Being OG noob you might be tempted to try mock the dapper method <code>QueryFirstAsync</code>. The code below will compile but at test runtime Moq will protest as its <a href="https://github.com/devlooped/moq/blob/a481e8d19e3130659a6b5d2b046ea2eee01ad24b/src/Moq/MethodExpectation.cs#L87">Guard.IsOverridable</a> -&gt; <a href="https://github.com/devlooped/moq/blob/main/src/Moq/Guard.cs#L83">Guard.cs</a> will throw with <code>Extension methods (here: SqlMapper.QueryFirstAsync) may not be used in setup / verification expressions.</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line">...</span><br><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">GetAsync_GivenWhenThen</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line">    <span class="keyword">var</span> factoryMock = <span class="keyword">new</span> Mock&lt;ISqlConnectionFactory&gt;();</span><br><span class="line">    <span class="keyword">var</span> connectionMock = <span class="keyword">new</span> Mock&lt;IDbConnection&gt;();</span><br><span class="line">    connectionMock</span><br><span class="line">        .Setup(x =&gt; x.QueryFirstAsync&lt;MyInvoice&gt;(      <span class="comment">// static method you cannot mock, you dont deserve any snick snacks!</span></span><br><span class="line">            It.IsAny&lt;<span class="built_in">string</span>&gt;(),</span><br><span class="line">            It.IsAny&lt;<span class="built_in">object</span>&gt;(),</span><br><span class="line">            It.IsAny&lt;IDbTransaction&gt;(),</span><br><span class="line">            It.IsAny&lt;<span class="built_in">int</span>&gt;(),</span><br><span class="line">            It.IsAny&lt;CommandType&gt;()))</span><br><span class="line">        .ReturnsAsync(<span class="keyword">new</span> MyInvoice());</span><br><span class="line"></span><br><span class="line">    factoryMock</span><br><span class="line">        .Setup(x =&gt; x.CreateConnection())</span><br><span class="line">        .Returns(connectionMock.Object);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>So we need a work around.</p><p><strong>CAVEAT:</strong> You could argue that unit tests in the repository are low value and this is more of an integration test concearn, <a href="/2022/07/integration-tests-with-webapplicationfactory-testcontainers/">WebApplicationFactory and Test Containers</a> is your friend if you go down this route, if you are a component tests kind of nerd then <a href="/2022/01/component-tests/">Component Tests With Collection &amp; Class Fixtures</a> is probably your jam!</p><p>On the other hand it would be nice to know that your software behaves as expected at a unit test level, things like the command text and parameters passed have not changed. The key is to be pragmatic and weigh up the options with your team and companys suggested way of working.</p><p>I’ll roll with some work-arounds, else whats the point of this blog post besides to brag about my cool primary contructor!</p><h2 id="Workaround-1-Wrapper"><a href="#Workaround-1-Wrapper" class="headerlink" title="Workaround 1 : Wrapper"></a>Workaround 1 : Wrapper</h2><p>An acceptable approach is to add another layer of abstraction, you could name it based on what it does so <code>DapperWrapper</code> fits this description, Im childish so had a good LOL at this name 😂🤣. This abstraction would then have an interface that we can mock.</p><ol><li>Define the wrapper, here I used the same name, <code>QueryFirstAsync</code> for my function but you could call it something like <code>QueryFirstWrapperAsync</code> to mitigate confusion, or I dont know - you could read the class name.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDapperWrapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">QueryFirstAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params">IDbConnection connection, <span class="built_in">string</span> sql, <span class="built_in">object</span> param = <span class="literal">null</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DapperWrapper</span> : <span class="title">IDapperWrapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">QueryFirstAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params">IDbConnection connection, <span class="built_in">string</span> sql, <span class="built_in">object</span> param = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> connection.QueryFirstAsync&lt;T&gt;(sql, param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Then inject and use the wrapper in the repository, this functions the same as before but now has the additional layer of abstraction.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvoiceRepository</span>(<span class="params">ISqlConnectionFactory factory, IDapperWrapper wrapper</span>) : IInvoiceRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;MyInvoice&gt; <span class="title">GetAsync</span>(<span class="params">Guid id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> connection = factory.CreateConnection();   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> wrapper.QueryFirstAsync&lt;MyInvoice&gt;(</span><br><span class="line">            connection, </span><br><span class="line">            <span class="string">&quot;SELECT * FROM dbo.my_invoice WHERE id = @id&quot;</span>, </span><br><span class="line">            <span class="keyword">new</span> &#123; id &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>Update the test to now mock the wrapper, this will now return a new instance of <code>MyInvoice</code>. The tests as they stand could now just assert the response and would be adding a guard for the sql command text, honestly the integration test in the caveat above could have done that ʕʘ̅͜ʘ̅ʔ</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">GetAsync_GivenWhenThen</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line">    <span class="keyword">var</span> id = Guid.NewGuid();</span><br><span class="line">    <span class="keyword">var</span> factoryMock = <span class="keyword">new</span> Mock&lt;ISqlConnectionFactory&gt;();</span><br><span class="line">    <span class="keyword">var</span> dapperWrapperMock = <span class="keyword">new</span> Mock&lt;IDapperWrapper&gt;();</span><br><span class="line">    <span class="keyword">var</span> connectionMock = <span class="keyword">new</span> Mock&lt;IDbConnection&gt;();</span><br><span class="line"></span><br><span class="line">    factoryMock</span><br><span class="line">        .Setup(x =&gt; x.CreateConnection())</span><br><span class="line">        .Returns(connectionMock.Object);</span><br><span class="line"></span><br><span class="line">    dapperWrapperMock</span><br><span class="line">        .Setup(x =&gt; x.QueryFirstAsync&lt;MyInvoice&gt;(</span><br><span class="line">            connectionMock.Object, </span><br><span class="line">            <span class="string">&quot;SELECT * FROM dbo.my_invoice WHERE id = @id&quot;</span>,</span><br><span class="line">            It.IsAny&lt;<span class="built_in">object</span>&gt;()))</span><br><span class="line">        .ReturnsAsync(<span class="keyword">new</span> MyInvoice() &#123; Id = id &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> InvoiceRepository(factoryMock.Object, dapperWrapperMock.Object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> actual = <span class="keyword">await</span> classUnderTest.GetAsync(Guid.NewGuid());</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ol start="4"><li>I would go a step futher and now also check the <code>param</code> argument, as my mock setup I used <code>It.IsAny&lt;object&gt;()</code> because in the implentation the argument is new’d up, so the memory address is not the same. Remember kids, Steve Smith says <a href="https://ardalis.com/new-is-glue/">new is glue</a>.</li></ol><p>You can use <a href="/2023/09/moq-language-callback/">Moq.Langauge Callback Function</a> to capture these and assert on them by value, its like magic.</p><h2 id="Workaround-2-delegate"><a href="#Workaround-2-delegate" class="headerlink" title="Workaround 2 : delegate"></a>Workaround 2 : delegate</h2><p><strong>Spoiler</strong>: This is pretty much the same as the wrapper but with some additional complications.</p><p>I would generally steer clear of <a href="/2020/04/c-sharp-delegates/">delegates</a>, they harder to understand and I favour code that is easy to read for my old-dad eyes, however for completness I did some delegate magic.</p><p>Potentially this code could pass the delegate as <code>Func&lt;T, TResult&gt;</code> which just defines a function that takes a parameter <code>T</code> and returns <code>TResult</code> but I thought this was was more understandable to <a href="https://learn.microsoft.com/en-us/dotnet/standard/linq/functional-vs-imperative-programming">imperative</a> programmers like me.  Also, I do what I want. I am Batman 🦇</p><ol><li>Create the dapper delegate implementation and base class. <code>QueryFirstAsyncDeligate</code> could be an interface but I just popped it in the base class, I dont normally code with delegates so I made 💩 up as I went along from here. </li></ol><p>I just called my class file <code>DapperDeligate.cs</code> and popped it in the root of my <code>Infrastructure</code> project.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DapperDeligateBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> Task&lt;MyInvoice&gt; <span class="title">QueryFirstAsyncDeligate</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        IDbConnection connection, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> sql, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">object</span>? param = <span class="literal">null</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> required QueryFirstAsyncDeligate QueryFirstAsync &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DapperDeligate</span> : <span class="title">DapperDeligateBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DapperDeligate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        QueryFirstAsync = <span class="keyword">async</span> (connection, sql, param) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> connection</span><br><span class="line">                .QueryFirstAsync&lt;MyInvoice&gt;(sql, param);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>In the repository, inject and use the delegate</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvoiceRepository</span>(<span class="params">ISqlConnectionFactory factory, DapperDeligateBase dapperDeligate</span>) : IInvoiceRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;MyInvoice&gt; <span class="title">GetAsync</span>(<span class="params">Guid id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> connection = factory.CreateConnection();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> dapperDeligate.QueryFirstAsync(</span><br><span class="line">            connection, </span><br><span class="line">            <span class="string">&quot;SELECT * FROM dbo.my_invoice WHERE id = @id&quot;</span>, </span><br><span class="line">            <span class="keyword">new</span> &#123; id &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Wire up the services registration, this just means when you ask for <code>DapperDeligateBase</code> in your code, you will get <code>DapperDeligate</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder</span><br><span class="line">    .Services</span><br><span class="line">    .AddTransient&lt;DapperDeligateBase, DapperDeligate&gt;();</span><br></pre></td></tr></table></figure><ol start="4"><li>Update the tests, bet you wrote the tests first you <a href="/2018/06/test-driven-development-tdd/">TDD</a> champion!</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvoiceRepositoryTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">GetAsync_GivenWhenThen</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> expectedId = Guid.NewGuid();</span><br><span class="line">        <span class="keyword">var</span> expected = <span class="keyword">new</span> MyInvoice &#123; Id = expectedId &#125;;</span><br><span class="line">        <span class="keyword">var</span> connectionMock = <span class="keyword">new</span> Mock&lt;IDbConnection&gt;();</span><br><span class="line">        <span class="keyword">var</span> factoryMock = <span class="keyword">new</span> Mock&lt;ISqlConnectionFactory&gt;();</span><br><span class="line">        <span class="keyword">var</span> deligateMock = <span class="keyword">new</span> Mock&lt;DapperDeligateBase.QueryFirstAsyncDeligate&gt;();</span><br><span class="line">        </span><br><span class="line">        factoryMock</span><br><span class="line">            .Setup(x =&gt; x.CreateConnection())</span><br><span class="line">            .Returns(connectionMock.Object);</span><br><span class="line"></span><br><span class="line">        deligateMock</span><br><span class="line">            .Setup(x =&gt; x.Invoke(</span><br><span class="line">                It.IsAny&lt;IDbConnection&gt;(),</span><br><span class="line">                It.IsAny&lt;<span class="built_in">string</span>&gt;(),                          <span class="comment">// could pass actial command text here</span></span><br><span class="line">                It.IsAny&lt;<span class="built_in">object</span>&gt;()))</span><br><span class="line">            .ReturnsAsync(expected);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> dapperDeligate = <span class="keyword">new</span> DapperDeligate</span><br><span class="line">        &#123;</span><br><span class="line">            QueryFirstAsync = deligateMock.Object</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> InvoiceRepository(mockConnectionFactory.Object, dapperDeligate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="keyword">var</span> actual = <span class="keyword">await</span> classUnderTest.GetAsync(expectedId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        Assert.NotNull(actual);</span><br><span class="line">        Assert.Equal(expectedId, actual.Id);</span><br><span class="line">        mockConnectionFactory</span><br><span class="line">            .Verify(x =&gt; x.CreateConnection(), Times.Once);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then as with the wrapper, I would also use <a href="/2023/09/moq-language-callback/">Moq.Langauge Callback Function</a> to capture the <code>IDbConnection</code>, <code>string</code> command text and <code>object</code> parameters being passed to <code>QueryFirstAsyncDeligate</code> to validate their shape.</p><p>After writing this code I feel more like Robin 🐦</p>]]></content>
      
      
      
        <tags>
            
            <tag> orm </tag>
            
            <tag> software testing </tag>
            
            <tag> dapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing Coverage Report Generator</title>
      <link href="/2024/09/testing-coverage-report-generator/"/>
      <url>/2024/09/testing-coverage-report-generator/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“ReportGenerator converts coverage reports generated by coverlet, OpenCover, dotCover, Visual Studio, NCover, Cobertura, JaCoCo, Clover, gcov, or lcov into human readable reports in various formats. The reports show the coverage quotas and also visualize which lines of your source code have been covered.” - <a href="https://www.nuget.org/packages/dotnet-reportgenerator-globaltool">https://www.nuget.org/packages/dotnet-reportgenerator-globaltool</a></p></blockquote><p>ReportGenerator tool wont replace <a href="/tags/sonarqube/">Sonarqube</a> as its not a <a href="https://docs.sonarsource.com/sonarcloud/administering-sonarcloud/setting-up-clean-as-you-code/">Clean as You Code</a> type methodology but if you want to locally and quickly check code coverage using generated reports, its a winner.</p><h2 id="Simple-Demo"><a href="#Simple-Demo" class="headerlink" title="Simple Demo"></a>Simple Demo</h2><p>These steps are for a .Net Core application but you can apply them to any code base that has <a href="https://github.com/coverlet-coverage/coverlet">coverlet.collector</a> installed in the tests project.</p><ol><li><p>Clone <a href="https://github.com/carlpaton/CoverageReportGeneratorDemo">https://github.com/carlpaton/CoverageReportGeneratorDemo</a> to <code>c:\dev\CoverageReportGeneratorDemo</code>, this is a <a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0">net8.0</a> <a href="https://learn.microsoft.com/en-us/dotnet/core/project-sdk/overview">SDK-style project</a>.</p></li><li><p>Check that you can build it</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\dev\CoverageReportGeneratorDemo</span><br><span class="line">dotnet build</span><br></pre></td></tr></table></figure><ol start="2"><li>Install the .NET Core version of <a href="https://www.nuget.org/packages/dotnet-reportgenerator-globaltool">ReportGenerator - dotnet-reportgenerator-globaltool</a>, here Im using the path <code>tools</code> which is excluded in <a href="https://github.com/carlpaton/CoverageReportGeneratorDemo/blob/main/.gitignore#L264">.gitignore</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools --version 5.3.9</span><br></pre></td></tr></table></figure><ol start="3"><li>Set the cover format and ensure you have <code>coverlet.collector</code> installed.</li></ol><p><a href="https://github.com/carlpaton/CoverageReportGeneratorDemo">CoverageReportGeneratorDemo</a> already has <a href="https://github.com/coverlet-coverage/coverlet">coverlet.collector 6.0.0</a> installed, it came with the scaffold template from Microsoft when I created the test project and selected <code>xUnit Test Project</code></p><p>As mentioned in at the top <code>coverlet.collector</code> can generate coverage results in <a href="https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/GlobalTool.md#coverage-output">multiple formats</a>. The usual <a href="https://github.com/OpenCover/opencover">opencover</a> format is no longer maintained 😔 and when I tested with the default <code>json</code> format this resulted in no coverage, perhaps there is more settings I missed. 🤷</p><p>I next tested with <a href="https://cobertura.github.io/cobertura/">cobertura</a> in my <a href="https://github.com/carlpaton/CoverageReportGeneratorDemo/blob/main/Cover.Tests/.runsettings">.runsettings</a> file and this worked, so I rolled with it.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RunSettings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DataCollectionRunSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DataCollectors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DataCollector</span> <span class="attr">friendlyName</span>=<span class="string">&quot;XPlat code coverage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Format</span>&gt;</span>cobertura<span class="tag">&lt;/<span class="name">Format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DataCollector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DataCollectors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">DataCollectionRunSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RunSettings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><a href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test">Run the tests</a> specifying the .runsettings file</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet test --settings=&quot;./Cover.Tests/.runsettings&quot;</span><br></pre></td></tr></table></figure><p>This then results in an attachment coverage.cobertura.xml:</p><details>  <summary>C:\dev\CoverageReportGeneratorDemo\Cover.Tests\TestResults\10e130bb-7829-4a36-bef3-bf16119422c8\coverage.cobertura.xml</summary><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">coverage</span> <span class="attr">line-rate</span>=<span class="string">&quot;0.4285&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.9&quot;</span> <span class="attr">timestamp</span>=<span class="string">&quot;1726637911&quot;</span> <span class="attr">lines-covered</span>=<span class="string">&quot;3&quot;</span> <span class="attr">lines-valid</span>=<span class="string">&quot;7&quot;</span> <span class="attr">branches-covered</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branches-valid</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>&gt;</span>C:\dev\CoverageReportGeneratorDemo\Cover\<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;Cover&quot;</span> <span class="attr">line-rate</span>=<span class="string">&quot;0.4285&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">complexity</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Program&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;Program.cs&quot;</span> <span class="attr">line-rate</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">complexity</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">methods</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">name</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>Main<span class="symbol">&amp;gt;</span>$&quot;</span> <span class="attr">signature</span>=<span class="string">&quot;(System.String[])&quot;</span> <span class="attr">line-rate</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">complexity</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">lines</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;2&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">lines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">methods</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">lines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;2&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">lines</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Cover.SumCode&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;SumCode.cs&quot;</span> <span class="attr">line-rate</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">complexity</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">methods</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">name</span>=<span class="string">&quot;Sum&quot;</span> <span class="attr">signature</span>=<span class="string">&quot;(System.Int32,System.Int32)&quot;</span> <span class="attr">line-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">complexity</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">lines</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;8&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;9&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;10&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">lines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">name</span>=<span class="string">&quot;Sum2&quot;</span> <span class="attr">signature</span>=<span class="string">&quot;(System.Int32,System.Int32)&quot;</span> <span class="attr">line-rate</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch-rate</span>=<span class="string">&quot;1&quot;</span> <span class="attr">complexity</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">lines</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;13&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;14&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;15&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">lines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">methods</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">lines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;8&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;9&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;10&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;1&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;13&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;14&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">line</span> <span class="attr">number</span>=<span class="string">&quot;15&quot;</span> <span class="attr">hits</span>=<span class="string">&quot;0&quot;</span> <span class="attr">branch</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">lines</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">coverage</span>&gt;</span></span><br></pre></td></tr></table></figure></details><p>You dont have to use the runsettings file, you can instead just pass <code>collect=&quot;XPlat Code Coverage&quot;</code>, where <code>XPlat</code> just means cross platform, the resulting file is <code>coverage.cobertura.xml</code>, I thought it would be <code>coverage.json</code> but it wasnt.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet test --collect=&quot;XPlat Code Coverage&quot;</span><br></pre></td></tr></table></figure><p>If you have other test projects you can use <a href="https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit">filter</a>, here Im filtering where the project name is <em>like</em> <code>UnitTests</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\dev\CoverageReportGeneratorDemo</span><br><span class="line">dotnet test --collect=&quot;XPlat Code Coverage&quot; --filter FullyQualifiedName~UnitTests</span><br></pre></td></tr></table></figure><ol start="5"><li>Run the reportgenerator tool passing coverage report and target directory as arguments</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./tools/reportgenerator.exe `</span><br><span class="line">-reports:Cover.Tests/TestResults/10e130bb-7829-4a36-bef3-bf16119422c8/coverage.cobertura.xml `</span><br><span class="line">-targetdir:report/</span><br></pre></td></tr></table></figure><ol start="6"><li>A html report is then generated in <code>c:\dev\CoverageReportGeneratorDemo\report</code> which shows what paths have coverage and which do not, the attribute <a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute">ExcludeFromCodeCoverage</a> is supported out of the box. <a href="/2020/11/sonarqube-with-opencover-xunit-reports/#:~:text=sonar.password=admin-,File%20Level%20Exclusions,-We%20need%20to">Previously Ive had to install coverlet.msbuild</a> to get this to work.</li></ol><p><img src="/d/testing-coverage-report-generator/html-report.png" alt="html-report"></p><p>You can see my <a href="/examples/dotnet-reportgenerator-globaltool/" target="blank">generated html report here</a> </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit">https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test">https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test</a></li><li><a href="https://www.nuget.org/packages/dotnet-reportgenerator-globaltool">https://www.nuget.org/packages/dotnet-reportgenerator-globaltool</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> static code analysis </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kiri Moto</title>
      <link href="/2024/09/kiri-moto/"/>
      <url>/2024/09/kiri-moto/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A Browser-Based Slicer for 3D FDM and SLA printing, CNC Milling, and Laser cutting</p></blockquote><h2 id="Setup-Mode-Preferences"><a href="#Setup-Mode-Preferences" class="headerlink" title="Setup, Mode, Preferences"></a>Setup, Mode, Preferences</h2><p>(Top right)</p><ul><li><code>Mode</code> -&gt; set <code>CNC</code></li><li><code>Setup</code> -&gt; select <code>Machines</code>, the machine <code>Any.Generic.Grbl</code> is selected by default</li><li>Select <code>Customize</code>, rename as <code>Indymill</code></li><li>Workspace set as and <code>Save</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X width     400</span><br><span class="line">Y depth     520</span><br><span class="line">Z height    115</span><br></pre></td></tr></table></figure></li><li><code>Setup</code> -&gt; select <code>Preferences</code></li><li>Under <code>Display</code> set <code>Animate=4000</code>, <code>Units=mm</code></li><li>Under <code>Slicer</code> set <code>Detail=100</code></li></ul><p>I left the tool change <code>M6 T&#123;tool&#125;</code> option as I want the machine to pause and warn when I have a tool change command, you cannot re-zero while running a job and the indymill doesnt have a took changer, so I will have to figure out how to <code>home</code>, <code>zero</code> between tool changes.</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>(Top right)</p><ul><li><code>Setup</code> -&gt; select <code>Tools</code></li><li>Delete all the defaults by selecting them one at a time and clicking <code>-</code></li><li>Click <code>+</code> and populate with tools with the details below, click save after each and make sure <code>save</code> goes grey</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">* DETAIL</span><br><span class="line">-----------------------------------------</span><br><span class="line">name        | end 3.175mm  | end 6.35mm</span><br><span class="line">type        | end          | end</span><br><span class="line">tool #      | 1            | 2</span><br><span class="line">metric      | check        | check</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* SHAFT</span><br><span class="line">-----------------------------------------</span><br><span class="line">diameter    | 3.175        | 6.35</span><br><span class="line">lenght      | 17           | 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* FLUTE</span><br><span class="line">-----------------------------------------</span><br><span class="line">diameter    | 3.175        | 6.35</span><br><span class="line">lenght      | 20           | 33</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://grid.space/kiri/">https://grid.space/kiri/</a></li><li><a href="https://docs.grid.space/projects/kiri-moto">https://docs.grid.space/projects/kiri-moto</a></li><li><a href="https://www.youtube.com/watch?v=nQUvXOjDib4">Guide: Open source free CNC CAM - Kiri:Moto</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cnc </tag>
            
            <tag> cam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install GRBL On Arduino Uno</title>
      <link href="/2024/08/install-grbl-on-uno/"/>
      <url>/2024/08/install-grbl-on-uno/</url>
      
        <content type="html"><![CDATA[<p>After this <a href="/2024/08/install-ugs-on-pi4/">Install UGS On Pi4</a></p><h2 id="Windows-Pre-Cursor-Steps"><a href="#Windows-Pre-Cursor-Steps" class="headerlink" title="Windows Pre Cursor Steps"></a>Windows Pre Cursor Steps</h2><ol><li>Download and install <code>Arduino IDE 2.3.2</code> from <a href="https://www.arduino.cc/en/software">https://www.arduino.cc/en/software</a></li><li>Download as GRBL 1.1h from <a href="https://github.com/gnea/grbl/releases/tag/v1.1h.20190825">https://github.com/gnea/grbl/releases/tag/v1.1h.20190825</a>, I used the link just says <a href="https://github.com/gnea/grbl/archive/refs/tags/v1.1h.20190825.zip">Source code(zip)</a></li><li>Extract <code>grbl-1.1h.20190825.zip</code> to <code>grbl-1.1h.20190825</code></li><li>Copy <code>grbl-1.1h.20190825\grbl-1.1h.20190825\grbl</code> to the root of your downloads as <code>grbl</code></li><li>Zip <code>grbl</code> as <code>grbl.zip</code></li></ol><h2 id="Add-GRBL-to-Arduino-IDE"><a href="#Add-GRBL-to-Arduino-IDE" class="headerlink" title="Add GRBL to Arduino IDE"></a>Add GRBL to Arduino IDE</h2><ol><li>Open <code>Arduino IDE</code></li><li>Select <code>Sketch</code> -&gt; <code>Include Library</code> -&gt; <code>Add .ZIP Library</code></li><li>Navigate and select <code>grbl.zip</code></li><li>GRBL now appears under <code>File</code> -&gt; <code>Examples</code></li></ol><h3 id="Burn-GRBL-to-Arduino-UNO"><a href="#Burn-GRBL-to-Arduino-UNO" class="headerlink" title="Burn GRBL to Arduino UNO"></a>Burn GRBL to Arduino UNO</h3><ol><li>Plug the Arduino into the PC</li><li>Select <code>Select Board</code> -&gt; Unknown Com3</li><li>Search for <code>UNO</code> and select <code>Arduino Uno</code> and select <code>OK</code></li><li>Select <code>File</code> -&gt; <code>Examples</code> -&gt; <code>grbl</code> -&gt; <code>grblUpload</code></li></ol><p>This opens a new instance of <code>Arduino IDE</code> with <code>grblUpload.ino</code> selected</p><ol start="5"><li>Select <code>Sketch</code> -&gt; <code>Upload</code></li></ol><p>This will flash GRBL to the Arduino UNO</p>]]></content>
      
      
      
        <tags>
            
            <tag> cnc </tag>
            
            <tag> indymill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install UGS On Pi4</title>
      <link href="/2024/08/install-ugs-on-pi4/"/>
      <url>/2024/08/install-ugs-on-pi4/</url>
      
        <content type="html"><![CDATA[<p>As a pre cursor <a href="/2024/08/install-grbl-on-uno/">Install GRBL On Arduino Uno</a></p><h2 id="Windows-Host-Steps"><a href="#Windows-Host-Steps" class="headerlink" title="Windows Host Steps"></a>Windows Host Steps</h2><ol><li>Pop the SD card into a reader and connect to the PC using USB</li><li>Download Raspberry Pi Imager <a href="https://www.raspberrypi.com/software/">https://www.raspberrypi.com/software/</a></li><li>Open Raspberry Pi Imager and install <code>Raspberry Pi OS 32</code> on the USB using Raspberry Pi Imager</li></ol><p>I customised the installation and ran the install</p><ul><li>hostname <code>cncpi</code></li><li>user <code>gordon</code></li><li>configured wireless LAN and set country to <code>NZ</code></li></ul><h2 id="Pi4-Steps"><a href="#Pi4-Steps" class="headerlink" title="Pi4 Steps"></a>Pi4 Steps</h2><p>After the install pop the SD card into the Pi, plug the Pi into a screen, keyboard &amp; mouse. Then power it on and login.</p><ol><li>Update the Pi with <code>sudo apt-get update</code> and <code>sudo apt-get dist-upgrade</code></li><li>run <code>sudo apt update</code></li><li>run <code>sudo apt install default-jdk</code></li><li>Reboot the Pi</li></ol><p>Additionally under config enable SSH, this mean you can then SFTP files to the Pi.</p><p>Some forms suggested to run <code>sudo raspi-config</code> and setting <code>Display Options</code> -&gt; <code>GL Driver</code> -&gt; <code>Full KMS</code> (external screen) but mine just worked so I left it.</p><h3 id="Install-Java-and-download-UGS"><a href="#Install-Java-and-download-UGS" class="headerlink" title="Install Java and download UGS"></a>Install Java and download UGS</h3><ol><li>Run <code>sudo apt-get install openjdk-8-jdk</code></li><li>Download UGS from <a href="https://github.com/winder/Universal-G-Code-Sender?tab=readme-ov-file#downloads">https://github.com/winder/Universal-G-Code-Sender?tab=readme-ov-file#downloads</a> selecting <code>Linnux ARM64</code></li><li>Extract the content from the <code>tar.gz</code>, I just put it on the desktop</li><li>Navigate to <code>ugsplatform-pi\bin\</code> and right click on <code>ugsplatform</code> -&gt; <code>open</code> and select <code>Execute in Terminal</code> (it took a while to load)</li></ol><h3 id="Configure-GRBL"><a href="#Configure-GRBL" class="headerlink" title="Configure GRBL"></a>Configure GRBL</h3><p>From UGS console I then set the GRBL settings, these save to the Arduino UNO, you can view the current settings with <code>$$</code>, I documented the <a href="/2023/06/cnc-machine-my-indymill-grbl-settings/">GRBL Settings For My IndyMill Build here</a>.</p><h3 id="Configure-UGS-Macros"><a href="#Configure-UGS-Macros" class="headerlink" title="Configure UGS Macros"></a>Configure UGS Macros</h3><p>This is under Macros, for me it was the bottom left window (Also See <a href="/2023/06/cnc-machine-my-indymill-grbl-settings/">GRBL Settings For My IndyMill Build</a>)</p><p><strong>Far Corner</strong></p><p>This moves the head up and to the far right corner</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name      Far Corner</span><br><span class="line">GCode     $21=1; $23=0; $H; $23=3; $J=G21G91X-5F700; $J=G21G91Y-5F700; $J=G21G91Z-5F700;</span><br></pre></td></tr></table></figure><p>Unpacking to understand the commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$21=1;             ~ ensure limit switches are enabled, could be overkill, meh</span><br><span class="line">$23=0;             ~ set X+, Y+, Z+, its a mask that maps back to a table for the +/- of XYZ</span><br><span class="line">$H;                ~ home machine, will debounce off limit switches</span><br><span class="line">$23=3;             ~ sets X-, Y-, Z+ which is my machines front left corner, this is my default normally</span><br><span class="line">$J=G21G91X-5F700;  ~ moves 5mm off the limit switch on X at 700mms</span><br><span class="line">$J=G21G91Y-5F700;  ~ moves 5mm off the limit switch on Y at 700mms</span><br><span class="line">$J=G21G91Z-5F700;  ~ moves 5mm off the limit switch on Z at 700mms</span><br></pre></td></tr></table></figure><p>I also set my x/y max travel high enough for the head to travel corner to corner, see <a href="/2023/06/cnc-machine-my-indymill-grbl-settings/#:~:text=Rates">Rates, Acceleration, Max Travel</a></p><p><strong>Probe zero</strong></p><p>I got these from this video <a href="https://www.youtube.com/watch?v=rDpxyGtxlA0">https://www.youtube.com/watch?v=rDpxyGtxlA0</a> and they worked for me</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name     Probe zero</span><br><span class="line">GCode    G21; G91; G38.2 Z-50 F100; G92 Z5; G0 Z5</span><br></pre></td></tr></table></figure><p>Unpacking to understand the commands:</p><p>The second to last <code>G92 Z5</code>, the 5 is 5mm, thats the thickness of my probe block.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/winder/Universal-G-Code-Sender">https://github.com/winder/Universal-G-Code-Sender</a></li><li><a href="https://github.com/winder/Universal-G-Code-Sender/wiki/Configuration">https://github.com/winder/Universal-G-Code-Sender/wiki/Configuration</a></li><li><a href="https://github.com/grbl/grbl">https://github.com/grbl/grbl</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cnc </tag>
            
            <tag> indymill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions Workflow</title>
      <link href="/2024/08/github-actions-workflow/"/>
      <url>/2024/08/github-actions-workflow/</url>
      
        <content type="html"><![CDATA[<p>I needed to understand the fundamentals to setup a GitHub Actions workflow, the links in the references explain the costs, Linux builds are the clear favorite.</p><p>The workflow structure is: <code>workflow</code> -&gt; <code>jobs</code> -&gt; <code>steps</code> -&gt; <code>run</code></p><h2 id="Simple-version-check-workflow"><a href="#Simple-version-check-workflow" class="headerlink" title="Simple version check workflow"></a>Simple version check workflow</h2><p>This will build out a workflow that just checks the version of your developer sdk on the build agent.</p><ol><li>Create and clone a new repository, mine was <a href="https://github.com/carlpaton/github-actions-workflow-demo">https://github.com/carlpaton/github-actions-workflow-demo</a></li><li>Create a workflow as <code>.github/workflows/build.yml</code>, where build.yml can be named anything related to your workflow</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">push</span>                          <span class="string">~</span> <span class="string">the</span> <span class="string">trigger</span> <span class="string">event</span> <span class="string">is</span> <span class="string">a</span> <span class="string">push</span> <span class="string">to</span> <span class="string">this</span> <span class="string">repository</span></span><br><span class="line"><span class="attr">jobs:</span>                             <span class="string">~</span> <span class="string">the</span> <span class="string">collection</span> <span class="string">of</span> <span class="string">jobs</span> <span class="string">to</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">first-job:</span>                      <span class="string">~</span> <span class="string">first</span> <span class="string">job</span> <span class="string">in</span> <span class="string">the</span> <span class="string">collection,</span> <span class="string">call</span> <span class="string">it</span> <span class="string">something</span> <span class="string">meaningful</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span>       <span class="string">~</span> <span class="string">agent</span> <span class="string">label,</span> <span class="string">so</span> <span class="string">where</span> <span class="string">the</span> <span class="string">job</span> <span class="string">will</span> <span class="string">run</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">node</span> <span class="string">--version</span>       <span class="string">~</span> <span class="string">shell</span> <span class="string">command</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">--version</span>        <span class="string">~</span> <span class="string">shell</span> <span class="string">command</span>         </span><br></pre></td></tr></table></figure><p>These run steps are shell commands but can also be actions (see Actions below)</p><ol start="3"><li>Commit and push</li><li>Inspect the workflow outcome for the commit by clicking the <a href="https://github.com/carlpaton/github-actions-workflow-demo/actions">actions tab</a></li><li>Here I can see the jobs, following the demo I called it <code>first-job</code></li></ol><p><img src="/d/github-actions-workflow/first-job.jpg" alt="first-job"></p><ol start="6"><li>Clicking <code>first-job</code> I can see the steps</li></ol><p><img src="/d/github-actions-workflow/first-job-steps.jpg" alt="first-job-steps"></p><ol start="7"><li>On closer inspection I can see the machine it ran on was <code>Image: windows-2022</code> and the results of my version steps</li></ol><p><img src="/d/github-actions-workflow/first-job-steps-closer.jpg" alt="first-job-steps-closer"></p><p>This can then be adapted to perform more complex workflows simliar to the actions below.</p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><blockquote><p>“Actions are custom applications that run complex but repetitive tasks. For example, we can have a docker action which builds a docker image and runs a container that executes certain commands.”</p></blockquote><p>Example <code>Restore, Build and Test</code> for an example <a href="https://github.com/carlpaton/github-actions-workflow-demo/tree/main/src">.Net project</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">third-job:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">the</span> <span class="string">repository</span> </span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4.1.7</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span> <span class="string">SDK</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">dotnet-version:</span> <span class="number">8.0</span><span class="string">.x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span></span><br><span class="line">        <span class="attr">working-directory:</span> <span class="string">src</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">restore</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">working-directory:</span> <span class="string">src</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">        <span class="attr">working-directory:</span> <span class="string">src</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>This will restore, build and test the <a href="https://github.com/carlpaton/github-actions-workflow-demo/tree/main/src">.Net project</a></p><p><img src="/d/github-actions-workflow/third-job.jpg" alt="third-job"></p><p>The actions I used here are</p><ul><li><a href="https://github.com/actions/checkout">https://github.com/actions/checkout</a></li><li><a href="https://github.com/actions/setup-dotnet">https://github.com/actions/setup-dotnet</a></li></ul><h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h2><p>There are many, see <a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows">https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows</a></p><p>These are common ones I’ve used so far:</p><ul><li><a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request">pull_request</a> - Runs your workflow when activity on a pull request in the workflow’s repository occurs</li><li><a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#push">push</a> - Runs your workflow when you push a commit or tag, or when you create a repository from a template</li><li><a href="https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_dispatch">workflow_dispatch</a> - To enable a workflow to be triggered manually</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=47zYGHwXPmE">Build your first GitHub Actions workflow</a></li><li><a href="https://github.com/features/actions">https://github.com/features/actions</a></li><li><a href="https://docs.github.com/en/actions/about-github-actions/understanding-github-actions">https://docs.github.com/en/actions/about-github-actions/understanding-github-actions</a></li><li><a href="https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions">https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions</a></li><li><a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DbUp</title>
      <link href="/2024/08/dbup/"/>
      <url>/2024/08/dbup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“DbUp is a .NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date.”</p></blockquote><ul><li><a href="https://dbup.readthedocs.io/en/latest/">https://dbup.readthedocs.io/en/latest/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> orm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNC Wood</title>
      <link href="/2024/08/cnc-wood/"/>
      <url>/2024/08/cnc-wood/</url>
      
        <content type="html"><![CDATA[<p>A space to keep notes of wood types and notes as I learn them.</p><h2 id="Species"><a href="#Species" class="headerlink" title="Species"></a>Species</h2><h3 id="Medium-density-softwood"><a href="#Medium-density-softwood" class="headerlink" title="Medium density softwood"></a>Medium density softwood</h3><ul><li>Rimu (hard to source hardwood in NZ)</li></ul><h3 id="Hardwoods"><a href="#Hardwoods" class="headerlink" title="Hardwoods"></a>Hardwoods</h3><p>Also see <a href="https://bbstimbers.co.nz/nz-native-timbers/hardwood/">https://bbstimbers.co.nz/nz-native-timbers/hardwood/</a></p><h2 id="Glue"><a href="#Glue" class="headerlink" title="Glue"></a>Glue</h2><ul><li>Waterproof PVA</li></ul><h2 id="Oils"><a href="#Oils" class="headerlink" title="Oils"></a>Oils</h2><ul><li>Food grade oil</li></ul><h2 id="Wood-Sources"><a href="#Wood-Sources" class="headerlink" title="Wood Sources"></a>Wood Sources</h2><ul><li>Small local mills</li><li>BBS Timbers</li><li>JSC Timber (decking hardwoods 140mm wide)</li><li>Building recyclers</li><li>FB Marketplace (up-cycle things like dinning tables)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tarmo5 3d Printed RC Car</title>
      <link href="/2024/06/tarmo5-3d-printed-rc-car/"/>
      <url>/2024/06/tarmo5-3d-printed-rc-car/</url>
      
        <content type="html"><![CDATA[<p>Thought this would be a fun project to build with my son, shout out to <a href="https://www.youtube.com/@EngineeringNS">EngineeringNS</a> for this open source projet.</p><h2 id="3D-Printed-Parts"><a href="#3D-Printed-Parts" class="headerlink" title="3D Printed Parts"></a>3D Printed Parts</h2><p>All the <a href="https://www.printables.com/@CarlPaton_1994848/collections/1490005">parts are here</a> with instructions <a href="https://docs.google.com/spreadsheets/d/1C7DmwJFF867uO1p4XnHtL0gA5qFRWjidJHE4BQigMw0/edit#gid=0">here copied from EngineeringNS</a></p><ul><li>PLA for the main body parts</li><li>ABS for the shock risors, control/swing arms to the wheels and gears</li><li>TPU (95A SHORE HARDNESS) for the shafts, bumpers and connectors</li></ul><p><img src="/d/tarmo5-3d-printed-rc-car/tarmo5-3d-printed.jpg" alt="RC Printer BOM"></p><h2 id="Bill-Of-Materials"><a href="#Bill-Of-Materials" class="headerlink" title="Bill Of Materials"></a>Bill Of Materials</h2><p>I listed them below but there is also a <a href="https://docs.google.com/spreadsheets/d/1-O0J67EAyh5Nz9dIrC9S_p4eQbkO4tZm0FXZRw8YPfQ/edit#gid=0">copy here from EngineeringNS</a></p><p>Electronics</p><ul><li><a href="https://www.aliexpress.com/item/1005006257408964.html">D3542 1450KV Brushless Outrunner</a> (its meant for a plane but clearly works)</li><li><a href="https://www.aliexpress.com/item/1005006176924038.html">Hobbywing 10BL120 Sensored 120A 2-3S Lipo Brushless ESC Speed Controller</a> (need to find a 4s)</li><li><a href="https://www.aliexpress.com/item/32631695994.html">PDI-6221MG 20KG Digital Servo</a></li></ul><p>Mechanical</p><ul><li><a href="https://www.aliexpress.com/item/1005005590988618.html">4 Wheels sets, between 100MM/120MM OD with 12mm Rim Drive Hex</a></li><li><a href="https://www.aliexpress.com/item/1005003731118967.html">6802RS Bearing 15x24x5mm</a></li><li><a href="https://www.aliexpress.com/item/1005004200587729.html">80mm Shock Absorber Oil Damper</a></li><li>6mm steel balls for CV Joints x18</li><li>M3*350 rod x3</li><li>M3*8 cap screws x6</li><li>M3*12 cap screws x5</li><li>M3*16 cap screws x9</li><li>M3 nylock nuts x7</li><li>M4 nylock nuts x5</li><li>M4 washers x5</li><li>M4*20 cap screws x23</li><li>M4*40 cap screws x24</li><li>M4*12 cap screws x6</li><li>M4*35 hex head screws x4 (hub drivers)</li><li>Main Drive Gear Adaptor, 5mm ID 11mm OD shank (Stop Collar Ring Positioner)</li><li>Super Lube 92003 Silicone Lubricating Grease with PTFE</li></ul><p>Radio Options</p><ul><li><a href="https://www.aliexpress.com/item/1005003546252718.html">FLYSKY FS-GT2B GT2B 2.4G 3CH Radio Transmitter</a></li><li><a href="https://www.aliexpress.com/item/1005006685228201.html">Flysky FS-GT3B 2.4G 3CH Radio Model Remote Control</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.reddit.com/r/EngineeringNS/comments/zvellk/tarmo5/">Tarmo5 subreddit</a></li><li><a href="https://www.youtube.com/watch?v=r2UDc4A8huY">Tarmo5 3D Printed RC Car - Engineering Nonsense</a></li><li><a href="https://www.youtube.com/watch?v=heEsQMkIaAc">Tarmo5 Build, First Run and Initial Impressions - RC Printer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 3d printing </tag>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Rate Limiter Service</title>
      <link href="/2024/05/build-rate-limiter-service/"/>
      <url>/2024/05/build-rate-limiter-service/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h2 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h2><p>Rate limiting an API means returning 429 Too many requests when the called exceeds quota. This can help with denial-of-service (DoS) attacks and help with performance when many components are trying to use the API at once.</p><p>Also see <a href="/2020/11/what-makes-a-great-api/">What makes a great API</a></p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Implement a rate lmiting service where for a fixed time window a customer can only perform x requests, the service just needs to return true or false. The consumption of the service (so the actual API) is out of scope for this post.</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>WIP!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://codingchallenges.fyi/challenges/challenge-rate-limiter/">https://codingchallenges.fyi/challenges/challenge-rate-limiter/</a></li><li><a href="https://code.visualstudio.com/docs/java/java-tutorial">https://code.visualstudio.com/docs/java/java-tutorial</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> java </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solution Design - Distributed Computing</title>
      <link href="/2024/04/rosetta-solution-design-distributed-computing/"/>
      <url>/2024/04/rosetta-solution-design-distributed-computing/</url>
      
        <content type="html"><![CDATA[<h2 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h2><p>I want to solution design something that teaches me more about distributed computing, in the past I had a play with this useing a <a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a> and a message passing interface library (<a href="https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php">mpiexec</a>) which ran Python 2. </p><p>This was cool but I want to leverage more modern technologies like REST to be able to queue a request and then query its progress/result based on an identifier, this is esentially the <a href="/2021/10/asynchronous-request-reply-pattern/">Asynchronous Request-Reply pattern</a>.</p><p>I want to use a queue service (perhaps <a href="https://www.rabbitmq.com/">RabbitMQ</a> or <a href="/2021/11/aws-sqs/">AWS SQS</a>) to decouple/loosely couple the components. Leaning towards RabbitMQ as although I understand the fundamentals of a queue, I have not used RabbitMQ itself. I think <a href="/2022/02/cloudevents/">Cloud Events</a> is a good starting point to structure the event but in reality <code>MessagingContracts</code> can just be classes shared between applications, these are just record DTOs describing the event.</p><p>Additionally I want to use <a href="/tags/c/">C#</a> for the heavy lifting as I have a good understanding of a <a href="/2021/03/c-sharp-hosted-service/">BackgroundService</a> and love the language. I want to try out <a href="https://masstransit.io/">masstransit</a> as it claims to <code>Easily build reliable distributed applications</code> and deploy using RabbitMQ, Azure Service Bus, and Amazon SQS. I like all these words ❤️</p><p>Lastly I want to use Kubernetes on a <a href="/2020/09/raspberry-pi-cluster-kubernetes/">Raspberry Pi Cluster running K3s</a> as this can host my <code>Publisher</code> (the REST API), the Queues themself, my <code>Consumers</code> and any persistant storage mechanism.</p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>The story needs some problem to solve. For this I’ll just a calculate prime numbers in a given range which was solved in the past by <a href="/2020/09/raspberry-pi-cluster-kubernetes/">Gary Explains using Python 2</a>.</p><p>Example: Calculate the number of prime numbers between 0 and 1,000,000. Google Gemini suggested I use <a href="https://en.wikipedia.org/wiki/Prime_number_theorem">Prime Number Theorem</a> instead of an itterative approach. This theorem tells us that the number of primes less than a certain value (x) is approximately equal to x divided by the natural logarithm of x (ln(x)). I understand some of those words but essentially thats <code>1,000,000 / ln(1,000,000) ≈ 78,498</code>. So if anything I now have a value to balance back to.</p><p>Meh, but then how would I warm the CPUs in the Pi’s. I’ll do the itterative approach thank you very much as solving the math problem is not the focus here, its learning more about solution design and distributed computing. The solution could then be applied to other problems needing distributed compute power. </p><p>Also I do what I want  ╭∩╮ (︶︿︶) ╭∩╮</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="White-Board"><a href="#White-Board" class="headerlink" title="White Board"></a>White Board</h3><p>I wrote up a quick white board design, this will most likely change as I organise my thoughts but as a first cut this looks like it will work.</p><p><img src="/d/rosetta-solution-design-distributed-computing/white-board.jpg" alt="White Board Hoon"></p><p>After drawing this up some concearns I could think of include</p><ul><li>How will the <code>Publisher</code> aggregate all the responses that the <code>Consumers</code> created, the message can only be polled for x times before it expires or is pushed to a DLQ. Additionally messages only live for a short time, AWS SQS default retention is 4 days but can be configured between 1 minute and 14 days.<ul><li>Potentially a database store is better or perhaps for a POC I could just log somewhere</li></ul></li><li>What happens if a <code>Consumer</code> crashes while processing a request<ul><li>SQS has a timeout visibility of a message once its polled for, so another <code>Consumer</code> cannot pick it up at the same time</li><li>I’ll need to consider how many times its polled for and also ensure its deleted once processed</li></ul></li><li>Why use queues at all?<ul><li>Supports a simpler message bus, a database will need to serialize the message to string  </li><li>Cheaper in the long run and a message in the queue is intended to be ephemeral (last a short time)</li></ul></li><li>This brings another concearn, how can I make sure these component events are atomic<ul><li>IE: the <code>Consumer</code> picks up some work to do and it successfully publishes the result</li><li>Potentially a queue is not the best way to aggregate the results, maybe this must go directly to a database store</li><li>The Inbox/Outbox pattern solves this issue as using masstransit. <a href="https://www.youtube.com/watch?v=032SfEBFIJs">Super helpful video here by Nick Chapsas</a></li></ul></li></ul><h3 id="Miro-Overview"><a href="#Miro-Overview" class="headerlink" title="Miro Overview"></a>Miro Overview</h3><p>I love a good Miro board to itterate on an idea! Here I structured high level based on the white board ideas. </p><p>WIP!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=4FFYefcx4Bg">Build Clean Messaging in .NET with MassTransit (Nick Chapsas)</a></li><li><a href="https://www.youtube.com/watch?v=MzC0PgYocmk">How To Build Loosely Coupled Microservices With MassTransit (Milan Jovanović)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
            <tag> aws </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Digital dice</title>
      <link href="/2024/02/digital-dice/"/>
      <url>/2024/02/digital-dice/</url>
      
        <content type="html"><![CDATA[<p>Digital dice solves a silly problem where I keep throwing dice off the table, ok ok it solves no problem and I just wanted to play with a Pico Pi and write some <a href="https://docs.micropython.org/">MicroPython</a> :D Besides the sillyness, I really wanted to have digital dice. I thought it would be a cool project that I could actually use when playing <a href="/2021/06/two-player-settlers-of-catan/">Catan</a>.</p><h2 id="Conceptual-Thinking"><a href="#Conceptual-Thinking" class="headerlink" title="Conceptual Thinking"></a>Conceptual Thinking</h2><p>There are a few options I looked at, I included the research if applicable so I dont have to go snorkel in the future if I decide to tinker.</p><p><strong>I2C 16x2 LCD Display</strong> ❌</p><p>Pico Pi with I2C 16x2 LCD Display Module (PCF8574)</p><ul><li>This screen is cool but its meant for longer text so will keep it for another project</li><li><a href="https://github.com/T-622/RPI-PICO-I2C-LCD">Drivers for I2C 16x2 LCD Display</a></li><li><a href="https://www.youtube.com/watch?v=bXLgxEcT1QU">NerdCave - Raspberry Pi Pico Tutorial: 16x2 LCD I2C Micropython</a></li></ul><p><strong>2 Digit Alphanumeric LED Display</strong> ❌</p><p>Pico Pi with 2 Digit Alphanumeric LED Display:</p><ul><li>This screen is really cool but the cheap ones I can find with a simple pinout (ie: CLK, DIO, GND, 5V) and chip like a TM1637 are all 4 digit displays so I thought that would look funny</li><li><a href="https://www.instructables.com/Raspberry-Pi-Pico-MX7219-Eight-Digits-of-Seven-Seg/">Cool example from a larger 8 digit display</a></li></ul><p><strong>Arduino with any screen</strong> ❌</p><ul><li>I dont really know how to code in C and C++ programming languages (Embedded C) so yeah na</li><li><a href="https://docs.arduino.cc/built-in-examples/basics/Blink/">Arduino docs on how to toggle LEDs</a></li></ul><p><strong>NE555 Chip</strong> ❌</p><ul><li>There are super cheap kits that come with everything you need but I wont get to do any coding</li><li><a href="https://a.aliexpress.com/_mtYhMBm">DIY Electronic Dice Kit LED</a></li></ul><p><strong>Pico Pi with LEDs</strong> ✅</p><ul><li><a href="https://docs.micropython.org/">MicroPython</a> is super easy to write</li><li><a href="https://www.pbtech.co.nz/product/SEVRBP0318/Raspberry-Pi-Pico-SC0915-Microcontrollers-Board">Raspberry Pi Pico SC0915 Microcontrollers Board</a> are real cheap</li><li>The board has enough digital pins and I have heaps of LEDs &amp; Resisters</li></ul><h2 id="Pico-Pi-with-LEDs"><a href="#Pico-Pi-with-LEDs" class="headerlink" title="Pico Pi with LEDs"></a>Pico Pi with LEDs</h2><p>With <code>Pico Pi with LEDs</code> as the best path I did some conceptual whiteboarding to think about the physical layout, how many pins I needed to use ect. The NE555 chip kit also gave me a better idea on the layout.</p><p><img src="/d/digital-dice/conceptualize-pins-to-leds.png" alt="conceptualize pins to leds"></p><p>I then made up some test LED with inline resisters, there is a bit <a href="/2020/05/pi-led-control/">math to figure out what resister</a> to use. I physically soldered one to the board to test.</p><p><img src="/d/digital-dice/leds-with-resisters.png" alt="leds with resisters"></p><p>I then used a Pi4 <a href="https://www.raspberrypi.com/software/">Raspberry Pi OS</a> and <a href="https://projects.raspberrypi.org/en/projects/getting-started-with-the-pico/5">Thonny</a> IDE adapting their examples to test blinking the LED. After that worked I soldered and made up the rest.</p><p><img src="/d/digital-dice/digital-dice-leds-connected.png" alt="digital dice leds connected"></p><p>I then completed the code and tested that worked, the complete code is here <a href="https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico/Dice/main.py">https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico/Dice/main.py</a></p><p>I then added a button, updated the code and printed a quick box (the design is prototype so I didnt upload the STL)</p><p><img src="/d/digital-dice/digital-dice-prototype.png" alt="digital dice prototype"></p><p>I powered it with 4 old AAA batteries connected in series, I need to draw up a better box, future Carls problem :D</p>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Change Data Capture - CDC</title>
      <link href="/2023/11/sql-change-data-capture-cdc/"/>
      <url>/2023/11/sql-change-data-capture-cdc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Change data capture utilizes the SQL Server Agent to log insertions, updates, and deletions occurring in a table. So, it makes these data changes accessible to be easily consumed using a relational format. - learn.microsoft.com</p></blockquote><p>This is useful when data from different databases is sucked up into a data lake, this way we can easily keep the data lake current with changes we care about.</p><h2 id="Simple-POC"><a href="#Simple-POC" class="headerlink" title="Simple POC"></a>Simple POC</h2><p>You can use sample databases from Microsoft like <a href="https://learn.microsoft.com/en-us/sql/samples/adventureworks-install-configure">AdventureWorks</a> or <a href="https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs">Northwind</a> or you can just invent your own. For simplicity and reasons of being a nerd I did the latter.</p><p>A. Create a container for the SQL Server with settings ready for CDC</p><details>  <summary>Local Docker SQL Container</summary><ol><li>Spin up a <a href="https://www.docker.com/products/docker-desktop/">Docker</a> <a href="https://hub.docker.com/_/microsoft-mssql-server">SQL Container</a>. This will start the container with Product ID (PID) as Developer Edition.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name cdc-container -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=Password!&quot; -e MSSQL_AGENT_ENABLED=true -p 5901:1433 -d mcr.microsoft.com/mssql/server:2019-latest</span><br></pre></td></tr></table></figure><ul><li><code>--name cdc-container</code> names the container, else you will get a <a href="https://docs.docker.com/engine/reference/run/#container-identification">random name like <code>evil_ptolemy</code></a></li><li><code>-e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=Password!&quot; -e MSSQL_AGENT_ENABLED=true</code> are environmental variables, <code>MSSQL_AGENT_ENABLED</code> is important as this agent runs the CDC jobs</li><li><code>-p 5901:1433</code> is the port, so 5001 is your machine which maps to 1433 in the container</li><li> <code>-d</code> means run detached from the console</li></ul><ol start="2"><li>Connect to the instance from <a href="https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Server Name: localhost,5901</span><br><span class="line">Login: sa</span><br><span class="line">Password: Password!</span><br></pre></td></tr></table></figure><ol start="3"><li>Create the sample database and table, I adapted these from <a href="https://www.w3schools.com/sql/sql_create_table.asp">w3schools</a>. The table needs a primary key for CDC to track on.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE databasename;</span><br><span class="line"></span><br><span class="line">USE databasename;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    last_name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    first_name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    city <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>You should now see the database in the object explorer:</p><p><img src="/d/sql-change-data-capture-cdc/databasename-in-object-explorer.jpg" alt="databasename in object explorer"></p></details><p>B. Confirgure the SQL database to track CDC changes</p><details>  <summary>Setup CDC</summary><ol><li>The ownership of the table should be <code>sa</code>, if you restored a sample database you will need to run <a href="https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql">ALTER AUTHORIZATION</a> before verifying the owner with the SQL below</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.name, d.owner_sid, sl.name</span><br><span class="line">FROM sys.databases AS d</span><br><span class="line">JOIN sys.sql_logins AS sl</span><br><span class="line">ON d.owner_sid = sl.sid;</span><br></pre></td></tr></table></figure><p><img src="/d/sql-change-data-capture-cdc/databasename-owner.jpg" alt="databasename owner"></p><ol start="2"><li>Enable tracking changes, you can also disable with the commented out procedure below it.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sys.sp_cdc_enable_db</span><br><span class="line"><span class="comment">--EXEC sys.sp_cdc_disable_db</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Verify table changes now exists, it will be blank but this means the above was successful. The <code>cdc</code> schema tables are surfaced under <code>System Tables</code></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cdc.change_tables</span><br></pre></td></tr></table></figure><p><img src="/d/sql-change-data-capture-cdc/table-changes.jpg" alt="table changes"></p><ol start="4"><li>Enable changes for the table <code>person</code>. </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sys.sp_cdc_enable_table</span><br><span class="line"><span class="variable">@source_schema</span> <span class="operator">=</span> N<span class="string">&#x27;dbo&#x27;</span></span><br><span class="line">, <span class="variable">@source_name</span> <span class="operator">=</span> N<span class="string">&#x27;person&#x27;</span></span><br><span class="line">, <span class="variable">@role_name</span> <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="comment">--  , @capture_instance = N&#x27;foo_person_changes&#x27;</span></span><br><span class="line">, <span class="variable">@capture_instance</span> <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line">, <span class="variable">@supports_net_changes</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">, <span class="variable">@captured_column_list</span> <span class="operator">=</span> N<span class="string">&#x27;id, last_name, first_name&#x27;</span></span><br><span class="line">, <span class="variable">@filegroup_name</span> <span class="operator">=</span> N<span class="string">&#x27;PRIMARY&#x27;</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><ul><li><code>capture_instance</code> is the new table name. NULL will set the default based on the params example <code>cdc.dbo_person_CT</code>. You could set this to be <code>foo_person_changes_CT</code> (the <code>_CT</code> is always suffixed by default)</li><li><code>supports_net_changes</code> is for when the column changes frequently, so only capture the net change (ie the last one)</li><li><code>captured_column_list</code> these are column you want to track, you have to include the primary key</li></ul><p>This will take a few seconds to complete as its creating jobs. The <code>capture</code> job captures the data as it changes from the log file. The <code>cleanup</code> job purges the captured data, it will only keep it for 3 days by default. You can change this with <code>@retention=</code> which needs to be in minutes.</p><p><img src="/d/sql-change-data-capture-cdc/cdc-jobs.jpg" alt="cdc jobs"></p><p>If you want to disable the table you can use this SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sys.sp_cdc_disable_table</span><br><span class="line"><span class="variable">@source_schema</span> <span class="operator">=</span> N<span class="string">&#x27;dbo&#x27;</span></span><br><span class="line">, <span class="variable">@source_name</span> <span class="operator">=</span> N<span class="string">&#x27;person&#x27;</span></span><br><span class="line">, <span class="variable">@capture_instance</span> <span class="operator">=</span> N<span class="string">&#x27;dbo_person&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>Checking the table changes should now surface that <code>person</code> is being tracked</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cdc.change_tables</span><br></pre></td></tr></table></figure><p><img src="/d/sql-change-data-capture-cdc/person-is-being-tracked.jpg" alt="person is being tracked"></p><ol start="6"><li>Now query the change table, it should be empty</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cdc.dbo_person_CT</span><br></pre></td></tr></table></figure><p><img src="/d/sql-change-data-capture-cdc/empty-change-table.jpg" alt="empty change table"></p><ol start="7"><li>Knowing what each change table column is used for helps understand the data when quering it</li></ol><ul><li><code>_$start_lsn</code> commit log sequence number (LSN) within the same Transaction</li><li><code>_$seqval</code> order changes within a transaction</li><li><code>_$operation</code> 1=delete, 2=insert,3=updatebefore, 4=updateafter</li><li><code>_$update_mask</code> for insert and delete all bits are set, for update bits set correspond to columns changed</li></ul></details><p>C. Test and view the CDC changes </p><details>  <summary>Test CDC</summary><p>Now we can finally test the tracked changed</p><ol><li>INSERT some data, this is <code>_$operation</code> 2</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> databasename.dbo.person </span><br><span class="line">(last_name,first_name,address,city)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;paton&#x27;</span>, <span class="string">&#x27;carl&#x27;</span>, <span class="string">&#x27;10 road name&#x27;</span>, <span class="string">&#x27;durban&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>UPDATE the data, this is <code>_$operation</code> 3 and 4</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> databasename.dbo.person</span><br><span class="line"><span class="keyword">SET</span> last_name <span class="operator">=</span> <span class="string">&#x27;foo&#x27;</span>, first_name <span class="operator">=</span> <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>DELETE the data, this is <code>_$operation</code> 1</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> databasename.dbo.person </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Query the changes</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INSERTS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cdc.dbo_person_CT <span class="keyword">WHERE</span> __$operation <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- UPDATE</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cdc.dbo_person_CT <span class="keyword">WHERE</span> __$operation <span class="keyword">IN</span> (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> cdc.dbo_person_CT <span class="keyword">WHERE</span> __$operation <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Here you can see for <code>__$operation = 2</code> new data was created</p><p><img src="/d/sql-change-data-capture-cdc/insert-changes.jpg" alt="insert changes"></p><p>For <code>__$operation IN (3,4)</code> we have the update before (3) and update after (4) and for both <code>__$seqval</code> is the same meaning it was in the same transaction</p><p><img src="/d/sql-change-data-capture-cdc/update-changes.jpg" alt="update changes"></p><p>For <code>__$operation = 1</code> new data was deleted</p><p><img src="/d/sql-change-data-capture-cdc/delete-changes.jpg" alt="delete changes"></p></details><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server">https://learn.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server</a></li><li><a href="https://www.youtube.com/watch?v=IJbAhfFRHdA">https://www.youtube.com/watch?v=IJbAhfFRHdA</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS EKS</title>
      <link href="/2023/10/aws-eks/"/>
      <url>/2023/10/aws-eks/</url>
      
        <content type="html"><![CDATA[<h2 id="EKS-Overview"><a href="#EKS-Overview" class="headerlink" title="EKS Overview"></a>EKS Overview</h2><h3 id="Control-Plane"><a href="#Control-Plane" class="headerlink" title="Control Plane"></a>Control Plane</h3><p>EKS is Amazon <a href="https://aws.amazon.com/eks/">Elastic Kubernetes Service</a>, its a managed Kubernetes services in the cloud. (although they have options for on prem). Managed EKS means AWS will manage the <code>control plane</code> of the K8s cluster. This means it will provision/maintain master nodes, install all the control plane processes (API Server, Scheduler, Controller Manager and etcd). They will also help with scaling and backups. All of this is in an AWS VPC.</p><p>Security and best practices are managed by AWS. Integration with other AWS services is easy. (S3, IAM, Secrets Manager, Load Balancer)</p><h3 id="Data-Plane"><a href="#Data-Plane" class="headerlink" title="Data Plane"></a>Data Plane</h3><p>The <code>worker nodes</code> (this is in the <code>data plane</code> and in your VPC) are the only nodes you need to worry about.</p><p>We can setup worker nodes in different ways</p><ul><li><strong>Self-managed nodes</strong><ul><li>Provision EC2 instances manually that you want to use as worker nodes</li><li>Install processes like <code>Kubelet</code>, <code>Kube-proxy</code>, <code>Container runtime</code></li><li>You will need to update/patch the servers yourself</li><li>Register node with the control plane</li></ul></li><li><strong>Managed node group</strong><ul><li>AWS automates the provisioning and lifecycle of the EC2 nodes</li><li>This uses a EKS optimized image</li><li>Uses single AWS/EKS API call (<code>Create, Update, Terminate</code>)</li><li>Nodes are part of an Auto Scaling Group managed by EKS</li></ul></li><li><strong>Fargate</strong><ul><li>Serverless architecture, you dont have to provision worker nodes (mantain EC2 instances)</li><li>When you deploy resources to the K8s cluster, fargate will provision worker nodes on demand</li><li>Based on your requirements it figures out the most optimal EC2 sizing</li><li>You only pay for what you use</li></ul></li></ul><p><strong>Create EKS Cluster</strong></p><p>Needs the following to run</p><ul><li>Cluster name and K8s version</li><li>IAM role for cluster to run (privileges like provision nodes, access storage, secrets)</li><li>VPC and Subnets to run the cluster on</li><li>Needs security group (allow traffic to and from cluster)</li></ul><p><strong>Create Worker Nodes</strong></p><p>The high level steps are</p><ul><li>Create node group</li><li>Specify instance type</li><li>Define min/max number of nodes you want</li><li>Specify the EKS cluster to connect to</li></ul><p><strong>Connect To Cluster</strong></p><p>This is from our local machine.</p><p>There are several ways to do this:</p><ul><li><strong>AWS Console</strong> <ul><li>AWS UI using EKS and the configuration wizard</li><li>This is long winded, you need to create cluster, create worker nodes, setup kubectl locally</li><li>Provision VPC, subnets and routing</li></ul></li><li><strong>EKSCTL</strong><ul><li>Sets up the cluster with a single command</li><li>This will provision all you need (Control plane, VPCs, subnets, worker nodes)</li></ul></li><li><strong>Infasturcture As Code (Terraform)</strong><ul><li>Define infastructure configuration in code</li><li>Deploy by using Terraform/Pulumi</li></ul></li></ul><h2 id="eksctl"><a href="#eksctl" class="headerlink" title="eksctl"></a>eksctl</h2><ul><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html">https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html</a></li></ul><p>There are several commands you can see with <code>eksctl --help</code>. You can also run help for the sub commands like <code>eksctl create --help</code> and <code>eksctl create cluster --help</code></p><ul><li><code>eksctl create cluster --name mycluster1 --nodegroup-name mynodegroup1 --region us-east1 --node-type t2.micro --nodes 2</code> will create the cluster with the given name, node group, region ect. This will take several minutes.<ul><li>The VPC and subnet names will be prefixed with <code>eksctl-</code></li><li>This will update your <code>kubectl</code> (in <code>~/username/.kube/config</code>)</li></ul></li><li><code>eksctl delete cluster --name mycluster1</code><ul><li>This will also delete the other associated resources like the VPC</li></ul></li></ul><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><ul><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html">https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html</a></li></ul><p>Basic kubectl commands, also see <a href="/2020/09/raspberry-pi-cluster-kubernetes/">Raspberry Pi Cluster - Kubernetes</a></p><ul><li><code>kubectl config view</code> Will show the cluster config in <code>~/username/.kube/config</code></li><li><code>kubectl get nodes</code> Will list the EC2 instance nodes in the cluster</li><li><code>kubectl get pods</code>  Will list all of the pods that are available in the cluster, their names, whether they are ready or not, their status, restarts and age</li><li><code>kubectl logs &lt;pod name&gt;</code> Will print the logs from a given pod name.</li><li><code>kubectl describe pod &lt;pod name&gt;</code> Will print detailed information about such as information on the containers in the pod, its volumes, events and other meta data.</li><li><code>kubectl exec &lt;pod name&gt; -- &lt;command&gt;</code> Will run the specified command in the container of the pod.</li><li><code>kubectl exec &lt;pod name&gt; -- env</code> Will use the exec command, and run the env command in the container for the pod.</li><li><code>kubectl rollout restart deployment &lt;deployment_name&gt;</code> Will restart pods one by one without any downtime.</li><li><code>kubectl config set-cluster</code></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/">https://kubernetes.io/docs/reference/kubectl/cheatsheet/</a></li><li><a href="https://www.bluematador.com/learn/kubectl-cheatsheet">https://www.bluematador.com/learn/kubectl-cheatsheet</a></li><li><a href="https://www.youtube.com/watch?v=CukYk43agA4">AWS EKS Tutorial | What is EKS? | EKS Explained | KodeKloud</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spaghetti Mince</title>
      <link href="/2023/10/spaghetti-mince/"/>
      <url>/2023/10/spaghetti-mince/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/spaghetti-mince/spaghetti-mince.jpg" alt="Spaghetti Mince"></p><p><strong>Cooking time :</strong> Mince about 20 minutes, spaghetti about 25.</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><ul><li>Onions (2 medium) </li><li>Mushrooms (half punnet)</li><li>Carrots (2 large)</li><li>Croquettes (Cucumber looking things, 3 or 4 of)</li><li>Spaghetti (about half the box, we like the vegan one)</li><li>Tim tomatoes (1)</li><li>Chicken stock cube (1)</li><li>Milk (half cup)</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><ul><li>Chop onions, mushrooms</li><li>Peel and grate carrots</li><li>Fry the onions and once they transulsant add the mince and brown that.</li><li>Add some spices to taste</li><li>Add the carrots and croquettes. And let cook for 2 min add a can of tin tomatoes</li><li>Add the chicken stock cube to a coffee cup with hot water and let it melt. Then add that to the mixture.</li><li>Pour half a cup of milk in and let it cook down. </li><li>Add more spices and some tomatoe paste with a teaspoon of sugar to taste (it may need more sugar)</li><li>Boil spaghetti with water and salt</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Garbage Collection</title>
      <link href="/2023/09/garbage-collection/"/>
      <url>/2023/09/garbage-collection/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Garbage collection (GC) is a memory recovery feature built into the framework. It runs in its own thread from your application.</p></blockquote><p>Also see <a href="/2018/06/value-type-vs-reference-type/">Value Type vs Reference Type</a></p><h2 id="Finalizer"><a href="#Finalizer" class="headerlink" title="Finalizer"></a>Finalizer</h2><p>A method that is call at the moment that an object is being garbage collected. Ive never had a use case for this besides demo code like this to keep track and show that GC is happening.</p><p>Here <code>~Foo</code> is the finalizer.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Prop &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    ~Foo()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;GC: <span class="subst">&#123;Name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can instruct GC to cleanup but this is not something Ive ever needed to manually do, instead I trust that the GC Engine knows the suitable time to take out the trash. Normally when the runtime system is starting to run short of memory :)</p><p>Example instance code</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> fooInstance = <span class="keyword">new</span> Foo() &#123; Prop = <span class="string">&quot;I was cleaned up&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    GC.Collect();</span><br><span class="line">    GC.WaitForPendingFinalizers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This wont output anything.</p><p>The line <code>GC.Collect()</code> will look for all of the local stack and static variables in our entire application. Anything referenced on the heap, from the stack variable that is reachable is marked as <code>reachable</code>. So that wont be garbage collected as its in scope when we called <code>GC.Collect()</code></p><p>So if we change the code as follows</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    CreateFoo();</span><br><span class="line">    GC.Collect();</span><br><span class="line">    GC.WaitForPendingFinalizers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateFoo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> fooInstance = <span class="keyword">new</span> Foo() &#123; Prop = <span class="string">&quot;I was cleaned up&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will output: <code>GC: I was cleaned up</code> as <code>fooInstance</code> is out of scope when we run GC so all memory will be re-claimed.</p><h2 id="Generations"><a href="#Generations" class="headerlink" title="Generations"></a>Generations</h2><p>In .Net there are 3 <a href="/2018/06/value-type-vs-reference-type/">heaps</a>, its called a 3 generational garbage collection system. Note that there is also a large object heap (anything greater than 85 kilobytes)</p><ul><li><strong>Generation 0</strong> (short lived objects where GC runs more often)</li></ul><p>Initially this is where a reference object is allocated. It stores the objects like a stack ontop of each other and has a heap pointer for the next avalible space. When marking happens, anything that is reachable is moved to <code>Generation 1</code>. So now the pointer is moved to 0 and new objects coming in simply replace the existing ones and the stack start again. This means there is no heap fragmentation. Additionally this gives a performance gain.</p><ul><li><strong>Generation 1</strong> (collected less frequently than Gen 0)</li></ul><p>These are objects that were marked as reachable and proved to have a reasonably long lifetime. When <code>Generation 1</code> starts to get full the exact same process as above is performed and anything marked as reachable moves to <code>Generation 2</code></p><ul><li><strong>Generation 2</strong> (collected less frequently than Gen 1)</li></ul><p>These objects have a really long lifetime and are likely to be around for the entire lifetime of the application. When <code>Generation 2</code> starts to get full, the framework will start to compact the heap. This just means that unreachable objects are removed, this is a slower process but should not happen much if at all. (thats NOT a challange to write bad code!)</p><ul><li><strong>Large Object Heap</strong> (collected less frequently)</li></ul><p>These are for large objects (anything over 85 kilobytes) and are assumed to be long lived based on their size. <code>Large Object Heap</code> behaves on its own and is like the <code>Generation 2</code> heap so it will instead be compacted when GC happens.</p><p>These large objects will generally be things like Lists/arrays.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=BeuNvhd1L_g">.NET Core Garbage Collection - Coding Tutorials</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals">https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Index</title>
      <link href="/2023/09/sql-index/"/>
      <url>/2023/09/sql-index/</url>
      
        <content type="html"><![CDATA[<p>The indexes are structures in the databases created to tune the database performance. They are used to speed up data retrieval. </p><p>The types of indexes are:</p><ul><li>Clustered index<ul><li>Physical ordering of data in a table based on a specific column or set of columns.</li><li>A table can only have one clustered index</li></ul></li><li>Non-Clustered index<ul><li>Separate structure that contains pointers to data rows in a table, allowing for efficient data retrieval based on specific columns without affecting the physical order of the data.</li><li>A table can have many Non-Clustered indexes</li></ul></li></ul><p>The main difference between clustered and non-clustered indexes lies in their impact on the physical storage of data. A clustered index determines the physical order of the data in the table, while a non-clustered index is a separate structure that points to the data rows, allowing for efficient retrieval without affecting the physical order.</p><h2 id="Other-Index-Types"><a href="#Other-Index-Types" class="headerlink" title="Other Index Types"></a>Other Index Types</h2><p><em>This is not a comprehensive list</em></p><ul><li>Unique index<ul><li>Ensures that all values in the indexed column(s) are unique</li></ul></li><li>Composite Index<ul><li>Created on multiple columns, allowing for efficient retrieval based on combinations of column values</li></ul></li><li>Primary Key Index<ul><li>A special type of unique index that uniquely identifies each row in a table</li></ul></li><li>Foreign Key Index<ul><li>Enforces referential integrity by pointing to a primary key in another table.</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handshake</title>
      <link href="/2023/09/handshake/"/>
      <url>/2023/09/handshake/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A handshake is a process in which a browser authenticates a server’s SSL or TLS certificate. This process authenticates both parties, then exchanges cryptographic keys.</p></blockquote><blockquote><p>The SSL handshake is the process in which a client and server establish the encryption algorithms and secret keys they will use to communicate with each other securely, and exchange and validate each other’s digital certificates.</p></blockquote><blockquote><p>Transport Layer Security (TLS) is the upgraded version of SSL that fixes existing SSL vulnerabilities.</p></blockquote><ul><li><a href="https://aws.amazon.com/compare/the-difference-between-ssl-and-tls/">https://aws.amazon.com/compare/the-difference-between-ssl-and-tls/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moq.Langauge Callback Function</title>
      <link href="/2023/09/moq-language-callback/"/>
      <url>/2023/09/moq-language-callback/</url>
      
        <content type="html"><![CDATA[<p>When doing this to project has <code>Moq.4.16.1</code> and the namespace I used was <code>Moq.Language</code> but it was just resolved with <code>using Moq;</code>.</p><p>In the <code>.Verify</code> where you passed <code>DynamicParameters</code> its also possible to instead use <code>It.Is&lt;DynamicParameters&gt;(x =&gt; x.Foo == &quot;foo&quot;)</code> but I wanted to try the callback option. There are some <a href="/2021/02/mocking-ilogger/">It.Is examples here</a>.</p><h1 id="Why-Callback"><a href="#Why-Callback" class="headerlink" title="Why Callback?"></a>Why Callback?</h1><p>I was unit testing a command that runs a stored procedure for Dapper using DynamicParameters. The DynamicParameters are created privately inside the unit of work (the method Im testing).</p><p>The stack is <code>MyController</code> -&gt; <code>IMyCommand</code> -&gt; <code>IDbUtility</code>. For the purpose of this post I dont look at <code>MyController</code>, it only gives some context.</p><p>I needed to verify that <code>foo</code> and <code>bar</code> are set in the parameters in <code>MyCommand</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCommand</span> : <span class="title">IMyCommand</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RunProcAsync</span>(<span class="params"><span class="built_in">string</span> foo, <span class="built_in">string</span> bar</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">var</span> parameters = <span class="keyword">new</span> DynamicParameters();</span><br><span class="line">      parameters.Add(<span class="string">&quot;@foo&quot;</span>, foo);</span><br><span class="line">      parameters.Add(<span class="string">&quot;@bar&quot;</span>, bar);</span><br><span class="line"></span><br><span class="line">      _dbUtility.RunProc(<span class="string">&quot;MySweetProc&quot;</span>, parameters);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As <code>_dbUtility</code> is injected into the constructor of my class under test, I was mocking it. So in the test I could use a <code>.CallBack()</code> to reach in and inspect the parameters.</p><h1 id="Test-Structure"><a href="#Test-Structure" class="headerlink" title="Test Structure"></a>Test Structure</h1><p>After calling <code>.Setup()</code> to tell Moq which method and overload, I called <code>.Callback</code>. From the docs:</p><p><em>.Callback(…) Specifies a callback to invoke when the method is called that receives the original arguments</em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrange</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;fooValue&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="string">&quot;barValue&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> dbUtilityMock = <span class="keyword">new</span> Mock&lt;IDbUtility&gt;();</span><br><span class="line"><span class="keyword">var</span> capturedDynamicParameters = <span class="keyword">new</span> DynamicParameters();</span><br><span class="line"></span><br><span class="line">dbUtilityMock</span><br><span class="line">   .Setup(x =&gt; x.RunProc(procname, It.IsAny&lt;DynamicParameters&gt;()))</span><br><span class="line">   .Callback((<span class="built_in">string</span> storedProcedureName, DynamicParameters parameters) =&gt;</span><br><span class="line">   &#123;</span><br><span class="line">      capturedDynamicParameters = parameters;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">IMyCommand classUndertest = <span class="keyword">new</span> MyCommand(databaseUtil.Object);</span><br></pre></td></tr></table></figure><p>So then all I needed to do was call the unit of work and then check what was captured as <code>capturedDynamicParameters</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">await</span> classUndertest.RunProcAsync(foo, bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assert</span></span><br><span class="line">_databaseUtil.Verify(x =&gt; x.RunProc(</span><br><span class="line">   <span class="string">&quot;MySweetProc&quot;</span>,</span><br><span class="line">   It.IsAny&lt;DynamicParameters&gt;()), Times.Once);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parametersLookup = capturedDynamicParameters <span class="keyword">as</span> SqlMapper.IParameterLookup;</span><br><span class="line">Assert.Equal(parametersLookup[<span class="string">&quot;foo&quot;</span>], foo);</span><br><span class="line">Assert.Equal(parametersLookup[<span class="string">&quot;bar&quot;</span>], bar);</span><br></pre></td></tr></table></figure><p>I’ve used this <code>.Callback()</code> on the past for <a href="/2021/12/testing-with-cancellation-token/">CancellationToken</a>.</p><p>Easy!</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/moq/moq/wiki/Quickstart#callbacks">https://github.com/moq/moq/wiki/Quickstart#callbacks</a></li><li><a href="https://documentation.help/Moq/6005E2B1.htm">https://documentation.help/Moq/6005E2B1.htm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# New Project</title>
      <link href="/2023/09/c-sharp-new-project/"/>
      <url>/2023/09/c-sharp-new-project/</url>
      
        <content type="html"><![CDATA[<p>Everytime I setup a new project, besides consideration on if I need <a href="/2020/07/microservice-architecture/">microservice architecture</a> or a good old <a href="/2019/12/web-application-architecture/">monolithic application</a> there are always simliar steps needed to get the project in a maintainable state.</p><h2 id="SCM"><a href="#SCM" class="headerlink" title="SCM"></a>SCM</h2><p><a href="https://github.com/">Github</a> is my goto but other exist like <a href="https://about.gitlab.com/">GitLab</a> and <a href="https://bitbucket.org/product/">Bitbucket</a></p><p><strong>Files</strong></p><ul><li><a href="https://www.toptal.com/developers/gitignore/api/aspnetcore">.gitignore: aspnetcore template</a>, also see <a href="https://github.com/github/gitignore/tree/main/community/DotNet">github gitignore</a></li></ul><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Regardless of the architecture, anything new needs to run in a container. This is just defacto now days. I built a <a href="/2018/08/docker-compose-demo/">simple demo</a> a few years back which is still relavant. Today I’d add that compose locally should bring up a containerised local environment for everything your application needs to run.</p><ul><li>containerised database</li><li>stubs of downstream internal dependencies, you can use tooling like <a href="/2021/05/wiremocks/">wiremocks (.Net)</a>, <a href="/2023/06/express-nodejs-mocking/">Express (Node)</a> or a simple <a href="/2022/02/json-server/">JSON Server</a></li><li>stubs of external dependencies, example <a href="/2021/12/aws-localstack/">AWS Localstack</a></li><li>stubs of your <a href="/2020/12/oauth2/">authorisation</a> service</li></ul><p>This should be run from one file like <code>Run_Local.ps1</code>, below is an example.</p><details>  <summary>Example Run_Local.ps1</summary><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment"><span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment">Run all the stubs locally</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.DESCRIPTION</span></span></span><br><span class="line"><span class="comment">This script does the following:</span></span><br><span class="line"><span class="comment">1. Run Localstack (dynamodb)</span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">param</span> (</span><br><span class="line">    [<span class="type">Parameter</span>()]</span><br><span class="line">    [<span class="type">switch</span>]</span><br><span class="line">    <span class="variable">$RebuildStubs</span>,</span><br><span class="line"></span><br><span class="line">    [<span class="type">Parameter</span>()]</span><br><span class="line">    [<span class="type">switch</span>]</span><br><span class="line">    <span class="variable">$NoBff</span>,</span><br><span class="line"></span><br><span class="line">    [<span class="type">Parameter</span>()]</span><br><span class="line">    [<span class="type">switch</span>]</span><br><span class="line">    <span class="variable">$LocalStackOnly</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2.0</span></span><br><span class="line"><span class="variable">$ErrorActionPreference</span> = <span class="string">&#x27;Stop&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Output</span> <span class="string">&#x27;****** Running stubs ******&#x27;</span></span><br><span class="line"><span class="variable">$host</span>.ui.RawUI.WindowTitle = <span class="string">&#x27;Porky Stubs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$LocalStackOnly</span>.isPresent) &#123;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&#x27;****** STARTING ONLY LOCALSTACK ******&#x27;</span></span><br><span class="line">    docker <span class="built_in">start</span> pky_localstack</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$NoBff</span>.isPresent) &#123;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&#x27;****** NO BFF ******&#x27;</span></span><br><span class="line">    docker<span class="literal">-compose</span> <span class="literal">--project-name</span> porky <span class="operator">-f</span> ./stubs/docker<span class="literal">-compose-no-bff</span>.yml up (<span class="variable">$RebuildStubs</span> ? <span class="string">&quot;--build&quot;</span> : <span class="string">&quot;&quot;</span>) <span class="literal">--remove-orphans</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&#x27;No params found! Try -LocalStackOnly or -NoBff and optionally -RebuildStubs&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="Code-Conventions"><a href="#Code-Conventions" class="headerlink" title="Code Conventions"></a>Code Conventions</h2><p>We want all members of the team rowing in the same direction. As there are many IDEs (Visual Studio, Ryder ect) the simplest way is to commit a <code>.editorconfig</code> file with the source control. Check out <a href="https://editorconfig.org/">https://editorconfig.org/</a></p><p>Works out of the box with some, for VS Code you need a plugin. (Also see <a href="/2019/09/ide-visual-studio-code/">IDE Visual Studio Code</a>)</p><p>Also see <a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/categories">Rule categories</a>, these are for the <code>dotnet_diagnostic.x</code> records.</p><details>  <summary>Example .editorconfig (From Milan Jovanovics Clean Architecture example)</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line"># C# files</span><br><span class="line">[*.cs]</span><br><span class="line"></span><br><span class="line">#### Core EditorConfig Options ####</span><br><span class="line"></span><br><span class="line"># Indentation and spacing</span><br><span class="line">indent_size = 4</span><br><span class="line">indent_style = space</span><br><span class="line">tab_width = 4</span><br><span class="line"></span><br><span class="line"># New line preferences</span><br><span class="line">end_of_line = crlf</span><br><span class="line">insert_final_newline = true</span><br><span class="line"></span><br><span class="line">#### .NET Coding Conventions ####</span><br><span class="line"></span><br><span class="line"># Organize usings</span><br><span class="line">dotnet_separate_import_directive_groups = false</span><br><span class="line">dotnet_sort_system_directives_first = true</span><br><span class="line"></span><br><span class="line"># this. and Me. preferences</span><br><span class="line">dotnet_style_qualification_for_event = false:error</span><br><span class="line">dotnet_style_qualification_for_field = false:error</span><br><span class="line">dotnet_style_qualification_for_method = false:error</span><br><span class="line">dotnet_style_qualification_for_property = false:error</span><br><span class="line"></span><br><span class="line"># Language keywords vs BCL types preferences</span><br><span class="line">dotnet_style_predefined_type_for_locals_parameters_members = true:error</span><br><span class="line">dotnet_style_predefined_type_for_member_access = true:error</span><br><span class="line"></span><br><span class="line"># Parentheses preferences</span><br><span class="line">dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:error</span><br><span class="line">dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:error</span><br><span class="line">dotnet_style_parentheses_in_other_operators = never_if_unnecessary:error</span><br><span class="line">dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:error</span><br><span class="line"></span><br><span class="line"># Modifier preferences</span><br><span class="line">dotnet_style_require_accessibility_modifiers = for_non_interface_members:error</span><br><span class="line"></span><br><span class="line"># Expression-level preferences</span><br><span class="line">dotnet_style_coalesce_expression = true:error</span><br><span class="line">dotnet_style_collection_initializer = true:error</span><br><span class="line">dotnet_style_explicit_tuple_names = true:error</span><br><span class="line">dotnet_style_null_propagation = true:error</span><br><span class="line">dotnet_style_object_initializer = true:error</span><br><span class="line">dotnet_style_prefer_auto_properties = true:warning</span><br><span class="line">dotnet_style_prefer_compound_assignment = true:error</span><br><span class="line">dotnet_style_prefer_conditional_expression_over_assignment = true:error</span><br><span class="line">dotnet_style_prefer_conditional_expression_over_return = true:none</span><br><span class="line">dotnet_style_prefer_inferred_anonymous_type_member_names = true:error</span><br><span class="line">dotnet_style_prefer_inferred_tuple_names = true:error</span><br><span class="line">dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error</span><br><span class="line">csharp_indent_labels = one_less_than_current</span><br><span class="line">csharp_using_directive_placement = outside_namespace:error</span><br><span class="line">csharp_prefer_simple_using_statement = true:error</span><br><span class="line">csharp_prefer_braces = true:error</span><br><span class="line">csharp_style_namespace_declarations = file_scoped:error</span><br><span class="line">csharp_style_prefer_method_group_conversion = true:silent</span><br><span class="line">csharp_style_prefer_top_level_statements = true:silent</span><br><span class="line">csharp_style_prefer_primary_constructors = true:none</span><br><span class="line">csharp_style_expression_bodied_methods = false:silent</span><br><span class="line">csharp_style_expression_bodied_constructors = false:silent</span><br><span class="line">csharp_style_expression_bodied_operators = true:error</span><br><span class="line">csharp_style_expression_bodied_properties = true:error</span><br><span class="line">csharp_style_expression_bodied_indexers = true:error</span><br><span class="line">csharp_style_expression_bodied_accessors = true:error</span><br><span class="line">csharp_style_expression_bodied_lambdas = true:error</span><br><span class="line">csharp_style_expression_bodied_local_functions = true:error</span><br><span class="line"></span><br><span class="line">[*.&#123;cs,vb&#125;]</span><br><span class="line">dotnet_style_prefer_simplified_boolean_expressions = true:suggestion</span><br><span class="line">dotnet_style_prefer_simplified_interpolation = true:suggestion</span><br><span class="line">dotnet_style_namespace_match_folder = true:suggestion</span><br><span class="line"></span><br><span class="line"># Field preferences</span><br><span class="line">dotnet_style_readonly_field = true:error</span><br><span class="line"></span><br><span class="line"># Parameter preferences</span><br><span class="line">dotnet_code_quality_unused_parameters = all:none</span><br><span class="line"></span><br><span class="line">#### C# Coding Conventions ####</span><br><span class="line"></span><br><span class="line"># Namespace preferences</span><br><span class="line">csharp_style_namespace_declarations= file_scoped:error</span><br><span class="line"></span><br><span class="line"># var preferences</span><br><span class="line">csharp_style_var_elsewhere = false:error</span><br><span class="line">csharp_style_var_for_built_in_types = false:error</span><br><span class="line">csharp_style_var_when_type_is_apparent = true:error</span><br><span class="line"></span><br><span class="line"># Expression-bodied members</span><br><span class="line">csharp_style_expression_bodied_accessors = true:error</span><br><span class="line">csharp_style_expression_bodied_constructors = false:silent</span><br><span class="line">csharp_style_expression_bodied_indexers = true:error</span><br><span class="line">csharp_style_expression_bodied_lambdas = true:error</span><br><span class="line">csharp_style_expression_bodied_local_functions = true:error</span><br><span class="line">csharp_style_expression_bodied_methods = false:silent</span><br><span class="line">csharp_style_expression_bodied_operators = true:error</span><br><span class="line">csharp_style_expression_bodied_properties = true:error</span><br><span class="line"></span><br><span class="line"># Pattern matching preferences</span><br><span class="line">csharp_style_pattern_matching_over_as_with_null_check = true:error</span><br><span class="line">csharp_style_pattern_matching_over_is_with_cast_check = true:error</span><br><span class="line">csharp_style_prefer_switch_expression = true:error</span><br><span class="line"></span><br><span class="line"># Null-checking preferences</span><br><span class="line">csharp_style_conditional_delegate_call = true:error</span><br><span class="line"></span><br><span class="line"># Modifier preferences</span><br><span class="line">csharp_prefer_static_local_function = true:error</span><br><span class="line">csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async</span><br><span class="line"></span><br><span class="line"># Code-block preferences</span><br><span class="line">csharp_prefer_braces = true:error</span><br><span class="line">csharp_prefer_simple_using_statement = true:error</span><br><span class="line"></span><br><span class="line"># Expression-level preferences</span><br><span class="line">csharp_prefer_simple_default_expression = true:error</span><br><span class="line">csharp_style_deconstructed_variable_declaration = true:suggestion</span><br><span class="line">csharp_style_inlined_variable_declaration = true:error</span><br><span class="line">csharp_style_pattern_local_over_anonymous_function = true:error</span><br><span class="line">csharp_style_prefer_index_operator = true:suggestion</span><br><span class="line">csharp_style_prefer_range_operator = true:suggestion</span><br><span class="line">csharp_style_throw_expression = true:suggestion</span><br><span class="line">csharp_style_unused_value_assignment_preference = discard_variable:silent</span><br><span class="line">csharp_style_unused_value_expression_statement_preference = discard_variable:none</span><br><span class="line">csharp_style_prefer_method_group_conversion = true:silent</span><br><span class="line">csharp_style_prefer_top_level_statements = true:silent</span><br><span class="line"></span><br><span class="line"># &#x27;using&#x27; directive preferences</span><br><span class="line">csharp_using_directive_placement = outside_namespace:error</span><br><span class="line"></span><br><span class="line">#### C# Formatting Rules ####</span><br><span class="line"></span><br><span class="line"># New line preferences</span><br><span class="line">csharp_new_line_before_catch =true</span><br><span class="line">csharp_new_line_before_else =true</span><br><span class="line">csharp_new_line_before_finally =true</span><br><span class="line">csharp_new_line_before_members_in_anonymous_types = false,</span><br><span class="line">csharp_new_line_before_members_in_object_initializers = false,</span><br><span class="line">csharp_new_line_before_open_brace = all</span><br><span class="line">csharp_new_line_between_query_expression_clauses = true</span><br><span class="line"></span><br><span class="line"># Indentation preferences</span><br><span class="line">csharp_indent_block_contents = true</span><br><span class="line">csharp_indent_braces = false</span><br><span class="line">csharp_indent_case_contents = true</span><br><span class="line">csharp_indent_case_contents_when_block = true</span><br><span class="line">csharp_indent_labels = one_less_than_current</span><br><span class="line">csharp_indent_switch_labels = true</span><br><span class="line"></span><br><span class="line"># Space preferences</span><br><span class="line">csharp_space_after_cast = false</span><br><span class="line">csharp_space_after_colon_in_inheritance_clause = true</span><br><span class="line">csharp_space_after_comma = true</span><br><span class="line">csharp_space_after_dot = false</span><br><span class="line">csharp_space_after_keywords_in_control_flow_statements = true</span><br><span class="line">csharp_space_after_semicolon_in_for_statement = true</span><br><span class="line">csharp_space_around_binary_operators = before_and_after</span><br><span class="line">csharp_space_around_declaration_statements = false</span><br><span class="line">csharp_space_before_colon_in_inheritance_clause = true</span><br><span class="line">csharp_space_before_comma = false</span><br><span class="line">csharp_space_before_dot = false</span><br><span class="line">csharp_space_before_open_square_brackets = false</span><br><span class="line">csharp_space_before_semicolon_in_for_statement = false</span><br><span class="line">csharp_space_between_empty_square_brackets = false</span><br><span class="line">csharp_space_between_method_call_empty_parameter_list_parentheses = false</span><br><span class="line">csharp_space_between_method_call_name_and_opening_parenthesis = false</span><br><span class="line">csharp_space_between_method_call_parameter_list_parentheses = false</span><br><span class="line">csharp_space_between_method_declaration_empty_parameter_list_parentheses = false</span><br><span class="line">csharp_space_between_method_declaration_name_and_open_parenthesis = false</span><br><span class="line">csharp_space_between_method_declaration_parameter_list_parentheses = false</span><br><span class="line">csharp_space_between_parentheses = false</span><br><span class="line">csharp_space_between_square_brackets = false</span><br><span class="line"></span><br><span class="line"># Wrapping preferences</span><br><span class="line">csharp_preserve_single_line_blocks = true</span><br><span class="line">csharp_preserve_single_line_statements = false</span><br><span class="line"></span><br><span class="line">#### Naming styles ####</span><br><span class="line"></span><br><span class="line"># Naming rules</span><br><span class="line"></span><br><span class="line">dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion</span><br><span class="line">dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface</span><br><span class="line">dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i</span><br><span class="line"></span><br><span class="line">dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion</span><br><span class="line">dotnet_naming_rule.types_should_be_pascal_case.symbols = types</span><br><span class="line">dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case</span><br><span class="line"></span><br><span class="line">dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion</span><br><span class="line">dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members</span><br><span class="line">dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case</span><br><span class="line"></span><br><span class="line"># Symbol specifications</span><br><span class="line"></span><br><span class="line">dotnet_naming_symbols.interface.applicable_kinds = interface</span><br><span class="line">dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected</span><br><span class="line">dotnet_naming_symbols.interface.required_modifiers = </span><br><span class="line"></span><br><span class="line">dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum</span><br><span class="line">dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected</span><br><span class="line">dotnet_naming_symbols.types.required_modifiers = </span><br><span class="line"></span><br><span class="line">dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method</span><br><span class="line">dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected</span><br><span class="line">dotnet_naming_symbols.non_field_members.required_modifiers = </span><br><span class="line"></span><br><span class="line"># Naming styles</span><br><span class="line"></span><br><span class="line">dotnet_naming_style.pascal_case.required_prefix = </span><br><span class="line">dotnet_naming_style.pascal_case.required_suffix = </span><br><span class="line">dotnet_naming_style.pascal_case.word_separator = </span><br><span class="line">dotnet_naming_style.pascal_case.capitalization = pascal_case</span><br><span class="line"></span><br><span class="line">dotnet_naming_style.begins_with_i.required_prefix = I</span><br><span class="line">dotnet_naming_style.begins_with_i.required_suffix = </span><br><span class="line">dotnet_naming_style.begins_with_i.word_separator = </span><br><span class="line">dotnet_naming_style.begins_with_i.capitalization = pascal_case</span><br><span class="line"></span><br><span class="line"># Custom Rules - configure these as required</span><br><span class="line"></span><br><span class="line"># .NET Code Analyzers rules</span><br><span class="line"></span><br><span class="line"># CA1000: Do not declare static members on generic types</span><br><span class="line">dotnet_diagnostic.CA1000.severity = none</span><br><span class="line"></span><br><span class="line"># CA1002: Do not expose generic lists</span><br><span class="line">dotnet_diagnostic.CA1002.severity = none</span><br><span class="line"></span><br><span class="line"># CA1008: Enums should have zero value</span><br><span class="line">dotnet_diagnostic.CA1008.severity = none</span><br><span class="line"></span><br><span class="line"># CA1019: Define accessors for attribute arguments</span><br><span class="line">dotnet_diagnostic.CA1019.severity = none</span><br><span class="line"></span><br><span class="line"># CA1024: Use properties where appropriate</span><br><span class="line">dotnet_diagnostic.CA1024.severity = none</span><br><span class="line"></span><br><span class="line"># CA1030: Use events where appropriate</span><br><span class="line">dotnet_diagnostic.CA1030.severity = none</span><br><span class="line"></span><br><span class="line"># CA1031: Do not catch general exception types</span><br><span class="line">dotnet_diagnostic.CA1031.severity = none</span><br><span class="line"></span><br><span class="line"># CA1032: Implement standard exception constructors</span><br><span class="line">dotnet_diagnostic.CA1032.severity = none</span><br><span class="line"></span><br><span class="line"># CA1034: Nested types should not be visible</span><br><span class="line">dotnet_diagnostic.CA1034.severity = none</span><br><span class="line"></span><br><span class="line"># CA1040: Avoid empty interfaces</span><br><span class="line">dotnet_diagnostic.CA1040.severity = none</span><br><span class="line"></span><br><span class="line"># CA1051: Do not declare visible instance fields</span><br><span class="line">dotnet_diagnostic.CA1051.severity = none</span><br><span class="line"></span><br><span class="line"># CA1056: URI-like properties should not be strings</span><br><span class="line">dotnet_diagnostic.CA1056.severity = none</span><br><span class="line"></span><br><span class="line"># CA1062: Validate arguments of public methods</span><br><span class="line">dotnet_diagnostic.CA1062.severity = none</span><br><span class="line"></span><br><span class="line"># CA1063: Implement IDisposable Correctly</span><br><span class="line">dotnet_diagnostic.CA1063.severity = none</span><br><span class="line"></span><br><span class="line"># CA1307: Specify StringComparison for clarity</span><br><span class="line">dotnet_diagnostic.CA1307.severity = none</span><br><span class="line"></span><br><span class="line"># CA1515: Consider making public types internal</span><br><span class="line">dotnet_diagnostic.CA1515.severity = none</span><br><span class="line"></span><br><span class="line"># CA1700: Do not name enum values &#x27;Reserved&#x27;</span><br><span class="line">dotnet_diagnostic.CA1700.severity = none</span><br><span class="line"></span><br><span class="line"># CA1707: Identifiers should not contain underscores</span><br><span class="line">dotnet_diagnostic.CA1707.severity = none</span><br><span class="line"></span><br><span class="line"># CA1711: Identifiers should not have incorrect suffix</span><br><span class="line">dotnet_diagnostic.CA1711.severity = none</span><br><span class="line"></span><br><span class="line"># CA1716: Identifiers should not match keywords</span><br><span class="line">dotnet_diagnostic.CA1716.severity = none</span><br><span class="line"></span><br><span class="line"># CA1724: Type names should not match namespaces</span><br><span class="line">dotnet_diagnostic.CA1724.severity = none</span><br><span class="line"></span><br><span class="line"># CA1725: Parameter names should match base declaration</span><br><span class="line">dotnet_diagnostic.CA1725.severity = none</span><br><span class="line"></span><br><span class="line"># CA1812: Avoid uninstantiated internal classes</span><br><span class="line">dotnet_diagnostic.CA1812.severity = none</span><br><span class="line"></span><br><span class="line"># CA1816: Dispose methods should call SuppressFinalize</span><br><span class="line">dotnet_diagnostic.CA1816.severity = none</span><br><span class="line"></span><br><span class="line"># CA1819: Properties should not return arrays</span><br><span class="line">dotnet_diagnostic.CA1819.severity = none</span><br><span class="line"></span><br><span class="line"># CA1822: Mark members as static</span><br><span class="line">dotnet_diagnostic.CA1822.severity = none</span><br><span class="line"></span><br><span class="line"># CA1848: Use the LoggerMessage delegates</span><br><span class="line">dotnet_diagnostic.CA1848.severity = none</span><br><span class="line"></span><br><span class="line"># CA1860: Avoid using &#x27;Enumerable.Any()&#x27; extension method</span><br><span class="line">dotnet_diagnostic.CA1860.severity = none</span><br><span class="line"></span><br><span class="line"># CA2007: Consider calling ConfigureAwait on the awaited task</span><br><span class="line">dotnet_diagnostic.CA2007.severity = none</span><br><span class="line"></span><br><span class="line"># CA2201: Do not raise reserved exception types</span><br><span class="line">dotnet_diagnostic.CA2201.severity = none</span><br><span class="line"></span><br><span class="line"># CA2211: Non-constant fields should not be visible</span><br><span class="line">dotnet_diagnostic.CA2211.severity = none</span><br><span class="line"></span><br><span class="line"># CA2213: Disposable fields should be disposed</span><br><span class="line">dotnet_diagnostic.CA2213.severity = none</span><br><span class="line"></span><br><span class="line"># CA2225: Operator overloads have named alternates</span><br><span class="line">dotnet_diagnostic.CA2225.severity = none</span><br><span class="line"></span><br><span class="line"># CA2227: Collection properties should be read only</span><br><span class="line">dotnet_diagnostic.CA2227.severity = none</span><br><span class="line"></span><br><span class="line"># CA2234: Pass system uri objects instead of strings</span><br><span class="line">dotnet_diagnostic.CA2234.severity = none</span><br><span class="line"></span><br><span class="line"># CA2326: Do not use TypeNameHandling values other than None</span><br><span class="line">dotnet_diagnostic.CA2326.severity = none</span><br><span class="line"></span><br><span class="line"># CA2326: Do not use insecure JsonSerializerSettings</span><br><span class="line">dotnet_diagnostic.CA2327.severity = none</span><br><span class="line"></span><br><span class="line"># CS8600: Converting null literal or possible null value to non-nullable type.</span><br><span class="line">dotnet_diagnostic.CS8600.severity = none</span><br><span class="line"></span><br><span class="line"># CS8603: Possible null reference return.</span><br><span class="line">dotnet_diagnostic.CS8603.severity = none</span><br><span class="line"></span><br><span class="line"># CS8618: Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.</span><br><span class="line">dotnet_diagnostic.CS8618.severity = none</span><br><span class="line"></span><br><span class="line"># IDE Code Analyzers rules</span><br><span class="line"></span><br><span class="line"># IDE0005</span><br><span class="line">dotnet_diagnostic.IDE0005.severity = none</span><br><span class="line"></span><br><span class="line"># IDE0046: Convert to conditional expression</span><br><span class="line">dotnet_diagnostic.IDE0046.severity = none</span><br><span class="line"></span><br><span class="line"># IDE0058: Expression value is never used</span><br><span class="line">dotnet_diagnostic.IDE0058.severity = none</span><br><span class="line"></span><br><span class="line"># IDE0060: Remove unused parameter</span><br><span class="line">dotnet_diagnostic.IDE0060.severity = none</span><br><span class="line"></span><br><span class="line"># IDE0072: Add missing cases</span><br><span class="line">dotnet_diagnostic.IDE0072.severity = none</span><br><span class="line"></span><br><span class="line"># IDE0290: Use primary constructor</span><br><span class="line">dotnet_diagnostic.IDE0290.severity = none</span><br><span class="line"></span><br><span class="line"># SonarAnalyzer.CSharp rules</span><br><span class="line"></span><br><span class="line"># S112: General or reserved exceptions should never be thrown</span><br><span class="line">dotnet_diagnostic.S112.severity = none</span><br><span class="line"></span><br><span class="line"># S125: Sections of code should not be commented out</span><br><span class="line">dotnet_diagnostic.S125.severity = none</span><br><span class="line"></span><br><span class="line"># S1135: Track uses of &quot;TODO&quot; tags</span><br><span class="line">dotnet_diagnostic.S1135.severity = none</span><br><span class="line"></span><br><span class="line"># S2094: Utility classes should not have public constructors</span><br><span class="line">dotnet_diagnostic.S1118.severity = none</span><br><span class="line"></span><br><span class="line"># S2094: Classes should not be empty</span><br><span class="line">dotnet_diagnostic.S2094.severity = none</span><br><span class="line"></span><br><span class="line"># S2325: Methods and properties that don&#x27;t access instance data should be static</span><br><span class="line">dotnet_diagnostic.S2325.severity = none</span><br><span class="line"></span><br><span class="line"># S2365: Properties should not make collection or array copies</span><br><span class="line">dotnet_diagnostic.S2365.severity = none</span><br><span class="line"></span><br><span class="line"># S3267: Loops should be simplified with &quot;LINQ&quot; expressions</span><br><span class="line">dotnet_diagnostic.S3267.severity = none</span><br><span class="line"></span><br><span class="line"># S3881: &quot;IDisposable&quot; should be implemented correctly</span><br><span class="line">dotnet_diagnostic.S3881.severity = none</span><br><span class="line"></span><br><span class="line"># S4136: Method overloads should be grouped together</span><br><span class="line">dotnet_diagnostic.S4136.severity = none</span><br><span class="line"></span><br><span class="line"># S4158: Empty collections should not be accessed or iterated</span><br><span class="line">dotnet_diagnostic.S4158.severity = none</span><br><span class="line"></span><br><span class="line"># S6605: Collection-specific &quot;Exists&quot; method should be used instead of the &quot;Any&quot; extension</span><br><span class="line">dotnet_diagnostic.S6605.severity = none</span><br><span class="line"></span><br><span class="line"># S6781: JWT secret keys should not be disclosed</span><br><span class="line">dotnet_diagnostic.S6781.severity = none</span><br></pre></td></tr></table></figure></details><h2 id="Static-Code-Analysis"><a href="#Static-Code-Analysis" class="headerlink" title="Static Code Analysis"></a>Static Code Analysis</h2><p>You have more than one option!</p><h3 id="SonarScanner-Remote-Server"><a href="#SonarScanner-Remote-Server" class="headerlink" title="SonarScanner (Remote Server)"></a>SonarScanner (Remote Server)</h3><p>Its important to understand that sonarscanner doesnt run tests, it reports on static code and can be provided test coverage reports. </p><p>Run your own containerised <a href="/2018/07/sonarqube-and-docker/">Sonarqube server</a> locally.</p><h3 id="SonarAnalyzer-Local-Static-Code-Analysis"><a href="#SonarAnalyzer-Local-Static-Code-Analysis" class="headerlink" title="SonarAnalyzer (Local Static Code Analysis)"></a>SonarAnalyzer (Local Static Code Analysis)</h3><p>Although many large IT companies have a sonar server which can be used a a quality gate in PRs and Master builds its possible to do these checks locally.</p><ul><li><a href="https://www.youtube.com/watch?v=0nVT1gM4vPg">https://www.youtube.com/watch?v=0nVT1gM4vPg</a></li></ul><p>Unit Test code coverage</p><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-code-coverage?tabs=linux">https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-code-coverage?tabs=linux</a></li><li><a href="https://www.jetbrains.com/help/rider/Analyzing_Coverage_NET.html">https://www.jetbrains.com/help/rider/Analyzing_Coverage_NET.html</a></li></ul><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li><a href="/2020/11/serilog/">Serilog</a></li><li>App Insights</li></ul><h2 id="CI-CD-pipeline"><a href="#CI-CD-pipeline" class="headerlink" title="CI/CD pipeline"></a>CI/CD pipeline</h2><p>CI/CD pipeline for build &amp; tests</p><ul><li><a href="/2024/08/github-actions-workflow/">GitHub Actions is a good modern candidate</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.youtube.com/watch?v=B9ZUJN1Juhk">Milan Jovanovic: Use These 4 Best Practices For Your .NET Project Setup</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Test Lazy Loaded Properties</title>
      <link href="/2023/09/unit-test-lazy-loaded-properties/"/>
      <url>/2023/09/unit-test-lazy-loaded-properties/</url>
      
        <content type="html"><![CDATA[<p>I needed to figure out a way to unit test some code that makes use of <a href="https://learn.microsoft.com/en-us/dotnet/api/system.lazy-1">Lazy</a> to instanciate its dependencies. I think Lazy sucks but it has its place and I’ve seen first hand massive performance gains in monolithic applications when implemented correctly.</p><h2 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h2><p>To unit test a method that uses a property that is instantiated with Lazy in C#, you can use the following steps:</p><ol><li>Create a <a href="/tags/mocking/">mock</a> of the <code>Lazy</code> property. <a href="/2018/09/mocking-frameworks/">Moq</a> is my go to although the recent <a href="https://www.reddit.com/r/dotnet/comments/15ljdcc/does_moq_in_its_latest_version_extract_and_send/">SponsorLink</a> <a href="https://github.com/moq/moq/issues/1372">drama</a> may change that.</li><li>Set the mock to return a specific value. This will allow you to test the behavior of the method under different conditions.</li><li>Call the method under test.</li><li>Verify that the method behaves as expected. You can do this by asserting the values of any output parameters or the state of any external objects.</li></ol><p>Example</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Moq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SweetClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Lazy&lt;FooService&gt; _fooService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SweetClass</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _fooService = <span class="keyword">new</span> Lazy&lt;FooService&gt;(() =&gt; <span class="keyword">new</span> FooService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Does magical work with _fooService.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SweetClassTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork_GivenX_ShouldY</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> fooServiceMock = <span class="keyword">new</span> Mock&lt;FooService&gt;();</span><br><span class="line">        <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> SweetClass &#123; _fooService = <span class="keyword">new</span> Lazy&lt;FooService&gt;(() =&gt; fooServiceMock.Object) &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        classUnderTest.DoWork();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        fooServiceMock.Verify(x =&gt; x.FooServiceMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, I mocked the <code>FooService</code> property. This allows us to control the behavior of the <code>DoWork()</code> method without having to create a real instance of the <code>FooService</code> class.</p><p>Here I used the <code>Verify()</code> method to assert that the <code>FooServiceMethod()</code> method on the <code>FooService</code> mock was called. This means that the <code>DoWork()</code> method under test behaved as expected.</p><h2 id="Property-Injection"><a href="#Property-Injection" class="headerlink" title="Property Injection"></a>Property Injection</h2><p>If the constructor is not used to instantiate the Lazy property, you can still unit test the method that uses it by following these steps:</p><ol><li>Create a new instance of the class that contains the Lazy property.</li><li>Set the Lazy property to a mock of the <code>FooService</code> class.</li><li>Call the method under test.</li><li>Verify that the method behaves as expected.</li></ol><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Moq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SweetClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Lazy&lt;FooService&gt; FooServiceQuery &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Does magical work with FooServiceQuery.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SweetClassTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork_GivenX_ShouldY</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> fooServiceMock = <span class="keyword">new</span> Mock&lt;FooService&gt;();</span><br><span class="line">        <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> SweetClass();</span><br><span class="line">        classUnderTest.FooServiceQuery = <span class="keyword">new</span> Lazy&lt;FooService&gt;(() =&gt; fooServiceMock.Object);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        classUnderTest.DoWork();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        fooServiceMock.Verify(x =&gt; x.FooServiceMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, I created a new instance of the <code>SweetClass</code> class and setting the <code>FooServiceQuery</code> property to a mock of the <code>FooService</code> class. This allows control over the behavior of the <code>DoWork()</code> method without having to create a real instance of the <code>FooService</code> class.</p><p>Then <code>Verify()</code> is used again the same as the constructor injection example.</p><p>Sweetbix.</p>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solution Design - Ordering System</title>
      <link href="/2023/09/rosetta-solution-design-ordering-system/"/>
      <url>/2023/09/rosetta-solution-design-ordering-system/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>You need to come up with a Solution Design for an Ordering System that is fault tolerant. Orders are placed by the Admin user on behalf of Customers. The customer doesnt login to anything, they place the order via E-mail/Telephonic conversation but their details are known to the company. Orders are shipped via an external company called <code>Bobs Post</code> but their API is unstable and can often go down for days, there is no other shipper we can use.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Design a system that allows an <code>Admin User</code> to place orders for <code>Customers</code>, the actual items (what they order) dont matter. The focus is on Solution Design for a fault tolerant system where the Customer is notified when the item(s) are shipped. </p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><h4 id="Conceptual-Thinking"><a href="#Conceptual-Thinking" class="headerlink" title="Conceptual Thinking"></a>Conceptual Thinking</h4><ul><li>Following KISS (Keep It Super Simple) solve the problem in the simplest manner, itterate later to allow for fault tolerance.</li><li>Draft a few solutions and itterate on them<ul><li>As such use an unconventional <code>Sticky Note</code> representation first to show the flow</li><li>As a last draft represent as a <a href="https://www.lucidchart.com/pages/uml-sequence-diagram">technical sequence diagram</a> (<a href="https://miro.com/diagramming/uml-sequence-diagram/">Miro Template</a>)</li></ul></li><li>The solution is Cloud Based (Focus on AWS), consider technologies for the pending decision register item<ul><li>Security (Authentication and Authorisation), consider using <a href="/2020/12/oauth2/">OAuth2 flows</a></li><li><a href="/2021/11/aws-sqs-step-function-and-lamdas/">Serverless Lamda Functions</a> to expose data / house logic</li><li><a href="/2021/11/aws-sqs-step-function-and-lamdas/">State Machine if we want to group logic and Lamdas</a></li><li>Kubernetes (EKS) <a href="/2021/07/c-sharp-timed-hosted-service/">for Workers</a></li><li><a href="/2020/11/what-makes-a-great-api/">RESTful APIs</a> to expose data / house logic</li><li>Persistant storage options like Relational (RDS) or Key/Value <a href="/2020/11/aws-dynamodb/">Document DB (Dynamo)</a></li><li>Frontend Application. <a href="/tags/reactjs/">React</a>, <a href="/tags/angular/">Angular</a> or Vue Single Page Application (SPA) <a href="/2020/11/aws-s3/">hosted in S3</a></li><li><a href="/2021/11/aws-sqs/">Messaging System (SQS)</a> and <a href="/2022/02/cloudevents/">Cloud Events</a></li></ul></li><li>Potential Cloud Design Patterns<ul><li><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/async-request-reply">Asynchronous Request-Reply pattern</a></li><li><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">Backends for Frontends</a></li><li><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker">Circuit Breaker pattern</a></li></ul></li><li><a href="/2021/10/bias/">Bias</a><ul><li>Call out and try mitigate all bias from the decision making</li></ul></li><li><a href="/2017/04/ubiquitous-language-ul/">Ubiquitous Language</a><ul><li>Figure out the language of the domain, this this in all conversations with stakeholders and the customer</li><li>Status = <code>Scheduled, Shipped</code></li></ul></li></ul><h4 id="First-Draft"><a href="#First-Draft" class="headerlink" title="First Draft"></a>First Draft</h4><p>First lets understand the problem and use an unconventional <code>Sticky Note</code> representation.</p><p><img src="/d/solution-design-ordering-system/first-draft.jpg" alt="First draft to understand a simple flow"></p><h4 id="Second-Draft"><a href="#Second-Draft" class="headerlink" title="Second Draft"></a>Second Draft</h4><p>Remember <code>Bobs Post</code> has an unstable API, we can unload responsability from the BFF and introduce some retry logic using the Asynchronous Request-Reply pattern and Queues. Additionally <a href="/2021/12/http-retry-polly/">Polly</a> can be used to retry HTTP requests.</p><p><img src="/d/solution-design-ordering-system/second-draft-add-queue.jpg" alt="Second Draft, move workload Async"></p><p>Now add a <a href="/2021/07/c-sharp-timed-hosted-service/">Worker process</a> that will process the order request. If a message is not deleted and it has been received the maximum receive count times its pushed to the configured Dead Letter Queue (DLQ)</p><p><img src="/d/solution-design-ordering-system/second-draft-add-worker.jpg" alt="Second Draft, understand the Async workload. Its doing too much!"></p><h4 id="Third-Draft"><a href="#Third-Draft" class="headerlink" title="Third Draft"></a>Third Draft</h4><p>There is still a problem with the design as <code>Bobs Post</code> is unstable, so if any of the requests fail and the retry count for Polly is exhausted the process will fall over and cause possible duplication.</p><p>We can try address this by adding a key/value database like Dynamo to keep track of the process. Additionally the responsability of the process can be delegated to several workers and queues. <span style="color:red;">The caveat being this brings complexity, so only introduce this when needed.</span></p><p>Conditional logic would be added so that should the data exist in Dynamo then dont do that step. IE: We have the user data, dont call the <code>User API</code> ect.</p><ul><li>Third Draft: The main focus here is to place the order with <code>Bobs Post</code> (status=Scheduled)</li></ul><p><img src="/d/solution-design-ordering-system/third-draft-worker1.jpg" alt="Third Draft. Break it down, check and update `Scheduled` status"></p><ul><li>Third Draft: The main focus here is to check for updates at <code>Bobs Post</code> (status=Shipped)</li><li>If no update is avalible, just Queue another message to check for shipped (<span style="color:red;">WARNING: Can cause infinite loop.</span>) So potentially just dont delete and rely on the DQL.</li></ul><p><img src="/d/solution-design-ordering-system/third-draft-worker2.jpg" alt="Third Draft. Break it down, check and update `Shipped` status"></p><ul><li>Third Draft: The main focus here is to notify the User that their item(s) have shipped</li><li>Emails are a common thing to send, potentially a flow exists (Event Queue) where the request can be sent</li></ul><p><img src="/d/solution-design-ordering-system/third-draft-notification.jpg" alt="Third Draft - Notification"></p><h4 id="Fourth-Draft"><a href="#Fourth-Draft" class="headerlink" title="Fourth  Draft"></a>Fourth  Draft</h4><p>The DLQs can be redriven.</p><ul><li>Another worker can poll each DLQ and re-drive</li><li>The process could be manual</li></ul><p>Finally once you agree with your team(s) draw as a technical sequence diagram. Also see the <a href="https://miro.com/diagramming/uml-sequence-diagram/">Miro Template</a>.</p><h4 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h4><p>The process above is not without fault. The SQS messages <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html">default retention period is 4 days</a> so if <code>Bobs Post</code> is down for longer than this and the maxium retry period is exhausted the system will fall over. Potentially the flow could be <code>SPA -&gt; BFF -&gt; SQS -&gt; DYNAMO</code> with workers that progress the status and call the APIs based on the state of the <code>DYNAMO</code> database record.</p><p>My suggestion is to be pragmatic and solve problems when they are problems, if you add complexity early you could solve a problem that doesnt exist and the potential gains are lost in the complexity. </p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/">https://learn.microsoft.com/en-us/azure/architecture/patterns/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Hooks - Commit Example</title>
      <link href="/2023/09/git-hooks-commit-example/"/>
      <url>/2023/09/git-hooks-commit-example/</url>
      
        <content type="html"><![CDATA[<h2 id="Whats-a-Git-Hook"><a href="#Whats-a-Git-Hook" class="headerlink" title="Whats a Git Hook?"></a>Whats a Git Hook?</h2><blockquote><p>“Git hooks are scripts that run automatically every time a particular event occurs in a Git repository. They let you customize Git’s internal behavior and trigger customizable actions at key points in the development life cycle.” - <a href="https://www.atlassian.com/git/tutorials/git-hooks">https://www.atlassian.com/git/tutorials/git-hooks</a></p></blockquote><h2 id="Commit-Example"><a href="#Commit-Example" class="headerlink" title="Commit Example"></a>Commit Example</h2><p>My work colleague <a href="https://www.linkedin.com/in/chinmay-deshmukh98/">Chinmay Deshmukh</a> wrote this productivity enhancing git hook. When it comes to git branches and commits our team have a standard of creating the branch as <code>JIRATEAMPREFIX-123-short-description</code> where <code>123</code> is the Jira ticket. Then another standard is to unclude the branch name as a prefix in each commit.</p><p>We do this manually, Chinmay has had enough of manual so did some bash to help with the commit message (and introduce me to the cool world of git hooks!)</p><h3 id="The-Script-Bash"><a href="#The-Script-Bash" class="headerlink" title="The Script - Bash"></a>The Script - Bash</h3><p>Its a simple bash script, note this will only work on Mac or Linux where commands like <code>grep, sed</code> and <code>cat</code> are available.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Automatically adds the ticket number to the commit message. </span></span><br><span class="line"><span class="comment"># Please make sure that when naming the branch, apart from the ticket number, there are no other integers present in the name of the branch.</span></span><br><span class="line"><span class="comment"># Eg - &quot;**-NUM-**&quot; where &#x27;NUM&#x27; is the ticket number</span></span><br><span class="line">​</span><br><span class="line">BRANCH_NAME=$(git branch | grep <span class="string">&#x27;*&#x27;</span> | sed <span class="string">&#x27;s/* //&#x27;</span>)</span><br><span class="line">TICKET_NUMBER=$(<span class="built_in">echo</span> <span class="variable">$BRANCH_NAME</span> | sed <span class="string">&#x27;s/[^0-9]*//g&#x27;</span>) </span><br><span class="line">​</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[FOO-<span class="variable">$&#123;TICKET_NUMBER&#125;</span>]&quot;</span><span class="string">&#x27; &#x27;</span>$(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span>) &gt; <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure><p>Looking at each line:</p><p><code>BRANCH_NAME=$(git branch | grep &#39;*&#39; | sed &#39;s/* //&#39;)</code></p><p>This is setting the local variable <code>BRANCH_NAME</code> as the result of <code>git branch</code> piped into <code>grep &#39;*&#39;</code> which will select the git branch pre-fixed with <code>*</code> and then finally that is piped into <code>sed &#39;s/* //&#39;</code> which is a stream editor that then replaces <code>* </code> (star space) with nothing.  </p><ul><li><a href="https://www.geeksforgeeks.org/sed-command-in-linux-unix-with-examples/">https://www.geeksforgeeks.org/sed-command-in-linux-unix-with-examples/</a></li></ul><p>The next line:</p><p><code>TICKET_NUMBER=$(echo $BRANCH_NAME | sed &#39;s/[^0-9]*//g&#39;)</code></p><p>Sets a local variable <code>TICKET_NUMBER</code> and then uses the pipes in the result of <code>BRANCH_NAME</code> into <code>sed &#39;s/[^0-9]*//g&#39;</code> which is again the stream editor and this time its running a regular expression to find the numbers in <code>BRANCH_NAME</code></p><p>The regex is <code>[^0-9]*</code> which is explained below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[           ~ the [ character marks the beginning of a character class.</span><br><span class="line">    ^       ~ the caret (^) character matches the beginning of the string.</span><br><span class="line">    0-9     ~ the 0-9 characters represent the range of digits from 0 to 9.</span><br><span class="line">]           ~ The ] character marks the end of a character class.</span><br><span class="line">*           ~ the * character matches zero or more occurrences</span><br></pre></td></tr></table></figure><h3 id="Testing-Each-Line"><a href="#Testing-Each-Line" class="headerlink" title="Testing Each Line"></a>Testing Each Line</h3><p>Its good to understand how things work instead of blindly using them … says the dev that likes to run things past <a href="https://bard.google.com/">Google Bard</a> 🤷</p><ol><li>Some setup</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd test</span><br><span class="line">git init</span><br><span class="line">touch test.txt       ~ create the test.txt file</span><br><span class="line">git status           ~ shows the untracked file `test.txt` ... nooice</span><br></pre></td></tr></table></figure><ol start="2"><li>As we are on master we can just run the checkout command -b command and it will create a new branch with our changes.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b foo-123-i-did-a-thing-and-stuff</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Put the hook in folder <code>test\.git\hooks</code> and call it <code>commit-msg</code>. You will notice there is a <code>commit-msg.sample</code> file in there - nice of GIT to help us out!</p></li><li><p>Run the git commit command as normal</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .                        ~ stage our test.txt file for commit</span><br><span class="line">git commit -m &quot;I am batman&quot;      ~ -m means use this string as the commit message</span><br></pre></td></tr></table></figure><ol start="5"><li>The hook runs automagically as its in the hooks folder named as GIT expects</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[foo-123-i-did-a-thing-and-stuff] [FOO-123] I am batman</span><br></pre></td></tr></table></figure><p>Note that you may need to mark the file as executable with <code>chmod +x commit-msg</code></p><h3 id="The-Script-Powershell"><a href="#The-Script-Powershell" class="headerlink" title="The Script - Powershell"></a>The Script - Powershell</h3><p>I needed the above to work on Windows with updated shebang shenanigans for powershell. Additionally commands like <code>grep</code>, <code>sed</code> and <code>cat</code> are not natively avalible in Windows.</p><p>You can use the same steps as above and just replace the script as follows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo</span><br><span class="line">exec pwsh &#x27;./.git/hooks/commit-msg.ps1&#x27; $1</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>Then create the file <code>commit-msg.ps1</code> and populate as follows</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!powershell</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$commitMessage</span> = <span class="built_in">Get-Content</span> <span class="variable">$args</span>[<span class="number">0</span>]</span><br><span class="line"><span class="variable">$branchName</span> = git branch <span class="literal">--show-current</span></span><br><span class="line"><span class="variable">$ticketNumber</span> = <span class="variable">$branchName</span> <span class="operator">-replace</span> <span class="string">&quot;[^0-9]&quot;</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;[FOO-<span class="variable">$ticketNumber</span>] <span class="variable">$commitMessage</span>&quot;</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Note commands like <code>touch</code> are not avalible in Windows, I dunno maybe just create a text file with right click and select new? 💩</p><h3 id="The-Script-Python"><a href="#The-Script-Python" class="headerlink" title="The Script - Python"></a>The Script - Python</h3><p>My powershell script stopped working so I gave up and used Python</p><ol><li>Install Python globally <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></li><li>Use the script as</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">commit_message_file = <span class="string">&quot;.git/COMMIT_EDITMSG&quot;</span></span><br><span class="line">branch_name = subprocess.run([<span class="string">&#x27;git&#x27;</span>, <span class="string">&#x27;branch&#x27;</span>, <span class="string">&#x27;--show-current&#x27;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>).stdout.strip()</span><br><span class="line">ticket_number = re.sub(<span class="string">r&#x27;[^0-9]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, branch_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(commit_message_file, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    commit_message = f.read().strip()</span><br><span class="line">    formatted_message = <span class="string">f&quot;[FOO-<span class="subst">&#123;ticket_number&#125;</span>] <span class="subst">&#123;commit_message&#125;</span>&quot;</span></span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    f.write(formatted_message)</span><br><span class="line">    f.truncate()</span><br></pre></td></tr></table></figure><p>This script is instead reading the message from <code>COMMIT_EDITMSG</code>, it could be changed to use the <code>$1</code> parameter but I wrote these at different times so I wasnt thinking about the param.</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GRBL Settings For My IndyMill Build</title>
      <link href="/2023/06/cnc-machine-my-indymill-grbl-settings/"/>
      <url>/2023/06/cnc-machine-my-indymill-grbl-settings/</url>
      
        <content type="html"><![CDATA[<p>I started with the <a href="https://github.com/gnea/grbl/wiki/Grbl-v1.1-Configuration">Grbl v1.1h Configuration</a> and then from UGS ran <code>Machine</code> -&gt; <code>Setup wizard</code>, changing the settings I noted the $ values.</p><p>Additional commands I added as Macros are under <a href="/2024/08/install-ugs-on-pi4/#:~:text=Configure%20UGS%20Macros">Install UGS On Pi4</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POS           DESC                                          WHY I CHANGED IT</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">$0=10         (step pulse time, microseconds)</span><br><span class="line">$1=25         (step idle delay, microseconds)</span><br><span class="line">$2=0          (step port invert, mask)</span><br><span class="line">$3=5          (dir port invert, mask)                        ~ this inverted X and Z</span><br><span class="line">$4=0          (invert step enable pin, mask)</span><br><span class="line">$5=1          (invert limit pins, boolean)                   ~ after adding opto-isolator (ILD213T)</span><br><span class="line">$6=0          (invert probe pin, boolean)</span><br><span class="line">$10=1         (status report options, mask)</span><br><span class="line">$11=0.010     (junction deviation, millimeters)</span><br><span class="line">$12=0.002     (arc tolerance, millimeters)</span><br><span class="line">$13=0         (report in inches, boolean)</span><br><span class="line">$20=0         (soft limits enabled, boolean)</span><br><span class="line">$21=1         (hard limits, boolean)                         ~ enable the limit switches</span><br><span class="line">$22=1         (homing cycle, boolean)                        ~ enable homing</span><br><span class="line">$23=3         (homing direction invert, mask)                ~ this inverted X and Y</span><br><span class="line">$24=25.000    (homing locate feed rate, mm/min)</span><br><span class="line">$25=500.000   (homing search seek rate, mm/min)</span><br><span class="line">$26=250       (homing switch debounce, microseconds)</span><br><span class="line">$27=1.000     (homing switch pull-off, millimeters)</span><br><span class="line">$30=1000      (maximum spindle speed, RPM)</span><br><span class="line">$31=0         (minimum spindle speed, RPM)</span><br><span class="line">$32=0         (laser mode enabled, RPM)</span><br></pre></td></tr></table></figure><h2 id="Cartesian-–-X-Y-Z-steps-mm"><a href="#Cartesian-–-X-Y-Z-steps-mm" class="headerlink" title="Cartesian – [X,Y,Z] steps/mm"></a>Cartesian – [X,Y,Z] steps/mm</h2><p>Stepper motor steps:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motor_steps = degrees_in_a_circle / stepper_motor_step_angle</span><br><span class="line">motor_steps = 360 / 1.8</span><br><span class="line">motor_steps = 200</span><br></pre></td></tr></table></figure><p>Driver micro steps:</p><p>(typically 1, 2, 4, 8, or 16). Using high microstep values (ie 16) can reduce your stepper motor torque, so use the lowest that gives you the desired axis resolution and comfortable running properties.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">microsteps are calculated based on the dip switchs on the stepper drivers</span><br><span class="line">mine is pre set to 8 so I rolled with it as Im a noob</span><br></pre></td></tr></table></figure><p>MM per revolution:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1605 ball screws for x,y</span><br><span class="line">05 means 5mm for 1 full rotation</span><br><span class="line"></span><br><span class="line">the z has is 8mm on the trapezoidal lead screw</span><br></pre></td></tr></table></figure><p>Finally some math:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x,y</span><br><span class="line">steps_per_mm = (steps_per_revolution*microsteps)/mm_per_rev</span><br><span class="line">steps_per_mm = (200 * 8) / 5</span><br><span class="line">steps_per_mm = (1600) / 5</span><br><span class="line">steps_per_mm = 320</span><br><span class="line"></span><br><span class="line">z</span><br><span class="line">steps_per_mm = (steps_per_revolution*microsteps)/mm_per_rev</span><br><span class="line">steps_per_mm = (200 * 8) / 8</span><br><span class="line">steps_per_mm = (1600) / 8</span><br><span class="line">steps_per_mm = 200</span><br></pre></td></tr></table></figure><p>Now the resulting GRBL:</p><p><img src="/d/cnc-machine/xyz-axis.png" alt="XYZ Axis - Cartesian Coordinate System"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$100=320       (x, step/mm)</span><br><span class="line">$101=320       (y, step/mm)</span><br><span class="line">$102=200       (z, step/mm)</span><br></pre></td></tr></table></figure><p>Also see <a href="https://diymachining.com/grbl-settings-101-a-how-to-guide/">grbl settings 101 a how to guide</a></p><h2 id="Rates-Acceleration-Max-Travel"><a href="#Rates-Acceleration-Max-Travel" class="headerlink" title="Rates, Acceleration, Max Travel"></a>Rates, Acceleration, Max Travel</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POS            DESC                                          WHY I CHANGED IT</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">$110=500.000   (x-axis maximum rate, mm/min)</span><br><span class="line">$111=500.000   (y-axis maximum rate, mm/min)</span><br><span class="line">$112=500.000   (z-axis maximum rate, mm/min)</span><br><span class="line">$120=10.000    (x-axis acceleration, mm/sec^2)</span><br><span class="line">$121=10.000    (y-axis acceleration, mm/sec^2)</span><br><span class="line">$121=10.000    (z-axis acceleration, mm/sec^2)</span><br><span class="line">$130=320.000   (x-axis maximum travel, millimeters)          ~ max corner to corner was more than 200</span><br><span class="line">$131=255.000   (y-axis maximum travel, millimeters)          ~ max corner to corner was more than 200</span><br><span class="line">$132=200.000   (z-axis maximum travel, millimeters)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cnc </tag>
            
            <tag> indymill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implementation - AWS CloudFormation - Deploy A WordPress Website On AWS</title>
      <link href="/2023/06/implementation-aws-cloudformation-deploy-wordPress-website-aws/"/>
      <url>/2023/06/implementation-aws-cloudformation-deploy-wordPress-website-aws/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>TBA</p>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express (Mock API Using Node)</title>
      <link href="/2023/06/express-nodejs-mocking/"/>
      <url>/2023/06/express-nodejs-mocking/</url>
      
        <content type="html"><![CDATA[<p>I needed a quick and fast Restful API mock that will run in a container. Normally we use <a href="/2021/05/wiremocks/">Wire Mocks</a> which is a .Net libruary but Node is much faster right? Ohh shots fired! 🤣</p><h2 id="Create-And-Test-App"><a href="#Create-And-Test-App" class="headerlink" title="Create And Test App"></a>Create And Test App</h2><ol><li>Use NPM to scaffold some template files</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir mymock</span><br><span class="line">cd mymock</span><br><span class="line"></span><br><span class="line">npm init                                  ~ populate the things it asks or just enter like a mule into Mexico</span><br><span class="line">npm init --yes                            ~ alternatively use the --yes flag to use defaults, kindof like a blind mule? :D</span><br><span class="line">npm install --save-dev express</span><br></pre></td></tr></table></figure><ol start="2"><li>Create <code>index.js</code>, you may have called this something related to your mocked service and pop in your mocked routes. <code>5007</code> be any avalible port, check what ports are already mocked in your repository.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">5007</span>; </span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/foos/:fooid*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">params_fooid</span>: req.<span class="property">params</span>.<span class="property">fooid</span>,</span><br><span class="line">        <span class="attr">params_barid</span>: req.<span class="property">query</span>.<span class="property">barid</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Mock listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can also access environment variables should they exist</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myVar = process.<span class="property">env</span>.<span class="property">THIS_IS_MY_VAR</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Edit <code>package.json</code> and add</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node .&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Run the script with <code>npm start</code> from your console. You can then test it from your browser at <a href="http://localhost:5007/foos/1">http://localhost:5007/foos/1</a></li></ol><p>You should get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;params_fooid&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;params_barid&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>You can then refactor the app to mock any routes and results, for the above we are mocking <code>/foos/:fooId</code> so <code>/foos/1</code> which responds with some json and <code>express</code> will ensure status 200 OK (its like magic)</p><ol start="5"><li><p>Stop the app with <code>CRTL C</code> which will free up port 5007.</p></li><li><p>You will probably push this to git, its common if part of a mono-repo to now have a <code>.gitignore</code> for <code>mymock</code> as it is an application.</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Dependency directories</span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Do you even code if you dont package up your things into a nice container :D</p><ol><li>Create the <code>.dockerignore</code> file and add</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">build</span><br></pre></td></tr></table></figure><p><code>.dockerignore</code> is a configuration file that describes file(s) &amp; directory(s) that you want to exclude when building a Docker image.</p><ol start="2"><li>Create the Dockerfile. <code>node:slim</code> is a lightweight node image and <code>npm ci</code> will <a href="https://docs.npmjs.com/cli/v9/commands/npm-ci">clean install</a> the project. The <a href="https://dockerlabs.collabnix.com/beginners/dockerfile/healthcheck.html">healthcheck fails</a> then exit with code 1. Any code other than 0 means there was some sadness.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM node:slim</span><br><span class="line">WORKDIR /usr/src/app </span><br><span class="line"></span><br><span class="line">COPY package*.json ./</span><br><span class="line">RUN npm ci</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">HEALTHCHECK --interval=10m --timeout=5s \</span><br><span class="line">    CMD curl -f http://localhost/ || exit 1</span><br><span class="line"></span><br><span class="line">EXPOSE 5007</span><br><span class="line"></span><br><span class="line">CMD [ &quot;npm&quot;, &quot;start&quot; ]</span><br></pre></td></tr></table></figure><ol start="3"><li>Create an image and test it the same as above at <a href="http://localhost:5007/foos/1">http://localhost:5007/foos/1</a>. </li></ol><p>Some notes </p><ul><li><code>-t</code> tags the new image</li><li><code>-it</code> means create an interactive bash shell in the container and connect to it</li><li><code>-rm</code> removes the container when it exits.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mymockimage:1 .                                   ~ . means build in the current dir context</span><br><span class="line">docker run -it --rm -p 5007:5007 --name mymock mymockimage:1</span><br></pre></td></tr></table></figure><ol start="5"><li><p>Stop the app with <code>CRTL C</code> which will free up port 5007.</p></li><li><p>Cleanup the image</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm mymockimage:1</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.npmjs.com/package/express">https://www.npmjs.com/package/express</a></li><li><a href="https://hub.docker.com/_/node/">https://hub.docker.com/_/node/</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/run/">https://docs.docker.com/engine/reference/commandline/run/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implementation - AWS Console - Deploy A WordPress Website On AWS</title>
      <link href="/2023/06/implementation-aws-console-deploy-wordPress-website-aws/"/>
      <url>/2023/06/implementation-aws-console-deploy-wordPress-website-aws/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h2 id="3-Tier-AWS-Network-VPC"><a href="#3-Tier-AWS-Network-VPC" class="headerlink" title="3 Tier AWS Network VPC"></a>3 Tier AWS Network VPC</h2><h2 id="NAT-Gateway"><a href="#NAT-Gateway" class="headerlink" title="NAT Gateway"></a>NAT Gateway</h2><h2 id="Security-Groups"><a href="#Security-Groups" class="headerlink" title="Security Groups"></a>Security Groups</h2><h2 id="RDS"><a href="#RDS" class="headerlink" title="RDS"></a>RDS</h2>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launch Darkly Restful API</title>
      <link href="/2023/06/ld-restapi/"/>
      <url>/2023/06/ld-restapi/</url>
      
        <content type="html"><![CDATA[<p><strong>Caveat:</strong> <em>More of an opinion, I feel using Launch Darkly REST API as part of application logic is trashington but the API exists and I wanted to know how to use it. Potentially in the future I’ll have a valid use case.</em></p><p>My team needed to programatically remove keys from a Launch Darkly segment and it tickled my interest as this cannot be done with the SDK however Launch Darkly does provide a REST API (which is what I suspect SDK Client is probabaly using under the hood). I had a play in the past with <a href="/2021/08/feature-management-launchdarkly/">Launch Darkly SDK Clients</a>.</p><p>Complete code for this post is at <a href="https://github.com/carlpaton/LaunchDarklyDemo/tree/main/FeatureClient2">https://github.com/carlpaton/LaunchDarklyDemo/tree/main/FeatureClient2</a></p><h2 id="Test-Data-And-SDK-Tests"><a href="#Test-Data-And-SDK-Tests" class="headerlink" title="Test Data And SDK Tests"></a>Test Data And SDK Tests</h2><p>Launch Darkly segments are groups of values that can be applied to more than one rule, so you can have <code>sweet segment 3</code> with the guids listed below applied to <code>n</code> feature flags. For my tests I just added the guids below to the feature <code>sweet-feature-name-3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3f43cd8d-c2f1-4a5a-b07b-a6fc2495dabf</span><br><span class="line">e3dbd64b-f51d-4aff-a4e5-f334960b9045</span><br><span class="line">85d223cc-7dc6-4b89-ad99-a17a612856ea</span><br></pre></td></tr></table></figure><ol><li>Create the segment using the GUI and add the values</li></ol><p><img src="/d/ld-restapi/create-segment.png" alt="Create Segment"></p><ol start="2"><li>Create the flag and apply the segment</li></ol><p><img src="/d/ld-restapi/add-segment-to-rule.png" alt="Create Flag"></p><ol start="3"><li>Using the code described in this SDK post and pushed here, query Launch Darkly. The expected output is as follows</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CheckByUserKey: featureName=sweet-feature-name-3 userId=e3dbd64b-f51d-4aff-a4e5-f334960b9045 returned allowed=True</span><br></pre></td></tr></table></figure><h2 id="Restful-API-Change-Segment-From-Code"><a href="#Restful-API-Change-Segment-From-Code" class="headerlink" title="Restful API - Change Segment From Code"></a>Restful API - Change Segment From Code</h2><p>The REST API uses an <code>access token</code> (Generate from the GUI -&gt; <code>Account settings</code> -&gt; <code>Authorization</code> -&gt; <code>Access tokens</code>). This is not the same as an <code>SDK Key</code> which is associated with the project when you set it up.</p><p>These are the steps I followed to make use of the Restful API and change the segment described above from code.</p><ol><li>Create the HTTP client and set its headers, in a real world application this will be injected into the pipeline with <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.httpclientfactoryservicecollectionextensions.addhttpclient">Microsoft.Extensions.DependencyInjection.AddHttpClient</a> instead of being <code>new HttpClient();</code> - remember new is glue :D</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">httpClient.DefaultRequestHeaders.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;api-00000000-0000-0000-0000-000000000000&quot;</span>);</span><br><span class="line">httpClient.DefaultRequestHeaders.Add(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br></pre></td></tr></table></figure><p>Additionally I setup some serializer options - I really dont understand why this is not the default</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonOptions = <span class="keyword">new</span> JsonSerializerOptions()</span><br><span class="line">&#123;</span><br><span class="line">PropertyNamingPolicy = JsonNamingPolicy.CamelCase</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Lastly I created a user variable - this can be any string that represents your entity. Guids are the most common so thats what I used to represent a <code>user</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userId = <span class="string">&quot;e3dbd64b-f51d-4aff-a4e5-f334960b9045&quot;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>We need to generate the segment URL which has a predefined format as seen at <a href="https://apidocs.launchdarkly.com/tag/Segments#operation/getSegment">https://apidocs.launchdarkly.com/tag/Segments#operation/getSegment</a></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetSegmentUri</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> projectKey = <span class="string">&quot;default&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> environmentKey = <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> segmentKey = <span class="string">&quot;sweet-segment-3&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> baseUrl = <span class="string">&quot;https://app.launchdarkly.com/api/v2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;baseUrl&#125;</span>/segments/<span class="subst">&#123;projectKey&#125;</span>/<span class="subst">&#123;environmentKey&#125;</span>/<span class="subst">&#123;segmentKey&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Get the segment, this will be the JSON representation of the segment created above. It was called <code>sweet-segment-3</code>. This code would need some defensive checks for null on <code>responseBody</code> but you knew that already 😊</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;Segment&gt; <span class="title">GetSegment</span>(<span class="params">HttpClient httpClient, JsonSerializerOptions options</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.GetAsync(GetSegmentUri());</span><br><span class="line">response.EnsureSuccessStatusCode();</span><br><span class="line"><span class="keyword">var</span> responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> JsonSerializer.Deserialize&lt;Segment&gt;(responseBody, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is what the JSON response from the server looked like when I tested</p><details>  <summary>Complete JSON response</summary>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sweet segment 3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;creationDate&quot;</span><span class="punctuation">:</span> <span class="number">1687318631256</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastModifiedDate&quot;</span><span class="punctuation">:</span> <span class="number">1687318969195</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sweet-segment-3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;included&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;excluded&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;includedContexts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;excludedContexts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/v2/segments/default/production&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/v2/segments/default/production/sweet-segment-3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/default/production/segments/sweet-segment-3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;da4d32e6-de8c-4533-870c-1423dcd466fd&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;clauses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;771ee791-6820-48d5-902a-0d997b11582c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;attribute&quot;</span><span class="punctuation">:</span> <span class="string">&quot;key&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;in&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;85d223cc-7dc6-4b89-ad99-a17a612856ea&quot;</span><span class="punctuation">,</span> <span class="string">&quot;e3dbd64b-f51d-4aff-a4e5-f334960b9045&quot;</span><span class="punctuation">,</span> <span class="string">&quot;3f43cd8d-c2f1-4a5a-b07b-a6fc2495dabf&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;contextKind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;negate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rolloutContextKind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;deleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_flags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sweet feature name 3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sweet-feature-name-3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/v2/flags/default&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/v2/flags/default/sweet-feature-name-3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_site&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/default/production/features/sweet-feature-name-3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;generation&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></details><ol start="4"><li>Get the patch operations, here the assumption is there is only one <code>rule</code> we care about. From the above its</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;da4d32e6-de8c-4533-870c-1423dcd466fd&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;clauses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;771ee791-6820-48d5-902a-0d997b11582c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;attribute&quot;</span><span class="punctuation">:</span> <span class="string">&quot;key&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span> <span class="string">&quot;in&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;85d223cc-7dc6-4b89-ad99-a17a612856ea&quot;</span><span class="punctuation">,</span> <span class="string">&quot;e3dbd64b-f51d-4aff-a4e5-f334960b9045&quot;</span><span class="punctuation">,</span> <span class="string">&quot;3f43cd8d-c2f1-4a5a-b07b-a6fc2495dabf&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;contextKind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;negate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;rolloutContextKind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>From there we itterate over the <code>clauses</code> and interrogate the <code>values</code> using <code>ToHashSet</code>. Should the <code>userId</code> exist in that hash we create a <code>LdPatchOperation</code>. From code this look like the below. The <code>Op</code> is an operation type requested. Example <code>remove</code>. This can be neatly wrapped up on a <a href="https://github.com/carlpaton/LaunchDarklyDemo/blob/main/FeatureClient2/LaunchDarklyDto.cs">LaunchDarklyDto</a> class.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;LdPatchOperation&gt; <span class="title">GetPatchOperation</span>(<span class="params"><span class="built_in">string</span> userId, Segment segment</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> firstRule = segment.Rules.First();</span><br><span class="line"><span class="keyword">var</span> patchOperations = <span class="keyword">new</span> List&lt;LdPatchOperation&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> clauseIndex = <span class="number">0</span>; clauseIndex &lt; firstRule.Clauses.Count; clauseIndex++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> currentClause = firstRule.Clauses[clauseIndex];</span><br><span class="line"><span class="keyword">var</span> guidsInClause = currentClause.Values.ToHashSet();</span><br><span class="line"><span class="keyword">var</span> exists = guidsInClause.Contains(userId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exists)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> idIndex = currentClause.Values.IndexOf(userId);</span><br><span class="line">patchOperations.Add(<span class="keyword">new</span> LdPatchOperation()</span><br><span class="line">&#123;</span><br><span class="line">Op = <span class="string">&quot;remove&quot;</span>,</span><br><span class="line">Path = <span class="string">$&quot;/rules/0/clauses/<span class="subst">&#123;clauseIndex&#125;</span>/values/<span class="subst">&#123;idIndex&#125;</span>&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> patchOperations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Update the segment by passing the <code>operations</code> as a <code>Patch</code> property. Here we must use the HTTP verb <code>PATCH</code> which we get implicitly by calling <code>PatchAsync</code>.</li></ol><p>Its very important here that we check <code>EnsureSuccessStatusCode</code> as if we get something like 429 (Rate Limit) then the update was unsuccessful - potentially this is possible if you are using a script thats iterating over a large set of userIds.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">UpdateSegment</span>(<span class="params">List&lt;LdPatchOperation&gt; operations, <span class="built_in">string</span> userId, HttpClient httpClient, JsonSerializerOptions options</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!operations.Any())</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body = <span class="keyword">new</span> LdPatchSegmentPayload()</span><br><span class="line">&#123;</span><br><span class="line">Patch = operations,</span><br><span class="line">Comment = <span class="string">$&quot;Removing userId : <span class="subst">&#123;userId&#125;</span>&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> content = JsonSerializer.Serialize(body, options);</span><br><span class="line"><span class="keyword">var</span> stringContent = <span class="keyword">new</span> StringContent(content, Encoding.UTF8, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.PatchAsync(GetSegmentUri(), stringContent);</span><br><span class="line">response.EnsureSuccessStatusCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Now using the same checks from <code>Test Data And SDK Tests</code> above, if we look for <code>e3dbd64b-f51d-4aff-a4e5-f334960b9045</code> it would have been removed</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CheckByUserKey: featureName=sweet-feature-name-3 userId=e3dbd64b-f51d-4aff-a4e5-f334960b9045 returned allowed=False</span><br></pre></td></tr></table></figure><p>This can be confirmed from the GUI</p><p><img src="/d/ld-restapi/confirm-removed-id.png" alt="This can be confirmed from the GUI"></p><ol start="7"><li>The complete code call stack could look as follows</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userId = <span class="string">&quot;e3dbd64b-f51d-4aff-a4e5-f334960b9045&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> segment = <span class="keyword">await</span> GetSegment(httpClient, jsonOptions);</span><br><span class="line"><span class="keyword">var</span> operations = GetPatchOperation(userId, segment);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> UpdateSegment(operations, userId, httpClient, jsonOptions);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://apidocs.launchdarkly.com/tag/Segments/#operation/patchSegment">https://apidocs.launchdarkly.com/tag/Segments/#operation/patchSegment</a></li><li><a href="https://apidocs.launchdarkly.com/tag/Segments/#operation/getSegment">https://apidocs.launchdarkly.com/tag/Segments/#operation/getSegment</a></li><li><a href="https://docs.launchdarkly.com/guides/api/rest-api">https://docs.launchdarkly.com/guides/api/rest-api</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> feature management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Structured Proposal To Deploy A WordPress Website On AWS</title>
      <link href="/2023/06/structured-proposal-deploy-wordpress-website-aws/"/>
      <url>/2023/06/structured-proposal-deploy-wordpress-website-aws/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>This post provides an overview of a design proposal to <code>Deploy a WordPress Website on AWS</code> chosen from <a href="/2023/06/aws-cloud-projects/">AWS Cloud Projects</a>.</p><h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>This document provides an overview of how to <code>Deploy a WordPress Website on AWS</code>.</p><h2 id="Functional-Requirements"><a href="#Functional-Requirements" class="headerlink" title="Functional Requirements"></a>Functional Requirements</h2><p>The task is to design and document the deployment of a system that meets the following requirements</p><ol><li>Use a common and simple architectural pattern in AWS<br> a. EC2, RDS, Route 53, ASG and VPC<br> b. Dont use abstractions like Elastic Beanstalk</li><li>The Wordpress website is<br> a. Highly available<br> b. Hosted on Amazon EC2<br> c. Connected with Amazon RDS database<br> d. Publicly accessible over the internet</li></ol><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>This would not be present in a proposal but this is my blog post and my inner nerd needs to know how to do things! :D This is actually doing the work so would be out of scope for a proposal. This is however like I said its my blog and I’ll do what I like :D</p><ol><li>Implementation<br> a. Deployment must describe how<ul><li><a href="/2023/06/implementation-aws-console-deploy-wordPress-website-aws/">This can be done in the AWS Console (high level)</a></li><li><a href="/2023/06/implementation-aws-cloudformation-deploy-wordPress-website-aws/">These steps can be repeatable using cloud formation</a></li></ul></li></ol><h2 id="None-Functional-Requirements"><a href="#None-Functional-Requirements" class="headerlink" title="None-Functional Requirements"></a>None-Functional Requirements</h2><p>TBA</p><h2 id="Component-Design"><a href="#Component-Design" class="headerlink" title="Component Design"></a>Component Design</h2><p>Reference architecture diagram</p><p>3 Tier AWS Network VPC</p><ul><li>Tier 1: Public subnets, resources like NAT Gateway, Load Balancer and Bastian host</li><li>Tier 2: Private subnets, resources like web servers (EC2 instance)</li><li>Tier 3: Another private subnet, database</li></ul><table><thead><tr><th>Component(s)</th><th>Comments</th></tr></thead><tbody><tr><td><strong>1. VPC &amp; Avalibility Zones</strong></td><td><code>VPC</code> with public and private subnets in 2 <code>avalibility zones</code></td></tr><tr><td><strong>2. Internet Gateway</strong></td><td>An <code>Internet Gateway</code> is used to allow communication between instances in the VPC and the public internet</td></tr><tr><td><strong>3. Avalibility Zones</strong></td><td>We are using 2 <code>Avalibility Zones</code> for high avalibility and fault tolerance</td></tr><tr><td><strong>4. Public Subnets</strong></td><td>Resources such as NAT Gateway, Bastion Host and Application Load Balancer use <code>Public Subnets</code></td></tr><tr><td><strong>5. Private Subnets</strong></td><td>.</td></tr><tr><td><strong>6. Public Route Table</strong></td><td>.</td></tr><tr><td><strong>6. Main Route Table</strong></td><td>.</td></tr></tbody></table><p>Duplicate subnets over multiple availability zones provides <strong>High Availability</strong> and <strong>Fault Tolerance</strong></p><h2 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h2><p>Here we would traditionally talk about the tables and present a UML diagram for each. As this is a Wordpress database with predefined table I will just link to resources abalible on the internet.</p><h2 id="Functional-Requirements-Covered"><a href="#Functional-Requirements-Covered" class="headerlink" title="Functional Requirements Covered"></a>Functional Requirements Covered</h2><p>TBA</p><h2 id="Estimations"><a href="#Estimations" class="headerlink" title="Estimations"></a>Estimations</h2><p>Business want all the things, yesterday! As we know this is not always possible so the next best option is to provide esitmations.</p><p>Below are rough estimations of the implementatation, assumptions on team size is 5 Engineers, no test analysts or designers as we will use an off the shelf template for the proposal.</p><table><thead><tr><th>Scenario</th><th>Estimation</th><th>Assumptions &amp; Comments</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>Total rough estimation is x sprints with the assumption of all risks raised, no external team dependancies.</p>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apple Crumble</title>
      <link href="/2023/06/apple-crumble/"/>
      <url>/2023/06/apple-crumble/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/apple-crumble/apple-crumble.jpg" alt="Apple Crumble"></p><p><strong>Baking time :</strong> 20 minutes with foil, 25 min</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><p>Topping</p><ul><li>2/3 cup flour</li><li>2/3 cup raw oats</li><li>2/3 cup brown sugar</li><li>1/2 TSP salt</li><li>1/2 TSP ground cinnamon</li><li>1/2 cup butter (115 grams)</li></ul><p>Filling (apples)</p><ul><li>6 apples</li><li>3 TBS apple juice (or 1 TSB lime/orange juice)</li><li>1/4 cup brown sugar</li><li>2 TBS flour</li><li>3/4 TSP ground cinnamon</li><li>1 TSP vanilla essence</li></ul><p>Additional Toppings Once Cooked</p><ul><li>Vanilla ice cream or whipped cream</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Preheat oven to 180 degrees</p><p>Toppings</p><ul><li>In a bowl combine flour, oats, sugar, salt and cinnamon</li><li>Add melted butter and stir until combined</li><li>(Optional) pop in the fridge while doing the filling</li></ul><p>Filling</p><ul><li>Peel apples, cut into quarters, cut out the core and then cut into slices</li><li>In a baking dish add the apple slices, juice, sugar, flour, cinnamon and vanilla essence</li><li>Stir until completely combined</li><li>Spread to an even layer</li><li>Add toppings and occasionally clump and press flat</li></ul><p>Baking</p><ul><li>Cover in foil (shiney side in)</li><li>Bake for 20 Minutes</li><li>Remove foil and bake for another 25 to 30 minutes until topping is golden brown</li></ul><p>Allow to cool a little, serve with optional toppings</p>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Banana Bread Muffins</title>
      <link href="/2023/06/banana-bread-muffins/"/>
      <url>/2023/06/banana-bread-muffins/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/banana-bread-muffins/banana-bread-muffins01.jpg" alt="Banana Bread Muffins"></p><p><strong>Baking time :</strong> 20 minutes or until brown.</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><ul><li>2 or 3 mashed brown bananas</li><li>0.3 cup melted butter (75 grams)</li><li>0.5 to 1 cups of brown sugar</li><li>1 egg</li><li>1 TSP baking soda</li><li>1 TSP vanilla essence</li><li>1 pinch of salt</li><li>1.5 cups of flour</li></ul><p>Optional</p><ul><li>White/brown chocolate flakes</li><li>Raw peacanuts</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><ul><li>Preheat oven to 180 degrees</li><li>Melt the butter in a bowl</li><li>Whisk the egg and add to the bowl</li><li>Mash the bananas and add them to the bowl</li><li>Add the rest of the ingredients (plus optional if you added)</li><li>Mix together, dont over mix</li><li>Place a little rice in the base of the muffin pans</li><li>Pop about 2/3 mixture in paper cupcake (makes about 15)</li><li>Bake for 20 minutes or until brown (test poke with a toothpick, if it comes out clean its cooked)</li></ul><p><img src="/d/banana-bread-muffins/banana-bread-muffins02.jpg" alt="Banana Bread Muffins"></p><h2 id="Loaf"><a href="#Loaf" class="headerlink" title="Loaf"></a>Loaf</h2><p>You can also use the same ingredients and some method as the above to make a loaf.</p><p>Just pop some wax-paper in the tin first and bake at 180 degrees for 40 to 45 minutes.</p><p>I poke it with a breadstick to check if the center is cooked.</p><p><img src="/d/banana-bread-muffins/banana-bread-loaf.jpg" alt="Banana Bread Loaf"></p>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Cloud Projects</title>
      <link href="/2023/06/aws-cloud-projects/"/>
      <url>/2023/06/aws-cloud-projects/</url>
      
        <content type="html"><![CDATA[<p>I want to get more <a href="https://aws.amazon.com/getting-started/hands-on/">hands on experience</a> in the cloud and in doing so build some cool AWS Cloud Projects. Fundamental AWS Services I want to focus on are <a href="https://aws.amazon.com/ec2/">Amazon EC2</a>, <a href="https://aws.amazon.com/rds/">Amazon RDS</a>, <a href="https://aws.amazon.com/route53/">Route 53</a>, <a href="https://aws.amazon.com/api-gateway/">Amazon API Gateway</a> (these are common/core building blocks for larger projects)</p><p>I’ve had a play with several <a href="/tags/aws/">AWS Services</a> and the key thing I remember is many of their services abstract away architecture to make it easier for engineers, this is helpful if you dont care and just want the project to work but I want to understand the abstractions, this I feel will give greater apprecation and understanding of them. An example is <a href="https://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a>, this will help handle deployments for you by creating the VPC and Subnets (underlying network layer)</p><p>I feel its good to understand Solutions/Cloud Architecture career avenues which will help my current carreer as a Software Engineer so while looking at these cloud projects Im keeping in mind what these Architects actually do in their roles.</p><ul><li><a href="https://aws.amazon.com/certification/certified-solutions-architect-associate/">Solutions Architect</a><ul><li>Help customers on their cloud journey, high level recommendations, architecture review &amp; customer enablement</li></ul></li><li>Cloud Architect <ul><li>Deliver projects for customers, build solutions for customers, coding &amp; working with AWS services</li></ul></li></ul><p>While researching these roles I found a really <a href="https://www.youtube.com/watch?v=5RVT3BN9Iws">helpful video</a> by <a href="https://www.youtube.com/@TechwithLucy">Tech With Lucy</a> where she spoke about hands on projects and the resources to get started. Some of the technology I already understand and have actually used while some left me going down a Google rabbit hole 🤞</p><p>I included the projects Lucy spoke about and </p><h2 id="⭐-Projects-⭐"><a href="#⭐-Projects-⭐" class="headerlink" title="⭐ Projects ⭐"></a>⭐ Projects ⭐</h2><h3 id="Deploy-a-WordPress-Website-on-AWS"><a href="#Deploy-a-WordPress-Website-on-AWS" class="headerlink" title="Deploy a WordPress Website on AWS"></a>Deploy a WordPress Website on AWS</h3><p>This will deploy a hosted and highly-available Wordpress application using EC2, RDS, Route 53, ASG and VPC.</p><p>Some key AWS services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPC (Public &amp; Private subnets)</span><br><span class="line">ASG (Security Group)</span><br><span class="line">EC2 (Compute capacity)</span><br><span class="line">RDS (Relational Database Service)</span><br><span class="line">EFS (Elastic File System)</span><br></pre></td></tr></table></figure><ul><li>My Implementations and notes<ul><li><a href="/2023/06/structured-proposal-deploy-wordpress-website-aws/">Structured Proposal To Deploy A WordPress Website On AWS</a></li><li><a href="/2023/06/implementation-aws-console-deploy-wordPress-website-aws/">Implementation: AWS Console</a></li><li><a href="/2023/06/implementation-aws-cloudformation-deploy-wordPress-website-aws/">Implementation: AWS CloudFormation</a></li></ul></li><li>Guided Tutorials<ul><li><a href="https://www.aosnote.com/offers/xFzqby9z/checkout">https://www.aosnote.com/offers/xFzqby9z/checkout</a></li><li><a href="https://aws.amazon.com/getting-started/hands-on/build-wordpress-website/">https://aws.amazon.com/getting-started/hands-on/build-wordpress-website/</a> (makes use of <a href="https://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> abstractions but the tutorial is free)</li></ul></li></ul><h3 id="Serverless-Web-Application-on-AWS"><a href="#Serverless-Web-Application-on-AWS" class="headerlink" title="Serverless Web Application on AWS"></a>Serverless Web Application on AWS</h3><p>A serverless architecture is a way to build and run applications without having to manage infastructure. (Engineers who dont care about provisioning, scaling or maintaining servers)</p><p>Some key AWS services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AWS Lamda (serverless, event-driven compute service)</span><br><span class="line">API Gateway </span><br><span class="line">AWS Amplify (Hosts the website)</span><br><span class="line">AWS Cognito (User pool to manage user accounts)</span><br></pre></td></tr></table></figure><ul><li><a href="https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/">https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/</a></li></ul><h3 id="Containerized-Application-in-Kubernetes-using-message-queues"><a href="#Containerized-Application-in-Kubernetes-using-message-queues" class="headerlink" title="Containerized Application in Kubernetes using message queues"></a>Containerized Application in Kubernetes using message queues</h3><p>Simple worker that polls a queue and performs a task based on the <a href="/2022/02/cloudevents/">cloud event</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Amazon Elastic Kubernetes Service (EKS)</span><br><span class="line">Amazon Simple Queue Service (SQS)</span><br></pre></td></tr></table></figure><ul><li><a href="https://aws.amazon.com/eks/">https://aws.amazon.com/eks/</a></li></ul><h3 id="Amazon-Connect-Call-Center-on-AWS"><a href="#Amazon-Connect-Call-Center-on-AWS" class="headerlink" title="Amazon Connect Call Center on AWS"></a>Amazon Connect Call Center on AWS</h3><p>This is a way for companys to build a personalized experience for their customers. Its a customer service/call center work flow.</p><p>Some key AWS services:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Amazon Connect (Cloud contact center service)</span><br><span class="line">Amazon Next (Conversational interfaces for applications using voice and text)</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/aws-samples/amazon-lex-connect-workshop">https://github.com/aws-samples/amazon-lex-connect-workshop</a></li></ul><h3 id="Ruled-Out"><a href="#Ruled-Out" class="headerlink" title="Ruled Out"></a>Ruled Out</h3><p>These are AWS Technologies I considered but ruled out as they either offer too many abstractions (no always a bad thing) or I’ve already had a hoon and want to play with new toys.</p><ul><li><a href="/2019/09/aws-elastic-container-service-stack-overview/">Amazon Elastic Container Service (Amazon ECS)</a></li><li><a href="/2021/08/aws-lightsail/">AWS Lightsail</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=jpZCg4sCz_o">AWS Cloud Architect vs Solutions Architect - which one is right for you?</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fusion 360 Constraints In 2D Sketches</title>
      <link href="/2023/05/fusion-360-constraints-in-2d-sketches/"/>
      <url>/2023/05/fusion-360-constraints-in-2d-sketches/</url>
      
        <content type="html"><![CDATA[<h2 id="Horizontal-Vertial"><a href="#Horizontal-Vertial" class="headerlink" title="Horizontal/Vertial"></a>Horizontal/Vertial</h2><ul><li>Horizontal/Vertial</li></ul><h2 id="Coincident"><a href="#Coincident" class="headerlink" title="Coincident"></a>Coincident</h2><ul><li>Coincident</li></ul><h2 id="Tangent"><a href="#Tangent" class="headerlink" title="Tangent"></a>Tangent</h2><ul><li>Tangent</li></ul><h2 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a>Equal</h2><ul><li>Equal</li></ul><h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><ul><li>Parallel</li></ul><h2 id="Perpendicular"><a href="#Perpendicular" class="headerlink" title="Perpendicular"></a>Perpendicular</h2><ul><li>Perpendicular</li></ul><h2 id="Fix-UnFix"><a href="#Fix-UnFix" class="headerlink" title="Fix/UnFix"></a>Fix/UnFix</h2><p>Paul suggested not to use this constraint and rather use the others.</p><h2 id="MidPoint"><a href="#MidPoint" class="headerlink" title="MidPoint"></a>MidPoint</h2><ul><li>MidPoint</li></ul><h2 id="Concentric"><a href="#Concentric" class="headerlink" title="Concentric"></a>Concentric</h2><ul><li>Concentric</li></ul><h2 id="Collinear"><a href="#Collinear" class="headerlink" title="Collinear"></a>Collinear</h2><ul><li>Collinear</li></ul><h2 id="Symmetry"><a href="#Symmetry" class="headerlink" title="Symmetry"></a>Symmetry</h2><ul><li>Symmetry</li></ul><h2 id="Curvature"><a href="#Curvature" class="headerlink" title="Curvature"></a>Curvature</h2><ul><li>Curvature</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=QX5HkmDH0f0">Paul McWhorter - Fusion 360 for 3D Printing LESSON 6: Understanding and Using Constraints in 2D Sketches</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fusion 360 2D Sketching</title>
      <link href="/2023/05/fusion-360-2d-sketching/"/>
      <url>/2023/05/fusion-360-2d-sketching/</url>
      
        <content type="html"><![CDATA[<p>Fundamentals at 2D level in Fusion 360 using basic shaped., we would use the <code>X</code> (red) and <code>Y</code> (green) plains and the 3D printer will extrude into <code>Z</code> (blue). <code>Create</code> - &gt; <code>Create Scetch</code> and the select the plain between red and green.</p><p>We need to be deliberate about <strong>position</strong> and <strong>dimension</strong> so that the sketch always has the little red lock indicating its <code>fully constrained</code> and the object we added goes black (and not blue).</p><h2 id="Circle-at-origin"><a href="#Circle-at-origin" class="headerlink" title="Circle (at origin)"></a>Circle (at origin)</h2><p><code>CREATE</code> - &gt; <code>Circle</code> -&gt; <code>Center Diameter Circle</code> -&gt; select position (origin) -&gt; provide dimension.</p><p><img src="/d/fusion-360-2d-sketching/circle.png" alt="circle"></p><h2 id="Circle-on-construction-lines"><a href="#Circle-on-construction-lines" class="headerlink" title="Circle (on construction lines)"></a>Circle (on construction lines)</h2><p><code>CREATE</code> - &gt; <code>Line</code> -&gt; set line type <code>construction</code> -&gt; select position (origin) -&gt; align to plain (red or green) -&gt; provide dimension.</p><p><code>CREATE</code> - &gt; <code>Circle</code> -&gt; select construction line position  -&gt; provide dimension.</p><p><img src="/d/fusion-360-2d-sketching/circle-construction-line.png" alt="circle construction line"></p><h2 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h2><p><code>CREATE</code> - &gt; <code>Line</code> -&gt; set line type <code>construction</code> -&gt; select position (origin) -&gt; align to plain (red or green) -&gt; provide dimension.</p><p><code>CREATE</code> - &gt; <code>Rectangle</code> -&gt; <code>2 Point Rectangle</code> -&gt; select construction line position  -&gt; provide dimension -&gt; tab -&gt; provide 2nd dimension</p><p><img src="/d/fusion-360-2d-sketching/rectangle.png" alt="rectangle construction line"></p><h2 id="Arc-from-origin-along-construction-line"><a href="#Arc-from-origin-along-construction-line" class="headerlink" title="Arc (from origin along construction line)"></a>Arc (from origin along construction line)</h2><p>Create 2 constructions lines along red, 100mm and 50mm</p><p><code>CREATE</code> - &gt; <code>Arc</code> -&gt; <code>3 Point Arc</code> -&gt; select origin -&gt; select the end of the 100mm construction line</p><p>Create constraint of type <code>coincident</code></p><p><code>CONSTRAINT</code> -&gt; <code>Coincident</code> -&gt; select the end of the 50mm construction line -&gt; select the center point of the arc</p><p><img src="/d/fusion-360-2d-sketching/arc.png" alt="arc"></p><h2 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h2><p>Create construction lines simliar to the above</p><p><code>CREATE</code> - &gt; <code>Polygon</code> -&gt; <code>Circumscribed Polygon</code> -&gt; select the construction line point -&gt; drag and set the radius -&gt; tab and set the amount of sides. Repeat and create another 2 polygons to the right and below</p><p>Create constraint of type <code>Horizontal/Vertial</code> (for the first polygon)</p><p>Select the polygons top line -&gt; select <code>CONSTRAINT</code> -&gt; <code>Horizontal/Vertial</code></p><p>Create constraint of type <code>Colinear</code></p><p><code>CONSTRAINT</code> -&gt; <code>Colinear</code> -&gt; select point in the middle of the polygon -&gt; select a corner of the polygon -&gt; select point of construction line outside of the polygon</p><p>Create constraint of type <code>Parallel</code></p><p><code>CONSTRAINT</code> -&gt; <code>Parallel</code> -&gt; select a line from the polygon -&gt; select a construction line</p><p><img src="/d/fusion-360-2d-sketching/polygon.png" alt="polygon"></p><p><em>Circumscribed (outside the circle) | Inscribed (inside the circle)</em></p><h2 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h2><p><code>CREATE</code> - &gt; <code>Ellipse</code> -&gt; select the construction line point <code>[1]</code> -&gt; release and select the tip of the at the next construction line <code>[2]</code> -&gt; set the dimension <code>[3]</code></p><p><img src="/d/fusion-360-2d-sketching/ellipse.png" alt="ellipse"></p><h2 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h2><p>Requires a square with 2 construction lines deviding it into 4 equal parts, then from the center 2 additional construction lines (these are the <code>25mm</code> ones)</p><p><code>CREATE</code> - &gt; <code>Slot</code> -&gt; <code>Center to Center Slot</code> -&gt; select construction line point <code>[1]</code> -&gt; release and select construction line point <code>[2]</code> -&gt; then set the dimension (this is the <code>25mm</code> radius)</p><p><img src="/d/fusion-360-2d-sketching/slot.png" alt="slot"></p><h2 id="Conic-Curve"><a href="#Conic-Curve" class="headerlink" title="Conic Curve"></a>Conic Curve</h2><p>Requires the 3 construction lines shown as <code>100.00</code>, <code>100.00</code> and <code>50.00</code></p><p><code>CREATE</code> - &gt; <code>Conic Curve</code> -&gt; select construction line at point <code>[1]</code> -&gt; construction line at point <code>[2]</code> -&gt; then construction line at point <code>[3]</code> -&gt; then set the dimension</p><p><img src="/d/fusion-360-2d-sketching/conic-curve.png" alt="conic curve"></p><h2 id="Mirror"><a href="#Mirror" class="headerlink" title="Mirror"></a>Mirror</h2><p>This mirrors the selection and applys any new changes automagically. Here I mirrored the conic curve above. </p><p><code>CREATE</code> - &gt; <code>Mirrow</code> -&gt; select the object (can be any object) at <code>[1]</code> -&gt; select the line at <code>[2]</code> -&gt; the mirror then appears on the right</p><p><img src="/d/fusion-360-2d-sketching/mirror.png" alt="mirror"></p><h2 id="Circular-Pattern"><a href="#Circular-Pattern" class="headerlink" title="Circular Pattern"></a>Circular Pattern</h2><p>This requires 1 construction line and then the object to create in a circular pattern.</p><p><code>CREATE</code> - &gt; <code>Circular Pattern</code> -&gt; select the object at <code>[1]</code> -&gt; select the center point at <code>[2]</code> -&gt; set the quantity and click ok</p><p><img src="/d/fusion-360-2d-sketching/circular-pattern.png" alt="circular pattern"></p><p>Can also create pattern with missing elements by selecting suppress and then unchecking elements</p><p><img src="/d/fusion-360-2d-sketching/circular-pattern-suppress.png" alt="circular pattern suppress"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=imo6HKOpdPI">Paul McWhorter - Fusion 360 for 3D Printing LESSON 5: Introduction to 2D Sketching in Fusion 360</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Pico Debug</title>
      <link href="/2023/05/pi-pico-debug/"/>
      <url>/2023/05/pi-pico-debug/</url>
      
        <content type="html"><![CDATA[<p>While playing with my Pico Pi I was trying to get the Wifi to work, the code worked while being powered by USB but as soon as I only connected it to 3v batterys (X2 AA 1.5v) it just made a humming sound and I wasnt sure what what going on.</p><p>Spoiler alert, after using 4.5v (3X AA 1.5V) batterys it worked so my assumption is the <a href="https://forums.raspberrypi.com/viewtopic.php?t=337145">wifi module needs more power</a> 🤷</p><p>These are just some of the steps I followed and will build upon these (and update here) as I learn.</p><h2 id="LED-Communication-Boot-Sequence"><a href="#LED-Communication-Boot-Sequence" class="headerlink" title="LED Communication / Boot Sequence"></a>LED Communication / Boot Sequence</h2><p>I added a <code>boot sequence</code> to the start-up by quickly flashing the LED on/off 3 times. The value here was I knew my code was executing and could debug from there.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">boot_led</span>():   </span><br><span class="line">    onboard.off()</span><br><span class="line">    boot_show = <span class="number">3</span></span><br><span class="line">    wait_for = <span class="number">0.3</span></span><br><span class="line">    <span class="keyword">while</span> boot_show &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(boot_show)</span><br><span class="line">        onboard.on()</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(wait_for)</span><br><span class="line">        onboard.off()</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(wait_for)</span><br><span class="line">        boot_show -= <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico%20W/SMARSCar/myboot.py#L6">https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico%20W/SMARSCar/myboot.py#L6</a></li></ul><h2 id="Text-Logging"><a href="#Text-Logging" class="headerlink" title="Text Logging"></a>Text Logging</h2><p>Im not a MicroPython expert and it does look to have <a href="https://pypi.org/project/micropython-logging/">existing in logging</a> modules however I like to do things a little more manual first and then once I understand the process use a module. The value I feel is I then 1. appreciate what is abstracted away from me and 2. understand the actual problem its solving.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_error</span>(<span class="params">e</span>):</span><br><span class="line">    log=<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="comment"># append</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;An exception occurred&quot;</span>)</span><br><span class="line">        year, month, day, hour, mins, secs, weekday, yearday = time.localtime()</span><br><span class="line">        today = <span class="string">&quot;&#123;&#125;-&#123;:02d&#125;-&#123;:02d&#125; &#123;&#125;:&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(year, month, day, hour, mins, secs) <span class="comment"># YYYY-MM-DD hh:ss:sss</span></span><br><span class="line">        <span class="built_in">print</span>(today)</span><br><span class="line">        </span><br><span class="line">        log.write(today + <span class="string">&quot; - &quot;</span>)</span><br><span class="line">        log.write(<span class="built_in">str</span>(e)+<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        log.flush()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico%20W/SMARSCar/mylog.py#L3">https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico%20W/SMARSCar/mylog.py#L3</a></p><p>I then added a <code>except</code> in my main code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    log_error(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    asyncio.new_event_loop()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico%20W/SMARSCar/main.py#L22">https://github.com/carlpaton/PicoPiHoon/blob/main/Pi%20Pico%20W/SMARSCar/main.py#L22</a></p><p>This gave me basic logging like the below. Ideally I’d like to include a stack strace but currently it wasnt needed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY-MM-DD hh:ss:sss - The error message that was thrown</span><br></pre></td></tr></table></figure><h2 id="Hardward-Debug"><a href="#Hardward-Debug" class="headerlink" title="Hardward Debug"></a>Hardward Debug</h2><p>The Pico has hardward debug ability using debug pins. I figured out my problem with the steps above so this kind of debug is something I will probably explore later. The video linked below shows how to do this with another Pico Pi (Warning it look complicated :D)</p><ul><li><a href="https://www.youtube.com/watch?v=0i2gLeBal9Y">https://www.youtube.com/watch?v=0i2gLeBal9Y</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Pico (RP2040) Projects</title>
      <link href="/2023/04/pi-pico-projects/"/>
      <url>/2023/04/pi-pico-projects/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 03/02/2025</strong></p><p>A place to collate some ideas for projects using the <a href="https://www.raspberrypi.com/products/raspberry-pi-pico/">Pi Pico RP2040</a></p><h2 id="Remote-Controlled-Robot-Vacuum"><a href="#Remote-Controlled-Robot-Vacuum" class="headerlink" title="Remote Controlled Robot Vacuum"></a>Remote Controlled Robot Vacuum</h2><ul><li><a href="https://www.youtube.com/watch?v=mTpkV7xZln0">https://www.youtube.com/watch?v=mTpkV7xZln0</a></li><li>Potential battery <a href="https://cell-supply.co.nz/product/samsung-25r-18650-2500mah-20a/">18650</a></li></ul><h2 id="LED-Christmas-tree-small-or-star-ontop-of-tree"><a href="#LED-Christmas-tree-small-or-star-ontop-of-tree" class="headerlink" title="LED Christmas tree (small) or star ontop of tree"></a>LED Christmas tree (small) or star ontop of tree</h2><p>The Pico can run several lights using its GPIO and the number can be increase with <a href="/2022/03/charlieplexing-leds/">charlieplexing</a></p><p>The shopping list would include</p><table><thead><tr><th>Item</th><th>Link</th></tr></thead><tbody><tr><td>Pack of LEDs</td><td><a href="https://www.aliexpress.com/item/1005004963195988.html">https://www.aliexpress.com/item/1005004963195988.html</a></td></tr><tr><td>Pack of Resistors</td><td><a href="https://www.aliexpress.com/item/1005003117726705.html">https://www.aliexpress.com/item/1005003117726705.html</a></td></tr></tbody></table><p>See <a href="/2020/05/pi-led-control/">Pi LED Control</a></p><h2 id="SMARS-car"><a href="#SMARS-car" class="headerlink" title="SMARS car"></a>SMARS car</h2><ul><li><a href="/2022/03/3d-printing/">Link to thingiverse 3D prints are here</a></li></ul><p>The shopping list would include</p><table><thead><tr><th>Item</th><th>Link</th></tr></thead><tbody><tr><td>L298N Motor Driver</td><td><a href="https://www.aliexpress.com/item/1005004431531794.html">https://www.aliexpress.com/item/1005004431531794.html</a></td></tr><tr><td>Micro N20 Gear Motor</td><td><a href="https://www.aliexpress.com/item/1005005402095121.html">https://www.aliexpress.com/item/1005005402095121.html</a></td></tr><tr><td>LCD1602 1602 LCD Module</td><td><a href="https://www.aliexpress.com/item/1005005402188975.html">https://www.aliexpress.com/item/1005005402188975.html</a></td></tr></tbody></table><p>If the 3D prints fail this chassis looks like it will work well - <a href="https://www.aliexpress.com/item/32878542560.html">https://www.aliexpress.com/item/32878542560.html</a></p><p>Some insparational videos</p><ul><li><a href="https://www.youtube.com/watch?v=iTo4Qh2R6m4">Raspberry Pi Pico W: WiFi Controlled Robot</a></li><li><a href="https://www.youtube.com/watch?v=fR5XhHYzUK0">Raspberry Pi - Mini LCD Display Tutorial (Will be usefull to see the cars IP)</a></li></ul><h2 id="4-6-8-legged-spider"><a href="#4-6-8-legged-spider" class="headerlink" title="4/6/8 legged spider"></a>4/6/8 legged spider</h2><p>Some insparational videos</p><ul><li><a href="https://www.youtube.com/watch?v=w3q_4_-ZHJ4">I Taught My Hexapod a Slam Attack</a></li></ul><h2 id="Useless-Box"><a href="#Useless-Box" class="headerlink" title="Useless Box"></a>Useless Box</h2><p>See <a href="/2020/05/pi-useless-box/">Pi Useless Box</a></p><h2 id="Retro-Gaming"><a href="#Retro-Gaming" class="headerlink" title="Retro Gaming"></a>Retro Gaming</h2><ul><li><a href="https://github.com/YouMakeTech/PicoRetroGamingSystem">https://github.com/YouMakeTech/PicoRetroGamingSystem</a></li><li><a href="https://www.youtube.com/watch?v=VYeIR5n5Few">https://www.youtube.com/watch?v=VYeIR5n5Few</a></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul><li><a href="https://www.raspberrypi.com/documentation/microcontrollers/">https://www.raspberrypi.com/documentation/microcontrollers/</a></li><li><a href="https://datasheets.raspberrypi.com/pico/Pico-R3-A4-Pinout.pdf">https://datasheets.raspberrypi.com/pico/Pico-R3-A4-Pinout.pdf</a></li></ul><h3 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h3><ul><li><a href="https://docs.micropython.org/en/latest/library/socket.html#socket.socket.send">https://docs.micropython.org/en/latest/library/socket.html#socket.socket.send</a></li><li><a href="https://www.raspberrypi.com/news/how-to-run-a-webserver-on-raspberry-pi-pico-w/">https://www.raspberrypi.com/news/how-to-run-a-webserver-on-raspberry-pi-pico-w/</a></li></ul><p>Lutz Examples</p><ul><li><a href="https://www.youtube.com/watch?v=wCac3uIW5nU">https://www.youtube.com/watch?v=wCac3uIW5nU</a></li><li><a href="https://github.com/LutzEmbeddedTec/Pico_w_adjustable_values/blob/main/Website_GPIO_control.py">https://github.com/LutzEmbeddedTec/Pico_w_adjustable_values/blob/main/Website_GPIO_control.py</a></li><li><a href="https://github.com/LutzEmbeddedTec/Picow_web/blob/main/Website_GPIO_control.py">https://github.com/LutzEmbeddedTec/Picow_web/blob/main/Website_GPIO_control.py</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.micropython.org/en/latest/rp2/quickref.html">https://docs.micropython.org/en/latest/rp2/quickref.html</a></li><li><a href="https://www.raspberrypi.com/documentation/microcontrollers/micropython.html">https://www.raspberrypi.com/documentation/microcontrollers/micropython.html</a><ul><li><a href="https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-python-sdk.pdf">https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-python-sdk.pdf</a></li><li><a href="https://datasheets.raspberrypi.com/picow/connecting-to-the-internet-with-pico-w.pdf">https://datasheets.raspberrypi.com/picow/connecting-to-the-internet-with-pico-w.pdf</a></li></ul></li><li><a href="https://www.youtube.com/watch?v=O6lkYTfcMEg">How to Use VSCode with Raspberry Pi Pico W and MicroPython</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ninject MVC</title>
      <link href="/2023/04/ninject-mvc/"/>
      <url>/2023/04/ninject-mvc/</url>
      
        <content type="html"><![CDATA[<p>I needed to add dependency injection to a old ASP.NET MVC (.Net 4.8) application. For <em>reasons</em> it did not have DI and used some glue to new up objects. Remember kids <strong>NEW IS GLUE</strong> and #trashington.</p><p>Dependency injection is an implementation of <a href="/2018/04/dependency-inversion-principle-dip/">Dependency Inversion Principle (DIP)</a>. I knew how to use <a href="/2018/09/ninject/">Ninject</a> from previouse exposure but had never set it up from scatch. These are the steps I followed.</p><h2 id="Ninject-MVC3"><a href="#Ninject-MVC3" class="headerlink" title="Ninject MVC3"></a>Ninject MVC3</h2><ol><li>Install nuget <code>Ninject.MVC3</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Ninject.MVC3</span><br></pre></td></tr></table></figure><p>This gave me</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ninject.3.2.0.0</span><br><span class="line">Ninject.MVC3.3.2.1.0</span><br><span class="line">Ninject.Web.Common.3.2.0.0</span><br><span class="line">Ninject.Web.Common.WebHost.3.2.0.0</span><br><span class="line">WebActivatorEx.2.0                    // this allows Ninject to use reflection on MVC controllers and hook into the pipeline</span><br></pre></td></tr></table></figure><blockquote><p>“WebActivatorEx -&gt; A package that allows other packages to execute some startup code in web apps. This package should be used over the older WebActivator, which was not strong named.”</p></blockquote><ol start="2"><li>This created <code>NinjectWebCommon</code> inside <code>APPNAME.App_Start</code> and inside its <code>RegisterServices</code> method I loaded up modules, these modules cohesively grouped the dependacies.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Load your modules or register your services here!</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;kernel&quot;&gt;</span>The kernel.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterServices</span>(<span class="params">IKernel kernel</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    kernel.Load(<span class="keyword">new</span> ClientModule());   <span class="comment">// this is a group of HTTP clients</span></span><br><span class="line">    kernel.Load(<span class="keyword">new</span> ServiceModule());  <span class="comment">// this is a group of internal services</span></span><br><span class="line">    kernel.Load(<span class="keyword">new</span> FactoryModule());  <span class="comment">// this is a group of... you guessed it factorys</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ninject can leverage refection and bind the default interface of the given types to the type. e.g. <code>Foo : IFoo</code> however Im not sure other libraries like <a href="/2018/09/autofac/">Autofac</a> or <a href="/2018/09/unity/">Unity</a> can do this so I could then glue the setup to ninject and make it hard to later change.</p><p>Its simpler IMO to break these up by module and then resolve things manually so you know 100% what is being put into the dependency injection container and being made available to the application.</p><p>Additionally I have some notes here on where in the application <a href="/2020/07/microservice-architecture/">Clients</a> could live and what <a href="/2020/02/factory-pattern/">Factorys</a> are.</p><ol start="3"><li>Created these modules in <code>APPNAME.App_Start.Modules</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Ninject.Modules;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">APPNAME.App_Start.Modules</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClientModule</span> : <span class="title">NinjectModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Bind&lt;IService1Client&gt;().To&lt;Service1Client&gt;();</span><br><span class="line">            Bind&lt;IService2Client&gt;().To&lt;IService2Client&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will use transient scope (objects are always different) for each request.</p><p>Probably more of an opinion but I have always leaned towards starting with transient (objects are always different) and then moved over to scoped (objects are the same within a request, but different across different requests) or singleton (objects are the same for every object and every request) when it solved a problem or helped with performance.</p><p>The above is the same as typing <code>Bind&lt;IService1Client&gt;().To&lt;Service1Client&gt;().InTransientScope()</code> but is not needed.</p><p>You could use any of these methods from <code>Ninject.Syntax</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.InSingletonScope() // same object for ever</span><br><span class="line">.InThreadScope()    // same object in the request</span><br></pre></td></tr></table></figure><ol start="4"><li>This then allowed constructor injection as <code>IService1Client</code> for controllers inheriting from <code>Controller</code>.</li></ol><h2 id="Ninject-WebApi"><a href="#Ninject-WebApi" class="headerlink" title="Ninject WebApi"></a>Ninject WebApi</h2><p>For reasons of <code>hey why not?</code> this UI project also has an API. To continue to support it I did the following.</p><ol><li>Installed <code>Ninject.Web.WebApi</code> which gave me</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ninject.3.2.0.0 -&gt; Ninject.3.2.2.0  // compatibility bump</span><br><span class="line">Ninject.Web.WebApi.3.2.4.0</span><br></pre></td></tr></table></figure><ol start="2"><li>Inside the <code>CreateKernel</code> method I added <code>GlobalConfiguration.Configuration.DependencyResolver = new Ninject.Web.WebApi.NinjectDependencyResolver(kernel);</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Creates the kernel that will manage your application.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The created kernel.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IKernel <span class="title">CreateKernel</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> kernel = <span class="keyword">new</span> StandardKernel();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        kernel.Bind&lt;Func&lt;IKernel&gt;&gt;().ToMethod(ctx =&gt; () =&gt; <span class="keyword">new</span> Bootstrapper().Kernel);</span><br><span class="line">        kernel.Bind&lt;IHttpModule&gt;().To&lt;HttpApplicationInitializationHttpModule&gt;();</span><br><span class="line"></span><br><span class="line">        RegisterServices(kernel);</span><br><span class="line">        GlobalConfiguration.Configuration.DependencyResolver = <span class="keyword">new</span> Ninject.Web.WebApi.NinjectDependencyResolver(kernel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> kernel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        kernel.Dispose();</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This brought in a <code>System.Web.Http</code> dependency.</p><ol start="3"><li>Added binding redirect for System.Web.Http, I used the publicKeyToken value from the other entries as they were all the same.</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependentAssembly</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assemblyIdentity</span> <span class="attr">name</span>=<span class="string">&quot;System.Web.Http&quot;</span> <span class="attr">publicKeyToken</span>=<span class="string">&quot;31bf3856ad364e35&quot;</span> <span class="attr">culture</span>=<span class="string">&quot;neutral&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bindingRedirect</span> <span class="attr">oldVersion</span>=<span class="string">&quot;0.0.0.0-5.2.3.0&quot;</span> <span class="attr">newVersion</span>=<span class="string">&quot;5.2.3.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependentAssembly</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Multiple versions of the <code>System.Web.Http</code> assembly live in <a href="/2018/05/global-assembly-cache/">Global Assembly Cache (GAC)</a>, without this redirect when built we got version <code>3.2.1.0</code> which resulted in the error <code>Could not load file or assembly &#39;System.Web.Http, Version=5.0.0.0</code> and sadness when people tried to use the application.</p><ol start="4"><li>This then allowed constructor injection as <code>IService1Client</code> for controllers inheriting from <code>ApiController</code>.</li></ol><p>Life is better with dependency injection ❤️</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/ninject/Ninject.Web.Mvc/wiki/Setting-up-an-MVC3-application">https://github.com/ninject/Ninject.Web.Mvc/wiki/Setting-up-an-MVC3-application</a></li><li><a href="https://github.com/ninject/ninject/wiki/Object-Scopes">https://github.com/ninject/ninject/wiki/Object-Scopes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Octo Print</title>
      <link href="/2023/04/octoprint/"/>
      <url>/2023/04/octoprint/</url>
      
        <content type="html"><![CDATA[<p>Awesome docs on how to do this at <a href="https://www.raspberrypi.com/tutorials/set-up-raspberry-pi-octoprint/">https://www.raspberrypi.com/tutorials/set-up-raspberry-pi-octoprint/</a></p><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">200</span><br><span class="line">250</span><br><span class="line"></span><br><span class="line">0.3mm Nozzel</span><br></pre></td></tr></table></figure><ul><li><a href="http://octopi.local/">http://octopi.local/</a></li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="https://www.raspberrypi.com/software/">https://www.raspberrypi.com/software/</a></li><li><a href="https://www.obico.io/docs/user-guides/octoprint-plugin-setup/">https://www.obico.io/docs/user-guides/octoprint-plugin-setup/</a></li><li><a href="https://octoprint.org/">https://octoprint.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 3d printing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP API Health Checks (Readiness)</title>
      <link href="/2023/03/api-health-checks/"/>
      <url>/2023/03/api-health-checks/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/api-health-checks/api-health-checks.png" alt="API Health Checks"></p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>The examples in this post are for a HTTP health check see <a href="/2023/03/health-checks/">Health Checks</a> for detailed motivation and alternatives like TCP. Health checks can include any downstream dependencies for your app like Database, Queue Service ect, in this post Im just looking at downstream HTTP dependencies.</p><p>We can leverage and extend the existing <code>Microsoft.Extensions.Diagnostics.HealthChecks</code> to check the APIs downstream dependencies are operational. This can be done with a simple <a href="/2023/01/newrelic/">New Relic Synthetic Monitor</a> that polls <code>http://myapi/healthcheck</code> which would then in turn poll <code>http://dependency-1/ping</code> ect</p><p>The healthcheck endpoint should at very least require authorization in the form of a scope check.</p><h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><ol><li>Install the following packages</li></ol><ul><li><code>Microsoft.AspNetCore.Diagnostics.HealthChecks</code></li><li><code>Microsoft.Extensions.Diagnostics.HealthChecks</code></li></ul><ol start="2"><li>Create a contract each dependency must filfull. Here its helpful for the method to return a <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples">tuple</a> of <code>bool isHealthy</code> and <code>string? description</code> as this will be displayed when <code>http://myapi/healthz</code> is queried. </li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IHealthCheckClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interface to be implemented by Services and used by the ServiceHealthCheck</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Task&lt;(<span class="built_in">bool</span> isHealthy, <span class="built_in">string</span>? description)&gt; IsHealthyAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Now leverage inheritance to extend the clients interface, this is a bit of a hack but the alternative is to add <code>IsHealthyAsync</code> to each clients interface -_-</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDependency1Client</span> : <span class="title">IHealthCheckClient</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Now implement the <code>IsHealthyAsync</code> method from <code>IHealthCheckClient</code> to query the ping endpoint. Example: <code>http://dependency-1/ping</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dependency1Client</span> : <span class="title">IDependency1Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;(<span class="built_in">bool</span> isHealthy, <span class="built_in">string</span>? description)&gt; IsHealthyAsync()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> _client.GetAsync(<span class="string">&quot;/ping&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.IsSuccessStatusCode</span><br><span class="line">            ? (<span class="literal">true</span>, <span class="literal">null</span>)</span><br><span class="line">            : (<span class="literal">false</span>, <span class="string">$&quot;Service failed with <span class="subst">&#123;response.StatusCode&#125;</span> at ping endpoint&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Create a service health check class that takes a generic type where the type is <code>IHealthCheckClient</code> and additionally implement <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.diagnostics.healthchecks.ihealthcheck">IHealthCheck</a></li></ol><ul><li><strong>\HealthChecks\ServiceHealthCheck.cs</strong> </li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Diagnostics.HealthChecks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyApi.HealthChecks</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceHealthCheck</span>&lt;<span class="title">T</span>&gt; : <span class="title">IHealthCheck</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IHealthCheckClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHealthCheckClient _service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceHealthCheck</span>(<span class="params">T service</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;HealthCheckResult&gt; <span class="title">CheckHealthAsync</span>(<span class="params">HealthCheckContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">        CancellationToken cancellationToken = <span class="literal">default</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> (isHealthy, description) = <span class="keyword">await</span> _service.IsHealthyAsync();</span><br><span class="line">        <span class="keyword">var</span> healthStatus = isHealthy ? HealthStatus.Healthy : HealthStatus.<span class="function">Unhealthy</span></span><br><span class="line"><span class="function">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">HealthCheckResult</span>(<span class="params">healthStatus, description</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Extend the the service collection in <strong>Program.cs</strong> to add named health checks, its a fluent api so you can chain them.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddHealthChecks()</span><br><span class="line">    .AddCheck&lt;ServiceHealthCheck&lt;IDependency1Client&gt;&gt;(<span class="string">&quot;Dependency1Service&quot;</span>)</span><br><span class="line">    .AddCheck&lt;ServiceHealthCheck&lt;IDependency2Client&gt;&gt;(<span class="string">&quot;Dependency2Service&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>Still in <strong>Program.cs</strong> expose the <code>healthz</code> endpoint. The <code>z</code> in <code>healthz</code> is often used as a shorthand for “health check”. In the context of software development, a “health check” is a routine that tests whether a particular component of a system is functioning properly. The “z” is added to the end of “health” to create a unique and distinct word that can be used as a URL endpoint for checking the health of a particular system or component. This convention is often used in the context of microservices architecture, where multiple small services are combined to create a larger system.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.MapHealthChecks(<span class="string">&quot;/healthz&quot;</span>)</span><br><span class="line">    .RequireAuthorization();</span><br></pre></td></tr></table></figure><p>You can also use a <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.diagnostics.healthchecks.healthcheckoptions.responsewriter">ResponseWriter</a> to format the response nicely.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks">Health checks in ASP.NET Core</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> workers </tag>
            
            <tag> health checks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Health Checks</title>
      <link href="/2023/03/health-checks/"/>
      <url>/2023/03/health-checks/</url>
      
        <content type="html"><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Adding a health check to your application is important for ensuring that your application is running smoothly and responding to requests properly. Health checks are used to monitor the status of your application and determine if it is healthy or not. By implementing a health check, you can:</p><ul><li><p><strong>Monitor application uptime</strong>: Ensure that it is available to users, this is important for applications that are critical to business operations, as downtime can result in lost revenue, decreased productivity, and decreased user satisfaction.</p></li><li><p><strong>Detect issues early</strong>: Pickup issues before they become critical. By regularly monitoring the status of your application, you can quickly identify and address any problems that arise, such as server errors or network connectivity issues.</p></li><li><p><strong>Improve application performance</strong>: Identify performance issues in your application and optimize it for better performance. By monitoring response times and resource utilization, you can identify bottlenecks and optimize your application for better performance.</p></li><li><p><strong>Enable automatic failover</strong>: In conjunction with load balancers you can enable automatic failover. If a health check determines that an instance of your application is unhealthy, the load balancer can automatically redirect traffic to a healthy instance, ensuring that your application remains available to users.</p></li></ul><h2 id="HTTP-or-TCP"><a href="#HTTP-or-TCP" class="headerlink" title="HTTP or TCP?"></a>HTTP or TCP?</h2><p>TCP and HTTP are both protocols used for communication over a network, but they serve different purposes. TCP provides a reliable, ordered, and error-checked delivery of data, while HTTP is a higher-level application protocol that is typically used for web browsing, file transfer, and other web-based applications.</p><p>When it comes to health checks in a background service running in a Kubernetes cluster, using TCP as the health check protocol is generally preferred over HTTP for a few reasons:</p><ul><li><p><strong>Simplicity</strong>: TCP health checks are simpler to implement and have lower overhead than HTTP health checks. With TCP, you simply establish a connection to the target service and check if it responds with a successful handshake. With HTTP, you need to send an HTTP request and wait for an HTTP response, which requires more processing and can be slower.</p></li><li><p><strong>Speed</strong>: TCP health checks are generally faster than HTTP health checks because they require fewer network round trips. Since health checks are typically performed frequently, minimizing the time spent on health checks can help improve the overall performance and responsiveness of the system.</p></li><li><p><strong>Accuracy</strong>: TCP health checks provide a more accurate view of the availability of the service, since they check if the underlying network connection is available and responsive. With HTTP health checks, a successful response may not necessarily mean that the service is fully operational or responsive.</p></li></ul><p>That being said, there may be situations where using HTTP as the health check protocol is more appropriate. For example, if your service relies on specific HTTP endpoints for functionality, using HTTP health checks may provide more insight into the service’s health and readiness. Ultimately, the choice of health check protocol depends on the specific requirements and constraints of your system.</p><h2 id="Probes"><a href="#Probes" class="headerlink" title="Probes"></a>Probes</h2><p>In .Net both of these are added with <code>.Services.AddHealthChecks().AddCheck&lt;T&gt;</code> which can be confusing but they are slightly different. Ive seen some teams define these as: </p><ul><li><code>Health</code>: Check ALL dependencies</li><li><code>Ready</code>: Check the critical dependencies</li></ul><p>I dont really feel that both are needed, perhaps just the <code>Health</code> check is the most valuable.</p><h3 id="Readiness-Health"><a href="#Readiness-Health" class="headerlink" title="Readiness (Health)"></a>Readiness (Health)</h3><p>K8s checks the service is healthy and downstream dependencies are avalible</p><ul><li>aka <code>healthz</code> or <code>healthcheck</code> or <code>_health</code> for the local app <ul><li>downstream API dependencies you can just call their <code>/ping</code> </li><li>Database Health would try connect to the DB and run something like <code>SELECT 1</code>)</li></ul></li><li>Example readiness for <a href="/2023/03/api-health-checks/">HTTP API Health Checks (C#)</a></li></ul><h3 id="Liveness-Ready"><a href="#Liveness-Ready" class="headerlink" title="Liveness (Ready)"></a>Liveness (Ready)</h3><p>In terms of K8s it needs to check the container health (this is not the application health), if the application is dead then K8s will remove the pod and spin up a replacement.</p><ul><li>aka <code>ready</code></li><li>Examples<ul><li>API you can just have a <code>/ready</code> endpoint returning <code>Ok()</code> or check the critical dependencies, K8s can just use the <code>/ping</code> endpoint</li><li>Worker example: <a href="/2023/03/tcp-socket-action-probe-in-worker/">TCP Socket Action Probe In Worker (C#)</a></li></ul></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes">Kubernetes best practices: Setting up health checks with readiness and liveness probes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> health checks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP Socket Action Probe In Worker (Liveness)</title>
      <link href="/2023/03/tcp-socket-action-probe-in-worker/"/>
      <url>/2023/03/tcp-socket-action-probe-in-worker/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/tcp-socket-action-probe-in-worker/tcp-socket-action-probe-in-worker.png" alt="TCP Socket Action Probe In Worker"></p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>The examples in this post are for a TCP health check see <a href="/2023/03/health-checks/">Health Checks</a> for detailed motivation and alternatives like HTTP.</p><blockquote><p>“Kubernetes relies on probes in your application to assess whether your application is healthy.” - dzone.com</p></blockquote><p>If the worker instance is un-healthy then K8s will tear it down and spin up a new instance.</p><h2 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h2><ol><li><p>Install the following package : <code>Microsoft.Extensions.Diagnostics.HealthChecks</code></p></li><li><p>Create a simple health check that implements <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.diagnostics.healthchecks.ihealthcheck">IHealthCheck</a> and always returns healthy.</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Diagnostics.HealthChecks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.HealthChecks</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HealthCheck</span> : <span class="title">IHealthCheck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task&lt;HealthCheckResult&gt; <span class="title">CheckHealthAsync</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        HealthCheckContext context, </span></span></span><br><span class="line"><span class="params"><span class="function">        CancellationToken token = <span class="literal">default</span></span>)</span> =&gt;</span><br><span class="line">            Task.FromResult(<span class="keyword">new</span> HealthCheckResult(HealthStatus.Healthy));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="3"><li>Create a new background service to accept the TCP socket liveness probe, this code was adapted from <a href="https://dzone.com/articles/monitoring-health-of-aspnet-core-background-servic">dzone.com</a> and is intentionally simple without logging and error handling. So turn piss off Karen 😛</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TcpLivenessProbeService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> TcpListener _listener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HealthCheckService _service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TcpLivenessProbeService</span>(<span class="params">HealthCheckService service</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _listener = <span class="keyword">new</span> TcpListener(<span class="number">5000</span>);</span><br><span class="line">        _service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken token</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _listener.Start();</span><br><span class="line">        <span class="keyword">while</span> (!token.IsCancellationRequested)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> UpdateHeartbeatAsync(token);</span><br><span class="line">            <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="number">1</span>), token);</span><br><span class="line">        &#125;</span><br><span class="line">        _listener.Stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">UpdateHeartbeatAsync</span>(<span class="params">CancellationToken token</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> _service.CheckHealthAsync(token);</span><br><span class="line">        <span class="keyword">var</span> isHealthy = result.Status == HealthStatus.Healthy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isHealthy)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (_listener.Server.IsBound &amp;&amp; _listener.Pending())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> client = <span class="keyword">await</span> _listener.AcceptTcpClientAsync(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Now resolve the dependencies in <strong>Program.cs</strong></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Liveness check</span></span><br><span class="line">services.AddHealthChecks().AddCheck&lt;HealthCheck&gt;(<span class="string">&quot;liveness&quot;</span>);</span><br><span class="line">services.AddHostedService&lt;TcpLivenessProbeService&gt;();</span><br></pre></td></tr></table></figure><ol start="5"><li>You will then need to configure the liveness probe in K8s to query port 5000</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-check</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">5000</span></span><br><span class="line">              <span class="attr">hostPort:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">                <span class="attr">port:</span> <span class="string">liveness-check</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://dzone.com/articles/monitoring-health-of-aspnet-core-background-servic">Monitoring Health of ASP.NET Core Background Services With TCP Probes on Kubernetes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> workers </tag>
            
            <tag> health checks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS S3 Host Static Website</title>
      <link href="/2023/02/aws-s3-host-static-website/"/>
      <url>/2023/02/aws-s3-host-static-website/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 27/09/2024</strong></p><p>I needed to pop a static website into a S3 bucket because its current containerised hosting in <a href="/2021/08/aws-lightsail/">AWS Lightsail</a> was proving to be problematic with new deploys (wierd javascript errors) and attracting a higher hosting cost. (EC2 compute to run the container service)</p><p>Lucky for me I work with legends who have already figured this out so most of the below is based on the work done by <a href="https://jaxsbr.github.io/pkb-blog/2022/05/19/host-a-static-website-with-aws-s3/">Jaco Brink</a> - cheers brother!</p><h2 id="AWS-Config"><a href="#AWS-Config" class="headerlink" title="AWS Config"></a>AWS Config</h2><p>The below assumes your <a href="/2019/09/aws-install-and-configure-cli/">AWS CLI is installed and configured</a>.</p><p>Note the user will need permissions policies <code>AmazonS3FullAccess</code> and <code>AWSCloudFormationFullAccess</code>. Hopefully you add these via a user group and not attach directly like a moegoe 😐</p><h3 id="Create-the-Bucket"><a href="#Create-the-Bucket" class="headerlink" title="Create the Bucket"></a>Create the Bucket</h3><p>Cloud formation is the weapon of choice when deploying infrastructure. Its repeatable and then managed by AWS.</p><p>The cloud formation template data here is kept in <code>porky-bucket-website.json</code> because YML hurts my brain.</p><details>  <summary>porky-bucket-website.json</summary>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;AWSTemplateFormatVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2010-09-09&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Create s3 bucket and policy for Porky Website&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;BucketName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Porky bucket website&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;porky-bucket-website&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;MyS3Bucket&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AWS::S3::Bucket&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Porky bucket website&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;BucketName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;Ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BucketName&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;PublicAccessBlockConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;BlockPublicAcls&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;BlockPublicPolicy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;IgnorePublicAcls&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;RestrictPublicBuckets&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;WebsiteConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;IndexDocument&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ErrorDocument&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error.html&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;DeletionPolicy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Retain&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;UpdateReplacePolicy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Retain&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MyS3BucketPolicy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AWS::S3::BucketPolicy&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Bucket&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;Ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyS3Bucket&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;PolicyDocument&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                <span class="string">&quot;s3:GetObject&quot;</span></span><br><span class="line">                            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;Fn::Sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:s3:::$&#123;MyS3Bucket&#125;&quot;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;Fn::Sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:s3:::$&#123;MyS3Bucket&#125;/*&quot;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;AWS&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;*&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></details><p>Now run the cloudformation comand:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation create-stack --stack-name PorkyBucketWebsiteStack --template-body file://./aws-deploy/porky-bucket-website.json --profile infrauser --region ap-southeast-2</span><br></pre></td></tr></table></figure><p>You can also run with <code>update-stack</code> to update.</p><ul><li><a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html">https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-policy-language-overview.html">https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-policy-language-overview.html</a></li></ul><h3 id="Deploy-website"><a href="#Deploy-website" class="headerlink" title="Deploy website"></a>Deploy website</h3><p>Now after publishing your code to <code>./pub</code> deploy it to the bucket.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 sync &#x27;./pub&#x27; &#x27;s3://ums-audits&#x27; --acl public-read --profile infrauser --region ap-southeast-2</span><br></pre></td></tr></table></figure><p>The DNS is avalible from the AWS Console -&gt; <code>Amazon S3</code> -&gt; <code>Buckets/porky-bucket-website</code> -&gt; <code>Properties</code> -&gt; <code>Static website hosting</code></p><p>By default this will not have HTTPS.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html">https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html</a></li><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-https-requests-s3/">https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-https-requests-s3/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building The IndyMill (Shopping List)</title>
      <link href="/2023/02/cnc-machine-my-indymill-shoppinglist/"/>
      <url>/2023/02/cnc-machine-my-indymill-shoppinglist/</url>
      
        <content type="html"><![CDATA[<p>2023 is the year I build this machine! Edit - turned out to be 2024 :D</p><p>This is a space for me to keep track and potentially help other people! I bought <a href="https://www.youtube.com/@nikodembartnik">Nikodem</a>‘s <a href="https://indystry.cc/indymill/">build instructions</a> and will follow them along with his <a href="/2021/03/cnc-machine-scratch-build-indymill/">videos</a>. </p><p>Often I cant remember the name of some part and just need a visual reference to the name or to take notes of things that I learn about the part, CNC is a whole new world to me.</p><p>Additionally these parts are expensive so as I buy the parts the list below helps me keep track. Most of these parts from aliexpress.com and are generics but for a home, none commercial project its fine.</p><p><img src="/d/cnc-machine/xyz-axis.png" alt="XYZ Axis - Cartesian Coordinate System"></p><h2 id="Electronics"><a href="#Electronics" class="headerlink" title="Electronics"></a>Electronics</h2><table><thead><tr><th>Part</th><th>Details</th></tr></thead><tbody><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/tb6600_00.jpg" width="200px" /></td><td>TB6600 stepper drivers<br>Default microstep value is 8 <br><a href="https://www.aliexpress.com/item/4000237610563.html">https://www.aliexpress.com/item/4000237610563.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/nema23.jpg" width="200px" /></td><td>Nema23 stepper motors with 8mm shaft and a step angle of 1.8 degrees, Only 4 are needed for the Indymill but I wanted to test with and have a spare<br><a href="https://www.aliexpress.com/item/32996003992.html">https://www.aliexpress.com/item/32996003992.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/500w-spindle.jpg" width="200px" /></td><td>500 Watt Spindle<br>Collets to change the size of the accepted bit<br>Powers supply for the spindle with potentiometer (controls rotation speed) <br><a href="https://www.aliexpress.com/item/4000182313184.html">https://www.aliexpress.com/item/4000182313184.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/indyshield.jpg" width="200px" /></td><td>IndyShield – CNC Arduino Shield designed by Nikodem<br><a href="https://indystry.cc/product/indyshield-cnc-arduino-shield/">https://indystry.cc/product/indyshield-cnc-arduino-shield/</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/20awg-6pin.jpg" width="200px" /></td><td>20 AWG 5A, 20 meters, 6 pin, some of which I split, some I kept together for the connection from electronics box to the machine<br><a href="https://www.aliexpress.com/item/1005006787593308.html">https://www.aliexpress.com/item/1005006787593308.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/20awg-2pin-shielded.jpg" width="200px" /></td><td>20 AWG twisted pair shielded cable, 10 meters, 2 pin, this was needed for the end stops as the other wires gennerated <a href="https://en.wikipedia.org/wiki/Electromagnetic_interference">Electromagnetic interference (EMI)</a><br><a href="https://www.aliexpress.com/item/1005004178571358.html">https://www.aliexpress.com/item/1005004178571358.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/20awg-silicone-wire.jpg" width="200px" /></td><td>20 AWG silicone wire, 10 meters<br><a href="https://www.aliexpress.com/item/1005007391168450.html">https://www.aliexpress.com/item/1005007391168450.html</a></td></tr></tbody></table><p>I didnt need this much wire but I did want to have different colours for the build to match the diagrams, it wont go to waste in my workshop and I wanted to experiment with silicone vs PVC covering, I liked both! </p><h2 id="3D-Printed-Parts"><a href="#3D-Printed-Parts" class="headerlink" title="3D Printed Parts"></a>3D Printed Parts</h2><p>PLA at 40%, you can buy them from Nikodem at <a href="https://indystry.cc/product/indymill-3d-printed-parts/">https://indystry.cc/product/indymill-3d-printed-parts/</a>. He also provided them as a free download if you want to print yourself <a href="https://indystry.cc/wp-content/uploads/2021/08/IndyMill-STL.zip">https://indystry.cc/wp-content/uploads/2021/08/IndyMill-STL.zip</a> or <a href="https://github.com/NikodemBartnik/IndyMill/tree/master/3D%20Printed">https://github.com/NikodemBartnik/IndyMill/tree/master/3D%20Printed</a></p><p>I experimented with ASA which seemed to work but one part cracked when putting it together, probably just a poor print orientation on my part. If I do them again Id use PETG.</p><table><thead><tr><th>Part</th><th>Details</th></tr></thead><tbody><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-6000_holder.jpg" width="200px" /></td><td>6000 holder.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-ball_screw_block_X_axis_flap.jpg" width="200px" /></td><td>Ball screw block X axis flap.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-ball_screw_block_X_axis.jpg" width="200px" /></td><td>Ball screw block X axis.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-ball_screw_block_Y_axis_flap.jpg" width="200px" /></td><td>Ball screw block Y axis flap.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-ball_screw_block_Y_axis.jpg" width="200px" /></td><td>Ball screw block Y axis.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-X_axis_nut_holder.jpg" width="200px" /></td><td>X axis nut holder.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-Y_axis_nut_holders.jpg" width="200px" /></td><td>Y axis nut holder left.stl &amp; Y axis nut holder right.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-Z_axis_bearing_holder.jpg" width="200px" /></td><td>Z axis bearing holder.stl</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/3dp-Z_axis_nut_holder.jpg" width="200px" /></td><td>Z axis nut holder.stl</td></tr></tbody></table><p>Other parts/tools</p><ul><li><a href="https://www.thingiverse.com/thing:2872233">SFU1605 Ball nut pin (holding balls)</a>, this was useful when I needed to swap the ball nut orientation, if your balls end up falling out like mine did, this video helped me understand how to rebuild the ball nut. - <a href="https://www.youtube.com/watch?v=5uwqiWp5prY">Rebuilding &amp;/or Replacing BALL NUTS</a></li><li><a href="https://github.com/NikodemBartnik/IndyMill/blob/master/3D%20Printed/Limit%20switch%20holder.stl">Limit switch holder</a></li><li><a href="https://www.printables.com/model/791186-cable-chain-for-indymill-cnc-machine">Cable chain</a><ul><li>20mm on y-axis</li><li>40mm on z-axis</li></ul></li></ul><h2 id="Mechanical"><a href="#Mechanical" class="headerlink" title="Mechanical"></a>Mechanical</h2><table><thead><tr><th>Part</th><th>Details</th></tr></thead><tbody><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/aluminium profiles.jpg" width="200px" /></td><td>Aluminium profiles (20×40x600,20×40x666,20×80x600mm) <br><a href="https://autoline.nz/product-category/aluminium-t-slot-extrusion/2-series/">https://autoline.nz/product-category/aluminium-t-slot-extrusion/2-series/</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/trapezoidal-lead-screw.jpg" width="200px" /></td><td>Trapezoidal Lead Screw Pitch 2mm Lead 8mm, 800mm, I’ll cut to 220mm<br><a href="https://www.aliexpress.com/item/32507277503.html">https://www.aliexpress.com/item/32507277503.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/ball-screws.jpg" width="200px" /></td><td>Ball screw and nut, SFU1605 600mm (2of), 650mm (1of) <br><a href="https://www.aliexpress.com/item/1005001303680673.html">https://www.aliexpress.com/item/1005001303680673.html</a><br><a href="https://www.aliexpress.com/item/1005001303680673.html">https://www.aliexpress.com/item/1005001303680673.html</a></td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/mgn12h-block.jpg" width="200px" /></td><td>Liner rail block MGN12H, Original Hiwin (12of)<br><a href="https://www.aliexpress.com/item/4001241652307.html">https://www.aliexpress.com/item/4001241652307.html</a><br><br>The difference between MGN12C and MGN12H is the preload and size. MGN12C block is 27mm by 34.7mm with holes 15mm and 20mm appart. MGN12H block is 27mm by 45.4 so its wider and with holes 20mm by 20mm appart. MGN12H a better choice for applications where precision is critical, such as CNC machines. However, the MGN12H is also more expensive than the MGN12C. MGN12C is a good choice for applications where precision is not critical, such as 3D printers. <br>The more expensive <code>Hiwin</code> MGN12H blocks have a pre-load rating if Z0 (no preload at all)</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/linear-rail.jpg" width="200px" /></td><td>Linear Rail MGN12H 600mm (2of), 650mm (2of), 200mm (2of). <code>KGT Factory Store</code> worked with the Original Hiwin blocks, I think its because of the ISO 9001 RoHS compliance they have<br><a href="https://www.aliexpress.com/item/1000007480470.html">https://www.aliexpress.com/item/1000007480470.html</a></td></tr></tbody></table><p>If you buy cheaper none <code>Original Hiwin</code> blocks then buy them with the rails as the tolerances will be tested at the factory, in my experience just because it says MGN12H doesnt mean they will fit 100%.</p><h2 id="Plates"><a href="#Plates" class="headerlink" title="Plates"></a>Plates</h2><p>These plates can be laser cut from 6mm <code>HRMS G250 Steel</code> (can also be 8mm) or water cut from 8mm <code>Aluminium 5083</code> however I went with steel for rigidity and I think the weight will be helpful.</p><p>You can buy the plates from Nikodem at <a href="https://indystry.cc/product/indymill-bare-steel-plates-kit/">https://indystry.cc/product/indymill-bare-steel-plates-kit/</a> or you can have them cut in your own country by downloading the the files and sending them to a cutting workshop <a href="https://indystry.cc/wp-content/uploads/2020/08/IndyMill-DXF.zip">https://indystry.cc/wp-content/uploads/2020/08/IndyMill-DXF.zip</a></p><p>The X and Z axis supports:</p><table><thead><tr><th>Part</th><th>Details</th></tr></thead><tbody><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/z-axis-motor-support.jpg" width="200px" /></td><td>Z Axis Motor Support. Size 78.14 x 124.97</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/x-axis.jpg" width="200px" /></td><td>X Axis. Size 120.00 x 200.00</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/z-axis-rail-supports.jpg" width="200px" /></td><td>Z Axis Rail Support 1 and 2. Size 12.00 x 200.00</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/500W-spindle-plate-z-axis.jpg" width="200px" /></td><td>500W Spindle Plate Z Axis. Size 135.00 x 86.00</td></tr></tbody></table><p>The base and Y axis support:</p><table><thead><tr><th>Part</th><th>Details</th></tr></thead><tbody><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/screw-supports.jpg" width="200px" /></td><td>Screw Support Left and Right. Size 100.00 x 60.00</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/y-axis.jpg" width="200px" /></td><td>Y Axis Left and Right. Size 165.98 x 201.60</td></tr><tr><td><img src="/d/cnc-machine-my-indymill-shoppinglist/motor-support.jpg" width="200px" /></td><td>Motor Support Left and Right. Size 100.00 x 60.00</td></tr></tbody></table><p>I got these laser cut in 6mm steel at <a href="https://lasercutting.nz/">lasercutting.nz</a>, quality and price was pretty good.</p>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> cnc </tag>
            
            <tag> indymill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Benchmark DotNet</title>
      <link href="/2023/01/benchmarkdotnet/"/>
      <url>/2023/01/benchmarkdotnet/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 23/02/2025</strong></p><blockquote><p>“BenchmarkDotNet helps you to transform methods into benchmarks, track their performance, and share reproducible measurement experiments.”</p></blockquote><p>It outputs useful results like the below which help compare methods. The code and examples below are based on <a href="https://www.youtube.com/watch?v=UfjRoshu23w">Nick Chapsas - Stop Using FirstOrDefault in .NET! | Code Cop #021</a>, <a href="https://www.youtube.com/watch?v=Wa3sdKGp3wE">How To Use BenchmarkDotNet - A Beginner’s Guide For C# Benchmarks</a> and the <a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet docs</a></p><p>Some pointers that I thought were useful:</p><ul><li>Consider testing with different .Net versions, .Net9 out performs .Net8 with features like LINQ, this is because MS has invested in LINQ to make it better</li><li>When testing, use larger data sets, ie: 5000 records in an array over 5 and always target the middle, eg: 2500 when Benchmarking</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>These examples below are simply comparing <code>.Find</code> (a method from the list collection) and <code>FirstOrDefault</code> (a LINQ method). Although the examples from Nick’s video focused on which of these methods are faster, my interest is how to use <code>BenchmarkDotNet</code> itself, so I can use it to compare my own algorithms.</p><p>Starting with a clean .Net console app follow these steps, my complete example is at <a href="https://github.com/carlpaton/BenchmarkDemo/tree/main/BenchmarkDotNetDemo">https://github.com/carlpaton/BenchmarkDemo/tree/main/BenchmarkDotNetDemo</a></p><ol><li>Install <code>BenchmarkDotNet</code> (at the time of writing the version was <code>0.14.0</code>)</li><li>Create the test class <code>Benchmarks</code> and decorate it with <code>MemoryDiagnoser(false)</code>, using <code>false</code> will cause the diagnoser to output allocated memory data, but it will ommit the detailed <a href="/2023/09/garbage-collection/">generational Garbage Collection</a> data.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">MemoryDiagnoser(false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Benchmarks</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">int</span>&gt; _rawNumber;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Use the constructor to generate the data as we dont want to test this initialisation, additionally readonly is useful because we dont want to mutate shared test data.</p></li><li><p>Create the tests and decorate with <code>[Benchmark]</code>, these are contrived but help me understand how to use BenchmarkDotNet. The suffix <code>Raw</code> is just to denote that this is working with <a href="/2018/06/value-type-vs-reference-type/">Value types</a> and not <a href="/2018/06/value-type-vs-reference-type/">Reference Types</a>.</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Benchmark</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FindRaw</span>()</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">return</span> _rawNumber.Find(x =&gt; x &gt; <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Benchmark</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">FirstOrDefaultRaw</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _rawNumber.FirstOrDefault(x =&gt; x &gt; <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Run the application as Release with <code>dotnet build --configuration Release</code> and observe the outputs, this takes a wee while, its interesting to see the drastic improvements by just changing the .Net version, watch Nicks video to understand why, he explains it far better than I ever could.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.NET 9</span><br><span class="line">| Method            | Mean     | Error   | StdDev  | Allocated |</span><br><span class="line">|------------------ |---------:|--------:|--------:|----------:|</span><br><span class="line">| FindRaw           | 423.4 ns | 5.62 ns | 5.25 ns |         - |</span><br><span class="line">| FirstOrDefaultRaw | 172.8 ns | 2.29 ns | 2.14 ns |         - |</span><br><span class="line"></span><br><span class="line">.NET 8</span><br><span class="line">| Method            | Mean       | Error    | StdDev   | Allocated |</span><br><span class="line">|------------------ |-----------:|---------:|---------:|----------:|</span><br><span class="line">| FindRaw           |   471.0 ns |  3.65 ns |  3.41 ns |         - |</span><br><span class="line">| FirstOrDefaultRaw | 1,163.8 ns | 17.95 ns | 16.79 ns |      40 B |</span><br></pre></td></tr></table></figure><p>Summary of what these columns mean</p><ul><li><code>Method</code> lists the names of the methods that were benchmarked</li><li><code>Mean</code> average execution time of the method, measured in nanoseconds (ns), lower mean indicates better performance</li><li><code>Error</code> margin of error for the mean, represents the uncertainty in the measured mean, smaller error indicates more precise results</li><li><code>StdDev</code> Standard Deviation measured execution times, indicates the variability or spread of the results, smaller standard deviation means the execution times were more consistent</li><li><code>Allocated</code> amount of memory allocated by the method during its execution, “40 B” means 40 bytes allocated and dash (-) means no memory allocation</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> software testing </tag>
            
            <tag> benchmarks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Relic</title>
      <link href="/2023/01/newrelic/"/>
      <url>/2023/01/newrelic/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 30/10/2024</strong></p><p><img src="/d/newrelic/new-relic-hoon.png" alt="New Relic Hoon"></p><p>I needed to understand how to functionally use <a href="https://one.newrelic.com/">New Relic</a>, the below are my notes I made in sequence while having a play. The accounts I created are free and I tried to use <a href="https://aws.amazon.com/free/">free tier AWS infastructure</a>.</p><p>I found the new relic docs linked below really useful</p><ul><li><a href="https://docs-preview.newrelic.com/docs/quick-launch-guide">New Relic quick launch guide</a></li><li><a href="https://docs.newrelic.com/docs/new-relic-solutions/new-relic-one/core-concepts/new-relic-explorer-view-performance-across-apps-services-hosts/">New Relic Explorer: View performance across apps, services, hosts</a></li></ul><h2 id="Create-Account"><a href="#Create-Account" class="headerlink" title="Create Account"></a>Create Account</h2><p>This gives reporting, alerts and somewhere for your agent to push its logs to. You will need to get your licence key for the agent.</p><ul><li><a href="https://newrelic.com/signup">https://newrelic.com/signup</a></li><li><a href="https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/">https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/</a></li></ul><h2 id="Agent-configuration-Dockerfile"><a href="#Agent-configuration-Dockerfile" class="headerlink" title="Agent configuration (Dockerfile)"></a>Agent configuration (Dockerfile)</h2><p>You need to install an New Relic agent (this feeds data to your account). Using a base image like <a href="https://hub.docker.com/_/microsoft-dotnet-sdk">mcr.microsoft.com/dotnet/sdk:6.0</a> you can create your Dockerfile and install the <a href="https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/linux-installation/install-infrastructure-monitoring-agent-linux/">agent manually</a></p><p>I built a working example and published the source to <a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Dockerfile#L21">github.com/carlpaton/NewRelicHoon</a></p><p>This examples below are based on <a href="https://docs.newrelic.com/install/dotnet/?deployment=linux&docker=yesDocker">docs.newrelic.com</a> and I have no idea what <code>548C16BF</code> is or means… but it works :D/</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Install the agent</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y wget ca-certificates gnupg \</span><br><span class="line">&amp;&amp; echo &#x27;deb http://apt.newrelic.com/debian/ newrelic non-free&#x27; | tee /etc/apt/sources.list.d/newrelic.list \</span><br><span class="line">&amp;&amp; wget https://download.newrelic.com/548C16BF.gpg \</span><br><span class="line">&amp;&amp; apt-key add 548C16BF.gpg \</span><br><span class="line">&amp;&amp; apt-get update \</span><br><span class="line">&amp;&amp; apt-get install -y newrelic-dotnet-agent</span><br></pre></td></tr></table></figure><p>Notes: </p><ul><li><code>CORECLR_PROFILER</code> is not a secret, this is fom the <a href="https://docs.newrelic.com/install/dotnet/?deployment=linux&docker=yesDocker">New Relic .Net docs</a>.</li><li>The key shown below as <code>INSERT_NEW_RELIC_LICENSE_KEY</code> will look something like <code>e0a8dd84aa0a8ddd444sdd24wdasdad3fsasd65edeNRAL</code> and you can get it from your account.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable the agent</span><br><span class="line">ENV CORECLR_ENABLE_PROFILING=1 \</span><br><span class="line">CORECLR_PROFILER=&#123;36032161-FFC0-4B61-B559-F6C5D41BAE5A&#125; \</span><br><span class="line">CORECLR_NEWRELIC_HOME=/usr/local/newrelic-dotnet-agent \</span><br><span class="line">CORECLR_PROFILER_PATH=/usr/local/newrelic-dotnet-agent/libNewRelicProfiler.so \</span><br><span class="line">NEW_RELIC_LICENSE_KEY=INSERT_NEW_RELIC_LICENSE_KEY \</span><br><span class="line">NEW_RELIC_APP_NAME=INSERT_YOUR_APP_NAME</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.newrelic.com/install/dotnet/">https://docs.newrelic.com/install/dotnet/</a></li><li><a href="https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/linux-installation/install-infrastructure-monitoring-agent-linux/">https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/linux-installation/install-infrastructure-monitoring-agent-linux/</a></li></ul><details>  <summary>These were some of the logs from the containers console</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">[1/Feb/2023:03:26:45] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:03:26:45] Connection id &quot;0HMO0P632DR5U&quot;, Request id &quot;0HMO0P632DR5U:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:03:26:45] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:03:26:45] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:03:26:45] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:03:26:45] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:03:26:45] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:26:45] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:26:45] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:03:31:39] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:03:31:39] Connection id &quot;0HMO0P632DRBI&quot;, Request id &quot;0HMO0P632DRBI:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:03:31:39] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:03:31:39] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:03:31:39] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:03:31:39] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:03:31:39] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:31:39] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:31:39] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:03:31:41] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:03:31:41] Connection id &quot;0HMO0P632DRBI&quot;, Request id &quot;0HMO0P632DRBI:00000005&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:03:31:41] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:03:31:41] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:03:31:41] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:03:31:41] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:03:31:41] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:31:41] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:31:41] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:03:56:47] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:03:56:47] Connection id &quot;0HMO0P632DS89&quot;, Request id &quot;0HMO0P632DS89:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:03:56:47] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:03:56:47] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:03:56:47] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:03:56:47] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:03:56:47] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:56:47] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:56:47] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:03:56:49] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:03:56:49] Connection id &quot;0HMO0P632DS8B&quot;, Request id &quot;0HMO0P632DS8B:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:03:56:49] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:03:56:49] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:03:56:49] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:03:56:49] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:03:56:49] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:56:49] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:03:56:49] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:04:01:39] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:04:01:39] Connection id &quot;0HMO0P632DSDR&quot;, Request id &quot;0HMO0P632DSDR:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:04:01:39] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:04:01:39] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:04:01:39] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:04:01:39] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:04:01:39] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:04:01:39] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:04:01:39] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:04:06:47] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:04:06:47] Connection id &quot;0HMO0P632DSJM&quot;, Request id &quot;0HMO0P632DSJM:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:04:06:47] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:04:06:47] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:04:06:47] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:04:06:47] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:04:06:47] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:04:06:47] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:04:06:47] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br><span class="line">[1/Feb/2023:04:21:39] [41m[30mfail[39m[22m[49m: Microsoft.AspNetCore.Server.Kestrel[13]</span><br><span class="line">[1/Feb/2023:04:21:39] Connection id &quot;0HMO0P632DT4L&quot;, Request id &quot;0HMO0P632DT4L:00000003&quot;: An unhandled exception was thrown by the application.</span><br><span class="line">[1/Feb/2023:04:21:39] System.Exception: some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</span><br><span class="line">[1/Feb/2023:04:21:39] at NewRelicHoon.Controllers.PingController.Get() in /src/Controllers/PingController.cs:line 16</span><br><span class="line">[1/Feb/2023:04:21:39] at lambda_method467(Closure , Object , Object[] )</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()</span><br><span class="line">[1/Feb/2023:04:21:39] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()</span><br><span class="line">[1/Feb/2023:04:21:39] --- End of stack trace from previous location ---</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeFilterPipelineAsync&gt;g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:04:21:39] at NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware.Invoke(HttpContext context)</span><br><span class="line">[1/Feb/2023:04:21:39] at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)</span><br></pre></td></tr></table></figure></details><h2 id="Synthetic-Monitor"><a href="#Synthetic-Monitor" class="headerlink" title="Synthetic Monitor"></a>Synthetic Monitor</h2><p>To get some data into the account (instead of running the URLs myself) I added some simple synthetic monitors. Pretty sure each have their usage but these would be the ones I would focuse on first if I needed some components monitored.</p><p>However the UI had several others:</p><p><img src="/d/newrelic/synthetic-monitoring-type.png" alt="Synthetic Monitoring Type"></p><ul><li><a href="https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/">Synthetic monitoring best practices guide</a></li></ul><h3 id="Avalibility"><a href="#Avalibility" class="headerlink" title="Avalibility"></a>Avalibility</h3><p><strong>Ping</strong> - Simple ping using cURL (avalibility ping endpoint)</p><p>For my tests I just used a ping monitor for both <a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Controllers/PingController.cs#L10">/ping</a> and <a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Controllers/PingController.cs#L21">/health</a>. I suspected them to fail 50% of the time as my code throws an error based on <a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Controllers/PingController.cs#L14">DateTime.Now.Second % 2 == 0</a> and my brain said there are 29 even numbers and 30 even numbers so surely it would be 50% :D</p><p>I was wrong and saw a higher success rate. I guess this is because I set the periods to 5 minutes and we cannot guarantee the second it will call. Meh too much math/statistics for this old brain.</p><p><img src="/d/newrelic/synthetic-monitoring.png" alt="Synthetic Monitoring"></p><h3 id="User-flow-functionality"><a href="#User-flow-functionality" class="headerlink" title="User flow / functionality"></a>User flow / functionality</h3><p><strong>Scripted browser</strong> - Full scripted browser test of user flow / functionality (page loads with user interactions)</p><ul><li><a href="https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/scripting-monitors/introduction-scripted-browser-monitors/">Introduction to scripted browser monitors</a></li></ul><h3 id="Endpoint-availability"><a href="#Endpoint-availability" class="headerlink" title="Endpoint availability"></a>Endpoint availability</h3><p><strong>Scripted API</strong> - Uses an HTTP client to monitor remote API endpoints (REST, healthcheck endpoint, allows credentials etc).</p><p>You can add secrets using the <code>Insert secure credential</code> option in the UI, you then access them as <code>$secure.CLIENT_SECRET</code>. The authorisation service call is using <a href="/2020/12/oauth2-client-credentials-flow/">OAuth2 Client Credentials Flow</a>. Then see <a href="https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/scripting-monitors/import-nodejs-modules/">Import Node.js modules</a> for help importing.</p><details>  <summary>Example node 10 Runtime script</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> authorisationService = &#123;</span><br><span class="line">    <span class="attr">uri</span>: <span class="string">&#x27;https://authorisation-service.local/token&#x27;</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">user</span>: $secure.<span class="property">CLIENT_NAME</span>,</span><br><span class="line">        <span class="attr">pass</span>: $secure.<span class="property">CLIENT_SECRET</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">formData</span>: &#123;</span><br><span class="line">        <span class="attr">grant_type</span>: <span class="string">&#x27;client_credentials&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> healthCheck = <span class="keyword">function</span>(<span class="params">err, response, token</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tokenBody = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(token);</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        <span class="attr">uri</span>: <span class="string">&#x27;https://newrelichoon.c4gqqjqcosehs.ap-southeast-2.cs.amazonlightsail.com/health&#x27;</span>,</span><br><span class="line">        <span class="attr">auth</span>: &#123;</span><br><span class="line">            <span class="attr">bearer</span>: tokenBody.<span class="property">access_token</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    request.<span class="title function_">get</span>(options, <span class="keyword">function</span> (<span class="params">err, response</span>) &#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(response.<span class="property">statusCode</span>, <span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.<span class="title function_">post</span>(</span><br><span class="line">    authorisationService,</span><br><span class="line">    healthCheck</span><br><span class="line">);</span><br></pre></td></tr></table></figure></details><h2 id="Query-your-data"><a href="#Query-your-data" class="headerlink" title="Query your data"></a>Query your data</h2><p>I let the <code>Synthetic Monitor</code> above run for a weekend to get some data into events. There are <strong>event types</strong> (think of these as a table) and their <strong>dimensions</strong> of interest (think of these as columns in a table). Note that there are different <a href="https://docs.newrelic.com/docs/data-apis/manage-data/manage-data-retention/">data retention models</a> for events based on your payment model, looks like for free accounts like mine its 8 days before my events will be deleted.</p><ul><li><a href="https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/get-started/introduction-nrql-new-relics-query-language/">Introduction to NRQL: the language of data</a></li><li><a href="https://docs.newrelic.com/docs/query-your-data/explore-query-data/browse-data/introduction-data-explorer/">Introduction to the metrics and events data explorer</a></li><li><a href="https://docs.newrelic.com/docs/query-your-data/explore-query-data/query-builder/introduction-query-builder/">Introduction to the query builder</a></li><li><a href="https://docs.newrelic.com/docs/data-apis/understand-data/new-relic-data-types/">New Relic data types: metrics, events, logs, and traces (MELT)</a></li></ul><h3 id="Log-event-type"><a href="#Log-event-type" class="headerlink" title="Log (event type)"></a>Log (event type)</h3><blockquote><p>“In New Relic, a log event refers to the information that is captured and stored in log statements generated by an application or system. Log events can contain a variety of information, such as messages, performance metrics, error messages, and debug information. In New Relic, log events can be captured from various sources, including log files, APIs, and agent-based integrations. These events are then stored in New Relic’s log management platform, where they can be searched, analyzed, and visualized for troubleshooting and performance monitoring purposes. The specific format and structure of log events in New Relic may vary depending on the logging framework or tool being used and the type of application or system being monitored.”</p></blockquote><p>This didnt show me endpoints so I would guess its for application logs as a whole. The following are columns and their example data results I could see.</p><p>Example potentially useful query for dashboard / alert base on the below columns and their values.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM Log FACET `entity.name` WHERE level = &#x27;ERROR&#x27; SINCE 30 MINUTES AGO TIMESERIES</span><br></pre></td></tr></table></figure><ul><li><code>entity.name</code><ul><li>This is the docker config name <a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Dockerfile#L35">NEW_RELIC_APP_NAME=NewRelicHoon</a></li></ul></li><li><code>level</code><ul><li><code>ERROR</code></li></ul></li><li><code>error.class</code><ul><li><code>System.Exception</code> (<a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Controllers/PingController.cs#L18">code</a>)</li></ul></li><li><code>error.message</code><ul><li><code>some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</code> (<a href="https://github.com/carlpaton/NewRelicHoon/blob/main/src/api/Controllers/PingController.cs#L18">code</a>)</li></ul></li></ul><p><img src="/d/newrelic/log-event-type.png" alt="Log Event type"></p><h3 id="Span-event-type"><a href="#Span-event-type" class="headerlink" title="Span (event type)"></a>Span (event type)</h3><blockquote><p>“A “Span” event in New Relic is part of the Distributed Tracing feature offered by New Relic. Distributed tracing is a method of tracking the behavior of a complex, distributed system by recording information about the individual steps or segments of a transaction as it travels across different components of the system. A “Span” in this context represents a single, distinct segment of a transaction and the information recorded about it, such as its start and end times, its duration, and any associated metadata. Spans are usually generated by instrumenting the code of an application or by using a supported tracing library. The collected span events can be analyzed in New Relic to provide insights into the performance and behavior of a distributed system.” - <a href="https://docs.newrelic.com/attribute-dictionary/?event=Span">Span events</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM Span FACET `request.uri` SINCE 30 MINUTES AGO TIMESERIES</span><br><span class="line">SELECT count(*) FROM Span FACET `response.status` SINCE 30 MINUTES AGO TIMESERIES</span><br></pre></td></tr></table></figure><p>Summary of some dimensions (columns)</p><ul><li><code>request.method</code><ul><li><code>GET</code></li></ul></li><li><code>request.uri</code><ul><li><code>/</code>, <code>/health</code>, <code>/ping</code></li></ul></li><li><code>response.status</code><ul><li><code>404</code>, <code>405</code>, <code>500</code></li></ul></li><li><code>service.name</code><ul><li><code>NewRelicHoon</code></li></ul></li></ul><p><img src="/d/newrelic/span-event-type.png" alt="Span Event type"></p><h3 id="SyntheticCheck-event-type"><a href="#SyntheticCheck-event-type" class="headerlink" title="SyntheticCheck (event type)"></a>SyntheticCheck (event type)</h3><blockquote><p>“SyntheticCheck returns metrics from one run of a specific monitor. These metrics include duration information for the monitor, location of the monitor check, size of the request and response headers, the type of monitor, and a timestamp..” - <a href="https://docs.newrelic.com/attribute-dictionary/?event=SyntheticCheck">SyntheticCheck events</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM SyntheticCheck SINCE 30 MINUTES AGO TIMESERIES</span><br></pre></td></tr></table></figure><ul><li><code>typeLabel</code><ul><li><code>Ping</code></li></ul></li><li><code>error</code><ul><li><code>HTTPError: Server replied with a HTTP 500 response code</code></li></ul></li></ul><p><img src="/d/newrelic/syntheticcheck-event-type.png" alt="Synthetic Check Event type"></p><h3 id="SyntheticRequest-event-type"><a href="#SyntheticRequest-event-type" class="headerlink" title="SyntheticRequest (event type)"></a>SyntheticRequest (event type)</h3><blockquote><p>“SyntheticRequest returns results from individual HTTP requests made during a check. The data gathered includes job information, location, type of content for request, duration information, request size, and page load information.” - <a href="https://docs.newrelic.com/attribute-dictionary/?event=SyntheticRequest">SyntheticRequest events</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM SyntheticRequest FACET path SINCE 30 MINUTES AGO TIMESERIES</span><br></pre></td></tr></table></figure><ul><li><code>path</code><ul><li><code>/health</code>, <code>/ping</code></li></ul></li></ul><p><img src="/d/newrelic/syntheticrequest-event-type.png" alt="Synthetic Request Event type"></p><h3 id="Transation-event-type"><a href="#Transation-event-type" class="headerlink" title="Transation (event type)"></a>Transation (event type)</h3><blockquote><p>“A “Transaction” event in New Relic is a high-level representation of a user request or a sequence of requests that are executed to complete a specific task. A transaction event in New Relic contains information about the start and end times of the transaction, the duration, and any associated metadata, such as the name of the transaction, the status code, and the URL.</p></blockquote><p>In New Relic, transactions are generated by instrumenting the code of an application or by using a supported agent. The collected transaction events can be analyzed in New Relic to provide insights into the performance and behavior of an application, including the response time, error rate, and throughput.</p><p>By analyzing transaction events, developers and operations teams can identify bottlenecks, slowdowns, and other performance issues in their applications and infrastructure, and use the information to make informed decisions about how to optimize and improve their systems.”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM Transaction FACET `request.method` SINCE 30 MINUTES AGO TIMESERIES</span><br></pre></td></tr></table></figure><ul><li><code>request.method</code><ul><li><code>GET</code>, <code>HEAD</code></li></ul></li><li><code>request.uri</code><ul><li><code>/</code>, <code>/ping</code>, <code>/health</code></li></ul></li><li><code>response.status</code><ul><li><code>404</code>, <code>405</code>, <code>500</code>, <code>200</code></li></ul></li><li><code>error</code><ul><li><code>true</code></li></ul></li></ul><p><img src="/d/newrelic/transation-event-type.png" alt="Transation Event type"></p><h3 id="TransationError-event-type"><a href="#TransationError-event-type" class="headerlink" title="TransationError (event type)"></a>TransationError (event type)</h3><blockquote><p>“A “TransactionError” event in New Relic is a type of transaction event that represents an error or exception that occurred during the execution of a transaction. A transaction error event contains information about the transaction that caused the error, such as the transaction name, the error message, the stack trace, and any associated metadata.</p></blockquote><p>In New Relic, transaction error events are generated by instrumenting the code of an application or by using a supported agent. The collected transaction error events can be analyzed in New Relic to provide insights into the sources and causes of errors in an application.</p><p>By analyzing transaction error events, developers and operations teams can identify and troubleshoot errors in their applications, and use the information to make informed decisions about how to improve the reliability and stability of their systems.”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM TransactionError FACET `error.message` SINCE 30 MINUTES AGO TIMESERIES</span><br></pre></td></tr></table></figure><ul><li><code>error.message</code><ul><li><code>405</code>, <code>500</code>, <code>some sadness happend because your code is trash. Do better before ChatGPT replaces your ass.</code></li></ul></li><li><code>request.method</code><ul><li><code>HEAD</code>, <code>GET</code></li></ul></li><li><code>request.uri</code><ul><li><code>/ping</code>, <code>/health</code></li></ul></li><li><code>response.status</code><ul><li><code>405</code>, <code>500</code></li></ul></li><li><code>transactionName</code><ul><li><code>WebTransaction/StatusCode/405</code>, <code>WebTransaction/MVC/Ping/Get</code>, <code>WebTransaction/MVC/Ping/GetHealth</code></li></ul></li><li><code>transactionUiName</code><ul><li><code>/405</code>, <code>/Ping/Get</code>, <code>/Ping/GetHealth</code></li></ul></li></ul><p><img src="/d/newrelic/transationerror-event-type.png" alt="Transation Error Event type"></p><h2 id="Alerts-amp-AI"><a href="#Alerts-amp-AI" class="headerlink" title="Alerts &amp; AI"></a>Alerts &amp; AI</h2><p>Application Performance Monitoring or APM (this allows for nrql queries to be run and reported on). This is useful for things like <code>did the endpoint throw errors three times in last two hours</code> - then alert! </p><ol><li>Create <code>Alert conditions (Policies)</code>. This can be used to split int groups like: </li></ol><ul><li><code>Production</code></li><li><code>UAT</code> </li><li>and other groups like <code>PageDuty Alerts</code></li></ul><ol start="2"><li>Create subset of alerts that belong to the policy</li></ol><ul><li>Here you would use the event queries (nrql) figured out in <code>Query your data</code> above to count events and ultimately alert on them.</li></ul><h2 id="Dashboards"><a href="#Dashboards" class="headerlink" title="Dashboards"></a>Dashboards</h2><p>The dashboard would be useful to see common sadness at a glance (potentially post a deployment). I simply added a test dashbord using the <code>TransationError (event type)</code> NRQL statment above to peek at 405 and 500 errors over a period of time.</p><p><img src="/d/newrelic/test-dashboard.png" alt="Test Dashboard"></p><ul><li><a href="https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards/">Introduction to dashboards</a></li></ul><h2 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a>Terraform</h2><p>see <a href="/2024/10/newrelic_with_terraform/">New Relic With Terraform</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> infrastructure as code </tag>
            
            <tag> newrelic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MethodTimer Fody</title>
      <link href="/2023/01/methodtimer-fody/"/>
      <url>/2023/01/methodtimer-fody/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 28/01/2025</strong></p><blockquote><p>“Use Case: Simplest way to measure how long a method on your code takes to execute, this is helpful for logging, profiling and general performance measurement. Often there is degradation over time and its useful to compare how long execution takes.”</p></blockquote><p>The code used in this post can be found at <a href="https://github.com/carlpaton/BenchmarkDemo">https://github.com/carlpaton/BenchmarkDemo</a>, These examples are based on work done by <a href="https://www.youtube.com/watch?v=xlqcT4NSrZw">Nick Chapsas - The Easiest Way to Measure Your Method’s Performance in C#</a> and the <a href="https://github.com/Fody/MethodTimer/blob/master/readme.md">Fody MethodTimer docs</a>.</p><h2 id="Stopwatch-classic-timer-way"><a href="#Stopwatch-classic-timer-way" class="headerlink" title="Stopwatch (classic timer way)"></a>Stopwatch (classic timer way)</h2><p>This was how I learnt how to measure things using a Stopwatch</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MyMethod</span>()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> sw = Stopwatch.StartNew();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> UnitOfWorkAsync();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        sw.Stop();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;MyMethod took <span class="subst">&#123;sw.ElapsedMilliseconds&#125;</span>ms (<span class="subst">&#123;sw.Elapsed&#125;</span>)ts&quot;</span>);</span><br><span class="line">        <span class="comment">// Elapsed is a timespace, that would be more accurate</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As an example this could show <code>MyMethod took 91ms (00:00:00.0916101)ts</code> which is useful but the code now has noise. It really needs to just <code>UnitOfWorkAsync</code>, there are ways to make this smarter with wrappers (<a href="/2024/09/unit-testing-static-methods/">see dapper wrapper example</a>) or <a href="/2020/08/cqrs/">MediatR</a> but MethodTimer.Fody is a simpler implementation.</p><h2 id="MethodTimer-Fody-Demo"><a href="#MethodTimer-Fody-Demo" class="headerlink" title="MethodTimer.Fody Demo"></a>MethodTimer.Fody Demo</h2><p>The library <code>MethodTimer.Fody</code> does some assembly weaving magic, this just takes the compiled code and injects some new behavior, like the stopwatch timer above.</p><ol><li>Install <code>Fody 6.9.1</code> and <code>MethodTimer.Fody 3.2.2</code>, at the time of writing these were the versions I used</li><li>My debug did not immediately start working, I replaced the content of FodyWeavers.xml per the docs with the default, rebuilt and then it worked</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Weavers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MethodTimer</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Weavers</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Add the attribute <code>[Time]</code> to the top of the method, this is just a marker that the weaving magic will look for and change the code</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MethodTimer;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Time</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MyMethod</span>()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> UnitOfWorkAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you look at the IL (intermediate language) it should have simliar code to the stop watch code above, I couldnt get this to work when trying in VS 2022.</p><ol start="4"><li>This will write to the <code>trace</code> logger, so you can view the logs in debug, this is useful if you just want to eyeball some performance times.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FodyExample.MyMethod 96ms</span><br></pre></td></tr></table></figure><h3 id="Interceptor-MethodTimeLogger"><a href="#Interceptor-MethodTimeLogger" class="headerlink" title="Interceptor MethodTimeLogger"></a>Interceptor MethodTimeLogger</h3><p>You can hook into <code>Fody</code> by writing some extensions that the weaver will look for and use when logging</p><ol><li>Define the method</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MethodTimeLogger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">MethodBase baseMethod, TimeSpan ts, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Trace.WriteLine(<span class="string">$&quot;ZZZZ MethodTimeLogger&quot;</span>);</span><br><span class="line">            Trace.WriteLine(<span class="string">$&quot;ZZZZ <span class="subst">&#123;baseMethod.DeclaringType!.Name&#125;</span>.<span class="subst">&#123;baseMethod.Name&#125;</span> <span class="subst">&#123;ts&#125;</span>&quot;</span>);</span><br><span class="line">            Trace.WriteLine(<span class="string">$&quot;ZZZZ message=<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Trace.WriteLine(<span class="string">$&quot;e=<span class="subst">&#123;e.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Call as normal but pass the message param</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Time(<span class="string">&quot;this is the message with value &#123;message&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MyMethod</span>(<span class="params"><span class="built_in">int</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Trace.WriteLine(<span class="string">$&quot;ZZZZ START <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> UnitOfWorkAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>This now logs the same as before but then you have access to the logging details which you can use with what ever metrics persistance your code base uses</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZZZZ MethodTimeLogger</span><br><span class="line">ZZZZ FodyExample.MyMethod 00:00:00.0916101</span><br><span class="line">ZZZZ message=this is the message with value 42</span><br></pre></td></tr></table></figure><p>The message is useful as you can then have some context of the load, here 42 could be creater than 1 so you would take that into account with your metrics.</p><h3 id="MethodTimer-Fody-Example"><a href="#MethodTimer-Fody-Example" class="headerlink" title="MethodTimer.Fody Example"></a>MethodTimer.Fody Example</h3><p>I often struggle to understand the value of something if I have never needed it, although the below is a contrived example, selecting the correct data structure is something most developers will come across in their daily code.</p><ol><li>Consider these methods <code>DemoUseDict(..)</code> and <code>DemoUseLinq()</code>, here I pass in the data structures I want to query as I dont want to measure the creation, only the access. I dont do anything else like console writeline as that takes time, I just want to access the data. The variable <code>s</code> will be immutable, so we know a new string is created everytime but that shouldnt affect the results too much.</li></ol><p><strong>Spoiler Alert</strong>: Front of class nerds will know using a hash like <code>Dictionary</code> will be <em>Big O of 1</em> ie: <code>O(1)</code> which is constant time, while itterating though the <code>List</code> will be <em>Big O of n</em> ie <code>O(n)</code> which is linear. See <a href="/2022/03/big-o-notation/">Big O Notation</a> for more details, lets ignore that for a second and just test the code 🙈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DemoUseDict</span>(<span class="params">Dictionary&lt;<span class="built_in">int</span>, DemoClass&gt; dict</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = dict[i].Name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DemoUseLinq</span>(<span class="params">List&lt;DemoClass&gt; collection</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = collection.FirstOrDefault(x =&gt; x.Id == i).Name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Add the <code>[Time]</code> attribute as before</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Time</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DemoUseDict</span>(<span class="params">Dictionary&lt;<span class="built_in">int</span>, DemoClass&gt; dict</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Time</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DemoUseLinq</span>(<span class="params">List&lt;DemoClass&gt; collection</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create the data upfront, again we are interested in access speed not creation and call the methods</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, DemoClass&gt;();</span><br><span class="line"><span class="keyword">var</span> collection = <span class="keyword">new</span> List&lt;DemoClass&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    dict.Add(i, <span class="keyword">new</span> DemoClass() &#123; Id = i, Name = <span class="string">$&quot;Name<span class="subst">&#123;i&#125;</span>&quot;</span> &#125;);</span><br><span class="line">    collection.Add(<span class="keyword">new</span> DemoClass() &#123; Id = i, Name = <span class="string">$&quot;Name<span class="subst">&#123;i&#125;</span>&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eg = <span class="keyword">new</span> FodyActualExample();</span><br><span class="line">eg.DemoUseDict(dict);</span><br><span class="line">eg.DemoUseLinq(collection);</span><br></pre></td></tr></table></figure><ol start="4"><li>Running the results a few times and running them individually consistently produces results as per the below, its clear the front of class kids were right about the hash but we now have some data to back it up.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FodyActualExample.DemoUseDict 0ms</span><br><span class="line">FodyActualExample.DemoUseDict 0ms</span><br><span class="line">FodyActualExample.DemoUseDict 0ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FodyActualExample.DemoUseLinq 291ms</span><br><span class="line">FodyActualExample.DemoUseLinq 227ms</span><br><span class="line">FodyActualExample.DemoUseLinq 266ms</span><br></pre></td></tr></table></figure><p>Obviously the results would change based on the machines power, usage at the time and this is not an accurate average - but its at least a data driven decision based on a small sample set.</p><p>Also see <a href="/2023/01/benchmarkdotnet/">Benchmark DotNet</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> software testing </tag>
            
            <tag> benchmarks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 Honda CRF230F</title>
      <link href="/2023/01/honda-crf230f/"/>
      <url>/2023/01/honda-crf230f/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>This was a dirty farm bike that we picked up for a great deal and customised for my wife. We are very proud of the results.</p><h2 id="Oils"><a href="#Oils" class="headerlink" title="Oils"></a>Oils</h2><p>10W-40</p>]]></content>
      
      
      
        <tags>
            
            <tag> dirt bike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 KTM 250 EXC TPI</title>
      <link href="/2023/01/ktm-250-exc-tpi/"/>
      <url>/2023/01/ktm-250-exc-tpi/</url>
      
        <content type="html"><![CDATA[<p>Dirt bikes are totally new world for me, this is a space to document the words I learn (mostly so that I dont ask the same questions over and over)</p><h2 id="Oils"><a href="#Oils" class="headerlink" title="Oils"></a>Oils</h2><p>Motorex</p><ul><li>2T Motor oil (Cross Power) fully synthetic (TPI mixture)</li><li>4T Motor oil (Cross Power) fully synthetic (Engine/Clutch) <ul><li>change every 10 hours</li><li>700ml</li></ul></li></ul><h2 id="Clutch"><a href="#Clutch" class="headerlink" title="Clutch"></a>Clutch</h2><ul><li>DDS clutch</li><li>Dampening rubber (sits below the clutch basket)</li><li>Basket bolt is 100Nm torque</li></ul><p><a href="https://www.youtube.com/watch?v=l-5Vf6Hcn0w">https://www.youtube.com/watch?v=l-5Vf6Hcn0w</a></p><h2 id="Forks"><a href="#Forks" class="headerlink" title="Forks"></a>Forks</h2><ul><li>Top tripple clamp M8 -&gt; 17Nm torque</li><li>Bottom tripple clamp M8 -&gt; 12Nm torque</li></ul><h3 id="Oil"><a href="#Oil" class="headerlink" title="Oil"></a>Oil</h3><p>Motorex 5W racing fork oil</p><h3 id="Closed-Chamber-older-models"><a href="#Closed-Chamber-older-models" class="headerlink" title="Closed Chamber (older models)"></a>Closed Chamber (older models)</h3><p>WP XPLOR 7448 (48mm)</p><ul><li>Closed chamber / bladder fork</li><li>Capacity is 375ml per cartridge and 270ml in the mechanism</li></ul><p>Things I replaced are <code>dust seals</code>, <code>inner seals</code> and added <code>neopreene covers</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16,06,11</span><br><span class="line">14,18,7L,59</span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=4K0jI3-RCEY">https://www.youtube.com/watch?v=4K0jI3-RCEY</a></p><h3 id="Open-Chamber-newer-models"><a href="#Open-Chamber-newer-models" class="headerlink" title="Open Chamber (newer models)"></a>Open Chamber (newer models)</h3><p><a href="https://www.youtube.com/watch?v=iGK7DRdjTlQ">https://www.youtube.com/watch?v=iGK7DRdjTlQ</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dirt bike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Potjiekos</title>
      <link href="/2022/08/potjiekos/"/>
      <url>/2022/08/potjiekos/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/potjiekos/oxtail-potjie.jpg" alt="Oxtail Potjie"></p><p>I describe making a potjie (prounounced as <code>poy-key</code>) as making memories with good friends, its a one pot slow cook for 4 to 5 hours and tastes amazing! You can use any ingredience and can be described as looking like a stew.</p><h2 id="Oxtail"><a href="#Oxtail" class="headerlink" title="Oxtail"></a>Oxtail</h2><p>This was my shopping list, Im forgetful and when I want to make this again will need a point of reference. I found all of these ingredience at Newworld. Unfortunaterly fresh vegetables in New Zealand are crazy expensive so this was a bit of a treat for us :)</p><p><strong>Fresh shop</strong></p><ul><li>1.5kg of oxtail</li><li>Potatoes, keep the skin and slice up into quarters (dont make them too small else they disintegrate)<ul><li>Baby Potatoes work better as you dont have to chop them and they less likely to disintegrate</li></ul></li><li>3 Onions (Chopped, I threw in some shallots too)</li><li>Greenbeans (Choped in half with the ends cut off)</li><li>4 Tomatoes (Chopped)</li><li>Patty pans (I could not find these so substituted with baby marrows)</li><li>Celery (Chopped)</li><li>6 Carrots (Chopped)</li><li>Punnet of mushrooms (Chopped)</li><li>2 bay leaves (Whole, you fish these out at the end as they are just for taste)</li><li>Garlic (I just used table spoon of pre chopped from Countdown)</li></ul><p><strong>General ingredience</strong></p><ul><li>Flour</li><li>Olive oil for when browing the meat</li><li>1 cup of water</li><li>1 cup of red wine or port</li><li>1 cup of beef stock</li><li>Salt, peper and what ever spice you like</li><li>Cornstarch, not always needed but helps with thickening if needed</li></ul><p><img src="/d/potjiekos/potjie-raw-ingredience.jpg" alt="Potjie raw ingredience"></p><p><strong>Method</strong></p><p>Ask 10 different people for their opinion on potjie and you will likely get 10 different ideas, find what works for you and experiment. Make memories :)</p><p>This is what worked for me for my first potjie, I had help from a pro but you will be fine!</p><ol><li><p>Put the pot on high heat, throw in a dash of olive oil and brown the oxtail. Do half at a time so cook about 750 gramms so that it browns nicely.</p></li><li><p>Remove the oxtail from the pot and put on a thing layer of flour, you dont have to measure and make it perfect. This is potjie so go by feel and what looks nice for you.</p></li></ol><p><img src="/d/potjiekos/oxtail-potjie-flour.jpg" alt="Browned oxtail with flour"></p><ol start="3"><li><p>Once all the oxtail is browned keep it aside. Use the potjie pot to brown the onions, garlic, celery and carrots. Use a medium heat.</p></li><li><p>Add back the oxtail and your cups of water, red wine and beef stock. Stir a little but not too much, the meat will mash things quickly.</p></li><li><p>Add the potatoes, greenbeans, tomatoes, marrows, mushrooms and stir a little. Remember the more your stir the more you will mash the ingredience.</p></li></ol><p>The idea is to have layers, meat at the bottom with vedge floating above.</p><ol start="6"><li><p>Generously add your spices, bay leaves, salt and peper. With the lid on and the pot nicely simmering your should be able to smell the spice aroma near the lid. If you cannot smell your spices you have not added enough - be like a generous lover ❤️</p></li><li><p>Pop on the lid and let simmer for 4 hours, occasionally check the pot to make sure it is not drying out. You can do this by placing a wooden spoon handle to your closed inner ear and placing the spoon end on the corner of the pots lid - you will be able to hear the simmer without opening the lid and loosing the heat. If it is drying out add water and spice as needed. </p></li><li><p>Towards the end check how thick the sauce is, if needs be thicken with a little cornstarch mixed with water. This step is an art in its own, if you smash it well done - you are a true cook :)</p></li></ol><p>We served with white rice.</p><h2 id="Dumplings"><a href="#Dumplings" class="headerlink" title="Dumplings"></a>Dumplings</h2><p>Dumplings are a great addition to your meal, think of them as bread balls cooked with your potjie.</p><p><img src="/d/potjiekos/dumplings.jpg" alt="dumplings"></p><p><strong>Ingredience</strong></p><ul><li>1 cup flour</li><li>2 tsp baking powder</li><li>2 tbsp dried parsley</li><li>1/2 tsp salt</li><li>1 beaten egg</li><li>1/4 cup milk</li><li>2 tbsp vedgetable oil</li></ul><p><strong>Method</strong></p><ol><li><p>Combine the dry ingredients in a medium sized bowl. In a measuring cup beat together milk, egg and oil.</p></li><li><p>Stir the liquid mixture into the flour mixture. You’ll end up with very thick batter. It shold be very sticky.</p></li><li><p>Drop the batter by the spoonful directly on top of the potjie.</p></li><li><p>Pop on the lid and leave to cook for 20 minutes until they are puffed up and dry looking ontop.</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integration Tests With WebApplicationFactory and Test Containers</title>
      <link href="/2022/07/integration-tests-with-webapplicationfactory-testcontainers/"/>
      <url>/2022/07/integration-tests-with-webapplicationfactory-testcontainers/</url>
      
        <content type="html"><![CDATA[<p>My team are pretty good at building <a href="/2022/01/integration-tests/">integration tests</a>, we use app.settings per environment, powershell and teamcity. Its fairly complicated but works really well. We dont always use <a href="https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests">WebApplicationFactory</a> to bring up our API’s in memory as its not always sensible to do so.</p><p>I was inspired by a video from <a href="https://www.youtube.com/c/Elfocrash">Nick Chapsas</a> titled <a href="https://www.youtube.com/watch?v=8IRNC7qZBmk">The cleanest way to use Docker for testing in .NET</a> to investigate the nuget package <a href="https://github.com/testcontainers/testcontainers-dotnet">Test Containers</a> | <a href="https://www.nuget.org/packages/Testcontainers">Testcontainers 2.1.0</a>.</p><p>Checkout Nick’s <a href="https://nickchapsas.com/p/from-zero-to-hero-integration-testing-in-asp-net-core">From Zero to Hero: Integration testing in ASP.NET Core</a> course - amazing content brother! - Keep coding!</p><h2 id="Problems-faced-with-integration-test"><a href="#Problems-faced-with-integration-test" class="headerlink" title="Problems faced with integration test"></a>Problems faced with integration test</h2><p><a href="https://www.nuget.org/packages/Testcontainers">Testcontainers</a> addresses a few problems faced with integration tests</p><ul><li><p><code>Parallelize integration test execution</code> - Race conditions (collisions) where some tests fail because of orphaned data from another test. Example: A <code>SelectAll</code> may expect 5 records in the database however a preceding <code>Insert</code> may have changed this number to <code>6</code> so the <code>SelectAll</code> will fail its validation as <code>6 &gt; 5</code></p></li><li><p><code>Setup and teardown of the database</code> - Its overhead to have to worry about setting up infastructure outside of the code, another powershell or teamcity step which is just a possible point of failure.</p></li><li><p><code>Create a database specific for test execution</code> - this will be in isolation, so for each test we will create a database using the Testcontainers mechanism.</p></li></ul><h2 id="Integration-Tests"><a href="#Integration-Tests" class="headerlink" title="Integration Tests"></a>Integration Tests</h2><p>The samples assume you already have some integration tests setup, this is a simple CRUD API with integration tests over the controllers. My source code is based on <a href="https://www.youtube.com/watch?v=8IRNC7qZBmk">Nicks video</a> and can be downloaded at <a href="https://github.com/carlpaton/IntegrationTestsWithTestContainers">https://github.com/carlpaton/IntegrationTestsWithTestContainers</a>.</p><p>My test classes are shown below. The problem with integration tests are they dont really customize the core project. Nick describes this as then calling the real database, the problem with this approach is we have test <strong>data remnants</strong> which we could delete after each test execution but that implies we need to have a database running at all times. </p><p>Other systems might be using this so we will run into problems with everyone running this locally and when we try do continuous integration.</p><p>The current <a href="https://github.com/carlpaton/IntegrationTestsWithTestContainers/tree/main/src/CustomerApi.IntegrationTests">integration tests</a> are:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CreateCustomerControllerTests</span><br><span class="line"> - Create_CreatesUser_WhenDataIsValid</span><br><span class="line"> - Create_ReturnsValidationError_WhenDataIsInvalid</span><br><span class="line"></span><br><span class="line">DeleteCustomerControllerTests</span><br><span class="line"> - Delete_DeletesUserByCustomerId_WhenCustomerExists</span><br><span class="line"></span><br><span class="line">GetAllCustomerControllerTests</span><br><span class="line"> - GetAll_ReturnsAllCustomers_WhenTheyExist</span><br><span class="line"></span><br><span class="line">GetCustomerControllerTests</span><br><span class="line"> - Read_ReturnsCustomerById_WhenItExists</span><br><span class="line"></span><br><span class="line">PingControllerTests</span><br><span class="line"> - Ping_ReturnsOk</span><br><span class="line"></span><br><span class="line">UpdateCustomerControllerTests</span><br><span class="line"> - Update_UpdatesTheGivenCustomer_WhenParametersAreValid </span><br></pre></td></tr></table></figure><h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><h3 id="TestBase"><a href="#TestBase" class="headerlink" title="TestBase"></a>TestBase</h3><p>I used <a href="https://github.com/carlpaton/IntegrationTestsWithTestContainers/blob/main/src/CustomerApi.IntegrationTests/Setup/TestBase.cs">TestBase</a> to expose a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient">HttpClient</a> which is created using <a href="https://github.com/carlpaton/IntegrationTestsWithTestContainers/blob/main/src/CustomerApi.IntegrationTests/Setup/CustomerApiFactory.cs">CustomerApiFactory</a> -&gt; <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1">WebApplicationFactory</a> using the method CreateClient.</p><p>All tests then inherit <code>TestBase</code> and use dependency injection to instanciate the <code>CustomerApiFactory</code> using <code>IClassFixture&lt;CustomerApiFactory&gt;</code> which is used to indicate a <a href="/2022/01/integration-tests/">test has per-test-class fixture data</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateCustomerControllerTests</span> : <span class="title">TestBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateCustomerControllerTests</span>(<span class="params">CustomerApiFactory factory</span>) : <span class="title">base</span>(<span class="params">factory</span>)</span> &#123; &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="CustomerApiFactory"><a href="#CustomerApiFactory" class="headerlink" title="CustomerApiFactory"></a>CustomerApiFactory</h3><ol><li><p>To get started install the nuget package <a href="https://www.nuget.org/packages/Testcontainers">Testcontainers 2.1.0</a></p></li><li><p>I use <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1">WebApplicationFactory</a> and the class <code>CustomerApiFactory</code> which would spin up an in-memory version of the <a href="https://github.com/carlpaton/IntegrationTestsWithTestContainers/tree/main/src/CustomerApi">CustomerApi</a>.</p></li><li><p><a href="https://github.com/xunit/xunit/blob/12026778465c166f94521ea634bc923cf05cb3f1/src/xunit.v3.core/IAsyncLifetime.cs#L13">IAsyncLifetime</a> is then used to manage the life time of <a href="https://github.com/testcontainers/testcontainers-dotnet#examples">PostgreSqlTestcontainer</a>. This starts the container in the beginning of the tests and then stops them at the end of the tests using xUnits <a href="https://github.com/xunit/xunit/blob/12026778465c166f94521ea634bc923cf05cb3f1/src/xunit.v3.core/IAsyncLifetime.cs#L13">IAsyncLifetime</a> interface which provides the methods <code>InitializeAsync</code> and <code>DisposeAsync</code> which will run per test execution. As we have this in a collection it will run per class that has tests in it. </p></li></ol><p>This is a great compromise between isolation of tests as its only limited to the collection.</p><ol start="4"><li>I then use override <code>ConfigureWebHost</code> to remove the DatabaseContext instance and replace it with our test instance, which uses the <code>ConnectionString</code> from <code>PostgreSqlTestcontainer</code>.</li></ol><p>The value of this is the port is always unique, this is what the cool kids call an ephemeral container (a special type of container that runs temporarily in an existing Pod to accomplish user-initiated actions). So each test class gets a brand new and clean instance of a <a href="https://hub.docker.com/_/postgres/">postgres</a> database.</p><p>Note that we use <code>ConfigureTestServices</code> instead of <code>ConfigureServices</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerApiFactory</span> : <span class="title">WebApplicationFactory</span>&lt;<span class="title">Program</span>&gt;, <span class="title">IAsyncLifetime</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> PostgreSqlTestcontainer _dbContainer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _appSettingsFile = <span class="string">&quot;appsettings.Test.json&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerApiFactory</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)</span><br><span class="line">            .AddJsonFile(_appSettingsFile)</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line">        _dbContainer = <span class="keyword">new</span> TestcontainersBuilder&lt;PostgreSqlTestcontainer&gt;()</span><br><span class="line">            .WithDatabase(<span class="keyword">new</span> PostgreSqlTestcontainerConfiguration</span><br><span class="line">            &#123;</span><br><span class="line">                Database = _configuration.GetSection(<span class="string">&quot;PostgreSQL:Database&quot;</span>).Get&lt;<span class="built_in">string</span>&gt;(),</span><br><span class="line">                Username = _configuration.GetSection(<span class="string">&quot;PostgreSQL:Username&quot;</span>).Get&lt;<span class="built_in">string</span>&gt;(),</span><br><span class="line">                Password = _configuration.GetSection(<span class="string">&quot;PostgreSQL:Password&quot;</span>).Get&lt;<span class="built_in">string</span>&gt;(),</span><br><span class="line">            &#125;)</span><br><span class="line">            .Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">InitializeAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// start the container per collection</span></span><br><span class="line">        <span class="keyword">return</span> _dbContainer.StartAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we use the new keyword to avoid conflicts with IAsyncDisposable Interface - https://docs.microsoft.com/en-us/dotnet/api/system.iasyncdisposable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> Task <span class="title">DisposeAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// stop the container per collection</span></span><br><span class="line">        <span class="keyword">return</span> _dbContainer.StopAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we override ConfigureWebHost</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureWebHost</span>(<span class="params">IWebHostBuilder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> maxRetryCount = _configuration.GetSection(<span class="string">&quot;PostgreSQL:MaxRetryCount&quot;</span>).Get&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> maxRetryDelay = _configuration.GetSection(<span class="string">&quot;PostgreSQL:MaxRetryDelay&quot;</span>).Get&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">        builder</span><br><span class="line">        .UseEnvironment(<span class="string">&quot;Test&quot;</span>)</span><br><span class="line">        .UseContentRoot(Directory.GetCurrentDirectory())</span><br><span class="line">        .ConfigureAppConfiguration(config =&gt; config.AddJsonFile(_appSettingsFile))</span><br><span class="line">        .ConfigureTestServices(services =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="comment">// We dont really have to do this step, if you register another `DatabaseContext` ontop of this and through DI only resolve 1 you will get the latest</span></span><br><span class="line">            <span class="comment">// Its safer to remove so you know only one instance exists in the DI container</span></span><br><span class="line">            <span class="keyword">var</span> descriptor = services.SingleOrDefault(d =&gt; d.ServiceType == <span class="keyword">typeof</span>(DbContextOptions&lt;DatabaseContext&gt;));</span><br><span class="line">            services.Remove(descriptor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Replace with test instance</span></span><br><span class="line">            services.AddDbContext&lt;DatabaseContext&gt;((serviceProvider, optionsBuilder) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                optionsBuilder.UseNpgsql(</span><br><span class="line">                    _dbContainer.ConnectionString,</span><br><span class="line">                    npgsqlOptionsAction =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        npgsqlOptionsAction.EnableRetryOnFailure(</span><br><span class="line">                            maxRetryCount,</span><br><span class="line">                            TimeSpan.FromSeconds(maxRetryDelay),</span><br><span class="line">                            <span class="literal">null</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>Running the tests now will spin up a container for <a href="https://hub.docker.com/_/postgres/">postgres</a> just for the test collection. This means we can seed any test data we may want during startup and we dont need to worry about clearning it out as the containers are ephemeral.</p></li><li><p>The tests can now run and their container will automagically be spun up &lt;3. Notice each have their own port and cannot be polluted with another tests data. Additionally the containers are deleted by the framework. The is the most hard out nerd thing I’ve seen in a while :D</p></li></ol><p>Under the hood the container orchestration is done by <a href="https://github.com/testcontainers/moby-ryuk">testcontainers / moby-ryuk</a></p><p><img src="/d/integration-tests-with-webapplicationfactory-testcontainers/throw-away-containers-per-test.png" alt="throw-away-containers-per-test"></p><ol start="7"><li>Currently there is support for other databases listed below. For ones that dont exist its possible to use 3rd party packages ontop using the Fluent API described below.</li></ol><p>See <a href="https://github.com/testcontainers/testcontainers-dotnet#pre-configured-containers">https://github.com/testcontainers/testcontainers-dotnet#pre-configured-containers</a> for the latest list.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CouchbaseTestconnectionConfiguration</span><br><span class="line">OracleTestconnectionConfiguration</span><br><span class="line">RedisTestconnectionConfiguration</span><br><span class="line">CouchDbTestconnectionConfiguration</span><br><span class="line">MongoDbTestconnectionConfiguration</span><br><span class="line">MsSqlTestconnectionConfiguration</span><br><span class="line">MySqlTestconnectionConfiguration</span><br></pre></td></tr></table></figure><h2 id="Test-Container-Fluent-API"><a href="#Test-Container-Fluent-API" class="headerlink" title="Test Container Fluent API"></a>Test Container Fluent API</h2><p>The test container framework has a fluent API that allows us to load up any docker image that is not natively supported, this is an example with drawbacks such as static port.</p><p>All of the commands are listed here - <a href="https://github.com/testcontainers/testcontainers-dotnet#supported-commands">https://github.com/testcontainers/testcontainers-dotnet#supported-commands</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private member for test containers using fluent api to construct the builder</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> TestcontainersContainer _dbContainer = </span><br><span class="line">    <span class="keyword">new</span> TestcontainersBuilder&lt;TestcontainersContainer&gt;()</span><br><span class="line">        .WithImage(<span class="string">&quot;postgres:14.4&quot;</span>) <span class="comment">// https://hub.docker.com/_/postgres/</span></span><br><span class="line">        .WithEnvironment(<span class="string">&quot;POSTGRE_USER&quot;</span>, <span class="string">&quot;postgres&quot;</span>)</span><br><span class="line">        .WithEnvironment(<span class="string">&quot;POSTGRE_PASSWORD&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        .WithEnvironment(<span class="string">&quot;POSTGRE_DB&quot;</span>, <span class="string">&quot;mydb&quot;</span>)</span><br><span class="line">        .WithPortBiding(<span class="number">5555</span>, <span class="number">5432</span>) <span class="comment">// 5555 external -&gt; 5432 internal</span></span><br><span class="line">        .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(<span class="number">5432</span>)) <span class="comment">// tells the code to not proceed with anything without having this OK. Example the container is up and running</span></span><br><span class="line">        .Build();</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/testcontainers/testcontainers-dotnet#examples">https://github.com/testcontainers/testcontainers-dotnet#examples</a></li><li><a href="https://www.youtube.com/watch?v=8IRNC7qZBmk">Nick Chapsas : The cleanest way to use Docker for testing in .NET</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests">Integration tests in ASP.NET Core</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Action Filter</title>
      <link href="/2022/07/action-filter/"/>
      <url>/2022/07/action-filter/</url>
      
        <content type="html"><![CDATA[<p>I needed a way to apply a custom <a href="/2021/02/filters-in-asp-net-core/">filter</a> to a single action and didnt want to build authorization policys as the filters were temporary.</p><p>Ideally the examples below should rather validate a <a href="/2022/06/authorization-using-jwt/">JSON Web Token (JWT)</a>, its not best practice to pass the client key and secret with each request but rather exchange these using the <a href="/2020/12/oauth2-client-credentials-flow/">OAuth2 Client Credentials Flow</a>.</p><h2 id="Creating-a-filter"><a href="#Creating-a-filter" class="headerlink" title="Creating a filter"></a>Creating a filter</h2><ol><li>Create the filter using IActionFilter or IAsyncActionFilter.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AuthService.Application.Filters</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValidateClientCredentials</span> : <span class="title">IActionFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> RegisteredClientOptions _registeredClientOptions;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ValidateClientCredentials</span> (<span class="params">IOptions&lt;RegisteredClientOptions&gt; registeredClientOptions</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _registeredClientOptions = registeredClientOptions.Value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext context</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> clientId = context.HttpContext.Request.Headers[<span class="string">&quot;Client-Id&quot;</span>].ToString();</span><br><span class="line">            <span class="keyword">var</span> clientSecret = context.HttpContext.Request.Headers[<span class="string">&quot;Client-Secret&quot;</span>].ToString();</span><br><span class="line">            <span class="keyword">var</span> bffOptions = _registeredClientOptions.PorkyBff;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bffOptions != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                bffOptions.ClientId == clientId &amp;&amp;</span><br><span class="line">                bffOptions.Secret == clientSecret)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Result = <span class="keyword">new</span> ObjectResult(<span class="keyword">new</span> ProblemDetails</span><br><span class="line">            &#123;</span><br><span class="line">                Detail = <span class="string">&quot;Unauthorized&quot;</span>,</span><br><span class="line">                Status = (<span class="built_in">int</span>)HttpStatusCode.Unauthorized</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Register the filter</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AuthService.Application.Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterDependencies</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            services.AddScoped&lt;ValidateClientCredentials&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Apply the filter</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AuthService.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;/credentials&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CredentialsController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">ServiceFilter(typeof(ValidateClientCredentials))</span>]</span><br><span class="line">        [<span class="meta">HttpPatch(<span class="string">&quot;upsert&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> username, [FromBody] CredentialModels updated</span>)</span></span><br><span class="line">        &#123;</span><br></pre></td></tr></table></figure><ol start="4"><li>Now all PATCH requests to <code>/credentials/upsert</code> will need to include header values that match the injected options for:</li></ol><ul><li><code>Client-Id</code></li><li><code>Client-Secret</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> asp.net </tag>
            
            <tag> filters </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chartjs Plugins</title>
      <link href="/2022/06/chartjs-plugins/"/>
      <url>/2022/06/chartjs-plugins/</url>
      
        <content type="html"><![CDATA[<h2 id="Data-Labels"><a href="#Data-Labels" class="headerlink" title="Data Labels"></a>Data Labels</h2><p>I wanted to show the data on each chart so that when they are downloaded the data makes sense.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i chartjs-plugin-datalabels --save</span><br></pre></td></tr></table></figure><p>Not sure if its the best way but I created a component which I then add to the DOM as a fragment containing the config for all charts and the plugins.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChartDataLabels</span> <span class="keyword">from</span> <span class="string">&#x27;chartjs-plugin-datalabels&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">Chart</span> <span class="keyword">as</span> <span class="title class_">ChartJS</span>,</span><br><span class="line">    <span class="title class_">CategoryScale</span>,</span><br><span class="line">    <span class="title class_">LinearScale</span>,</span><br><span class="line">    <span class="title class_">BarElement</span>,</span><br><span class="line">    <span class="title class_">Title</span>,</span><br><span class="line">    <span class="title class_">Tooltip</span>,</span><br><span class="line">    <span class="title class_">Legend</span>,</span><br><span class="line">    <span class="title class_">ArcElement</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;chart.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ChartJS</span>.<span class="title function_">register</span>(</span><br><span class="line">    <span class="comment">// plugin to show data lables</span></span><br><span class="line">    <span class="title class_">ChartDataLabels</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bar</span></span><br><span class="line">    <span class="title class_">CategoryScale</span>,</span><br><span class="line">    <span class="title class_">LinearScale</span>,</span><br><span class="line">    <span class="title class_">BarElement</span>,</span><br><span class="line">    <span class="title class_">Title</span>,</span><br><span class="line">    <span class="title class_">Tooltip</span>,</span><br><span class="line">    <span class="title class_">Legend</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pie</span></span><br><span class="line">    <span class="title class_">ArcElement</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ChartJS</span>.<span class="property">defaults</span>.<span class="title function_">set</span>(<span class="string">&#x27;plugins.datalabels&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#000000&#x27;</span> <span class="comment">// set the data lable colour</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ChartConfig</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChartConfig</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/chartjs/chartjs-plugin-datalabels/blob/master/docs/guide/getting-started.md">https://github.com/chartjs/chartjs-plugin-datalabels/blob/master/docs/guide/getting-started.md</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extra 260 72&quot;</title>
      <link href="/2022/06/extra-260-72-inch/"/>
      <url>/2022/06/extra-260-72-inch/</url>
      
        <content type="html"><![CDATA[<p>A space to keep the learnings of my model.</p><p><img src="/d/extra-260-72-inch/extra-260.jpg" alt="Extra 260 72"></p><h2 id="Ignition-Kill"><a href="#Ignition-Kill" class="headerlink" title="Ignition Kill"></a>Ignition Kill</h2><p>GE3001 Rcexl Opto Kill Switch for Gas Engines</p><ul><li><a href="https://www.hobbyhangar.co.nz/ge3001-rcexl-opto-kill-switch-for-gas-engines">https://www.hobbyhangar.co.nz/ge3001-rcexl-opto-kill-switch-for-gas-engines</a></li></ul><h2 id="Switches"><a href="#Switches" class="headerlink" title="Switches"></a>Switches</h2><p>EMCOTEC HACKER DPSI DUAL BATTERY SWITCH &amp; REGULATOR 5.9-7.2V F3A EDITION</p><ul><li><a href="https://airsail.co.nz/products/a11057?_pos=21&amp;_sid=742237f55&amp;_ss=r">https://airsail.co.nz/products/a11057?_pos=21&amp;_sid=742237f55&amp;_ss=r</a></li></ul><p>Powerbox switches</p><ul><li>Powerbox sensor switch</li><li>Powerbox Sensor V3 (switch)</li><li>Powerbox digiswitch <ul><li><a href="https://firebrandaerorc.co.nz/powerbox-and-emcotec">https://firebrandaerorc.co.nz/powerbox-and-emcotec</a></li></ul></li></ul><p>Cheaper none digital</p><ul><li><a href="https://www.hobbyhangar.co.nz/6starhobby-st4007-heavy-duty-dual-switch-wfuel-dot-black">https://www.hobbyhangar.co.nz/6starhobby-st4007-heavy-duty-dual-switch-wfuel-dot-black</a></li></ul><h2 id="Tanks"><a href="#Tanks" class="headerlink" title="Tanks"></a>Tanks</h2><p>I think my current tank is a 500cc</p><ul><li><a href="https://www.hobbyhangar.co.nz/kuza-kag0246r-red-cap-fuel-tank-10oz-300cc">https://www.hobbyhangar.co.nz/kuza-kag0246r-red-cap-fuel-tank-10oz-300cc</a></li><li><a href="https://www.hobbyhangar.co.nz/kuza-kag0241r-red-cap-fuel-tank-9oz-260cc">https://www.hobbyhangar.co.nz/kuza-kag0241r-red-cap-fuel-tank-9oz-260cc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Authorization Using JSON Web Token (JWT)</title>
      <link href="/2022/06/authorization-using-jwt/"/>
      <url>/2022/06/authorization-using-jwt/</url>
      
        <content type="html"><![CDATA[<p>I needed a quick way to authorize an API request using a JSON Web Token (JWT).</p><ol><li><a href="/2022/04/generate-jwt/">Generate the JWT</a>, this is done in your <code>Authorisation Service</code>.</li></ol><p>Example encoded with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hmacsha256">HmacSha256</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJkMTEwNGQ1MC0yN2NlLTQwZDEtYjc5OS1mZTA4MDczOTU4NzUiLCJzY3JlZW5zIjoidXBsb2FkZmlsZSxmaW5kLGYxbmR0bCxyZXBvcnQsZWFzdGVyIiwibmJmIjoxNjU2MTk5MTIwLCJleHAiOjE2NTY4MDM5MjAsImlhdCI6MTY1NjE5OTEyMCwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwOC8iLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo1MDA2LyJ9.jtT-8Eq3YsqXhr-zCFuk84Jsyo4ldgepZRR1XiSmn1Y</span><br></pre></td></tr></table></figure><p>Decoded using <a href="https://jwt.io/">jwt.io</a> the payload could look as follows, the specification on these properties is <a href="https://datatracker.ietf.org/doc/html/rfc7519">rfc7519</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nameid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d1104d50-27ce-40d1-b799-fe0807395875&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uploadfile,find,f1ndtl,report,easter&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1656199120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1656803920</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1656199120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:5008/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:5006/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The recommended flow to generate and give your application the JWT is <a href="/2020/12/oauth2-authorization-code-flow/">Authorization Code + PKCE</a></p><ol start="2"><li>Include the token in the request, this is done in your <code>Application</code>. The below is a font end application.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getBffUrl &#125; <span class="keyword">from</span> <span class="string">&#x27;../common/EnvTools&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;../common/AuthTools&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getTeamleads</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="title function_">getBffUrl</span>();</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;bearer &#x27;</span> + <span class="title function_">getToken</span>(),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>/teamleads`</span>, options);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>Validate the token, this is done in the <code>Protected Resource</code>. In my example its my applications <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">Backend for Frontend (BFF)</a>.</li></ol><p><strong>Extension method</strong></p><p>Extension method to run as a filter in the request pipeline. This is validating the properies of the JWT along with its issuer signing key. This means the <code>BFF</code> needs to know what secret the <code>Authorisation Service</code> used to encrypt the JWT.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authentication.JwtBearer;</span><br><span class="line"><span class="keyword">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class="line"><span class="keyword">using</span> PorkyBff.Application.Common;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PorkyBff.Application.Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">JwtExtensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddJwtConfig</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, IdentityTokenOptions options</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            services.AddAuthentication(o =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">                o.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">            &#125;)</span><br><span class="line">            .AddJwtBearer(o =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                o.TokenValidationParameters = <span class="keyword">new</span> TokenValidationParameters</span><br><span class="line">                &#123;</span><br><span class="line">                    ValidateIssuer = <span class="literal">true</span>,</span><br><span class="line">                    ValidateAudience = <span class="literal">true</span>,</span><br><span class="line">                    ValidateLifetime = <span class="literal">true</span>,</span><br><span class="line">                    ValidateIssuerSigningKey = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                    ValidIssuer = options.Issuer,</span><br><span class="line">                    ValidAudience = options.Audience,</span><br><span class="line">                    </span><br><span class="line">                    IssuerSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(options.Key))</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Register &amp; Activate</strong></p><p>I added this to my applications <code>Program.cs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var identityTokenOptions = builder.Configuration.GetSection(IdentityTokenOptions.IdentityToken).Get&lt;IdentityTokenOptions&gt;();</span><br><span class="line"></span><br><span class="line">builder.Services.AddJwtConfig(identityTokenOptions);</span><br></pre></td></tr></table></figure><p>.Net 6 has simplified applying the authorisation check into a single extension method <code>.RequireAuthorization</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.UseAuthentication();</span><br><span class="line">app.UseAuthorization();</span><br><span class="line">app.MapControllers().RequireAuthorization();</span><br></pre></td></tr></table></figure><ol start="4"><li>Now all requests to the API need to have a valid token. This can be validated with a simple ping controller</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authorization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PorkyBff.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PingController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;PingController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PingController</span>(<span class="params">ILogger&lt;PingController&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="string">&quot;/ping&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">AllowAnonymous</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Ok(<span class="string">&quot;allow anonymous response&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="string">&quot;/secure-ping&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetSecure</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;Secure ping endpoint called at &#123;timestamp&#125;&quot;</span>, DateTime.UtcNow.ToLongTimeString());</span><br><span class="line">            <span class="keyword">return</span> Ok(<span class="string">&quot;secure response&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/@ajidejibola/authentication-and-authorization-in-net-6-with-jwt-and-asp-net-identity-2566e75851fe">https://medium.com/@ajidejibola/authentication-and-authorization-in-net-6-with-jwt-and-asp-net-identity-2566e75851fe</a></li><li><a href="https://github.com/JiboGithub/StudentTeacherAPI">https://github.com/JiboGithub/StudentTeacherAPI</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Amplify</title>
      <link href="/2022/06/aws-amplify/"/>
      <url>/2022/06/aws-amplify/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“AWS Amplify is a set of purpose-built tools and features that lets frontend web and mobile developers quickly and easily build full-stack applications on AWS”</p></blockquote><ul><li><a href="https://aws.amazon.com/amplify/">https://aws.amazon.com/amplify/</a></li><li><a href="https://docs.amplify.aws/lib/auth/getting-started/q/platform/js/#create-authentication-service">https://docs.amplify.aws/lib/auth/getting-started/q/platform/js/#create-authentication-service</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front End E2E Testing Frameworks</title>
      <link href="/2022/06/fe-e2e-testing-frameworks/"/>
      <url>/2022/06/fe-e2e-testing-frameworks/</url>
      
        <content type="html"><![CDATA[<p>There seem to be a few and I sure do enjoy watching an automated front end test automagically login, navigate around common user journeys and assert the shape of DOM elements.</p><h2 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h2><ul><li>Playwright </li><li>Cypress </li><li>Testcafe</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IMiddleware</title>
      <link href="/2022/06/imiddleware/"/>
      <url>/2022/06/imiddleware/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Middleware is software that’s assembled into an app pipeline to handle requests and responses.”</p></blockquote><p><code>IMiddleware</code> is an interface provided by the ASP.NET framework in the namespace <code>Microsoft.AspNetCore.Http.Abstractions</code></p><h2 id="Dependency-injection"><a href="#Dependency-injection" class="headerlink" title="Dependency injection"></a>Dependency injection</h2><p>First we need to add our services to the DI container</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;LogCorrelationMiddleware&gt;();</span><br><span class="line">services.AddScoped&lt;ExceptionMiddleware&gt;();</span><br></pre></td></tr></table></figure><p>Then configure the HTTP request pipeline (called by the runtime) to include our services using the extension <code>UseMiddleware</code> from <code>Microsoft.AspNetCore.Http.Abstractions</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.UseMiddleware&lt;LogCorrelationMiddleware&gt;();</span><br><span class="line">app.UseMiddleware&lt;ExceptionMiddleware&gt;();</span><br></pre></td></tr></table></figure><h2 id="Exception-Middleware"><a href="#Exception-Middleware" class="headerlink" title="Exception Middleware"></a>Exception Middleware</h2><p>This can globally handle application exceptions, here <code>Serilog</code> context is being enriched but any logger can be injected into the constructor and used.</p><ul><li><code>/Application/Middleware/ExceptionMiddleware.cs</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Serilog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Application.Middleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExceptionMiddleware</span> : <span class="title">IMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context, RequestDelegate next</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> next(context);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (MyException1 exception)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Warning(exception, <span class="string">$&quot;App plowed: ErrorCode=<span class="subst">&#123;exception.ErrorCode&#125;</span> (<span class="subst">&#123;exception.ErrorCode&#125;</span>)&quot;</span>);          </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (MyException2 exception)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Error(exception, <span class="string">$&quot;App plowed: ErrorCode=<span class="subst">&#123;exception.ErrorCode&#125;</span> (<span class="subst">&#123;exception.ErrorCode&#125;</span>)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Error(exception, <span class="string">&quot;Unhandled exception occurred.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Additionally for an API we would want to respond with a problem detail so each <code>catch</code> above could then call <code>WriteToResponse</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">WriteToResponse</span>(<span class="params">HttpContext context, MyProblemDetails details</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    context.Response.ContentType = <span class="string">&quot;application/problem+json&quot;</span>;</span><br><span class="line">    context.Response.StatusCode = details.Status ?? StatusCodes.Status500InternalServerError;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> context.Response.WriteAsync(JsonSerializer.Serialize(details));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Where <code>MyProblemDetails</code> has a definition of </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Application.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyProblemDetails</span> : <span class="title">ProblemDetails</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Guid CorrelationId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt; Errors &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And to make your life easy you can create a <code>MyProblemDetails</code> instance using a factory, this can then be extended as your application grows.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ProblemDetailsFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyProblemDetails <span class="title">MapUnhandledException</span>(<span class="params"><span class="built_in">string</span> path, Guid correlationId</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> problem = InternalServerError();</span><br><span class="line"></span><br><span class="line">            problem.Instance = path;</span><br><span class="line">            problem.CorrelationId = correlationId;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> problem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Log-Correlation-Middleware"><a href="#Log-Correlation-Middleware" class="headerlink" title="Log Correlation Middleware"></a>Log Correlation Middleware</h2><p>Correlation ID’s are useful when you need to track down calls done across several micro services for the same transaction of work. This middleware can automagically enrich the serilog log context with your requests correlation ID.</p><ul><li><code>/Application/Middleware/LogCorrelationMiddleware.cs</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Application.Middleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogCorrelationMiddleware</span> : <span class="title">IMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IMyRequestContext _requestContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LogCorrelationMiddleware</span>(<span class="params">IMyRequestContext requestContext</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _requestContext = requestContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context, RequestDelegate next</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (LogContext.PushProperty(<span class="string">&quot;CorrelationId&quot;</span>, _requestContext.GetCorrelationId()))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> next(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> asp.net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Teamcity</title>
      <link href="/2022/05/teamcity/"/>
      <url>/2022/05/teamcity/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Teamcity can be configured with Kotlin DSL, this means the pipeline can be versioned as infrastructure as code.</p><p>This is a space to collect my google-neering and build a local POC.</p><ul><li><a href="https://www.jetbrains.com/help/teamcity/kotlin-dsl.html">https://www.jetbrains.com/help/teamcity/kotlin-dsl.html</a></li><li><a href="https://dev.to/chenzidi/run-teamcity-on-docker-5f8b">https://dev.to/chenzidi/run-teamcity-on-docker-5f8b</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> wip </tag>
            
            <tag> infrastructure as code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chartjs With React</title>
      <link href="/2022/05/chartjs-with-react/"/>
      <url>/2022/05/chartjs-with-react/</url>
      
        <content type="html"><![CDATA[<p>Some sample charts with fake random data that can additionally be downloaded using the react hook <code>useRef</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-chartjs-2 chart.js faker</span><br></pre></td></tr></table></figure><h3 id="BarChart"><a href="#BarChart" class="headerlink" title="BarChart"></a>BarChart</h3><p><img src="/d/chartjs-with-react/barchart.png" alt="BarChart"></p><details>  <summary>BarChart data sample</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testData = &#123;</span><br><span class="line">    <span class="attr">labels</span>: [<span class="string">&#x27;DEC&#x27;</span>, <span class="string">&#x27;JAN&#x27;</span>, <span class="string">&#x27;FEB&#x27;</span>],</span><br><span class="line">    <span class="attr">datasets</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;Closed&lt;=30days&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&quot;25&quot;</span>, <span class="string">&quot;53&quot;</span>, <span class="string">&quot;58&quot;</span>],</span><br><span class="line">            <span class="attr">backgroundColor</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;Closed&gt;30days&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&quot;18&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;23&quot;</span>],</span><br><span class="line">            <span class="attr">backgroundColor</span>: <span class="string">&quot;orange&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;No action required&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="string">&quot;48&quot;</span>, <span class="string">&quot;78&quot;</span>, <span class="string">&quot;121&quot;</span>],</span><br><span class="line">            <span class="attr">backgroundColor</span>: <span class="string">&quot;grey&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>  <summary>Working code example barchart</summary><p>components/Charts/BarChart.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; faker &#125; <span class="keyword">from</span> <span class="string">&#x27;@faker-js/faker&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Bar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-chartjs-2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">Chart</span> <span class="keyword">as</span> <span class="title class_">ChartJS</span>,</span><br><span class="line">    <span class="title class_">CategoryScale</span>,</span><br><span class="line">    <span class="title class_">LinearScale</span>,</span><br><span class="line">    <span class="title class_">BarElement</span>,</span><br><span class="line">    <span class="title class_">Title</span>,</span><br><span class="line">    <span class="title class_">Tooltip</span>,</span><br><span class="line">    <span class="title class_">Legend</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;chart.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ChartJS</span>.<span class="title function_">register</span>(</span><br><span class="line">    <span class="title class_">CategoryScale</span>,</span><br><span class="line">    <span class="title class_">LinearScale</span>,</span><br><span class="line">    <span class="title class_">BarElement</span>,</span><br><span class="line">    <span class="title class_">Title</span>,</span><br><span class="line">    <span class="title class_">Tooltip</span>,</span><br><span class="line">    <span class="title class_">Legend</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> labels = [<span class="string">&#x27;January&#x27;</span>, <span class="string">&#x27;February&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;June&#x27;</span>, <span class="string">&#x27;July&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> data = &#123;</span><br><span class="line">    labels,</span><br><span class="line">    <span class="attr">datasets</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;Dataset 1&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">            <span class="attr">backgroundColor</span>: faker.<span class="property">commerce</span>.<span class="title function_">color</span>(),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;Dataset 2&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">            <span class="attr">backgroundColor</span>: faker.<span class="property">commerce</span>.<span class="title function_">color</span>(),</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">responsive</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BarChart</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        link.<span class="property">download</span> = <span class="string">&quot;BarChart.png&quot;</span>;</span><br><span class="line">        link.<span class="property">href</span> = ref.<span class="property">current</span>.<span class="title function_">toBase64Image</span>();</span><br><span class="line">        link.<span class="title function_">click</span>();</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;download&#125;</span>&gt;</span>Download Bar Chart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Bar</span> <span class="attr">height</span>=<span class="string">&#123;80&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BarChart</span></span><br></pre></td></tr></table></figure></details><h3 id="StackedBarChart"><a href="#StackedBarChart" class="headerlink" title="StackedBarChart"></a>StackedBarChart</h3><p><img src="/d/chartjs-with-react/stacked-barchart.png" alt="stacked-barchart"></p><details>  <summary>StackedBarChart data sample</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">labels</span>: [<span class="string">&#x27;DEC&#x27;</span>, <span class="string">&#x27;JAN&#x27;</span>, <span class="string">&#x27;FEB&#x27;</span>],</span><br><span class="line">  <span class="attr">datasets</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Dataset 1&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;25&quot;</span>, <span class="string">&quot;53&quot;</span>, <span class="string">&quot;58&quot;</span>],</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Dataset 2&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;18&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;23&quot;</span>],</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Dataset 3&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;48&quot;</span>, <span class="string">&quot;78&quot;</span>, <span class="string">&quot;121&quot;</span>],</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;grey&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>  <summary>Working code example stacked barchart</summary><p>components/Charts/StackedBarChart.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Chart</span> <span class="keyword">as</span> <span class="title class_">ChartJS</span>,</span><br><span class="line">  <span class="title class_">CategoryScale</span>,</span><br><span class="line">  <span class="title class_">BarElement</span>,</span><br><span class="line">  <span class="title class_">Title</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;chart.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Bar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-chartjs-2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; faker &#125; <span class="keyword">from</span> <span class="string">&#x27;@faker-js/faker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ChartJS</span>.<span class="title function_">register</span>(</span><br><span class="line">  <span class="title class_">CategoryScale</span>,</span><br><span class="line">  <span class="title class_">LinearScale</span>,</span><br><span class="line">  <span class="title class_">BarElement</span>,</span><br><span class="line">  <span class="title class_">Title</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Legend</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">display</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;Stacked Bar Chart&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">responsive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">scales</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: &#123;</span><br><span class="line">      <span class="attr">stacked</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">y</span>: &#123;</span><br><span class="line">      <span class="attr">stacked</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> labels = [<span class="string">&#x27;January&#x27;</span>, <span class="string">&#x27;February&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;June&#x27;</span>, <span class="string">&#x27;July&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> data = &#123;</span><br><span class="line">  labels,</span><br><span class="line">  <span class="attr">datasets</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Dataset 1&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;rgb(255, 99, 132)&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Dataset 2&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;rgb(75, 192, 192)&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Dataset 3&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;rgb(53, 162, 235)&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StackedBarChart</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.<span class="property">download</span> = <span class="string">&#x27;StackedBarChart.png&#x27;</span>;</span><br><span class="line">    link.<span class="property">href</span> = ref.<span class="property">current</span>.<span class="title function_">toBase64Image</span>();</span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;download&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Download Stacked Bar Chart</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Bar</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">options</span>=<span class="string">&#123;options&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StackedBarChart</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="PieChart"><a href="#PieChart" class="headerlink" title="PieChart"></a>PieChart</h3><details>  <summary>components/Charts/PieChart.js</summary>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; faker &#125; <span class="keyword">from</span> <span class="string">&#x27;@faker-js/faker&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Chart</span> <span class="keyword">as</span> <span class="title class_">ChartJS</span>, <span class="title class_">ArcElement</span>, <span class="title class_">Tooltip</span>, <span class="title class_">Legend</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;chart.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pie</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-chartjs-2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ChartJS</span>.<span class="title function_">register</span>(<span class="title class_">ArcElement</span>, <span class="title class_">Tooltip</span>, <span class="title class_">Legend</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> labels = [<span class="string">&#x27;January&#x27;</span>, <span class="string">&#x27;February&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> data = &#123;</span><br><span class="line">    labels,</span><br><span class="line">    <span class="attr">datasets</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;# of Votes&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">            <span class="attr">backgroundColor</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">commerce</span>.<span class="title function_">color</span>()),</span><br><span class="line">            <span class="attr">borderColor</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">commerce</span>.<span class="title function_">color</span>()),</span><br><span class="line">            <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PieChart</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        link.<span class="property">download</span> = <span class="string">&quot;PieChart.png&quot;</span>;</span><br><span class="line">        link.<span class="property">href</span> = ref.<span class="property">current</span>.<span class="title function_">toBase64Image</span>();</span><br><span class="line">        link.<span class="title function_">click</span>();</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;download&#125;</span>&gt;</span>Download Pie Chart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">690px</span>&quot;, <span class="attr">width:</span> &quot;<span class="attr">690px</span>&quot;, <span class="attr">margin:</span> &quot;<span class="attr">auto</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Pie</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PieChart</span></span><br></pre></td></tr></table></figure></details><h3 id="DoughnutChart"><a href="#DoughnutChart" class="headerlink" title="DoughnutChart"></a>DoughnutChart</h3><details>  <summary>components/Charts/DoughnutChart.js</summary>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; faker &#125; <span class="keyword">from</span> <span class="string">&#x27;@faker-js/faker&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Doughnut</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-chartjs-2&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Chart</span> <span class="keyword">from</span> <span class="string">&quot;chart.js/auto&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CategoryScale</span> &#125; <span class="keyword">from</span> <span class="string">&quot;chart.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Chart</span>.<span class="title function_">register</span>(<span class="title class_">CategoryScale</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> labels = [<span class="string">&#x27;January&#x27;</span>, <span class="string">&#x27;February&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;June&#x27;</span>, <span class="string">&#x27;July&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    labels,</span><br><span class="line">    <span class="attr">datasets</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">lable</span>: <span class="string">&quot;My dataset&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">random</span>.<span class="title function_">numeric</span>()),</span><br><span class="line">            <span class="attr">backgroundColor</span>: labels.<span class="title function_">map</span>(<span class="function">() =&gt;</span> faker.<span class="property">commerce</span>.<span class="title function_">color</span>()),</span><br><span class="line">            <span class="attr">hoverOffset</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DoughnutChart</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        link.<span class="property">download</span> = <span class="string">&quot;DoughnutChart.png&quot;</span>;</span><br><span class="line">        link.<span class="property">href</span> = ref.<span class="property">current</span>.<span class="title function_">toBase64Image</span>();</span><br><span class="line">        link.<span class="title function_">click</span>();</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;download&#125;</span>&gt;</span>Download Doughnut Chart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">690px</span>&quot;, <span class="attr">width:</span> &quot;<span class="attr">690px</span>&quot;, <span class="attr">margin:</span> &quot;<span class="attr">auto</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Doughnut</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Doughnut</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DoughnutChart</span>;</span><br></pre></td></tr></table></figure></details><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=KuWLhLFfeRc">https://www.youtube.com/watch?v=KuWLhLFfeRc</a></li><li><a href="https://www.npmjs.com/package/react-chartjs-2">https://www.npmjs.com/package/react-chartjs-2</a></li><li><a href="https://react-chartjs-2.js.org/examples/vertical-bar-chart">https://react-chartjs-2.js.org/examples/vertical-bar-chart</a></li><li><a href="https://fakerjs.dev/api/random.html">https://fakerjs.dev/api/random.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactPDF</title>
      <link href="/2022/05/reactpdf/"/>
      <url>/2022/05/reactpdf/</url>
      
        <content type="html"><![CDATA[<p>Found this video when looking at Chartjs, its next on the list!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @react-pdf/renderer</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=JU7rfAMpbZA">https://www.youtube.com/watch?v=JU7rfAMpbZA</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Config</title>
      <link href="/2022/05/nginx-config/"/>
      <url>/2022/05/nginx-config/</url>
      
        <content type="html"><![CDATA[<p>I was tried of having to Google this everytime!</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Where to put the <code>nginx.conf</code> inside Nginx, this COPY command is in your Dockerfile.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:alpine</span><br><span class="line">FROM nginx:1.9.15-alpine</span><br><span class="line"></span><br><span class="line">COPY nginx.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><h2 id="Reverse-proxy"><a href="#Reverse-proxy" class="headerlink" title="Reverse proxy"></a>Reverse proxy</h2><p>A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass http://localhost:5000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.nginx.com/resources/glossary/reverse-proxy-server/">https://www.nginx.com/resources/glossary/reverse-proxy-server/</a></li></ul><h2 id="React-App-404-on-refresh"><a href="#React-App-404-on-refresh" class="headerlink" title="React App 404 on refresh"></a>React App 404 on refresh</h2><p>The react app manages the route but then a refresh on a route that Nginx pulls a WFT is this on returns 404 -_- </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Complete-Sample-config"><a href="#Complete-Sample-config" class="headerlink" title="Complete Sample config"></a>Complete Sample config</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        try_files $uri /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://stackoverflow.com/questions/43555282/react-js-application-showing-404-not-found-in-nginx-server">https://stackoverflow.com/questions/43555282/react-js-application-showing-404-not-found-in-nginx-server</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Read, Write using Excel file</title>
      <link href="/2022/05/sql-read-write-excel/"/>
      <url>/2022/05/sql-read-write-excel/</url>
      
        <content type="html"><![CDATA[<p>From SQL Server Management Studio (SSMS) we can read and write excel files using OLE DB (Object Linking and Embedding, Database). The examples below use <code>OPENROWSET</code> which may not be suitable for production environments.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><h3 id="Machine"><a href="#Machine" class="headerlink" title="Machine"></a>Machine</h3><p>This is for a windows machine and you will need to install</p><ul><li><a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio (SSMS)</a></li><li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=54920">Microsoft Access Database Engine 2016 Redistributable</a></li></ul><p>I used <a href="https://sheets.new/">Google sheets</a> to create the example sheets. These are then downloaded locally as <code>foo.xlsx</code> (File -&gt; Download -&gt; Microsoft Excel .xlsx)</p><p><img src="/d/sql-read-write-excel/sheets.png" alt="data in sheets"></p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>Configure the following SQL settings</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- allows you to change advanced options</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">RECONFIGURE</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- enables ad hoc distributed queries</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;Ad Hoc Distributed Queries&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">RECONFIGURE</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- OLEDB AllowInProcess</span></span><br><span class="line"><span class="keyword">EXEC</span> master.[sys].[sp_MSset_oledb_prop] N<span class="string">&#x27;Microsoft.ACE.OLEDB.16.0&#x27;</span>, N<span class="string">&#x27;AllowInProcess&#x27;</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Read-from-Excel"><a href="#Read-from-Excel" class="headerlink" title="Read from Excel"></a>Read from Excel</h2><p>Reading the file to results, this will test that you can connect to the file and your OLEDB settings are all sweet. Here <code>Sheet1</code> is the workbook tab with the data.</p><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/Excel/01%20example%20read%20and%20setup.sql">see 01 example read and setup.sql</a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> OPENROWSET(<span class="string">&#x27;Microsoft.ACE.OLEDB.16.0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Excel 12.0 Xml;</span></span><br><span class="line"><span class="string">Database=C:\Users\carl.paton\Downloads\foo.xlsx&#x27;</span>,</span><br><span class="line">[Sheet1$]);</span><br></pre></td></tr></table></figure><p><img src="/d/sql-read-write-excel/ssms-sheet1.png" alt="all the data from Sheet1$"></p><p>Read the data from the excel file and insert it into a temp table, the temp table can then be used to perform business logic. Additionally I inserted this data into <code>foo.MyData</code> so it can be read by the write example.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #Sheet1</span><br><span class="line">​</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #Sheet1 </span><br><span class="line">(IdA UNIQUEIDENTIFIER <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">IdB UNIQUEIDENTIFIER)</span><br></pre></td></tr></table></figure><p>Define the path and import the excel data into our temp table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@excelPath</span> NVARCHAR(<span class="number">100</span>) <span class="operator">=</span> N<span class="string">&#x27;\\C:\Users\carl.paton\Downloads\foo.xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@importFromExcel</span> NVARCHAR(<span class="number">500</span>) <span class="operator">=</span> N<span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSERT INTO #Sheet1 ([IdA], [IdB])</span></span><br><span class="line"><span class="string">SELECT id_a, id_b</span></span><br><span class="line"><span class="string">FROM OPENROWSET(&#x27;&#x27;Microsoft.ACE.OLEDB.16.0&#x27;&#x27;,</span></span><br><span class="line"><span class="string">&#x27;&#x27;Excel 12.0 Xml;Database=&#x27;</span><span class="operator">+</span><span class="variable">@excelPath</span><span class="operator">+</span><span class="string">&#x27;&#x27;&#x27;,</span></span><br><span class="line"><span class="string">[Sheet1$])</span></span><br><span class="line"><span class="string">WHERE id_a IS NOT NULL&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> sp_executesql <span class="variable">@readFromExcel</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> #Sheet1</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/Excel/02%20read%20from%20excel%20file.sql">see 02 read from excel file.sql</a></li></ul><p><img src="/d/sql-read-write-excel/ssms-select-from-temp.png" alt="result of the select from #Sheet1"></p><h2 id="Write-to-Excel"><a href="#Write-to-Excel" class="headerlink" title="Write to Excel"></a>Write to Excel</h2><p>This example builds on the select above, the data put into <code>#Sheet1</code> (temp table) is read and inserted into <code>Sheet2$</code> (excel workbook tab)</p><p>Here <code>SELECT id_a, id_b FROM [Sheet2$]</code> is defining the target for the insert. While <code>SELECT * FROM #Sheet1</code> is the source data.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@writeToExcel</span> NVARCHAR(<span class="number">500</span>) <span class="operator">=</span> N<span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSERT INTO OPENROWSET(</span></span><br><span class="line"><span class="string">&#x27;&#x27;Microsoft.ACE.OLEDB.16.0&#x27;&#x27;,</span></span><br><span class="line"><span class="string">&#x27;&#x27;Excel 12.0 Xml;Database=&#x27;</span><span class="operator">+</span><span class="variable">@excelPath</span><span class="operator">+</span><span class="string">&#x27;;&#x27;&#x27;,</span></span><br><span class="line"><span class="string">&#x27;&#x27;SELECT id_a, id_b FROM [Sheet2$]&#x27;&#x27;)</span></span><br><span class="line"><span class="string">SELECT * FROM #Sheet1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/Excel/03%20write%20to%20excel.sql">see 03 write to excel.sql</a></li></ul><p>The result of the insert into <code>Sheet2$</code></p><p><img src="/d/sql-read-write-excel/sheets-insert.png" alt="result of insert into Sheet2$"></p><h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><h3 id="Advanced-options"><a href="#Advanced-options" class="headerlink" title="Advanced options"></a>Advanced options</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Msg 15123, Level 16, State 1, Procedure sp_configure, Line 62 [Batch Start Line 0]</span><br><span class="line">The configuration option &#x27;Ad Hoc Distributed Queries&#x27; does not exist, or it may be an advanced option.</span><br></pre></td></tr></table></figure><ul><li>This means you have not set <code>show advanced options</code> to 1</li></ul><h3 id="Ad-Hoc-Distributed-Queries"><a href="#Ad-Hoc-Distributed-Queries" class="headerlink" title="Ad Hoc Distributed Queries"></a>Ad Hoc Distributed Queries</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Msg 15281, Level 16, State 1, Line 1</span><br><span class="line">SQL Server blocked access to STATEMENT &#x27;OpenRowset/OpenDatasource&#x27; of component &#x27;Ad Hoc Distributed Queries&#x27; because this component is turned off as part of the security configuration for this server. A system administrator can enable the use of &#x27;Ad Hoc Distributed Queries&#x27; by using sp_configure. For more information about enabling &#x27;Ad Hoc Distributed Queries&#x27;, search for &#x27;Ad Hoc Distributed Queries&#x27; in SQL Server Books Online.</span><br></pre></td></tr></table></figure><ul><li>The means you have no set <code>Ad Hoc Distributed Queries</code> to 1</li></ul><h3 id="Cannot-initialize-the-data-source"><a href="#Cannot-initialize-the-data-source" class="headerlink" title="Cannot initialize the data source"></a>Cannot initialize the data source</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Msg 7303, Level 16, State 1, Line 1</span><br><span class="line">Cannot initialize the data source object of OLE DB provider &quot;Microsoft.ACE.OLEDB.16.0&quot; for linked server &quot;(null)&quot;.</span><br></pre></td></tr></table></figure><ul><li>Run SSMS as Administrator </li><li>Check what Microsoft ACE OLEDB providers are installed and their settings</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> master.dbo.sp_MSset_oledb_prop;</span><br></pre></td></tr></table></figure><p>Ensure <code>AllowInProcess</code> and <code>DynamicParameters</code> is set to 1 for your OLEDB version.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> master.dbo.sp_MSset_oledb_prop N<span class="string">&#x27;Microsoft.ACE.OLEDB.12.0&#x27;</span>, N<span class="string">&#x27;AllowInProcess&#x27;</span>, <span class="number">1</span> </span><br><span class="line"><span class="keyword">EXEC</span> master.dbo.sp_MSset_oledb_prop N<span class="string">&#x27;Microsoft.ACE.OLEDB.12.0&#x27;</span>, N<span class="string">&#x27;DynamicParameters&#x27;</span>, <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> master.dbo.sp_MSset_oledb_prop N<span class="string">&#x27;Microsoft.ACE.OLEDB.16.0&#x27;</span>, N<span class="string">&#x27;AllowInProcess&#x27;</span>, <span class="number">1</span> </span><br><span class="line"><span class="keyword">EXEC</span> master.dbo.sp_MSset_oledb_prop N<span class="string">&#x27;Microsoft.ACE.OLEDB.16.0&#x27;</span>, N<span class="string">&#x27;DynamicParameters&#x27;</span>, <span class="number">1</span> </span><br></pre></td></tr></table></figure><ul><li><a href="https://social.msdn.microsoft.com/Forums/en-US/dce59e70-b897-4002-b258-8ea6d54f523f/trying-to-import-excel-data-from-query?forum=transactsql">https://social.msdn.microsoft.com/Forums/en-US/dce59e70-b897-4002-b258-8ea6d54f523f/trying-to-import-excel-data-from-query?forum=transactsql</a></li></ul><h3 id="Object-has-no-columns"><a href="#Object-has-no-columns" class="headerlink" title="Object has no columns"></a>Object has no columns</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Msg <span class="number">7357</span>, Level <span class="number">16</span>, State <span class="number">2</span>, Line <span class="number">10</span></span><br><span class="line">Cannot process the object &quot;SELECT id1, id2 FROM [Sheet2$]&quot;. The OLE DB provider &quot;Microsoft.ACE.OLEDB.16.0&quot; <span class="keyword">for</span> linked server &quot;(null)&quot; indicates that either the object has <span class="keyword">no</span> columns <span class="keyword">or</span> the <span class="keyword">current</span> <span class="keyword">user</span> does <span class="keyword">not</span> have permissions <span class="keyword">on</span> that object.</span><br></pre></td></tr></table></figure><ul><li><code>Sheet2</code> and or the columns <code>id1, id2</code> dont exist</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/openrowset-transact-sql">https://docs.microsoft.com/en-us/sql/t-sql/functions/openrowset-transact-sql</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Custom Hook</title>
      <link href="/2022/04/reactjs-custom-hooks/"/>
      <url>/2022/04/reactjs-custom-hooks/</url>
      
        <content type="html"><![CDATA[<p>A hook just returns state and optionally a function that can mutate that state.</p><ol><li>Define the hook, here my hook is reading a token from <code>sessionStorage</code> and if it exists then set this as the initial state.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> tokenString = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> userToken = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(tokenString);</span><br><span class="line">    <span class="keyword">return</span> userToken?.<span class="property">token</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [token, setToken] = <span class="title function_">useState</span>(<span class="title function_">getToken</span>());</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">saveToken</span> = (<span class="params">userToken</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userToken));</span><br><span class="line">    <span class="title function_">setToken</span>(userToken.<span class="property">token</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">setToken</span>: saveToken,</span><br><span class="line">    token,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Import and destruct the response from the hook</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useToken <span class="keyword">from</span> <span class="string">&#x27;./useToken&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; token, setToken &#125; = <span class="title function_">useToken</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>Set the token value where <code>response</code> came from a <code>fetch</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setToken</span>(response);</span><br></pre></td></tr></table></figure><p>Note that this is consuming the whole response, we could just pass in <code>response.token</code></p><p>For context the complete reponse could like the below where <code>token</code> is a valid <a href="/2022/04/generate-jwt/">JWT</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJkMTEwNGQ1MC0yN2NlLTQwZDEtYjc5OS1mZTA4MDczOTU4NzUiLCJuYmYiOjE2NTA5NDY0ODksImV4cCI6MTY1MTU1MTI4OSwiaWF0IjoxNjUwOTQ2NDg5LCJpc3MiOiJwb3JreS5pbyIsImF1ZCI6ImJmZi5wb3JreS5pbyJ9.-30-p-2baW2XCFAd1YAaPVRPHNc-qibkxIfO9JOIt-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Porky&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://reactjs.org/docs/hooks-custom.html">https://reactjs.org/docs/hooks-custom.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generate JSON Web Token (JWT)</title>
      <link href="/2022/04/generate-jwt/"/>
      <url>/2022/04/generate-jwt/</url>
      
        <content type="html"><![CDATA[<p>I needed a quick and easy way to generate a JWT which included some claims.</p><ol><li>Install these libraries</li></ol><ul><li><a href="https://www.nuget.org/packages/Microsoft.IdentityModel.Tokens/">Microsoft.IdentityModel.Tokens</a> (6.17.0)</li><li><a href="https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/">System.IdentityModel.Tokens.Jwt</a> (6.17.0)</li></ul><ol start="2"><li>Add some configuration in appsettings, the <code>Secret</code> can be anything as long as its a key size of at least <code>128</code> bits. I used this online <a href="https://www.guidgenerator.com/online-guid-generator.aspx">GUID generator for testing</a>.</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;IdentityToken&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;78923ed7-259f-42fa-bfa2-505cab403d12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:5008/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Audience&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:5006/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ExpireDays&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Build the service injecting the configuration</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AuthService.Application.Common;</span><br><span class="line"><span class="keyword">using</span> AuthService.Domain.Interfaces.Application;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Options;</span><br><span class="line"><span class="keyword">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class="line"><span class="keyword">using</span> System.IdentityModel.Tokens.Jwt;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AuthService.Application.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdentityTokenService</span> : <span class="title">IIdentityTokenService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IdentityTokenOptions _options;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IdentityTokenService</span>(<span class="params">IOptions&lt;IdentityTokenOptions&gt; options</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _options = options.Value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>(<span class="params">Guid userId, <span class="built_in">string</span> screens</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.ASCII.GetBytes(_options.Key));</span><br><span class="line">            <span class="keyword">var</span> tokenHandler = <span class="keyword">new</span> JwtSecurityTokenHandler();</span><br><span class="line">            <span class="keyword">var</span> tokenDescriptor = <span class="keyword">new</span> SecurityTokenDescriptor</span><br><span class="line">            &#123;</span><br><span class="line">                Subject = <span class="keyword">new</span> ClaimsIdentity(<span class="keyword">new</span> Claim[]</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Claim(ClaimTypes.NameIdentifier, userId.ToString()),</span><br><span class="line">                    <span class="keyword">new</span> Claim(<span class="string">&quot;screens&quot;</span>, screens),</span><br><span class="line">                &#125;),</span><br><span class="line">                Expires = DateTime.UtcNow.AddDays(_options.ExpireDays),</span><br><span class="line">                Issuer = _options.Issuer,</span><br><span class="line">                Audience = _options.Audience,</span><br><span class="line">                SigningCredentials = <span class="keyword">new</span> SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> token = tokenHandler.CreateToken(tokenDescriptor);</span><br><span class="line">            <span class="keyword">return</span> tokenHandler.WriteToken(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>A use case could be the exchange of an <a href="/2020/12/oauth2-authorization-code-flow/">Authorization Code</a>. The example below is from my SPA, here I am sending the SPA’s <code>clientid</code> and <code>clientsecret</code> along with the <code>code</code> the <code>Authorisation Service</code> returned at its login screen (that was the only time a username/password is required)</li></ol><p>This is part of the Proof Key for Code Exchange (PKCE) flow (pronounced “pixy”).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getAuthUrl, getClientId, getClientSecret &#125; <span class="keyword">from</span> <span class="string">&#x27;../common/EnvTools&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getToken</span> = <span class="keyword">async</span> (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="title function_">getAuthUrl</span>()</span><br><span class="line">  <span class="keyword">const</span> clientid = <span class="title function_">getClientId</span>()</span><br><span class="line">  <span class="keyword">const</span> clientsecret = <span class="title function_">getClientSecret</span>()</span><br><span class="line">  <span class="keyword">const</span> credentials = &#123; clientid, clientsecret, code &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  data.<span class="title function_">append</span>(<span class="string">&#x27;credential&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(credentials));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>/token`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: data,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The <code>Authorisation Service</code> could have a <code>TokenController</code> with implementation as shown below. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;/token&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">Token</span>(<span class="params">[FromForm] <span class="built_in">string</span> credential</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> source = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">    <span class="keyword">var</span> token = source.Token;</span><br><span class="line">    <span class="keyword">var</span> clientOptions = _registeredClientOptions.PorkySpa;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deserializedCredential = JsonSerializer.Deserialize&lt;AuthorizationCodeModels&gt;(credential, SerializerOptions.Deserialize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deserializedCredential?.ClientSecret != clientOptions.Secret) </span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">$&quot;ClientSecret unknown&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Unauthorized();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deserializedCredential?.ClientId != clientOptions.ClientId)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">$&quot;ClientId unknown.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Unauthorized();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> authCode = <span class="keyword">await</span> _authCodeRepository.LoadAsync(deserializedCredential.Code, token);</span><br><span class="line">    _ = _authCodeRepository.DeleteAsync(deserializedCredential.Code, token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dbCredential = <span class="keyword">await</span> _credentialsRepository.LoadAsync(authCode.Username, token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dbCredential == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;dbCredential is null, looked up on &quot;</span> + authCode.Username ?? <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Unauthorized();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> jwt = _tokenService.Get(dbCredential.UserId, dbCredential.Screens);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">new</span> PokzerModels</span><br><span class="line">    &#123;</span><br><span class="line">        Token = jwt,</span><br><span class="line">        Username = authCode.Username</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ok(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>The resulting response for this call could be</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJkMTEwNGQ1MC0yN2NlLTQwZDEtYjc5OS1mZTA4MDczOTU4NzUiLCJzY3JlZW5zIjoidXBsb2FkZmlsZSxmaW5kLGYxbmR0bCxyZXBvcnQsZWFzdGVyIiwibmJmIjoxNjU2MTk5MTIwLCJleHAiOjE2NTY4MDM5MjAsImlhdCI6MTY1NjE5OTEyMCwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwOC8iLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo1MDA2LyJ9.jtT-8Eq3YsqXhr-zCFuk84Jsyo4ldgepZRR1XiSmn1Y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Porky&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>Decoded using <a href="https://jwt.io/">jwt.io</a> the payload could look as follows, the specification on these properties is <a href="https://datatracker.ietf.org/doc/html/rfc7519">rfc7519</a>.</li></ol><p>Production JWTs should never be popped into any site like <a href="https://jwt.io/">jwt.io</a>, this is a security threat and you will get fired (again) -_-</p><p>Header</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nameid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d1104d50-27ce-40d1-b799-fe0807395875&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uploadfile,find,f1ndtl,report,easter&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1656199120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1656803920</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1656199120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:5008/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:5006/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Details about the payload can be found at <a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1">https://datatracker.ietf.org/doc/html/rfc7519#section-4.1</a> and <a href="/2021/07/oauth2-delegation-token/">OAuth2 - Delegation Token</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.epochconverter.com/">https://www.epochconverter.com/</a></li><li><a href="https://dotnetcoretutorials.com/2020/01/15/creating-and-validating-jwt-tokens-in-asp-net-core/">https://dotnetcoretutorials.com/2020/01/15/creating-and-validating-jwt-tokens-in-asp-net-core/</a></li><li><a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/dn464181(v=vs.114)">https://docs.microsoft.com/en-us/previous-versions/visualstudio/dn464181(v=vs.114)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Infinite Scrolling Through Paginated Results With jQuery</title>
      <link href="/2022/04/jquery-paginate-results-scroll/"/>
      <url>/2022/04/jquery-paginate-results-scroll/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>You have a page on your website that displays data from the <a href="https://jsonplaceholder.typicode.com/todos/">jsonplaceholder todos rest API</a>. All 200 rows are displayed at once which is inefficient.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Pagenate through <code>n</code> results using infinite scrolling like a Facebook feed. </p><p>You must</p><ul><li>Use jQuery and javascript</li><li>Paginate using <code>_start</code> (the page) and <code>_limit</code> (the size) for each request. </li><li>When the user scrolls to the bottom of the screen fetch the next <code>n</code> results auto-magically \ :D / </li></ul><p>The user will have the experience of infinite scrolling which will save their data and reduce unnecessary requests.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><ul><li><a href="/d/jquery-paginate-results-scroll/index.htm">Running example code</a></li></ul><p>Once the document loads fire the first <code>get</code>, there after listen to the scroll event, use <code>checkpos</code> to determine if the user is at the bottom of the screen, increment the <code>start</code> variable and <code>get</code> the next page. </p><p>Repeat this until the known <code>max</code> is reached.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> limit = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkpos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> top = <span class="title class_">Math</span>.<span class="title function_">floor</span>($(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>())</span><br><span class="line">    <span class="keyword">let</span> docheight = $(<span class="variable language_">document</span>).<span class="title function_">height</span>()</span><br><span class="line">    <span class="keyword">let</span> windowheight = $(<span class="variable language_">window</span>).<span class="title function_">height</span>()</span><br><span class="line">    <span class="keyword">let</span> percentage = (<span class="number">100</span> * (top + windowheight)) / docheight;</span><br><span class="line">    <span class="keyword">return</span> percentage == <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handlerow</span>(<span class="params">todo</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#table tbody:last&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> + todo.<span class="property">id</span> + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + todo.<span class="property">title</span> + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/?_start=&quot;</span> + start + <span class="string">&quot;&amp;_limit=&quot;</span> + limit, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        data.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span></span><br><span class="line">            <span class="title function_">handlerow</span>(todo)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">get</span>()</span><br><span class="line">    $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">checkpos</span>()) &#123;</span><br><span class="line">            start = start + limit;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (start &gt;= max) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Limitations include</p><ul><li>This will only fire when the user scrolls right to the bottom, a percentage of 95 could be used instead however the scroll event will need tweaking. <code>checkpos</code> is already doing a percentage calculation with this in mind</li><li>If the initial <code>get</code> returns less data than that which causes the y-axis scroll to display, the scroll listener will never fire</li><li>The API’s used in <code>checkpos</code> may not work in all browsers ¯\<em>(ツ)</em>/¯</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/14035180/jquery-load-more-data-on-scroll">https://stackoverflow.com/questions/14035180/jquery-load-more-data-on-scroll</a></li><li><a href="https://stackoverflow.com/questions/36280104/jquery-stop-infinite-scroll-triggering-untill-next-page-is-loaded">https://stackoverflow.com/questions/36280104/jquery-stop-infinite-scroll-triggering-untill-next-page-is-loaded</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front End Application Organisation</title>
      <link href="/2022/04/front-end-app-organisation/"/>
      <url>/2022/04/front-end-app-organisation/</url>
      
        <content type="html"><![CDATA[<p>Just a space to keep track of opinionated ways to organise front end application code.</p><h3 id="Having-a-crack"><a href="#Having-a-crack" class="headerlink" title="Having a crack"></a>Having a crack</h3><ul><li>Each component should have its own style and tests</li><li>Type alias (type itself which I have put in the <code>models</code> folder) are PascalCase. Example <code>type TeamLead = &#123;…&#125;</code>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">spa</span><br><span class="line">│___src</span><br><span class="line">    │___components</span><br><span class="line">    │   │___App</span><br><span class="line">    │   │       - app.css</span><br><span class="line">    │   │       - App.tsx</span><br><span class="line">    │   │       - App.test.tsx</span><br><span class="line">    │   │___GlobalSpinner</span><br><span class="line">    │   │       - GlobalSpinner.tsx</span><br><span class="line">    │   │___RandomComments</span><br><span class="line">    │           - RandomComments.tsx</span><br><span class="line">    │___context</span><br><span class="line">    │        - GlobalSpinnerContext.tsx</span><br><span class="line">    │___redux</span><br><span class="line">    │        - Store.ts</span><br><span class="line">    │        - NotesReducer.ts</span><br><span class="line">    │        - NotesActions.ts</span><br><span class="line">    │___hooks</span><br><span class="line">    │        - useApiHook.ts</span><br><span class="line">    │___services</span><br><span class="line">    │        - getTeamleads.ts </span><br><span class="line">    │        - updateAudit.ts </span><br><span class="line">    │___assets</span><br><span class="line">    │        - favicon-32.png</span><br><span class="line">    │        - logo.png</span><br><span class="line">    │___models</span><br><span class="line">    │        - audit.model.ts</span><br><span class="line">    │        - teamLead.model.ts</span><br><span class="line">    - index.tsx</span><br></pre></td></tr></table></figure><h3 id="Ducks"><a href="#Ducks" class="headerlink" title="Ducks"></a>Ducks</h3><p>Ducks is just a convention, its a way of organising features. </p><p>Here <code>clients</code> is the feature and Im not really sold on Pascal like the example above.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spa</span><br><span class="line">│___src</span><br><span class="line">    │___redux</span><br><span class="line">        │___ducks</span><br><span class="line">            │___clients</span><br><span class="line">                   - actions.ts</span><br><span class="line">                   - reducers.ts</span><br><span class="line">                   - sagas.ts</span><br><span class="line">                   - selectors.ts</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.freecodecamp.org/news/scaling-your-redux-app-with-ducks-6115955638be/">Scaling your Redux App with ducks</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Login Authentication</title>
      <link href="/2022/04/reactjs-login-authentication/"/>
      <url>/2022/04/reactjs-login-authentication/</url>
      
        <content type="html"><![CDATA[<p>Most of the below is based on the tutorials avalible at <a href="https://www.digitalocean.com/">digitalocean.com</a></p><h3 id="Token-storage"><a href="#Token-storage" class="headerlink" title="Token storage"></a>Token storage</h3><p>When adding <code>Authentication</code> (asking the user to type in login details) the details (normally a token) need to be store somewhere. </p><p>The common options are:</p><ul><li>localStorage (for all tabs, only cleared by you, could be a security concearn)</li><li>sessionStorage (just for that tab, lost when the tab is closed but remains when the tab is refreshed)</li><li><a href="/2021/08/reactjs-redux/">redux</a> or <a href="/2022/04/reactjs-use-context/">context</a></li><li>cookies (considered deprecated)</li></ul><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><ol><li><p>Build an <a href="/2022/04/generate-jwt/">API that returns a JWT</a></p></li><li><p>Create a <a href="/2022/04/reactjs-custom-hooks/">custom hook</a>, this will provide <code>setToken</code></p></li><li><p>Create a login component at <code>/src/components/Login/Login.js</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Login.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loginUser &#125; <span class="keyword">from</span> <span class="string">&#x27;../../services/loginUser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useGlobalUserActionsContext &#125; <span class="keyword">from</span> <span class="string">&#x27;../../context/GlobalContextProvider&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params">&#123; setToken &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [username, setUserName] = <span class="title function_">useState</span>();</span><br><span class="line">  <span class="keyword">const</span> [password, setPassword] = <span class="title function_">useState</span>();</span><br><span class="line">  <span class="keyword">const</span> setUsername = <span class="title function_">useGlobalUserActionsContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = <span class="keyword">async</span> (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">loginUser</span>(&#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">setUsername</span>(<span class="string">&#x27;Welcome &#x27;</span> + response.<span class="property">displayName</span> + <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">    <span class="title function_">setToken</span>(response);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;login-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Please Log In<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setUserName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setPassword(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Login</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">setToken</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>At the App level display the component for all routes but conditionally hide it based on the existance of the token</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; token, setToken &#125; = <span class="title function_">useToken</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> <span class="attr">setToken</span>=<span class="string">&#123;setToken&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;<span class="title class_">Router</span>&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>So now once the user authenticates the usage of <code>useState</code> in the <a href="/2022/04/reactjs-custom-hooks/">custom hook</a> will cause a re-render.</li></ol><p>Boom, the user is logged in.</p><p>Note that <code>getToken</code> would need to be exported if you want to include the token in subsequent API calls to the BFF.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-add-login-authentication-to-react-applications">https://www.digitalocean.com/community/tutorials/how-to-add-login-authentication-to-react-applications</a></li><li><a href="https://www.digitalocean.com/community/tutorials/js-introduction-localstorage-sessionstorage">https://www.digitalocean.com/community/tutorials/js-introduction-localstorage-sessionstorage</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Redux Toolkit</title>
      <link href="/2022/04/reactjs-redux-toolkit/"/>
      <url>/2022/04/reactjs-redux-toolkit/</url>
      
        <content type="html"><![CDATA[<p>Also see <a href="/2021/08/reactjs-redux/">Redux Store</a></p><p>Instead of using a reducer, this will use a slice. The concept is the same with a different name.</p><ul><li><a href="https://redux-toolkit.js.org/">https://redux-toolkit.js.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React useContext</title>
      <link href="/2022/04/reactjs-use-context/"/>
      <url>/2022/04/reactjs-use-context/</url>
      
        <content type="html"><![CDATA[<p>When you dont need a store (yet) you can just use <code>useContext</code>, this hook helps avoid prop drilling and components taking a dependency on props they dont use other than passing to children components.</p><p>The code below is based on <a href="https://www.telerik.com/blogs/how-to-use-context-api-with-hooks-efficiently-while-avoiding-performance-bottlenecks">telerik.com: How to Use Context API</a> and the complete source code is at <a href="https://github.com/carlpaton/react-usecontext">https://github.com/carlpaton/react-usecontext</a></p><ol><li>Create the <code>GlobalContextProvider</code> at <code>/src/context/GlobalContextProvider.js</code> which will create all your contexts and provide API’s to maintain the state.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalSpinnerContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalSpinnerActionsContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useContextFactory</span> = (<span class="params">name, context</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="title function_">useContext</span>(context);</span><br><span class="line">    <span class="keyword">if</span> (ctx === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">`use<span class="subst">$&#123;name&#125;</span>Context must be used withing a <span class="subst">$&#123;name&#125;</span>ContextProvider.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useGlobalSpinnerContext = <span class="title function_">useContextFactory</span>(</span><br><span class="line">  <span class="string">&#x27;GlobalSpinnerContext&#x27;</span>,</span><br><span class="line">  <span class="title class_">GlobalSpinnerContext</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useGlobalSpinnerActionsContext = <span class="title function_">useContextFactory</span>(</span><br><span class="line">  <span class="string">&#x27;GlobalSpinnerActionsContext&#x27;</span>,</span><br><span class="line">  <span class="title class_">GlobalSpinnerActionsContext</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GlobalContextProvider</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [isGlobalSpinnerOn, setGlobalSpinner] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalSpinnerContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;isGlobalSpinnerOn&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GlobalSpinnerActionsContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;setGlobalSpinner&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GlobalSpinnerActionsContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">GlobalSpinnerContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GlobalContextProvider</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Wrap your application</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">GlobalSpinnerContextProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">GlobalSpinner</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RandomComments</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">GlobalSpinnerContextProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Access the contexts</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./globalSpinner.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useGlobalSpinnerContext&#125; <span class="keyword">from</span> <span class="string">&#x27;../../context/GlobalSpinnerContext&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GlobalSpinner</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isGlobalSpinnerOn  = <span class="title function_">useGlobalSpinnerContext</span>()</span><br><span class="line">  <span class="keyword">return</span> isGlobalSpinnerOn ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;global-spinner-overlay&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  ) : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GlobalSpinner</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Access the actions to change the state</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useGlobalSpinnerActionsContext&#125; <span class="keyword">from</span> <span class="string">&#x27;../context/GlobalSpinnerContext&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">RandomComments</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [comments, setComments] = <span class="title function_">useState</span>([])</span><br><span class="line">  <span class="keyword">const</span> setGlobalSpinner = <span class="title function_">useGlobalSpinnerActionsContext</span>()</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="title function_">setGlobalSpinner</span>(<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/comments?l=2&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> result.<span class="title function_">json</span>()</span><br><span class="line">        <span class="title function_">setComments</span>(data.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="title function_">setGlobalSpinner</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;)()</span><br><span class="line">  &#125;, [setGlobalSpinner])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;comments.map(comment =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        const &#123;name, body, id&#125; = comment</span></span><br><span class="line"><span class="language-xml">        return (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontWeight:</span> &#x27;<span class="attr">bold</span>&#x27;&#125;&#125;&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;body&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">RandomComments</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.webdevsimplified.com/2020-06/use-context/">https://blog.webdevsimplified.com/2020-06/use-context/</a></li><li><a href="https://www.youtube.com/watch?v=5LrDIWkK_Bc">https://www.youtube.com/watch?v=5LrDIWkK_Bc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web Apps (PWA)</title>
      <link href="/2022/04/progressive-web-apps/"/>
      <url>/2022/04/progressive-web-apps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>WIP</p></blockquote><h2 id="Lighthouse"><a href="#Lighthouse" class="headerlink" title="Lighthouse"></a>Lighthouse</h2><p>Chrome dev tools -&gt; Lighthouse to run an audit</p><ul><li>analyzes performace, accessibility, seo and determines if your app is installable as a PWA. Test at <a href="https://fireship.io/">https://fireship.io/</a></li><li>Trigger and test push notifications, background sync of the service worker</li></ul><h2 id="Workbox"><a href="#Workbox" class="headerlink" title="Workbox"></a>Workbox</h2><p>Library to help build PWA’s</p><ul><li>Cache URL’s in your app so they can be viewed offline. Inspect the cache under chrome dev tools <code>Application</code> tab under <code>Cache Storage</code>. Example at <a href="https://fireship.io/">https://fireship.io/</a></li></ul><p>If using React or Angular</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install workbox-cli --global</span><br></pre></td></tr></table></figure><p>or import from CDN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScripts(&#x27;cdn://workbox-sw.js&#x27;)</span><br></pre></td></tr></table></figure><h2 id="PWA-Components"><a href="#PWA-Components" class="headerlink" title="PWA Components"></a>PWA Components</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF=8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;manifest.json&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigation) &#123;</span></span><br><span class="line"><span class="language-javascript">      navigation.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/service-worker.js&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="logo-png"><a href="#logo-png" class="headerlink" title="logo.png"></a>logo.png</h3><p>Your logo bro \ :D /</p><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><ul><li><code>manifest.json</code></li></ul><p>Contains icons and other meta data about the app.</p><p>Icons can be created with PWA Asset generator, this will target <code>logo.png</code> and output the results in the <code>icons</code> directory. Additionally this will produce the content needed for the mainifest.json file (look in the terminal output)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx pwa-asset-generator logo.png icons</span><br></pre></td></tr></table></figure><p>Example from <a href="https://fireship.io/">https://fireship.io/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fireship.io&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fireship.io&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Awesome Content for App Developers&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#2a2e35&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#454e56&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/favicon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;64x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/logo-512.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512x512&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="service-worker-js"><a href="#service-worker-js" class="headerlink" title="service-worker.js"></a>service-worker.js</h3><p>Enable caching <code>networkFirst()</code> will use network first but fall back to <code>cacheFirst</code> is the network is not avalible.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">&#x27;https://storage.googleapis.com/workbox-cdn/releases/6.0.2/workbox-sw.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (workbox) &#123;</span><br><span class="line"></span><br><span class="line">  workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="function">(<span class="params">&#123;request&#125;</span>) =&gt;</span> request.<span class="property">destination</span> === <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">    workbox.<span class="property">strategies</span>.<span class="title function_">cacheFirst</span>()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Browser not supported`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx serve</span><br></pre></td></tr></table></figure><ul><li><a href="http://localhost:5000/">http://localhost:5000</a></li></ul><p>If you are using the Create react app tool will automatically generate a service worker for you.</p><p>Service worker -&gt; register to run in the background. </p><ul><li>Caching pages</li><li>Run background sync </li><li>Listen for push notifications</li></ul><p>This will check if the browser supports the feature and then reginster the worker which is <code>service-worker.js</code>.</p><p>Once registered it can be seen in the <code>Application</code> tab in chrome dev tools. </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://create-react-app.dev/docs/making-a-progressive-web-app/">https://create-react-app.dev/docs/making-a-progressive-web-app/</a></li><li><a href="https://hnpwa.com/">Hacker News readers as Progressive Web Apps</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps">https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps</a></li><li><a href="https://www.youtube.com/watch?v=sFsRylCQblw">https://www.youtube.com/watch?v=sFsRylCQblw</a></li></ul><p>2</p><ul><li><a href="https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/">https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/</a></li><li><a href="https://www.pwabuilder.com/">https://www.pwabuilder.com/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB">https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D Printing</title>
      <link href="/2022/03/3d-printing/"/>
      <url>/2022/03/3d-printing/</url>
      
        <content type="html"><![CDATA[<p>Im a nerd and was bound to be interested in 3D printing objects at some point. \:D/</p><h2 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h2><p>Ultimaker Cura 5.2.1</p><p>Settings</p><ul><li><a href="https://all3dp.com/2/cura-vase-mode-all-you-need-to-know">Spiralize Outer Contour</a></li></ul><h2 id="Object-Resources"><a href="#Object-Resources" class="headerlink" title="Object Resources"></a>Object Resources</h2><p>I love thingiverse but my mind is forgetful so this is a collection of thingiverse things that captured my imagination. Although I recently learnt about their collections feature - much better than updating a dodgy blog post :D</p><ul><li><a href="https://www.thingiverse.com/">https://www.thingiverse.com/</a></li><li><a href="https://www.printables.com/">https://www.printables.com/</a></li><li><a href="https://www.myminifactory.com/">https://www.myminifactory.com/</a></li></ul><h2 id="Machines"><a href="#Machines" class="headerlink" title="Machines"></a>Machines</h2><ul><li><a href="https://marvle3d.co.nz/creality-/2513-creality-k1c-3d-printer.html">https://marvle3d.co.nz/creality-/2513-creality-k1c-3d-printer.html</a></li><li><a href="https://kiwi3d.co.nz/product/ender-3-v2/">https://kiwi3d.co.nz/product/ender-3-v2/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 3d printing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Component Lifecycle componentDidCatch</title>
      <link href="/2022/03/reactjs-component-class-componentdidcatch/"/>
      <url>/2022/03/reactjs-component-class-componentdidcatch/</url>
      
        <content type="html"><![CDATA[<ul><li>reactjs.org/docs/error-boundaries.html</li><li><a href="https://btholt.github.io/complete-intro-to-react-v6/error-boundaries">https://btholt.github.io/complete-intro-to-react-v6/error-boundaries</a></li></ul><p>This file can be called <code>ErrorBoundary.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;ErrorBoundary caught an error&quot;</span>, error, info);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hasError</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          There was an error with this listing. <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Click here<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">          to back to the home page or wait five seconds.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ErrorBoundary</span>;</span><br></pre></td></tr></table></figure><p>Then wrap the child</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add import</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">from</span> <span class="string">&quot;./ErrorBoundary&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace export</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DetailsWithRouter</span> = <span class="title function_">withRouter</span>(<span class="title class_">Details</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">DetailsErrorBoundary</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorBoundary</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DetailsWithRouter</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ErrorBoundary</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
            <tag> reactjs class-based </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Component Lifecycle componentDidMount</title>
      <link href="/2022/03/reactjs-component-class/"/>
      <url>/2022/03/reactjs-component-class/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://btholt.github.io/complete-intro-to-react-v6/class-components">https://btholt.github.io/complete-intro-to-react-v6/class-components</a></li><li><a href="https://reactjs.org/docs/react-component.html">https://reactjs.org/docs/react-component.html</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Details</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">`http://pets-v2.dev-apis.com/pets?id=<span class="subst">$&#123;<span class="variable language_">this</span>.props.match.params.id&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">loading</span>: <span class="literal">false</span> &#125;, json.<span class="property">pets</span>[<span class="number">0</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">loading</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>loading … <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; animal, breed, city, state, description, name &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;details&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;`$&#123;animal&#125; — $&#123;breed&#125; — $&#123;city&#125;, $&#123;state&#125;`&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>Adopt &#123;name&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;description&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Details</span>);</span><br></pre></td></tr></table></figure><p>To replace the ctr</p><ul><li><a href="https://btholt.github.io/complete-intro-to-react-v6/class-properties">https://btholt.github.io/complete-intro-to-react-v6/class-properties</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># so we can replace the constructor in React.Component class</span><br><span class="line">npm i -D @babel/plugin-proposal-class-properties@7.13.0 @babel/preset-env@7.13.5 @babel/eslint-parser@7.13.4</span><br></pre></td></tr></table></figure><p>Then replace</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
            <tag> reactjs class-based </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String to Binary in C#</title>
      <link href="/2022/03/string-to-binary-in-c-sharp/"/>
      <url>/2022/03/string-to-binary-in-c-sharp/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>I was tinkering with <a href="/2022/03/microcontroller-assembly-code/">Assembly Code</a> the other day and had a brain fart which resulted in this post!</p><p>If you have a literal string like <code>Not my monkey</code> how can this be converted to binary (for reasons), does that binary have to be 8 bit bytes and what would the padding logic look like?</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Given the string <code>Not my monkey</code> convert it to binary and then back again to text.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>baz</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/5664345/string-to-binary-in-c-sharp">https://stackoverflow.com/questions/5664345/string-to-binary-in-c-sharp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p10f200 Blink LED</title>
      <link href="/2022/03/p10f200-blink-led/"/>
      <url>/2022/03/p10f200-blink-led/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.circuitbread.com/tutorials/how-to-blink-an-led-part-6-microcontroller-basics-pic10f200">How to Blink an LED - Part 6 Microcontroller Basics (PIC10F200)</a></li></ul><p>This has a delay loop to turn on the LED, dely the loop, turn it off and repeat. This gives our eyes a chance to see the LED change state.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;p10f200.inc&quot;</span><br><span class="line">; CONFIG</span><br><span class="line">   __CONFIG _WDT_OFF &amp; _CP_OFF &amp; _MCLRE_OFF</span><br><span class="line">   ORG 0x0000</span><br><span class="line">INIT</span><br><span class="line">   MOVLW  ~(1 &lt;&lt; T0CS)     ; enable GPIO2</span><br><span class="line">   OPTION    </span><br><span class="line">   MOVLW ~(1 &lt;&lt; GP2)       ; set and GP2 as an output</span><br><span class="line">   TRIS GPIO</span><br><span class="line">LOOP</span><br><span class="line">   BSF GPIO, GP2           ; set GP2</span><br><span class="line">   CALL DELAY              ; call DELAY subroutine</span><br><span class="line">   BCF GPIO, GP2           ; reset GP2</span><br><span class="line">   CALL DELAY              ; call DELAY subroutine</span><br><span class="line">   GOTO LOOP               ; loop forever</span><br><span class="line"> </span><br><span class="line">DELAY                      ; start DELAY subroutine here</span><br><span class="line">    MOVLW D&#x27;162&#x27;               ; load initial value for the delay</span><br><span class="line">    MOVWF 10                   ; copy the value to the register 0x10</span><br><span class="line">    MOVWF 11                   ; copy the value to the register 0x11</span><br><span class="line">DELAY_LOOP                 ; start delay loop</span><br><span class="line">    DECFSZ 10, F               ; decrement the register 0x10 and check if not zero</span><br><span class="line">    GOTO DELAY_LOOP            ; if not then go to the DELAY_LOOP label</span><br><span class="line">    DECFSZ 11, F               ; else decrement the register 0x11, check if it is not 0</span><br><span class="line">    GOTO DELAY_LOOP            ; if not then go to the DELAY_LOOP label</span><br><span class="line">    RETLW 0                    ; else return from the subroutine</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="Charlieplexing-LEDs"><a href="#Charlieplexing-LEDs" class="headerlink" title="Charlieplexing LEDs"></a>Charlieplexing LEDs</h3><ul><li><a href="/2022/03/charlieplexing-leds/">Charlieplexing LEDs</a></li><li><a href="https://www.circuitbread.com/tutorials/christmas-lights-special-microcontroller-basics-pic10f200">Christmas Lights Special - Microcontroller Basics (PIC10F200)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p10f200 Turn On LED</title>
      <link href="/2022/03/p10f200-turn-on-led/"/>
      <url>/2022/03/p10f200-turn-on-led/</url>
      
        <content type="html"><![CDATA[<p>Building on the <a href="">Microcontrollers and Assembly Code</a> post this is my first project based on the amazing work from <a href="https://www.circuitbread.com/">circuitbread.com</a>.</p><h2 id="Turning-on-a-LED-Hello-World"><a href="#Turning-on-a-LED-Hello-World" class="headerlink" title="Turning on a LED (Hello World)"></a>Turning on a LED (Hello World)</h2><ul><li><a href="https://www.youtube.com/watch?v=M5_-E1i95z8&list=PLfYdTiQCV_p4b7kQh-rnBs5UtgzQ6Ij-V&index=4">Getting Started with MPLAB X IDE - Part 4 Microcontroller Basics (PIC10F200)</a></li><li><a href="https://www.youtube.com/watch?v=6Z6xMBbQdZw&list=PLfYdTiQCV_p4b7kQh-rnBs5UtgzQ6Ij-V&index=5">Your First Assembly Program - Part 5 Microcontroller Basics (PIC10F200)</a></li></ul><p>Diagram from <a href="https://www.circuitbread.com/tutorials/the-first-assembly-program-part-5-simple-microcontroller-pic10f200">circuitbread.com</a></p><p><img src="/d/microcontrollers-assembly-code/turning-on-a-led.png" alt="Turning on a LED (Hello World)"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;p10f200.inc&quot;</span><br><span class="line">    __CONFIG _WDT_OFF &amp; _CP_OFF &amp; _MCLRE_OFF</span><br><span class="line">    ORG 0x0000</span><br><span class="line">INIT</span><br><span class="line">    MOVLW  ~(1 &lt;&lt; T0CS)     ; enable GPIO2</span><br><span class="line">    OPTION    </span><br><span class="line">    MOVLW ~(1 &lt;&lt; GP2)       ; set and GP2 as an output</span><br><span class="line">    TRIS GPIO</span><br><span class="line">LOOP </span><br><span class="line">    GOTO LOOP               ; loop forever</span><br><span class="line">END</span><br></pre></td></tr></table></figure><ul><li><code>#include &quot;p10f200.inc&quot;</code> tells the IDE &amp; compiler there are parameters already pre-defined for the chip that we can include, things like the <code>GP2</code> which would reference the bit in the register for us</li><li><code>; CONFIG</code> this is comment telling the human we are going to do the configuration</li><li><code>__CONFIG</code> setup the micro controller (p10f200)<ul><li><code>_WDT_OFF</code> watch dog timer off (else it will reset itself every once in a while)</li><li><code>_CP_OFF</code> code protection off</li><li><code>_MCLRE_OFF</code> means we can use pin 8 as a GP input and not a reset pin</li></ul></li><li><code>ORG 0x0000</code> origin, this is the begin of the program to execute</li><li><code>INIT ; We are initializing the microcontroller over the next three lines.</code> - this is a <code>INIT</code> is a <code>label</code> telling us where we will initialize / setup the controller anything after the <code>;</code> is a human readable comment</li><li><code>MOVLW ~(1 &lt;&lt; GP2)</code> <ul><li><code>MOVLW</code> is an <code>instruction</code> which moves the literals you pass it to the working register</li><li>the tilda <code>~</code> is a bitwise operations that inverts 1 and 0s. IE: 1 becomes 0 and 0 becomes 1</li><li>the left shit <code>&lt;&lt;</code> takes what we have and shifts it to the left</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         bits 7 6 5 4 3 2 1 0</span><br><span class="line">-----------------------------</span><br><span class="line">1             0 0 0 0 0 0 0 1</span><br><span class="line">1 &lt;&lt; GP2      0 0 0 0 0 0 1 0</span><br><span class="line">~(1 &lt;&lt; GP2)   1 1 1 1 1 1 0 1</span><br></pre></td></tr></table></figure><ul><li><code>TRIS GPIO</code> the <code>TRIS</code> <code>instruction</code> always takes <code>GPIO</code> as an <code>operand</code>. It means <code>TriState</code> so the GPIO can be <code>high voltage</code>, <code>low voltage</code> or <code>high impedance (OFF)</code>. This means take the values we put in the register and load them into the <code>TRISGPIO</code>. So <code>GP2</code> is an output because its value is <code>0</code></li><li><code>BSF GPIO, GP2</code> - set the bit in the register, this is setting GP2 to <code>1</code> / <code>HIGH</code> turning on the LED</li><li><code>LOOP</code> - just a lable</li><li><code>GOTO LOOP</code> - go back to the loop above, which will jump down to <code>GOTO LOOP</code>, so this is an infinite loop</li><li><code>END</code> - the end of our program</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scientist Pattern</title>
      <link href="/2022/03/scientist-pattern/"/>
      <url>/2022/03/scientist-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>Scientist: Measure Twice, Cut Once</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.blog/2016-02-03-scientist/#enter-scientist">https://github.blog/2016-02-03-scientist/#enter-scientist</a></li><li><a href="https://killalldefects.com/2019/12/08/experimental-csharp-with-scientist-dotnet/">https://killalldefects.com/2019/12/08/experimental-csharp-with-scientist-dotnet/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microcontrollers and Assembly Code</title>
      <link href="/2022/03/microcontroller-assembly-code/"/>
      <url>/2022/03/microcontroller-assembly-code/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/microcontrollers-assembly-code/binary-assembly-highlevel.png" alt="binary-assembly-highlevel"></p><p>These are notes I made while watching the amazing tutorials from <a href="https://www.youtube.com/channel/UClKevSwDIU8NTyF2DAK0G0Q">Circuit Bread</a> and <a href="https://www.circuitbread.com/">circuitbread.com</a></p><h2 id="Assembly-Code"><a href="#Assembly-Code" class="headerlink" title="Assembly Code"></a>Assembly Code</h2><blockquote><p>In computer programming, assembly language (or assembler language), is any low-level programming language in which there is a very strong correspondence between the instructions in the language and the architecture’s machine code instructions. - <a href="https://en.wikipedia.org/wiki/Assembly_language">wikipedia.org</a></p></blockquote><h3 id="Four-main-parts-of-Assembly"><a href="#Four-main-parts-of-Assembly" class="headerlink" title="Four main parts of Assembly"></a>Four main parts of Assembly</h3><ul><li><code>labels</code> - is a section of the code, partially for the human to understand what is going on. Can also be used as a reference within the code</li><li><code>instructions</code> - its a way of taking a word and shortening it up using a subset of letters (often the first letters of the word). This then reperesents something so you dont have to type out the whole word/sentence each time. These are also known as <code>numonics</code> / <code>operational code</code></li><li><code>operands</code> - these are the parameters that you give your <code>instructions</code></li><li><code>comments</code> - human readable words to understand what the program is doing</li></ul><h4 id="Instruction-examples"><a href="#Instruction-examples" class="headerlink" title="Instruction examples"></a>Instruction examples</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BSF           - Bit Set F. A set bit makes a pin high and clear bit makes a pin low</span><br><span class="line">DECFSZ        - Decrement if not zero</span><br><span class="line">MOVLW         - MOVe Literal to W. `W` is the working register. You have to put things in the working register to do any logic to/with it (ie: muiltip[ly the value by another value. Both values need to be in the working register)</span><br></pre></td></tr></table></figure><h2 id="Hardware-amp-Software"><a href="#Hardware-amp-Software" class="headerlink" title="Hardware &amp; Software"></a>Hardware &amp; Software</h2><p>Some key terms and notes</p><ul><li><code>IC</code> is integrated circuit (its the microcontroller)</li><li><code>PC</code> is the Program Counter which is where you are in the program (feels like the stack in .net)</li><li><code>stack</code> this small PIC10F200 has two levels of stack used to store the memory addresses when calling sub routines like a <code>GOTO</code></li></ul><p>There are many microcontrollers on the market and each vendor has proprietary and often trade marked technologies. Most of my notes are on <a href="https://www.microchip.com/">PIC10F200 microcontroller by microchip</a>. Others I found online are</p><ul><li>Atmel<ul><li><a href="/d/microcontrollers-assembly-code/ATTiny85.pdf">ATTiny85 IC 8 pin DIP8</a></li></ul></li><li>PIC12F675 (microchip)<ul><li><a href="https://www.jaycar.co.nz/flash-based-8-bit-cmos-microcontroller-pic-12f675/p/ZZ8603?pos=10&queryId=c030df1ee0206120d04ec6761fee9de0&sort=relevance">Flash Based 8-Bit CMOS Microcontroller PIC 12F675 - jaycar.co.nz</a></li><li><a href="/d/microcontrollers-assembly-code/PIC12F6XX.pdf">PIC12F6XX.pdf</a> </li></ul></li><li>PIC16F88 (microchip)<ul><li><a href="https://www.jaycar.co.nz/pic16f88-i-p-enhanced-flash-microcontroller-with-nanowatt-technology/p/ZZ8530?pos=1&queryId=96cc6c10e46ab1094abf0722b468facb">PIC16F88-I/P Enhanced FLASH Microcontroller with nanoWatt Technology</a></li><li><a href="/d/microcontrollers-assembly-code/PIC16F8X.pdf">PIC16F8X.pdf</a></li></ul></li></ul><h3 id="PIC10F200"><a href="#PIC10F200" class="headerlink" title="PIC10F200"></a>PIC10F200</h3><ul><li><a href="/d/microcontrollers-assembly-code/PIC10F2XX.pdf">PIC10F2XX.pdf</a></li></ul><p><img src="/d/microcontrollers-assembly-code/pic10f200.png" alt="pic10f200"></p><ul><li>Voltage range is 2.0V to 5.5v</li><li>16 bytes RAM (10 -&gt; 1F)</li><li>4 mHz / 4 ticks</li><li>256 words (instructions) as 12 bits = 1 word</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">256 * 12 / 8 (bytes)</span><br><span class="line">= 384 bytes</span><br></pre></td></tr></table></figure><p>Logical pins:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                ------</span><br><span class="line">          N/C -| 1  8 |- GP3 / MCLR (bar) / VPP</span><br><span class="line">          VDD -| 2  7 |- VSS</span><br><span class="line">  GP2 / T0CKI -| 3  6 |- N/C</span><br><span class="line">GP1 / ICSPCLK -| 4  5 |- GP0 / ICSPDAT</span><br><span class="line">                ------</span><br></pre></td></tr></table></figure><ul><li><code>N/C</code> no connect, so nothing is connected to these pins</li><li><code>VDD</code> power <code>+</code></li><li><code>GP0</code>, <code>GP1</code>, <code>GP2</code> general-purpose input/output</li><li><code>T0CKI</code></li><li><code>GP3</code> input only</li><li><code>MCLR (bar)</code> the bar is the line above MCLR, it means high its inversed so set to low to clear</li><li><code>VSS</code> ground <code>-</code></li><li><code>ICSPDAT</code> in-circuit serial programming Data (PICKit connection)</li><li><code>ICSPCLK</code> in-circuit serial programming Clock (PICKit connection)</li></ul><h3 id="PICKit-3-PICKit-4"><a href="#PICKit-3-PICKit-4" class="headerlink" title="PICKit 3 / PICKit 4"></a>PICKit 3 / PICKit 4</h3><p>This is the programmer / debugger (The ICD series are the more expensive none hobby ones). This <a href="https://www.vlrobotech.com/2020/11/01-pickit3-with-pic-controller.html">this post</a> at vlrobotech.com has details about the PICKit 3 and a cool 35 light control project!</p><p>You can also use an arduino as the programmer but I found a cheap PICKit 3 locally so rolled with it.</p><p><img src="/d/microcontrollers-assembly-code/picket3.png" alt="PICKit 3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 VPP/MCLR          clear</span><br><span class="line">2 VDD               power `+` </span><br><span class="line">3 VSS               ground `-`</span><br><span class="line">4 ICSPDAT/PGD       in-circuit serial programming Data (some controllers mark this as PGD)</span><br><span class="line">5 ICSPCLK/PGC       in-circuit serial programming Clock (some controllers mark this as PGC)</span><br></pre></td></tr></table></figure><h3 id="MPLAB-X-8-7x"><a href="#MPLAB-X-8-7x" class="headerlink" title="MPLAB X / 8.7x"></a>MPLAB X / 8.7x</h3><p>This is the the Integrated Development Environment (IDE)</p><p>I could get the sample code to work with v8.7</p><ul><li><a href="https://ww1.microchip.com/downloads/en/DeviceDoc/MPLAB_IDE_8_76.zip">MPLAB_IDE_8_76</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Project -&gt; New </span><br><span class="line">Project Name = `Blink LED`</span><br><span class="line">Project Directory = `C:\Dev\p10f200\BlinkLED\` / `C:\Dev\p10f200\TurnOnLED\`</span><br><span class="line"></span><br><span class="line">Programmer -&gt; Select Programmer -&gt; Picket 3</span><br><span class="line">Programmer -&gt; Settings -&gt; Power -&gt; Enable 5V</span><br><span class="line">Programmer -&gt; Reconnect</span><br><span class="line">Programmer -&gt; Erase Flash Device</span><br><span class="line"></span><br><span class="line">View -&gt; Project (if not shown)</span><br><span class="line">File -&gt; Add New File To Project -&gt; main.asm -&gt; Save</span><br><span class="line">Pop in source code</span><br><span class="line">File -&gt; Save</span><br><span class="line"></span><br><span class="line">Project -&gt; Build All (Relocatable code if it asks)</span><br><span class="line">Programmer -&gt; Program</span><br></pre></td></tr></table></figure><p>I had no luck with MPLAB X</p><ul><li><a href="https://www.microchip.com/en-us/tools-resources/develop/mplab-x-ide">MPLAB X</a></li></ul><h2 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h2><p>These are the simple projects involving LEDs that noobs like me can understand! (kind of)</p><ul><li><a href="/2022/03/p10f200-turn-on-led/">p10f200 Turn On LED</a></li><li><a href="/2022/03/p10f200-blink-led/">p10f200 Blink LED</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charlieplexing LEDs</title>
      <link href="/2022/03/charlieplexing-leds/"/>
      <url>/2022/03/charlieplexing-leds/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The Charlieplexing technique is named after its inventor, Charlie Allen, who invented the technique in 1995.</p></blockquote><p>Most of the notes below came from <a href="https://www.youtube.com/watch?v=b44VGTaCSk8">a quick look at Charlieplexing</a> by <a href="https://www.youtube.com/channel/UCezJOfu7OtqGzd5xrP3q6WA">Brian Lough</a> and <a href="https://www.circuitbread.com/tutorials/christmas-lights-special-microcontroller-basics-pic10f200">Christmas Lights Special - Microcontroller Basics (PIC10F200) at circuitbread.com</a></p><p>Controlling a <a href="/2020/05/pi-led-control/">light-emitting diode (LED)</a> is the <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">hello world</a> of electronics. Its often the first simple circuit we create.</p><p>The problem with doing this is it teaches us we need one General Purpose Input/Output (GPIO) pin to control something simple like our LED. For a Raspberry Pi which has 40 pins, 26 are GPIO so thats atleast 26 LEDs.</p><p>What if you need to control other things with those GPIO’s on the Pi or you have a much simpler micro controller such as the PIC10F200. The PIC10F200 only has 8 pins, of which 3 are GPIO so we would assume it can only control 3 LEDs. </p><p>With Charlieplexing it can in-fact control 6.</p><p>This is calculated with <code>N * (N - 1)</code> where <code>N</code> is the number of GPIO pins your controller has</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N * (N - 1)</span><br><span class="line">3 * (3 - 1)</span><br><span class="line">3 * 2</span><br><span class="line">= 6</span><br></pre></td></tr></table></figure><h2 id="How-does-this-work"><a href="#How-does-this-work" class="headerlink" title="How does this work?"></a>How does this work?</h2><p>I drew these diagrams using <a href="https://www.circuit-diagram.org/">https://www.circuit-diagram.org/</a></p><p>For every pair of GPIO there are 2 LEDs placed in operside polarity, LEDs will only work when the current flows from their positive to negative. Charlieplexing exploits this so the LED can be connected in a circuit.</p><p><img src="/d/charlieplexing-leds/pairs-ab.png" alt="charlieplexing pairs AB"></p><p><img src="/d/charlieplexing-leds/pairs-ac.png" alt="charlieplexing pairs AC"></p><p><img src="/d/charlieplexing-leds/pairs-bc.png" alt="charlieplexing pairs BC"></p><p>Using the diagrams above we will need to set the polaritys as follows to light up each LED (one at a time).</p><p>GPIO can be one of 3 states: </p><ul><li><code>high voltage</code></li><li><code>low voltage</code> </li><li><code>High z / high impedance</code><ul><li>High z can be achieved by setting the pin as <code>INPUT</code></li><li>High z is often marked as <code>Z</code> in tables for Charlieplexing</li></ul></li></ul><p>The truth table below shows the states above. Note that these diagrams show 1 resistor per wire but if the LEDs were all different colours they could have their own resistors to accommodate the voltage drop.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A     |     B     |     C     |     #LED</span><br><span class="line">--------------------------------------------</span><br><span class="line">LOW       HIGH        Z              1</span><br><span class="line">HIGH      LOW         Z              2</span><br><span class="line">Z         LOW         HIGH           3</span><br><span class="line">Z         HIGH        LOW            4</span><br><span class="line">HIGH      Z           LOW            5</span><br><span class="line">LOW       Z           HIGH           6</span><br></pre></td></tr></table></figure><h2 id="4-GPIO"><a href="#4-GPIO" class="headerlink" title="4 GPIO"></a>4 GPIO</h2><p>This would be <code>4 * (4 - 1)</code> = <code>12</code> LEDs</p><p><img src="/d/charlieplexing-leds/4gpio-pairs-cd.png" alt="4 GPIO pairs CD"></p><p><img src="/d/charlieplexing-leds/4gpio-pairs-bd.png" alt="4 GPIO pairs BD"></p><p><img src="/d/charlieplexing-leds/4gpio-pairs-ad.png" alt="4 GPIO pairs AD"></p><p>Truth table expanding from the GPIO 3 table.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A     |     B     |     C     |     D     |     #LED</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">Z          Z           LOW         HIGH          7</span><br><span class="line">Z          Z           HIGH        LOW           8</span><br><span class="line">Z          LOW         Z           HIGH          9</span><br><span class="line">Z          HIGH        Z           LOW           10</span><br><span class="line">LOW        Z           Z           HIGH          11</span><br><span class="line">HIGH       Z           Z           LOW           12</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://circuitdigest.com/microcontroller-projects/charlieplexing-arduino-to-control-12-leds-with-4-gpio-pins">Charlieplexing Arduino - Controlling 12 LEDs with 4 GPIO Pins</a></li><li><a href="https://www.youtube.com/watch?v=Z_8y7bryid8&list=PLfYdTiQCV_p4b7kQh-rnBs5UtgzQ6Ij-V&index=9">DIY Christmas Lights with a Microcontroller - Charlieplexing LEDs (PIC10F200) | Christmas Special</a></li><li><a href="https://en.wikipedia.org/wiki/Charlieplexing">https://en.wikipedia.org/wiki/Charlieplexing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithms</title>
      <link href="/2022/03/algorithms/"/>
      <url>/2022/03/algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Additionally see <a href="/2022/03/big-o-notation/">Big O Notation</a> and <a href="/2022/03/data-structures/">Data Structures</a>.</p><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Its the code you write that solves problems :)</p><blockquote><p>“In computer programming terms, an <code>algorithm</code> is a set of well-defined instructions to solve a particular problem.”</p></blockquote><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><ul><li><a href="https://www.youtube.com/watch?v=B25Gu5r0xUg">Binary search in 3 minutes</a></li></ul><p>Search algorithm to find a target value in a sorted array, with each iteration half the values are eliminated.</p><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><p>Choose a pivot and swap elements that are smaller to the left of the pivot and bigger to the right of the pivot</p><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><ul><li><a href="https://www.geeksforgeeks.org/merge-sort/">https://www.geeksforgeeks.org/merge-sort/</a></li></ul><p>Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then it merges the two sorted halves.</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bubble Sort</span><br><span class="line">Bucket Sort</span><br><span class="line">Cube Sort</span><br><span class="line">Counting Sort</span><br><span class="line">Heap Sort</span><br><span class="line">Insertion Sort</span><br><span class="line">Radix Sort</span><br><span class="line">Shell Sort</span><br><span class="line">Time Sort</span><br><span class="line">Tree Sort</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=Ge0Udbws1kc">The 10 Most Important Concepts For Coding Interviews (algorithms and data structures) - Clément Mihailescu</a></li><li><a href="https://dev.to/adavidoaiei/fundamental-data-structures-and-algorithms-in-c-4ocf">Fundamental Data Structures and Algorithms in C#</a></li><li><a href="https://www.programiz.com/dsa/algorithm">What is an Algorithm?</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> data structures </tag>
            
            <tag> algorithms </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Big O Notation</title>
      <link href="/2022/03/big-o-notation/"/>
      <url>/2022/03/big-o-notation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“In computer science <code>Big O notation</code> is useful in the analysis of algorithms” - wikipedia.org</p></blockquote><p>This illustation is from <a href="https://www.bigocheatsheet.com/">https://www.bigocheatsheet.com/</a> and is the most popular I’ve seen online.</p><p><img src="/d/big-o-notation/bigocheatsheet.png" alt="www.bigocheatsheet.com"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">O(1)         Constant                  Looking up by index, no matter the array size it will always take the same amount of time</span><br><span class="line">O(log n)     Logarithmic               Needs a sorted array, halving the data each time like a binary search</span><br><span class="line">O(n)         Linear                    1 to 1 relationship of inputs &quot;n&quot; and the amount of time needed to executed</span><br><span class="line">O(n log n)   Log linear complexity</span><br><span class="line">O(n^2)       Quadratic                 inputs raised to the power of 2 (a loop within a loop) ~ could also be called N squared</span><br><span class="line">O(2^n)       Exponential               looping over every possible combination in an array</span><br><span class="line">O(n!)        Factorial</span><br></pre></td></tr></table></figure><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><ul><li>Simplified analysis of an alorithms efficiency / time complexity.</li></ul><p>One of my peers once explained this to me as being able to use this in regards to problem solving.</p><p>Example: what’s the big O of <code>xs.map(...).filter(...).find(...)</code></p><h2 id="What-Is-Big-O"><a href="#What-Is-Big-O" class="headerlink" title="What Is Big O?"></a>What Is Big O?</h2><ul><li>Complexity in terms of the input size, <code>n</code>. How well will the algorithm perform as its input size grows.</li><li>Abstract the efficiency of our algorithms or code from the machine (its independent)</li><li>Examine the basic computer steps of the code</li><li>Can analyze both <code>time complexity</code> (how long it takes to run) and <code>space complexity</code> (how much memory it needs)</li></ul><h2 id="Types-of-measurement"><a href="#Types-of-measurement" class="headerlink" title="Types of measurement"></a>Types of measurement</h2><p>Typically look at <code>worst</code> case but we have to be cognizant of <code>best</code> and <code>average</code> case, its dependant on the application/algorithm</p><ul><li>Worst case (typically used)</li><li>Best case</li><li>Average case </li></ul><h2 id="General-rules"><a href="#General-rules" class="headerlink" title="General rules"></a>General rules</h2><ul><li>Ignore constants for trivial examples, example a running time of <code>5n</code>, it runs on the order of <code>O(n)</code>. This is because as <code>n</code> gets large the 5 no longer matters<ul><li>in practice constants matter, a constant of 2 or 3 could have a large impact</li></ul></li><li>The same way as <code>n</code> grows certain terms <code>dominate</code> others. <ul><li>Example <code>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)</code></li><li>this means we ignore/drop lower order terms when dominated </li></ul></li></ul><h3 id="O-1-Constant-time-complexity"><a href="#O-1-Constant-time-complexity" class="headerlink" title="O(1) Constant time / complexity"></a>O(1) Constant time / complexity</h3><p>Complexity: <code>Excellent</code> </p><p>Independent of input size <code>n</code> it takes a constant time to complete. Like 14 nanoseconds, or three minutes no matter the amount of data in the set.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = 5 + (15 * 20);         ~ O(1) big O of 1</span><br></pre></td></tr></table></figure><p>Sequence of statements in constant time</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = 5 + (15 * 20);         ~ O(1)</span><br><span class="line">y = 15 = 2;                ~ O(1)</span><br><span class="line">print x + y;               ~ O(1)</span><br><span class="line"></span><br><span class="line">this is 3 * O(1)</span><br><span class="line">as we drop constants its just O(1)</span><br></pre></td></tr></table></figure><h3 id="O-log-n-Logarithmic-time-complexity"><a href="#O-log-n-Logarithmic-time-complexity" class="headerlink" title="O(log n) Logarithmic time / complexity"></a>O(log n) Logarithmic time / complexity</h3><p>Complexity: <code>Good</code></p><blockquote><p>“The best way to wrap your head around this is to remember the concept of halving: every time n increases by an amount k, the time or space increases by k/2.”</p></blockquote><p>An example of this is binary search, see <a href="/2021/06/rosetta-code-invert-a-binary-tree/">Invert A Binary Tree (BST)</a>.</p><h3 id="O-n-Linear-time-complexity"><a href="#O-n-Linear-time-complexity" class="headerlink" title="O(n) Linear time / complexity"></a>O(n) Linear time / complexity</h3><p>Complexity: <code>Fair</code></p><p>Increases linearly and in direct proportion to the number of inputs.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for x in range (O, n):</span><br><span class="line">   print x;               ~ O(1)</span><br><span class="line"></span><br><span class="line">the block of code is n * O(1) which is the same as O(n)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y = 5 + (15 * 20);        ~ O(1)</span><br><span class="line">for x in range (O, n):</span><br><span class="line">   print x;               ~ complete for loop is O(n)</span><br><span class="line"></span><br><span class="line">total time is the summation of these two = O(1) + O(n)</span><br><span class="line">we drop low order terms when n gets large, the time to compute y is meaningless</span><br><span class="line">the result is then O(n) this is because the for loop dominates the run time</span><br></pre></td></tr></table></figure><h3 id="O-n-log-n-loglinear-complexity"><a href="#O-n-log-n-loglinear-complexity" class="headerlink" title="O(n log n) loglinear complexity"></a>O(n log n) loglinear complexity</h3><p>Complexity: <code>Bad</code></p><p><code>O(n log n)</code> grows logarithmically, which means that the time it takes to run the algorithm will increase slowly as the input size increases.</p><blockquote><p>“<code>O(n log n)</code> implies that <code>log n</code> operations will occur <code>n</code> times.”</p></blockquote><h3 id="O-n-2-quadratic-time-exponential-time"><a href="#O-n-2-quadratic-time-exponential-time" class="headerlink" title="O(n^2) quadratic time / exponential time"></a>O(n^2) quadratic time / exponential time</h3><p>Complexity: <code>Horrible</code></p><p><code>O(n^2)</code> grows quadratically, which means that the time it takes to run the algorithm will increase much more quickly as the input size increases.</p><p>It takes <code>n*n</code> operations, example is a nested loop.</p><p>With Big O we usually look at <code>worst case</code> scenario, for the examples below the largest runtimes are <code>O(n^2)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = 5 + (15 * 20);         ~ O(1)</span><br><span class="line">for x in range(0, n):</span><br><span class="line">   print x;                ~ complete for loop if O(n)</span><br><span class="line">for x in range(O, n):</span><br><span class="line">   for y in range(O, n):</span><br><span class="line">      print x * y;         ~ complete for the nested loops is O(n^2)</span><br><span class="line"></span><br><span class="line">this is executed at n * n which is O(n^2)</span><br><span class="line">the nested for loop dominates here, the result is O(n^2)</span><br></pre></td></tr></table></figure><p>Additionally we can have <code>O(nˣ)</code> or <code>polynomial complexity</code> which is just a range of possible values that <code>x</code> could be, generally for ccomputer science we are talking about <code>x</code> being <code>2</code>.</p><h3 id="O-2-n"><a href="#O-2-n" class="headerlink" title="O(2^n)"></a>O(2^n)</h3><p>Complexity: <code>Horrible</code></p><h3 id="O-n-factorial"><a href="#O-n-factorial" class="headerlink" title="O(n!) factorial"></a>O(n!) factorial</h3><p>Complexity: <code>Horrible</code></p><blockquote><p>“O(n!), or factorial complexity, is the “worst” standard complexity that exists. To illustrate how fast factorial solutions will blow up in size, a standard deck of cards has 52 cards, with 52! possible orderings of cards after shuffling.”</p></blockquote><h2 id="Additional-Concepts"><a href="#Additional-Concepts" class="headerlink" title="Additional Concepts"></a>Additional Concepts</h2><p>When I was researching <code>Big O notation</code> these concepts came up a lot specifically in content from <a href="https://www.youtube.com/channel/UCaO6VoaYJv4kS-TQO_M-N_g">Clément Mihailescu</a> Co-Founder of <a href="https://www.algoexpert.io/">https://www.algoexpert.io/</a></p><h3 id="Sliding-Window-Technique"><a href="#Sliding-Window-Technique" class="headerlink" title="Sliding Window Technique"></a>Sliding Window Technique</h3><p>Involves manipulating two pointers or two indices at the same time as you’re traversing thought something like a string or an array. Basically you have a left pointer/index and a right pointer/index and your move them simultaneously in an array or a string. (could be to count frequency of characters)</p><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>A lot of problems can be solved easily with recursion (as apposed to iteratively). This produces cleaner and less code than an iterative approach. Example problems that help you understand recursion include: </p><ul><li><code>n fibonacci</code> </li><li><code>calculate height of binary tree</code> or the <code>depths of nodes in a binary tree</code></li></ul><h3 id="Dynamic-Programming-DP"><a href="#Dynamic-Programming-DP" class="headerlink" title="Dynamic Programming (DP)"></a>Dynamic Programming (DP)</h3><p>It means being able to solve a problem that is complex by first solving a smaller version of that problem. To solve that small version of the problem you solve an even smaller version of that problem, until you can solve a trivial version of the problem. The only way to get good at DP is to do a lot of DP!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=__vX2sjlpXU">Big-O notation in 5 minutes — The basics</a></li><li><a href="https://www.youtube.com/watch?v=g2o22C3CRfU">Big-O Notation in 100 Seconds — Fireship</a></li><li><a href="https://www.youtube.com/watch?v=BgLTDT03QtU">Big-O Notation - For Coding Interviews — NeetCode</a></li><li><a href="https://towardsdatascience.com/linear-time-vs-logarithmic-time-big-o-notation-6ef4227051fb">Linear Time vs. Logarithmic Time — Big O Notation</a></li><li><a href="https://en.wikipedia.org/wiki/Big_O_notation">Big O notation - wikipedia.org</a></li><li><a href="https://www.bigocheatsheet.com/">bigocheatsheet.com</a></li><li><a href="https://medium.com/swlh/big-o-notation-and-time-space-complexity-1806936e6330">Big O Notation and Time/Space Complexity - medium.com</a></li><li><a href="https://medium.com/@gmcharmy/what-is-big-o-notation-and-why-we-need-it-3dff73777c9b">What is Big O notation? And why do we need it? - medium.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> data structures </tag>
            
            <tag> algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures</title>
      <link href="/2022/03/data-structures/"/>
      <url>/2022/03/data-structures/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“In computer science, a data structure is a data organization, management, and storage format that enables efficient access and modification.” - <a href="https://en.wikipedia.org/wiki/Data_structure">https://en.wikipedia.org/wiki/Data_structure</a></p></blockquote><h1 id="Why-care"><a href="#Why-care" class="headerlink" title="Why care?"></a>Why care?</h1><p>Suitable data structures affect the performance of your application. You can increase quality and performance by choosing the right data structure and accomanying algorithm. This feels like something we should care about.</p><p>Additionally <a href="/2022/03/big-o-notation/">Big O Notation</a> is worth understanding as this is how the complexity is rated.</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><p><strong>Complexity</strong>: O(1) Constant time / complexity to access data. Searching, Inserting, Deleteing is O(n) Linear time / complexity<br><strong>Use case</strong>: Fixed size collection that dont change, can store all types of data. Smaller tasks where you wont be interacting with the data that often</p><p><img src="/d/data-structures/arrays.png" alt="arrays (linear data structure, all of the same type)"></p><p>An array is a linear data structure that collects elements of the same data type and stores them in a sequential manner one after the other. This is a <code>Random Access</code> data structure.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">42</span>];</span><br></pre></td></tr></table></figure><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=fIj2PrY_UE0">The Array - Introduction to Data Structures (Episode 2)</a></li><li>Also see <a href="/2020/05/c-sharp-collections-of-entities/">C# Collections of Entities</a></li></ul><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p><strong>Complexity</strong>: O(1) Constant time / complexity to access data. Searching, Inserting, Deleteing is O(n) Linear time / complexity<br><strong>Use case</strong>: Dynamic size, can only store object (so no primative types although they are auto boxed for you). More interactive programs where you’ll be modifying data often</p><p><img src="/d/data-structures/arraylist.png" alt="arraylist)"></p><p>Fundametially this is a growing array, this means an <code>ArrayList</code> is dynamic and expands as needs. Its backed by an array in memory, this is managed by the ArrayList class.</p><p>The <code>ArrayList</code> stores references/pointers to the locations of its objects in memory, this is why it can grow in size. This means the data is not stored contiguously (as consecutive blocks of memory).</p><p>From the class it will inherit pre-built methods that we can use, there are a few which not all langauges implement. The most common are which you could find are</p><ul><li>Add<ul><li><code>Add(Object)</code> will append to the end of the array list where no value exists. If you pass a primative type like <code>Add(2)</code> it will convert the 2 to an <code>Integer(2)</code> object which is auto boxing</li><li><code>Add(Object, index)</code> will add the element you pass at the given index. If the index is taken it will shift the values over to the next avalible index</li></ul></li><li>Remove<ul><li><code>Remove(index)</code> will remove the element at that index location</li><li><code>Remove(Object)</code> will remove the first instance of that Object in the array list</li><li>Both return -1 if nothing is found to be removed</li><li>The size of the array list doesnt change</li></ul></li><li>Get<ul><li><code>Get(index)</code> will return the value at that location</li></ul></li><li>Set<ul><li><code>Set(index, Object)</code> is used to replace elements in the array list, it will set element at the index which you passe in to the object you also passed in</li></ul></li><li>Clear<ul><li><code>Clear</code> everything in the array list, the size doesnt change</li></ul></li><li>toArray<ul><li><code>var newArray = arrayList.toArray()</code> will convert an array list to an array, the array will be an array of objects</li></ul></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayList = <span class="keyword">new</span> ArrayList(); <span class="comment">// auto array size will be 10</span></span><br></pre></td></tr></table></figure><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=D0ll56hKReg">The ArrayList - Introduction to Data Structures (Episode 3)</a></li></ul><h1 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h1><p><strong>Complexity</strong>: O(log n) Logarithmic time / complexity<br><strong>Use case</strong>: Insert, find and delete</p><p><img src="/d/data-structures/binary-search-tree.png" alt="binary-search-tree"></p><p>Supports <code>Binary Search Algorithm</code> to find a targeted value in a sorted array. A tree is a collection of nodes with edges that connect them.</p><ul><li>None-linear, meaning they have a Left and a Right pointer</li><li>2 Children Max<ul><li>Child to the <code>left</code> has a value <code>less</code> than or equal to itself</li><li>Child on the <code>right</code> has a value <code>greater</code> than or equal to itself</li></ul></li><li>No 2 nodes can contain the same value</li><li>Each pass cuts the data in half</li></ul><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=B25Gu5r0xUg">Binary search in 3 minutes - Michael Sambol</a></li><li><a href="https://youtu.be/dYWz6wqvEEs">Tutorial 19 - Binary Search Trees in C#</a></li><li><a href="https://www.youtube.com/watch?v=pN1RWeX47tg">Binary Search Tree implemented in C#</a></li><li><a href="https://www.youtube.com/watch?v=mtvbVLK5xDQ">Binary Search Trees (BST) Explained in Animated Demo</a></li><li>Also see <a href="/2021/06/rosetta-code-invert-a-binary-tree/">Invert A Binary Tree</a></li></ul><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><p><strong>Complexity</strong>: O(1) Constant time / complexity (for insert, find and delete). This is because the hash function will tell us exactly where that key/value is stored<br><strong>Use case</strong>: Insert, find and delete</p><p><img src="/d/data-structures/dictionary.png" alt="dictionary index is determined by a hash of the key"></p><p>A Dictionary is an abstract data structure which stores data in the form of <code>key/value pairs</code>, each value has a key associated with it and together they create a pair which is stored in the dictionary data structure as an element of that dictionary. They are also known as <code>maps</code> or <code>associative arrays</code> in some langauges, there is no functional difference and all work in almost identical ways.</p><p>The most common way to implement a dictionary is using a <code>hash table/function</code>. By giving a hash function both a key and a table to map it to, it can determine what index location to store that key at in the array. Dictionaries are built upon these <code>Hash Tables</code> and the key’s in our key/value pairs are stored in memory IN these hash tables at indexes which are determined by a hash function.</p><p><strong>key:</strong> Dictionaries are indexed using the key as opposed to a numerical index like an array. The key’s in a key/value pair can be pretty much any primitive data type, examples <code>int</code>, <code>string</code>, <code>double</code> ect. Keys can only appear once in the dictionary, they have to be unique. Additionally each key can only have 1 value.</p><p><strong>value:</strong> The pairs can be anything, its very flexible in terms of the combinations of key/values. Examples <code>string</code>, <code>bool</code> or even another <code>dictionary</code>. Duplicate values are allowed as long as the key is unique.</p><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=j0cPnbtp1_w">Dictionaries - Introduction to Data Structures (Episode 8) - NullPointer Exception</a></li></ul><h2 id="Hash-sets-Hashtable"><a href="#Hash-sets-Hashtable" class="headerlink" title="Hash sets / Hashtable"></a>Hash sets / Hashtable</h2><ul><li>Hash tables are a way to store information so that we’re able to cut down the amount of nil values while also allowing for the information to be stored in a way that is easily accessible.</li><li>A hash function will take all the keys for a given dictionary and strategically map them to a certain index location in an array so that it can eventually be retreived easily.</li><li>Hash collisions <ul><li>are when a hash function takes two keys, example <code>Steven</code> and <code>Sean</code>, hashes them and returns the same index. Example 9</li><li>this can be resolved using either open addressing or closed addressing<ul><li>open addressing will put the key in some other index location separate from the one returned to us by the hash function. Normally by looking for the next nil value in the table, this is the closest location that has no key already.</li><li>closed addressing uses linked lists to chain together keys which result in the same hash value</li></ul></li></ul></li></ul><h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><p><strong>Complexity</strong>: O(V+E) <a href="https://towardsdatascience.com/graph-data-structure-cheat-sheet-for-coding-interviews-a38aadf8aa87">where V is number of vertices in the graph and E is number of edges in the graph</a>.<br><strong>Use case</strong>: Maps, <code>follower system</code> of a majority of social media websites, IP routing and can be used in telephone networks</p><p><img src="/d/data-structures/graph-visual-representation.png" alt="graph: visual representation"></p><p>The notational representation of a graph is not as easy to understand, this is the above left graph.</p><p><img src="/d/data-structures/graph-notational-representation.png" alt="graph: notational representation"></p><p>Graphs are composed of pieces of information and the paths that run between them. They are a <code>nonlinear</code> data structure consisting of <code>nodes</code> (the information) and <code>edges</code> (the paths that run between them). There are a finite set of nodes (aka vertices). Nodes are connected by the edges.</p><p>Graphs have multiple starting points, we can start from any node and traverse to any node that has an edge connecting them.</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><h3 id="Directed-amp-Undirected"><a href="#Directed-amp-Undirected" class="headerlink" title="Directed &amp; Undirected"></a>Directed &amp; Undirected</h3><p>Directed</p><ul><li>A graph in which the <code>direction</code> you traverse the nodes is <code>NOT important</code></li><li>Usually indicated by a <code>lack of arrows</code></li><li>We can hop between nodes or even back and forth between them without problems</li></ul><p>Undirected</p><ul><li>A graph in which the <code>direction</code> you traverse the nodes <code>IS important</code></li><li>Usually indicated by <code>arrows</code> representing direction, note the edges COULD point both ways but they dont have to</li></ul><p><img src="/d/data-structures/graph-directed-undirected.png" alt="graph: properties directed and undirected"></p><h3 id="Cyclic-amp-Acyclic"><a href="#Cyclic-amp-Acyclic" class="headerlink" title="Cyclic &amp; Acyclic"></a>Cyclic &amp; Acyclic</h3><p>Cyclic</p><ul><li>Contains a <code>path</code> from at least one node back to itself, example node 4 leads to 3, which leads to 2, which leads to 1 and finally back to 4 (this is a small cycle)</li><li>All <code>Undirected graphs</code> end up being cyclical, this is because the bi-directional natute of the nodes within undirected graphs theoretically forms a cycle between any two nodes</li></ul><p>Acyclic</p><ul><li>Contains <code>no path</code> from any one node which leads back in on <code>itself</code></li><li>This property can only really be applied to <code>Undirected Graphs</code></li></ul><p><img src="/d/data-structures/graph-cyclic-acyclic.png" alt="graph: properties cyclic and acyclic"></p><h3 id="Weighted"><a href="#Weighted" class="headerlink" title="Weighted"></a>Weighted</h3><ul><li>This applies to the <code>edges</code> of the graphs instead of the <code>nodes</code></li><li>Associating a numerical value with each edge (aka cost)</li><li>Each weight represents some <code>property</code> of the information you’re trying to convey</li></ul><p><img src="/d/data-structures/graph-weight.png" alt="graph: weighted"></p><h2 id="6-Types"><a href="#6-Types" class="headerlink" title="6 Types"></a>6 Types</h2><p>Combining graph properties can create the following <code>types</code> of graphs, additionally any of them can have the <code>weight</code> property. So there are 6 differenty types of graphs.</p><ul><li>Cyclic Undirected</li><li>Cyclical Directed</li><li>Acyclical Directed</li><li>Cyclic Undirected with weighted Edges</li><li>Cyclical Directed with weighted Edges</li><li>Acyclical Directed with weighted Edges</li></ul><h3 id="Common-Popular-Use-in-Computer-Science"><a href="#Common-Popular-Use-in-Computer-Science" class="headerlink" title="Common / Popular Use in Computer Science"></a>Common / Popular Use in Computer Science</h3><ul><li><p>Undirected Cyclical Heaps with weighted Edges</p><ul><li>Dijkstra’s shortest path algorithm</li><li>Compiles a list of the shortets possible paths from that source vertex to all other nodes within the graph</li><li>Google use this algorithm with its maps, its used in the process of IP routing and can be used in telephone networks</li></ul></li><li><p>Un-weighted Cyclical Graphs (Undirected and Directed)</p><ul><li>Are used in the <code>follower system</code> of a majority of social media websites like Facebook, Instagram, Twitter ect </li></ul></li></ul><h2 id="Traversals"><a href="#Traversals" class="headerlink" title="Traversals"></a>Traversals</h2><p>Graph Traversals: Depth First Search (DFS), Breadth-first search (BFS)</p><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=KEZX4qDyQ3s">Graphs - Introduction to Data Structures (Episode 12)</a></li></ul><h1 id="Heaps"><a href="#Heaps" class="headerlink" title="Heaps"></a>Heaps</h1><p><strong>Use case</strong>: </p><ul><li>Commonly used in the implementation of <ul><li><code>HeapSort</code>, a <code>sorting alorithm</code> which takes in  a list of elements, builds them into a min/max heap, and then <code>removes</code> the root node <code>continuously</code> to make a sorted list</li><li><code>priority queues</code> which is an advanced data structure which your computer uses to <code>designate tasks</code> and assign computer power based on how <code>urgent</code> the matter is</li></ul></li></ul><p><img src="/d/data-structures/heaps.png" alt="heaps"></p><ul><li>Each node can only have 2 children</li><li>A special tree where all <code>parent nodes</code> compare to their <code>children nodes</code> in some specific way<ul><li>Determines <code>where</code> the data is stored</li><li>Usually <code>dependent</code> on the parents node value</li></ul></li><li>Min heap<ul><li>The value at the <code>root node</code> of the tree must be the <code>minimum</code> amongst all of its children</li><li>This fact must be the same <code>recursively</code> for all the parent nodes contained within the heap</li></ul></li><li>Max heap<ul><li>The value at the <code>root node</code> of the tree must be the <code>maximum</code> amongst all of its children</li><li>This fact must be the same <code>recursively</code> for all the parent nodes contained within the heap</li></ul></li><li>Basically like binary trees and usually min/max heaps that have a special property.</li><li>Helpful when you need to repeatedly find the smallest and largest values in groups of values.</li></ul><h2 id="Adding-to-the-heap"><a href="#Adding-to-the-heap" class="headerlink" title="Adding to the heap"></a>Adding to the heap</h2><ul><li>When building the heap we always start at the left, if the left child is taken then we add to the <code>right</code>. </li><li>Finally <code>recursively</code> swap nodes based on the heap type <code>min</code> or <code>max</code></li></ul><h2 id="Deleting-from-the-heap-root-node"><a href="#Deleting-from-the-heap-root-node" class="headerlink" title="Deleting from the heap (root node)"></a>Deleting from the heap (root node)</h2><ul><li>Remove root node from the heap (Well its value)</li><li>Replace it with the node furthest to the right</li><li><code>heapify</code> the heap by comparing the parent nodes to their children and swapping if nexessary</li></ul><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=PEhPs4ZVvaw">Heaps - Introduction to Data Structures (Episode 11)</a></li></ul><h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><p><strong>Use case</strong>: could be to implement other data structures like <code>stacks</code>, <code>queues</code> and <code>hash tables</code>. Operations would be <code>search</code>, <code>insert</code> and <code>delete</code></p><p>Data structure for storing objects in linear order, each object has data and a pointer to the next object. Simliar to arrays except pointers determine ordering not the array indices.</p><p><img src="/d/data-structures/singly-linked-list.png" alt="singly linked list (pointers are in one direction)"></p><p>Additionally there are <code>doubly</code> linked lists.</p><p><img src="/d/data-structures/doubly-linked-list.png" alt="doubly linked list (prev pointer points to the object infront of it in the chain)"></p><p>And <code>circular</code> linked lists.</p><p><img src="/d/data-structures/circular-linked-list.png" alt="circular linked list (prev pointer of head object points to the tail, the next pointer of the tail object points to the head)"></p><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=F8AbOfQwl1c">Linked lists in 4 minutes - Michael Sambol</a></li><li>Also see <a href="/2021/06/reverse-a-linked-list/">Reverse a Linked List</a></li></ul><h1 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h1><p><strong>Complexity</strong>: </p><ul><li>O(n) for accessing/searching (this is because you have to go though each element to get the one you want, complexity defaults to worst case)</li><li>O(1) for inserting/deleting as its always at either the <code>head</code> or <code>tail</code></li></ul><p><strong>Use case</strong>: Job scheduling, printer queue, modern cameras (Google pixel phones) would use them for zero shutter lag (the time between when you take a picture and what the phone actually captures) </p><p><img src="/d/data-structures/queue.png" alt="queue (FIFO)"></p><p>A <code>queue</code> is a sequential access data structure that follows the FIFO methodology (First-In, First-Out), this means we can only access the elements contained within it in a certain way.</p><p>The first element added to the queue will always be the first one to be removed. New elements are added to the <code>tail</code> (aka <code>rear</code> or <code>back</code>) and are removed from the <code>head</code> (aka <code>front</code>) until all elements are removed.</p><p>Elements are added with <code>Enqueue(object)</code> and removed with <code>Dequeue()</code>. Additionally to can <code>Peek()</code> to check whats at the head without removing it or run <code>Contains(object)</code> to check if an element value matches what you are looking for.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">var</span> myQueue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">myQueue.Enqueue(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">myQueue.Enqueue(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">myQueue.Peek      <span class="comment">// get the head element in the queue without removing it</span></span><br><span class="line">myQueue.Dequeue   <span class="comment">// get and remove the head element</span></span><br></pre></td></tr></table></figure><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=1pd4yCbXoAI">The Queue - Introduction to Data Structures (Episode 5)</a></li><li><a href="https://www.geeksforgeeks.org/c-sharp-queue-with-examples/">https://www.geeksforgeeks.org/c-sharp-queue-with-examples/</a></li></ul><h1 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h1><p><strong>Complexity</strong>:</p><ul><li>O(n) for accessing/searching (this is because we have to pop off elements to get to the one we are looking for, complexity defaults to worst case)</li><li>O(1) for inserting/deleting as its always at the <code>head</code></li></ul><p><strong>Use case</strong>: Recusion uses stacks as a way of keeping of active functions/sub-routines. Undo/Redo in a word processor, back paging on web engines.</p><p><img src="/d/data-structures/stack.png" alt="stack (LIFO)"></p><p>This is a <code>sequential access</code> data structure, the elements can only be accessed in a particular order. Each element is dependat on the others and may only be obtained though those other elements. Elements are added using LIFO methodology (Last-In, First-Out)</p><p>Last element pushed onto the stack would be the first one popped off, this means there is only one way in and out for the data.</p><p>Elements are added with <code>Push(object)</code> and removed with <code>Pop()</code>. Additionally to can <code>Peek()</code> to check whats at the head without removing it or run <code>Contains(object)</code> to check if an element value matches what you are looking for.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">var</span> myStack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">myStack.Push(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">myStack.Peek      <span class="comment">// get the head element in the queue without removing it</span></span><br><span class="line">myStack.Dequeue   <span class="comment">// get and remove the head element</span></span><br></pre></td></tr></table></figure><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=GtJAXK4adNQ">The Stack - Introduction to Data Structures (Episode 4)</a></li></ul><h1 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h1><p><strong>Use case</strong>: Storing data in a <code>hierarchically</code> structure. File structure, Family tree, Company corporate structure.</p><p>Trees store data <code>hierarchically</code> as opposed to lineraly like a list. They have a specific starting point (the root node) with two branches however they can also have one or no branches.</p><p><img src="/d/data-structures/tree.png" alt="trees"></p><ul><li>Trees are an <code>abstract</code> data structure which contains a series of linked nodes connected together to form a <code>hierarchical representation</code> of information</li><li>The topmost node of a tree is the <code>root node</code>, connected to it (if anyt) are child nodes </li><li>A <code>parent node</code> has 1 or 2 child nodes</li><li>Each node in a tree are called <code>vertices</code></li><li>Connections between vertices are called <code>edges</code><ul><li>There is only one path between any two vertices, you cannot have more than one edge connectiong two vertices</li></ul></li><li><code>leaf nodes</code> have no children</li></ul><h2 id="Tree-Properties"><a href="#Tree-Properties" class="headerlink" title="Tree Properties"></a>Tree Properties</h2><ul><li><code>Height</code> is the number of edges on the longest possible path down towards a leaf</li><li><code>Depth</code> is the number of edges required to get from that node to the root node</li></ul><h2 id="Types-of-trees"><a href="#Types-of-trees" class="headerlink" title="Types of trees"></a>Types of trees</h2><p>By imposing rules and restrictions on what type of data is stored within a tree and also where we can use a tree structure to its full potential</p><p>There are many types, these are just a few</p><ul><li>AVL Tree</li><li>Binary search tree</li><li>Suffix Trees</li><li>Re-Black Tree</li><li>N-ary Tree</li></ul><p><strong>References</strong></p><ul><li><a href="https://www.youtube.com/watch?v=FjrY7EMqaVQ">Trees - Introduction to Data Structures (Episode 9)</a></li></ul><h1 id="General-References"><a href="#General-References" class="headerlink" title="General References"></a>General References</h1><ul><li><a href="https://www.youtube.com/watch?v=Ge0Udbws1kc">The 10 Most Important Concepts For Coding Interviews (algorithms and data structures) - Clément Mihailescu</a></li><li><a href="https://dev.to/adavidoaiei/fundamental-data-structures-and-algorithms-in-c-4ocf">Fundamental Data Structures and Algorithms in C#</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> data structures </tag>
            
            <tag> algorithms </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS CloudFormation</title>
      <link href="/2022/03/aws-cloudformation/"/>
      <url>/2022/03/aws-cloudformation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“AWS CloudFormation is a service that helps you automate the process of creating, updating, and deleting Amazon Web Services (AWS) resources. It does this by using templates written in JSON or YAML, which define the desired state of the resources in your infrastructure. The templates are processed by CloudFormation, which creates, updates, or deletes the resources as needed to reach the desired state.”</p></blockquote><h2 id="Terraform-CloudFormation"><a href="#Terraform-CloudFormation" class="headerlink" title="Terraform != CloudFormation"></a>Terraform != CloudFormation</h2><blockquote><p>Terraform and CloudFormation are both infrastructure-as-code (IaC) tools. CloudFormation is developed by AWS and only manages AWS resources. Terraform is developed by HashiCorp and can manage resources across a wide range of cloud vendors. - <a href="https://www.toptal.com/terraform/terraform-vs-cloudformation">https://www.toptal.com/terraform/terraform-vs-cloudformation</a></p></blockquote><h2 id="AWS-CloudFormation-terms"><a href="#AWS-CloudFormation-terms" class="headerlink" title="AWS CloudFormation terms"></a>AWS CloudFormation terms</h2><h3 id="Template-file"><a href="#Template-file" class="headerlink" title="Template file"></a>Template file</h3><p>This is the definition file that describes the resources you want to create, it can be <code>yml</code> or <code>json</code>. </p><p>Examples:</p><ul><li><a href="/2023/02/aws-s3-host-static-website/">JSON template that creates a resource and a policy</a>.</li><li><a href="https://github.com/carlpaton/AWSCloudFormation">YML template files</a>.</li></ul><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><blockquote><p>“A CloudFormation Stack is a collection of AWS resources created and managed as a single unit. You create, update, and delete a stack as a single deployment, and CloudFormation automatically handles the dependencies between the different resources in your stack. Each stack has a unique name and is based on a single CloudFormation template.”</p></blockquote><h3 id="Changeset"><a href="#Changeset" class="headerlink" title="Changeset"></a>Changeset</h3><blockquote><p>“AWS CloudFormation Changesets are a feature that allows you to preview the changes that will be made to your CloudFormation stack before you choose to execute the changes. This way you can make sure the changes you’re about to make will not cause any unintended consequences, such as deleting resources or modifying critical settings.</p></blockquote><p>A Changeset is a summary of changes that will be made to your CloudFormation stack. It includes the change type (e.g. create, update, or delete), the logical ID of the resource that will be affected, and the property values that will be changed. Once you have reviewed the Changeset, you can choose to execute or discard the changes.”</p><h2 id="Example-Lightsail-Containers"><a href="#Example-Lightsail-Containers" class="headerlink" title="Example: Lightsail Containers"></a>Example: Lightsail Containers</h2><p>A simple lightsail containers example created though cloud formation. The <code>Container Service</code> and its <code>Container Service Deployment</code> is created with the deployment template but the images running in the container are pre-built (I did it on my PC) and then pushed to <a href="https://hub.docker.com/">Docker Hub</a>.</p><ol><li>Clone the <code>app</code> and <code>proxy</code> source code used in the post <a href="/2021/08/aws-lightsail/">AWS Lightsail</a>.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/carlpaton/LightsailDemo</span><br><span class="line">cd LightsailDemo</span><br></pre></td></tr></table></figure><ol start="2"><li>Create repositories at <a href="https://hub.docker.com/">docker hub</a> or what ever registry you are using. I used these names:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">carlpaton/containerservice43.proxy-image</span><br><span class="line">carlpaton/containerservice43.app-image</span><br></pre></td></tr></table></figure><ol start="3"><li>Build, tag and push the images</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build -t app-image ./app/ </span><br><span class="line">docker tag app-image carlpaton/containerservice43.app-image</span><br><span class="line">docker push carlpaton/containerservice43.app-image</span><br><span class="line"></span><br><span class="line">docker build -t proxy-image ./proxy/</span><br><span class="line">docker tag proxy-image carlpaton/containerservice43.proxy-image</span><br><span class="line">docker push carlpaton/containerservice43.proxy-image</span><br></pre></td></tr></table></figure><ol start="4"><li>Clone the <code>template</code> source code</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd..</span><br><span class="line">git clone https://github.com/carlpaton/AWSCloudFormation</span><br><span class="line">cd AWSCloudFormation/lightsail</span><br></pre></td></tr></table></figure><ol start="5"><li>Ensure the template has the correct images under <code>ContainerServiceDeployment</code>-&gt;<code>Containers</code>-&gt;<code>Image</code> (note containers is an array)</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">ContainerName:</span> <span class="string">proxy</span></span><br><span class="line">    <span class="attr">Image:</span> <span class="string">carlpaton/containerservice43.proxy-image:latest</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">ContainerName:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">Image:</span> <span class="string">carlpaton/containerservice43.app-image:latest</span>    </span><br></pre></td></tr></table></figure><ol start="6"><li>Create the stack through the CLI, <a href="/2019/09/aws-install-and-configure-cli/">–profile carlos is local on my machine</a>. This can also be done though the <a href="console.aws.amazon.com">Console</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos cloudformation create-stack --stack-name stackservice43 --template-body file://containerservice43.yml</span><br></pre></td></tr></table></figure><ul><li><a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/create-stack.html">https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/create-stack.html</a></li></ul><p>The user group will need the the following permissions added under IAM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AWSCloudFormationFullAccess</span><br></pre></td></tr></table></figure><ol start="7"><li>This will create the Cloudformation stack <code>stackservice43</code> which will create the Lightsail container service <code>containerservice43</code></li></ol><p>Boom - infrastructure as code :D</p>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> aws </tag>
            
            <tag> infrastructure as code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimal API InstantAPIs</title>
      <link href="/2022/03/minimal-api-instant-apis/"/>
      <url>/2022/03/minimal-api-instant-apis/</url>
      
        <content type="html"><![CDATA[<p>Simple CRUD API from <a href="https://github.com/csharpfritz/InstantAPIs">Jeffrey Fritz</a>. It supports DbContext and an API based on JSON file. The JSON file is a good alternative to <a href="/2022/02/json-server/">JSON Server</a> as it will not pull down 100s of node modules that I actually dont understand.</p><p>The value of this Instant APIs is I can bring up my BFF in minutes and focus my time on building my front end application. The contract often changes as we build out the front end so if the BFF is flexible its a huge win.</p><p>See <a href="https://www.youtube.com/watch?v=vCSWXAOEpBo">Jeffrey Fritz - Build Web APIs Instantly for your Web Application with ASP.NET Core 6</a></p><p>Another alternative package is <a href="https://www.youtube.com/watch?v=z32_7KgCr6c">Fast Endpoints (package)</a> which would be well worth checking out.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol><li>Create the project and install <a href="https://www.nuget.org/packages/Fritz.InstantAPIs/">Fritz.InstantAPIs</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new web -o DemoApi -f net6.0</span><br><span class="line">cd DemoApi </span><br><span class="line"></span><br><span class="line">dotnet add package Fritz.InstantAPIs --prerelease</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the json file, example <code>db.json</code>. At the time of writing this guids are not supported as the primary key #sad</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;products&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pizza&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pineapple pizza&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;customers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pizza&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Update <code>Program.cs</code> as follows</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Mock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">app.UseJsonRoutes(o =&gt; o.SetFilename(<span class="string">&quot;db.json&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure><ol start="4"><li>Run the app</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure><h3 id="Postman-requests"><a href="#Postman-requests" class="headerlink" title="Postman requests"></a>Postman requests</h3><p><a href="https://www.postman.com/">Postman</a> is the most popular API platform tool but you can use anything you like such as <a href="/2018/02/soapui-aspnet-web-api/">SoapUI</a>.</p><p>You can then run postman requests </p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://localhost:7203/products</span><br></pre></td></tr></table></figure><p>response 200</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pizza&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pineapple pizza&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST https://localhost:7203/products</span><br><span class="line"></span><br><span class="line">BODY</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;foo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response 200</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;foo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GET-id"><a href="#GET-id" class="headerlink" title="GET {id}"></a>GET {id}</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://localhost:7203/products/5</span><br></pre></td></tr></table></figure><p>response 200</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;foo&quot;,</span><br><span class="line">    &quot;Id&quot;: 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DELETE-id"><a href="#DELETE-id" class="headerlink" title="DELETE {id}"></a>DELETE {id}</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE https://localhost:7239/customers/1</span><br></pre></td></tr></table></figure><p>response 200</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>You can then also add swagger support, this would probably be more useful if you are using the <code>Dbcontext</code> and plan to use the API for more than just local development of your front end application.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Mock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//swag!</span></span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">app.UseJsonRoutes(o =&gt; o.SetFilename(<span class="string">&quot;db.json&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//sawg!</span></span><br><span class="line">app.UseSwagger();</span><br><span class="line">app.UseSwaggerUI();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimal API</title>
      <link href="/2022/03/minimal-api/"/>
      <url>/2022/03/minimal-api/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Minimal APIs are architected to create HTTP APIs with minimal dependencies. They are ideal for microservices and apps that want to include only the minimum files, features, and dependencies in ASP.NET Core.</p></blockquote><p>TLDR; You can use controllers or minimal APIs</p><p>The examples below are from the <a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/min-web-api">tutorial: Create a minimal web API with ASP.NET Core</a></p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>Add the following nuget packages</p><ul><li>Microsoft.EntityFrameworkCore.InMemory</li><li>Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line">builder.Services.AddDbContext&lt;TodoDb&gt;(opt =&gt; opt.UseInMemoryDatabase(<span class="string">&quot;TodoList&quot;</span>));</span><br><span class="line">builder.Services.AddDatabaseDeveloperPageExceptionFilter();</span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br></pre></td></tr></table></figure><h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>MapGet</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.MapGet(<span class="string">&quot;/&quot;</span>, () =&gt; <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.MapGet(<span class="string">&quot;/todoitems&quot;</span>, <span class="keyword">async</span> (TodoDb db) =&gt;</span><br><span class="line">    <span class="keyword">await</span> db.Todos.ToListAsync());</span><br><span class="line"></span><br><span class="line">app.MapGet(<span class="string">&quot;/todoitems/complete&quot;</span>, <span class="keyword">async</span> (TodoDb db) =&gt;</span><br><span class="line">    <span class="keyword">await</span> db.Todos.Where(t =&gt; t.IsComplete).ToListAsync());</span><br><span class="line"></span><br><span class="line">app.MapGet(<span class="string">&quot;/todoitems/&#123;id&#125;&quot;</span>, <span class="keyword">async</span> (<span class="built_in">int</span> id, TodoDb db) =&gt;</span><br><span class="line">    <span class="keyword">await</span> db.Todos.FindAsync(id)</span><br><span class="line">        <span class="keyword">is</span> Todo todo</span><br><span class="line">            ? Results.Ok(todo)</span><br><span class="line">            : Results.NotFound());</span><br></pre></td></tr></table></figure><p>MapPost</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.MapPost(<span class="string">&quot;/todoitems&quot;</span>, <span class="keyword">async</span> (Todo todo, TodoDb db) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    db.Todos.Add(todo);</span><br><span class="line">    <span class="keyword">await</span> db.SaveChangesAsync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Results.Created(<span class="string">$&quot;/todoitems/<span class="subst">&#123;todo.Id&#125;</span>&quot;</span>, todo);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>MapPut</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.MapPut(<span class="string">&quot;/todoitems/&#123;id&#125;&quot;</span>, <span class="keyword">async</span> (<span class="built_in">int</span> id, Todo inputTodo, TodoDb db) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> todo = <span class="keyword">await</span> db.Todos.FindAsync(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (todo <span class="keyword">is</span> <span class="literal">null</span>) <span class="keyword">return</span> Results.NotFound();</span><br><span class="line"></span><br><span class="line">    todo.Name = inputTodo.Name;</span><br><span class="line">    todo.IsComplete = inputTodo.IsComplete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> db.SaveChangesAsync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Results.NoContent();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>MapDelete</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.MapDelete(<span class="string">&quot;/todoitems/&#123;id&#125;&quot;</span>, <span class="keyword">async</span> (<span class="built_in">int</span> id, TodoDb db) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> db.Todos.FindAsync(id) <span class="keyword">is</span> Todo todo)</span><br><span class="line">    &#123;</span><br><span class="line">        db.Todos.Remove(todo);</span><br><span class="line">        <span class="keyword">await</span> db.SaveChangesAsync();</span><br><span class="line">        <span class="keyword">return</span> Results.Ok(todo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Results.NotFound();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-gb/learn/modules/build-web-api-minimal-database/">Use a database with minimal API, Entity Framework Core, and ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/min-web-api">Tutorial: Create a minimal web API with ASP.NET Core</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking IHttpContextAccessor</title>
      <link href="/2022/03/mocking-ihttpcontextaccessor/"/>
      <url>/2022/03/mocking-ihttpcontextaccessor/</url>
      
        <content type="html"><![CDATA[<p>The <code>IHttpContextAccessor</code> Interface Provides access to the current HttpContext, if one is available.</p><h2 id="Example-code-to-test"><a href="#Example-code-to-test" class="headerlink" title="Example code to test"></a>Example code to test</h2><p>A common usage is a <code>correlation id</code> which is a unique identifier thats attached to requests/messages across distributed systems to reference to a particular transaction or event chain.</p><p>Note that <code>IHttpContextAccessor httpContextAccessor</code> would have been inject by the framework.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Guid <span class="title">GetCorrelationId</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> correlationId = _httpContextAccessor <span class="comment">// defensive coding could also be added to check for the existance of _httpContextAccessor</span></span><br><span class="line">        .HttpContext</span><br><span class="line">        .Request</span><br><span class="line">        .Headers.FirstOrDefault(header =&gt;</span><br><span class="line">            header.Key.Equals(</span><br><span class="line">                <span class="string">&quot;My-Cool-Correlation-Id&quot;</span>, </span><br><span class="line">                StringComparison.InvariantCultureIgnoreCase))</span><br><span class="line">        .Value</span><br><span class="line">        .ToString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Guid.TryParse(correlationId, <span class="keyword">out</span> <span class="keyword">var</span> parsedValue))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> parsedValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Guid.NewGuid(); <span class="comment">// Create new if one was not present</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example-unit-test"><a href="#Example-unit-test" class="headerlink" title="Example unit test"></a>Example unit test</h2><p>The key is to simply mock out the chain one node at a time so the test is easy to read - you can do this in one <code>.Setup</code> but it will be harder to read/maintain.</p><p>The ticky bit is to use <code>new HeaderDictionary(new Dictionary&lt;string, StringValues&gt;</code> for the headers, its a dictionary of dictionaries \ :D /</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetCorrelationId_WhenHeaderContainsCorrelationId_ReturnIt</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line">    <span class="keyword">var</span> expected = Guid.NewGuid();</span><br><span class="line">    <span class="keyword">var</span> headers = <span class="keyword">new</span> HeaderDictionary(<span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, StringValues&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;My-Cool-Correlation-Id&quot;</span>,</span><br><span class="line">            expected.ToString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> httpRequestMock = <span class="keyword">new</span> Mock&lt;HttpRequest&gt;();</span><br><span class="line">    <span class="keyword">var</span> httpContextAccessorMock = <span class="keyword">new</span> Mock&lt;IHttpContextAccessor&gt;(); </span><br><span class="line"></span><br><span class="line">    httpRequestMock</span><br><span class="line">        .Setup(x =&gt; x.Headers)</span><br><span class="line">        .Returns(headers);</span><br><span class="line"></span><br><span class="line">    httpContextAccessorMock</span><br><span class="line">        .Setup(a =&gt; a.HttpContext.Request)</span><br><span class="line">        .Returns(httpRequestMock.Object);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> MyRequestContext(httpContextAccessorMock.Object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> actual = classUnderTest.GetCorrelationId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    actual.Should().Be(expected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.ihttpcontextaccessor">https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.ihttpcontextaccessor</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloud Events</title>
      <link href="/2022/02/cloudevents/"/>
      <url>/2022/02/cloudevents/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CloudEvents is a specification for describing event data in a common way.</p></blockquote><p>Nuget packages</p><ul><li><a href="https://www.nuget.org/packages/CloudNative.CloudEvents/">CloudNative.CloudEvents - 2.2.0</a></li><li><a href="https://www.nuget.org/packages/CloudNative.CloudEvents.NewtonsoftJson/">CloudNative.CloudEvents.NewtonsoftJson - 2.2.0</a></li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>This is based on an example from <a href="https://github.com/cloudevents/spec/blob/v1.0/spec.md#example">github.com/cloudevents</a> which has been serialized as JSON (JavaScript Object Notation). I adapted the code and pushed it to <a href="https://github.com/carlpaton/CloudEventDemo">github.com/carlpaton/CloudEventDemo</a>.</p><p>This message could be sent via Amazon SQS or via <a href="https://github.com/cloudevents/sdk-csharp/blob/d61aa171d1f20aa8b51de0d7ec79502abbdcf021/docs/bindings.md">another protocol</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;specversion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.github.pull.create&quot;</span><span class="punctuation">,</span>                         <span class="comment">// the type of event, a single consumer may have different handlers per event type</span></span><br><span class="line"><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/cloudevents/spec/pull&quot;</span><span class="punctuation">,</span>     <span class="comment">// something unique about the application that generated</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b8389eed-8fdd-423d-be4f-f575fc6a537a&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-25T20:12:25.4607696+13:00&quot;</span><span class="punctuation">,</span>              <span class="comment">// ISO 8601</span></span><br><span class="line"><span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span>                                        <span class="comment">// optional string</span></span><br><span class="line"><span class="attr">&quot;datacontenttype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Foo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8448c50d-584c-48b1-8bbb-b9e180f4ff9c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Billy Goat&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;billy.goat@domain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Active&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Bar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;448fe797-c664-406d-8d1d-d35d3bebe552&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a40dd283-8d88-41fe-bf29-60233bcc3584&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Baz&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ccb07ad6-ae9b-48bb-a607-0e0df94905db&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Bat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;47c7def8-024b-4bd9-b337-3bee28292788&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><p>Attributes are the elements in the object. When using the package <a href="https://www.nuget.org/packages/CloudNative.CloudEvents/">CloudNative.CloudEvents</a> we will get some attrubites for free, example</p><ul><li><code>&quot;specversion&quot; : &quot;1.0&quot;</code></li></ul><p>There are some <a href="https://github.com/cloudevents/spec/blob/v1.0/spec.md#required-attributes">required attributes</a> such as</p><ul><li><code>&quot;id&quot; : &quot;8448c50d-584c-48b1-8bbb-b9e180f4ff9c&quot;</code></li><li><code>&quot;source&quot; : &quot;https://github.com/cloudevents/spec/pull&quot;</code></li><li><code>&quot;type&quot; : &quot;com.github.pull.create&quot;</code></li></ul><p>When using a serializer the <code>datacontenttype</code> should get set for you. Per <a href="https://github.com/cloudevents/sdk-csharp#a-few-gotchas-highlighted-for-the-impatient-who-dont-usually-read-docs">their docs</a> the <a href="https://github.com/cloudevents/sdk-csharp/blob/master/src/CloudNative.CloudEvents/CloudEvent.cs">CloudEvent</a> class is not meant to be used with object serializers like JSON.NET. </p><p>They suggest using <a href="https://github.com/cloudevents/sdk-csharp/blob/42b723d844506d27faff33cc477fc07f210c1430/docs/guide.md#sample-code-for-protocol-bindings-and-event-formatters">JsonEventFormatter</a> but you can also use XML.</p><ul><li><code>&quot;datacontenttype&quot; : &quot;text/xml&quot;</code> </li><li><code>&quot;datacontenttype&quot; : &quot;application/json&quot;</code></li></ul><p>The data attribute is your payload, this can be a complex object like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Foo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8448c50d-584c-48b1-8bbb-b9e180f4ff9c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Billy Goat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;billy.goat@domain.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Active&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Bar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;448fe797-c664-406d-8d1d-d35d3bebe552&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a40dd283-8d88-41fe-bf29-60233bcc3584&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Baz&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ccb07ad6-ae9b-48bb-a607-0e0df94905db&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Bat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;47c7def8-024b-4bd9-b337-3bee28292788&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h2><p>Serialization example to create a <code>CloudEvent</code> and serialize it to JSON as <code>message</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> CloudNative.CloudEvents;</span><br><span class="line"><span class="keyword">using</span> CloudNative.CloudEvents.NewtonsoftJson;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dict = <span class="keyword">new</span> Dictionary&lt;Guid, Guid&gt;();</span><br><span class="line">dict.Add(</span><br><span class="line">    Guid.Parse(<span class="string">&quot;448fe797-c664-406d-8d1d-d35d3bebe552&quot;</span>), </span><br><span class="line">    Guid.Parse(<span class="string">&quot;a40dd283-8d88-41fe-bf29-60233bcc3584&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cloudEvent = <span class="keyword">new</span> CloudEvent</span><br><span class="line">&#123;</span><br><span class="line">    Type = <span class="string">&quot;com.github.pull.create&quot;</span>,</span><br><span class="line">    Source = <span class="keyword">new</span> Uri(<span class="string">&quot;https://github.com/cloudevents/spec/pull&quot;</span>),</span><br><span class="line">    Id = Guid.NewGuid().ToString(),</span><br><span class="line">    Time = DateTime.Now,</span><br><span class="line">    Data = <span class="keyword">new</span> Root() &#123;</span><br><span class="line">        Bat = Guid.Parse(<span class="string">&quot;47c7def8-024b-4bd9-b337-3bee28292788&quot;</span>),</span><br><span class="line">        Baz = Guid.Parse(<span class="string">&quot;ccb07ad6-ae9b-48bb-a607-0e0df94905db&quot;</span>),</span><br><span class="line">        Foo = <span class="keyword">new</span> Foo() &#123;</span><br><span class="line">            Active = <span class="literal">true</span>,</span><br><span class="line">            Bar = dict,</span><br><span class="line">            Email = <span class="string">&quot;billy.goat@domain.com&quot;</span>,</span><br><span class="line">            Id = Guid.Parse(<span class="string">&quot;8448c50d-584c-48b1-8bbb-b9e180f4ff9c&quot;</span>),</span><br><span class="line">            Name = <span class="string">&quot;Billy Goat&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messageAsByteArray = <span class="keyword">new</span> JsonEventFormatter().EncodeStructuredModeMessage(cloudEvent, <span class="keyword">out</span> _);</span><br><span class="line"><span class="keyword">var</span> message = Encoding.UTF8.GetString(messageAsByteArray.ToArray(), <span class="number">0</span>, messageAsByteArray.Length);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(message);</span><br></pre></td></tr></table></figure><p>This is the <code>Data</code> object</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Active &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;Guid, Guid&gt; Bar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Root</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Foo Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Guid Baz &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Guid Bat &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Create-Extension"><a href="#Create-Extension" class="headerlink" title="Create Extension"></a>Create Extension</h2><p>We can add additional extension values to the cloud event.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">&quot;correlationid&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> val = <span class="string">&quot;5a122a96-f0ee-4d65-bfc9-760c80c870ef&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> attCorrelationId = CloudEventAttribute.CreateExtension(key, CloudEventAttributeType.String);</span><br><span class="line"><span class="keyword">var</span> knownAttribute = CloudEventAttribute.CreateExtension(<span class="string">&quot;string&quot;</span>, CloudEventAttributeType.String);</span><br><span class="line"></span><br><span class="line">cloudEvent[attCorrelationId] = knownAttribute.Format(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messageAsByteArray = <span class="keyword">new</span> JsonEventFormatter().EncodeStructuredModeMessage(cloudEvent, <span class="keyword">out</span> _);</span><br><span class="line"><span class="keyword">var</span> message = Encoding.UTF8.GetString(messageAsByteArray.ToArray(), <span class="number">0</span>, messageAsByteArray.Length);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(message);</span><br></pre></td></tr></table></figure><p>This adds a JSON attribute <code>correlationid</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;specversion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.github.pull.create&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/cloudevents/spec/pull&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9fe70f0b-e87d-4bcb-85a8-5c5e8f9457b4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-02-25T20:21:41.8614013+13:00&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;correlationid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5a122a96-f0ee-4d65-bfc9-760c80c870ef&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;datacontenttype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="As-an-actual-extension-method-this-could-look-like"><a href="#As-an-actual-extension-method-this-could-look-like" class="headerlink" title="As an actual extension method this could look like"></a>As an actual extension method this could look like</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CloudEventExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddCorrelationId</span>(<span class="params"><span class="keyword">this</span> CloudEvent cloudEvent, Guid correlationId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (correlationId == Guid.Empty) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Supplied correlationId cannot equal Guid.Empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> stringValue = correlationId.ToString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> attCorrelationId = CloudEventAttribute</span><br><span class="line">            .CreateExtension(<span class="string">&quot;correlationid&quot;</span>, CloudEventAttributeType.String);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> knownAttribute = CloudEventAttribute</span><br><span class="line">            .CreateExtension(<span class="string">&quot;string&quot;</span>, CloudEventAttributeType.String);</span><br><span class="line"></span><br><span class="line">        cloudEvent[attCorrelationId] = knownAttribute.Format(stringValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/carlpaton/CloudEventDemo">https://github.com/carlpaton/CloudEventDemo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cloud events </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger Annotations</title>
      <link href="/2022/02/swagger-annotations/"/>
      <url>/2022/02/swagger-annotations/</url>
      
        <content type="html"><![CDATA[<p>Namespace <code>Swashbuckle.Swagger.Annotations</code></p><p>All swagger configuration can be done in the <a href="/2018/07/swagger-swashbuckle-aspnetcore/">applications start up config</a> however there are times when either the API is old or for some reason you only need to document a single end point, perhaps the project is massive and core configuration changes are not possible but swagger was configured in a basic form at some point.</p><p>Annotations allow us to decorate certain methods which supports the above premise.</p><h2 id="SwaggerOperation"><a href="#SwaggerOperation" class="headerlink" title="SwaggerOperation"></a>SwaggerOperation</h2><p>This sets the operation id to what ever value you specify, this is helpful if the default is duplicated elsewhere in the API.</p><p>The operation id in OpenAPI is the field <code>operationId: Controller_MethodName_VERB</code> this needs to always be unique and will be used in the Swagger UI to navigate between methods.</p><p>To set this, decorate your method with:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">SwaggerOperation(OperationId = <span class="string">&quot;Controller_MethodName_VERB&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><h2 id="SwaggerResponseRemoveDefaults"><a href="#SwaggerResponseRemoveDefaults" class="headerlink" title="SwaggerResponseRemoveDefaults"></a>SwaggerResponseRemoveDefaults</h2><p>This is an interesting annotation as it removes the default <code>OK 200</code> response that all endpoints automagically get from swagger. This is useful when your endpoint is creating a new resource and you want to follow best practice by returning a <code>Created 201</code> instead.</p><p>To set this, decorate your method with:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">SwaggerResponseRemoveDefaults</span>]</span><br><span class="line">[<span class="meta">SwaggerResponse(HttpStatusCode.Created, <span class="string">&quot;The cool thing was created.&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle">Get started with Swashbuckle and ASP.NET Core</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Libman</title>
      <link href="/2022/02/libman/"/>
      <url>/2022/02/libman/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Library Manager (LibMan) is a lightweight, client-side library acquisition tool. LibMan downloads popular libraries and frameworks from the file system or from a content delivery network (CDN)</p></blockquote><p>For the life of me I cannot figure out why a <code>libman.json</code> file is not included by default when I scaffold an ASP.NET MVC project - this file is used by Library Manager (LibMan) to download the libraries that the scaffold brought down for me in <code>wwwroot\lib</code>. These are things like bootstrap and jquery. </p><p>As soon as I add this folder to my <code>.gitignore</code> (example below) they wont be commited which means when another developer pulls down the repository or I delete the folder and clone again the client side files are not there and the UI looks like trash :(</p><p>So what I now do is create the <code>libman.json</code> file as soon as possible.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lib</span><br><span class="line">packages</span><br><span class="line">*.suo</span><br><span class="line">*.vs</span><br><span class="line">.vs</span><br><span class="line">/.vs/config/applicationhost.config</span><br><span class="line">bin</span><br><span class="line">obj</span><br></pre></td></tr></table></figure><p>Thankfully Visual Studio has this <code>Manage Client-Side Libraries...</code> option which lets me search for these files and add them. </p><p><img src="/d/libman/manage-client-side-libraries.png" alt="Manage client side libraries"></p><p>Selecting this option will open the json file which can be manually edited.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;defaultProvider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unpkg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;libraries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;library&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bootstrap@5.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wwwroot/lib/bootstrap/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;library&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jquery@3.5.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wwwroot/lib/jquery/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;library&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jquery-validation@1.19.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wwwroot/lib/jquery-validation/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;library&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jquery-validation-unobtrusive@3.2.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wwwroot/lib/jquery-validation-unobtrusive/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Alternatively in solution explorer, right-click the folder <code>wwwroot</code> and choose <code>Add</code> &gt; <code>Client-Side Library</code></p><p><img src="/d/libman/add-client-side-library.png" alt="Add client side library"></p><p>I’ve had luck with providers <code>cdnjs</code> and <code>unpkg</code>.</p><p>If you then delete <code>wwwroot/lib</code> or clone a project that had this excluded you can restore the libraries by right clicking <code>libman.json</code> and selecting <code>Restore Client-Side Libraries</code></p><p><img src="/d/libman/restore-client-side-libraries.png" alt="Restore Client-Side Libraries"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/client-side/libman/">Client-side library acquisition in ASP.NET Core with LibMan</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/client-side/libman/libman-vs">Use LibMan with ASP.NET Core in Visual Studio</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> client side </tag>
            
            <tag> jquery </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Types</title>
      <link href="/2022/02/redis-types/"/>
      <url>/2022/02/redis-types/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Redis can be used as a <code>database</code>, <code>cache store</code>, <code>message broker</code>, <code>streaming engine</code> and probably more! I was interested in the types so had a hoon, hopefully what I learn here I can apply to <a href="/2019/05/redis-administrator/">Redis Administrator</a>.</p><h2 id="Playground-Docker"><a href="#Playground-Docker" class="headerlink" title="Playground - Docker"></a>Playground - Docker</h2><p>I did not want to install Redis locally and containers are cool so brought up a bride so the containers were on the same <a href="https://docs.docker.com/network/">network</a>, <a href="https://hub.docker.com/_/redis">redis server</a> and <a href="https://redis.io/docs/stack/get-started/install/docker/">redis cli</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge redis-bridge-network</span><br><span class="line"></span><br><span class="line">docker run --name red-srv -d -p 6379:6379 --network redis-bridge-network redis redis-server --appendonly yes</span><br><span class="line"></span><br><span class="line"># -it mean interactive, --rm means clean up when it exits</span><br><span class="line">docker run -it --network redis-bridge-network --rm redis redis-cli -h red-srv</span><br></pre></td></tr></table></figure><ul><li><a href="https://hub.docker.com/_/redis">https://hub.docker.com/_/redis</a></li></ul><h2 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h2><p>The suggested redis keys are <code>object-type:id</code>, for <a href="/2019/05/redis-administrator/">Redis Administrator</a> (which is the other way around) I used <code>1:2:seed_string</code>. 1 and 2 could be something sensible to the business (like a user and department id) and seed_string could be the human readable explanation of that data for example the department name.</p><p>Searching on a partial key could then be something like <code>1:*</code> which would match anything starting with <code>1:</code>. In general redis will create a key/value if it doesnt exist should you try write to it.</p><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>Love a good type, I thrive on structure!</p><h3 id="Types-String"><a href="#Types-String" class="headerlink" title="Types: String"></a>Types: String</h3><p><strong>Usage:</strong> Any kind of data as they are binary safe.</p><ul><li>Example store could be: integers, binary, csv, serialized json, xml, images, video, documents, sound</li><li>Practice usage: caching responses that dont change often and you would then include the ttl. Could be api reponse, session storage, html pages<ul><li>Can also be used for a counter as it has built in increment/decrement support (incr, incrby)</li></ul></li></ul><p>Implemented as key value pair, this is the fundamental redis data type. If the key exists it is replaced regardless of its type.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set mykey somevalue</span><br><span class="line">set mykey somevalue EX 5        ~ sets key/value with the ttl of 5 seconds</span><br><span class="line">get mykey</span><br><span class="line">exists mykey</span><br><span class="line">del mykey</span><br><span class="line">type mykey</span><br><span class="line">expire mykey 5    ~ 5 seconds</span><br><span class="line">ttl mykey</span><br></pre></td></tr></table></figure><p>CLI examples with a complex key and JSON serialized value. Although this is fine, a type of <code>Hash</code> may be better suited, see futher below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; set 1:2:seed_string &#123;&quot;Id&quot;:6338,&quot;SomeGuid&quot;:&quot;cfb9aace-08e7-4b7a-9e3a-8775d366240a&quot;,&quot;DateTime&quot;:&quot;2022-02-19T04:00:57.072271+00:00&quot;&#125;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">&gt; get 1:2:seed_string</span><br><span class="line">&#123;&quot;Id&quot;:6338,&quot;SomeGuid&quot;:&quot;cfb9aace-08e7-4b7a-9e3a-8775d366240a&quot;,&quot;DateTime&quot;:&quot;2022-02-19T04:00:57.072271+00:00&quot;&#125;</span><br></pre></td></tr></table></figure><p>Example data from <a href="https://hub.docker.com/r/carlpaton/redis-administrator">Redis Administrator</a>‘s seed function could look as follows where <code>VALUE</code> is a json serialized object.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KEY               VALUE</span><br><span class="line">1:2:seed_string   &#123;&quot;Id&quot;:6338,&quot;SomeGuid&quot;:&quot;cfb9aace-08e7-4b7a-9e3a-8775d366240a&quot;,&quot;DateTime&quot;:&quot;2022-02-19T04:00:57.072271+00:00&quot;&#125;</span><br><span class="line">2:3:seed_string   &#123;&quot;Id&quot;:2004,&quot;SomeGuid&quot;:&quot;e7e80043-bf6c-47bf-87b6-e7e801994d83&quot;,&quot;DateTime&quot;:&quot;2022-02-19T04:00:57.2217754+00:00&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/d/redis-types/string.png" alt="String Type : Redis Administrator"></p><ul><li><a href="https://redis.io/commands/set">https://redis.io/commands/set</a></li><li><a href="https://redis.io/docs/latest/develop/data-types/strings/">https://redis.io/docs/latest/develop/data-types/strings/</a></li><li><a href="https://www.youtube.com/watch?v=7CUt4yWeRQE">Redis Strings Explained - Redis</a></li></ul><h3 id="Type-Lists"><a href="#Type-Lists" class="headerlink" title="Type: Lists"></a>Type: Lists</h3><p><strong>Usage:</strong> Implement stacks and queues, build queue management for background worker systems.</p><p>Redis lists are linked lists of string values.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rpush mylist A                     ~ rpush adds a new element into a list on the left (at the head)</span><br><span class="line">rpush mylist B</span><br><span class="line">rpush mylist 1 2 3 4 5 &quot;foo bar&quot;</span><br><span class="line">lpush mylist first                 ~ lpush adds a new element into a list on the right (at the tail)</span><br><span class="line">lrange mylist 0 -1                 ~ lrange extracts ranges of elements</span><br><span class="line">                                   ~ takes two indexes, the first and the last element of the range to return.</span><br><span class="line">rpop mylist                        ~ retrieving the element from the list, and eliminating it from the list, at the same time.</span><br><span class="line">                                   ~ pop elements from left and right</span><br></pre></td></tr></table></figure><ul><li><a href="https://redis.io/docs/latest/develop/data-types/lists/">https://redis.io/docs/latest/develop/data-types/lists/</a></li></ul><h3 id="Type-Sorted-Set"><a href="#Type-Sorted-Set" class="headerlink" title="Type: Sorted Set"></a>Type: Sorted Set</h3><p><strong>Usage:</strong> Leaderboards, Rate limiters</p><p>A Redis sorted set is a collection of unique strings (members) ordered by an associated score. When more than one string has the same score, the strings are ordered lexicographically.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zadd hackers 1940 &quot;Alan Kay&quot;              ~ adds &quot;Alan Kay&quot; to the collection with score 1940</span><br><span class="line">zadd hackers 1957 &quot;Sophie Wilson&quot;</span><br><span class="line">zadd hackers 1953 &quot;Richard Stallman&quot;</span><br><span class="line">zadd hackers 1 &quot;carl&quot; 2 &quot;paton&quot;           ~ adding a collection by score/value</span><br><span class="line">zrange hackers 0 -1                       ~ extracts ranges of elements</span><br><span class="line">zrevrange hackers 0 -1                    ~ extracts ranges of elements ordering the score desc</span><br><span class="line">zrange hackers 0 -1 withscores            ~ extract with scores</span><br><span class="line">zrangebyscore hackers -inf 1950           ~ return by range with a score between negative infinity and 1950</span><br></pre></td></tr></table></figure><ul><li><a href="https://redis.io/docs/latest/develop/data-types/sorted-sets/">https://redis.io/docs/latest/develop/data-types/sorted-sets/</a></li><li><a href="https://www.youtube.com/watch?v=MUKlxdBQZ7g">Redis Sorted Sets Explained - Redis</a></li></ul><h3 id="Type-Set"><a href="#Type-Set" class="headerlink" title="Type: Set"></a>Type: Set</h3><p><strong>Usage:</strong> Track unique items, Represent relations</p><p>Redis Sets are an unordered collection of strings. In Redis, you can add, remove, and test for the existence of members in O(1) time complexity.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sadd myset 1 2 3             ~ adds new elements to a set</span><br><span class="line">sadd myset 42</span><br><span class="line">smembers myset               ~ returns all the members of the set value stored at key.</span><br><span class="line">spop myset                   ~ removes and returns one or more random members from the set value store at key.</span><br><span class="line">                             ~ not sure about the random, when I tested it kept removing at the end</span><br></pre></td></tr></table></figure><ul><li><a href="https://redis.io/docs/latest/develop/data-types/sets/">https://redis.io/docs/latest/develop/data-types/sets/</a></li></ul><h3 id="Type-Hash"><a href="#Type-Hash" class="headerlink" title="Type: Hash"></a>Type: Hash</h3><p><strong>Usage:</strong> Represent basic objects and to store groupings of counters</p><p>Collection of key value pairs. These are maps between string fields and string values used to represent objects.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hmset user:1000 username antirez birthyear 1977 verified 1     ~ sets multiple fields of the hash</span><br><span class="line">hget user:1000 username                                        ~ gets a single field</span><br><span class="line">hmget user:1000 username birthyear no-such-field               ~ gets an array of values</span><br><span class="line">hincrby user:1000 birthyear 10                                 ~ increments the number stored at field in the hash stored at key by increment.</span><br></pre></td></tr></table></figure><ul><li><a href="https://redis.io/docs/latest/develop/data-types/hashes/">https://redis.io/docs/latest/develop/data-types/hashes/</a></li><li><a href="https://redis.io/commands/?group=hash">https://redis.io/commands/?group=hash</a></li><li><a href="https://redis.io/commands/hincrby/">https://redis.io/commands/hincrby/</a></li></ul><h3 id="Type-Stream"><a href="#Type-Stream" class="headerlink" title="Type: Stream"></a>Type: Stream</h3><p><strong>Usage:</strong> Event sourcing, Sensor monitoring, Notifications </p><p>Models a log data structure in a more abstract way.</p><ul><li><a href="https://redis.io/docs/latest/develop/data-types/streams/">https://redis.io/docs/latest/develop/data-types/streams/</a></li><li><a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a></li></ul><h3 id="Type-Geospatial"><a href="#Type-Geospatial" class="headerlink" title="Type: Geospatial"></a>Type: Geospatial</h3><p><strong>Usage:</strong> Redis geospatial indexes let you store coordinates and search for them, finding nearby points within a given radius or bounding box.</p><ul><li><a href="https://redis.io/docs/latest/develop/data-types/geospatial/">https://redis.io/docs/latest/develop/data-types/geospatial/</a></li><li><a href="https://redis.com/redis-best-practices/indexing-patterns/geospatial/">https://redis.com/redis-best-practices/indexing-patterns/geospatial/</a></li><li><a href="https://redis.io/commands/geopos/">https://redis.io/commands/geopos/</a></li></ul><h3 id="Type-Bitmaps"><a href="#Type-Bitmaps" class="headerlink" title="Type: Bitmaps"></a>Type: Bitmaps</h3><p><strong>Usage:</strong> Bitmaps are not an actual data type, but a set of bit-oriented operations defined on the String type which is treated like a bit vector. Since strings are binary safe blobs and their maximum length is 512 MB, they are suitable to set up to 2^32 different bits.</p><ul><li><a href="https://redis.io/docs/latest/develop/data-types/bitmaps/">https://redis.io/docs/latest/develop/data-types/bitmaps/</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://redis.io/topics/data-types">https://redis.io/topics/data-types</a></li><li><a href="https://redis.io/docs/about/">https://redis.io/docs/about/</a></li><li><a href="https://university.redis.com/courses/ru101/">https://university.redis.com/courses/ru101/</a></li><li><a href="https://redis.com/redis-enterprise/data-structures/">https://redis.com/redis-enterprise/data-structures/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Server</title>
      <link href="/2022/02/json-server/"/>
      <url>/2022/02/json-server/</url>
      
        <content type="html"><![CDATA[<p>JSON Server is a zero coding API that you can spin up and configure in less than a minute. Its probably more for front end developers that need a quick API to test but I’ve used it as a mock API when the existing mocks were either broken or too complicated to setup.</p><p>An alternative package is <a href="/2022/03/minimal-api-instant-apis/">Minimal API InstantAPIs</a>.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol><li><p>Create a local folder, example <code>C:\data\devops\json-server</code></p></li><li><p>Install json-server</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd json-server</span><br><span class="line">npm install --save-dev json-server</span><br></pre></td></tr></table></figure><p>It does pull down over a hundred <code>node_modules</code> - who knows what <a href="/2020/01/software-vulnerability/">vulnerabilities</a> these will bring :D</p><ol start="3"><li>Create the database as <code>db.json</code> and populate with json data. It supports auto incrementing id’s and UUIDs. It also supports complex objects like <code>users</code>.</li></ol><p>Example data below is from one of my many unfinished projects -_-</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;schedule&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;equipment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gum extruder&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jobDescription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Check the sensor for no gum is working&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;startDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-04-25&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nextDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-25&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;equipment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gum extruder&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jobDescription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Check the heat exchager temperature, that between 50 and 55 degrees Celsius.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;startDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-04-26&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nextDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-26&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Daily&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weekly&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Monthly&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;5a4e6973-9e7d-4033-bf5b-e16a7a18d264&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bar&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo.bar@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;phoneNumbers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New Zealand&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;000 000 000&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">]</span> </span><br><span class="line">        <span class="punctuation">&#125;</span> </span><br><span class="line">    <span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>If you adding this to an existing project that uses npm you can just add to the <code>package.json</code> file under scripts. If you dont have a file and want to run it as a stub for something then just create the file as below. Alternatively you can run <code>npm init</code>, enter through all the steps and it will create a file for you where you can add this script.</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;api&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server db.json -p 3333 --delay 1500&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>Run the server using the shorthand script you just created</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run api</span><br></pre></td></tr></table></figure><ol start="6"><li>The data will be avalible at restful endpoints</li></ol><p><strong>GET</strong></p><ul><li><a href="http://localhost:3333/db">http://localhost:3333/db</a></li><li><a href="http://localhost:3333/schedule">http://localhost:3333/schedule</a></li><li><a href="http://localhost:3333/schedule/1">http://localhost:3333/schedule/1</a></li></ul><p><strong>POST</strong></p><p>When posting from postman set the header value <code>Content-Type : application/json</code></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.npmjs.com/package/json-server?activeTab=readme">https://www.npmjs.com/package/json-server?activeTab=readme</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-call-web-apis-with-the-useeffect-hook-in-react">https://www.digitalocean.com/community/tutorials/how-to-call-web-apis-with-the-useeffect-hook-in-react</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuget API</title>
      <link href="/2022/02/nuget-api/"/>
      <url>/2022/02/nuget-api/</url>
      
        <content type="html"><![CDATA[<p>The <a href="https://api.nuget.org/v3/index.json">service index</a> is the entry point for a NuGet package source. Looking at the document the <code>SearchQueryService</code> has the comment <code>Query endpoint of NuGet Search service (primary) that supports package type filtering</code> and is avalible at <a href="https://azuresearch-usnc.nuget.org/query">https://azuresearch-usnc.nuget.org/query</a> which seems like it will work for my application.</p><h2 id="Search-Query-Service"><a href="#Search-Query-Service" class="headerlink" title="Search Query Service"></a>Search Query Service</h2><p>The package <a href="https://www.nuget.org/packages/log4net">log4net</a> felt like a good candidate to pick on:</p><ul><li>GET <a href="https://azuresearch-usnc.nuget.org/query?q=log4net">https://azuresearch-usnc.nuget.org/query?q=log4net</a></li></ul><p>Pruning down the results I can see the following data should be useful and matched my search of <code>log4net</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log4net&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.14&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log4net is a tool to help the programmer output log statements to a variety ....&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;totalDownloads&quot;</span><span class="punctuation">:</span> <span class="number">107054643</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;versions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.10&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;downloads&quot;</span><span class="punctuation">:</span> <span class="number">5725024</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;@id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.nuget.org/v3/registration5-semver1/log4net/1.2.10.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;downloads&quot;</span><span class="punctuation">:</span> <span class="number">2961996</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;@id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.nuget.org/v3/registration5-semver1/log4net/2.0.0.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Microsoft.ApplicationInsights.Log4NetAppender&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.20.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Application Insights Log4Net Appender is a customer appender allowing you to send Log4Net log messages to Application ...&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;totalDownloads&quot;</span><span class="punctuation">:</span> <span class="number">7938163</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/nuget/api/service-index">https://docs.microsoft.com/en-us/nuget/api/service-index</a></li><li><a href="https://docs.microsoft.com/en-us/nuget/api/search-query-service-resource">https://docs.microsoft.com/en-us/nuget/api/search-query-service-resource</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sonatype OSS Index</title>
      <link href="/2022/02/sonatype-oss-index/"/>
      <url>/2022/02/sonatype-oss-index/</url>
      
        <content type="html"><![CDATA[<p>This is a free API that shows vulnerabilities in packages, it supports a few types like nuget and npm.</p><h2 id="Example-Nuget-packages"><a href="#Example-Nuget-packages" class="headerlink" title="Example Nuget packages"></a>Example Nuget packages</h2><ul><li><a href="https://www.nuget.org/packages/log4net/">https://www.nuget.org/packages/log4net/</a></li></ul><h2 id="Example-Endpoint"><a href="#Example-Endpoint" class="headerlink" title="Example Endpoint"></a>Example Endpoint</h2><p>The GET call needs the <code>coordinates</code> of the package which is built up as follows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model.Type = nuget</span><br><span class="line">model.Namespace =      // namespace is an optional value</span><br><span class="line">model.Name = log4net</span><br><span class="line">model.Version = 1.2.10</span><br><span class="line"></span><br><span class="line">var coordinates = $&quot;pkg:&#123;model.Type&#125;/&#123;model.Namespace&#125;&#123;model.Name&#125;@&#123;model.Version&#125;&quot;;</span><br></pre></td></tr></table></figure><p>Example coordinates <code>pkg:nuget/log4net@1.2.10</code></p><p>The base URL is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var endPoint = $&quot;https://ossindex.sonatype.org/api/v3/component-report/&#123;coordinates&#125;&quot;;</span><br></pre></td></tr></table></figure><p>The complete URL would be</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ossindex.sonatype.org/api/v3/component-report/pkg:nuget/log4net@1.2.10</span><br></pre></td></tr></table></figure><h3 id="Example-GET-response"><a href="#Example-GET-response" class="headerlink" title="Example GET response"></a>Example GET response</h3><ul><li>GET <a href="https://ossindex.sonatype.org/api/v3/component-report/pkg:nuget/log4net@2.0.14">https://ossindex.sonatype.org/api/v3/component-report/pkg:nuget/log4net@2.0.14</a></li></ul><p>The version <code>2.0.14</code> has no vulnerabilities at the time of this post.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkg:nuget/log4net@2.0.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log4net is a tool to help the programmer output log statements to a variety of output targets. log4net is a port of the excellent log4j framework to the .NET runtime&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;reference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ossindex.sonatype.org/component/pkg:nuget/log4net@2.0.14?utm_source=postmanruntime&amp;utm_medium=integration&amp;utm_content=7.28.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vulnerabilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>GET <a href="https://ossindex.sonatype.org/api/v3/component-report/pkg:nuget/log4net@1.2.10">https://ossindex.sonatype.org/api/v3/component-report/pkg:nuget/log4net@1.2.10</a></li></ul><p>The version <code>1.2.10</code> has 1 known vulnerability at the time of this post.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkg:nuget/log4net@1.2.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log4net is a tool to help the programmer output log statements to a variety of output targets. log4net is a port of the excellent log4j framework to the .NET runtime&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;reference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ossindex.sonatype.org/component/pkg:nuget/log4net@1.2.10?utm_source=postmanruntime&amp;utm_medium=integration&amp;utm_content=7.28.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vulnerabilities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c4ac70fa-d3ce-4153-b4e9-e1a9d193be8c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CVE-2018-1285&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CVE-2018-1285] Apache log4net before 2.0.8 does not disable XML external entities when parsing ...&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apache log4net before 2.0.8 does not disable XML external entities when parsing log4net configuration files. This could allow for XXE-based attacks in applications that accept arbitrary configuration files from users.&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cvssScore&quot;</span><span class="punctuation">:</span> <span class="number">9.8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cvssVector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CVE-2018-1285&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ossindex.sonatype.org/vulnerability/c4ac70fa-d3ce-4153-b4e9-e1a9d193be8c?component-type=nuget&amp;component-name=log4net&amp;utm_source=postmanruntime&amp;utm_medium=integration&amp;utm_content=7.28.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalReferences&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;https://nvd.nist.gov/vuln/detail/CVE-2018-1285&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://ossindex.sonatype.org/">https://ossindex.sonatype.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Component Tests With Collection &amp; Class Fixtures</title>
      <link href="/2022/01/component-tests/"/>
      <url>/2022/01/component-tests/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A component test verifies the functionality of individual components within an application by isolating and testing them in a controlled environment. </p></blockquote><p>Common techniques used in C# component tests are:</p><ul><li><a href="/tags/mocking/">Mocking and stubbing</a>: Creating simulated objects to replace dependencies and control their behavior.</li><li><a href="/2018/09/dependency-injection-frameworks/">Dependency injection</a>: Injecting dependencies into components to make them more testable.</li><li><a href="/2018/06/test-driven-development-tdd/">Test-driven development (TDD)</a>: Writing tests before writing the actual code, driving development in a test-first manner.</li></ul><p><img src="/d/component-tests/unit-boundaries.png" alt="Component tests dont crossing unit boundaries"></p><h1 id="Component-Test-example"><a href="#Component-Test-example" class="headerlink" title="Component Test example"></a>Component Test example</h1><p>I’ve worked in teams where <a href="/2022/01/integration-tests/">Integration Tests</a> are re-used, the external dependencies are mocked out with another appsettings file. This is in my opinion then a <code>Component Test</code>, so the two resources above <code>HTTP</code> and <code>Database</code> are mocked / stubbed.</p><p>The appsettings file could then be called something like <code>appsettings.Mock.json</code></p><h2 id="Using-a-fixture"><a href="#Using-a-fixture" class="headerlink" title="Using a fixture"></a>Using a fixture</h2><p>It makes sense to break the tests down but still group them by <code>Features</code> - these should be already grouped by your controllers. By design controllers are allowed to do too much, you can add as many endpoints in them as you like - thats a different topic, see <a href="https://ardalis.com/mvc-controllers-are-dinosaurs-embrace-api-endpoints/">MVC Controllers are Dinosaurs - Embrace API Endpoints</a>. For my features examples however grouping responsability makes component testing by feature easier.</p><p>Consider these controllers, <code>Artists</code> has simple <a href="https://developer.mozilla.org/en-US/docs/Glossary/CRUD">CRUD</a> operations and so does <code>Songs</code>, these operations are abstracted away and then <a href="/2018/04/dependency-inversion-principle-dip/">injected as an interface</a>, using the <code>Controllers</code> folder is simply following <a href="https://en.wikipedia.org/wiki/Convention_over_configuration">convention over configuration</a>.</p><p>I would understand this as one <code>Artist</code> has many <code>Songs</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Foo.Api/Controllers/ArtistsController.cs</span><br><span class="line">Foo.Api/Controllers/SongsController.cs</span><br></pre></td></tr></table></figure><p>The component tests could then be created as <code>Features/Artists</code> and <code>Features/Songs</code>, understandably there could be overlap if a Artist is persisted with some songs - ideally the link would just be the foreign key and not the whole implementation so <a href="/2020/11/what-makes-a-great-api/">design considerations need to thought out</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Foo.Api.ComponentTests/Features/Artists/</span><br><span class="line">Foo.Api.ComponentTests/Features/Songs/</span><br></pre></td></tr></table></figure><p>The abstractions the controller instantiates though <a href="/2018/09/dependency-injection-frameworks/">dependency injection</a> would still be injected by the applications framework, their behavior also doesnt change however the configuration (appsettings in .Net) can be changed by environment. This means the application needs to have the same <code>appsettings</code> values as the component tests.</p><h3 id="Collection-Fixtures"><a href="#Collection-Fixtures" class="headerlink" title="Collection Fixtures"></a>Collection Fixtures</h3><blockquote><p><strong>When to use</strong>: when you want to create a single test context and share it among tests in SEVERAL TEST CLASSES, and have it cleaned up after all the tests in the test classes have finished. - xunit.net/docs/shared-context</p></blockquote><p>Examples of data it could share </p><ul><li><code>Options</code> values (config) </li><li>Clients (classes that use HttpClient to call APIs)</li></ul><p>The tests can use something called a <code>Fixture</code> to instantiate their dependencys. One or more fixtures are then injected into our tests. So below the <code>CollectionFixture</code> is really a base class to share context between tests.</p><p>Example <code>Foo.Api.ComponentTests/Fixtures/CollectionFixture.cs</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> A base class for any tests that want to implement xunit&#x27;s ICollectionFixture functionality to share context between tests.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Test classes that use this fixture should be decorated with [Collection(&quot;Shared Collection Fixture&quot;)]</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CollectionFixture</span> : <span class="title">IAsyncLifetime</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> FooServiceClient _client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FooBarOptions _fooBar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollectionFixture</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> appSettings = <span class="string">&quot;appsettings.Mock.json&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (Environment.GetEnvironmentVariable(<span class="string">&quot;DOTNET_ENVIRONMENT&quot;</span>) == <span class="string">&quot;Uat&quot;</span>)</span><br><span class="line">            appSettings = <span class="string">&quot;appsettings.Uat.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .AddJsonFile(appSettings)</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line">        _fooBar = configuration</span><br><span class="line">            .GetSection(FooBarOptions.FooBar)</span><br><span class="line">            .Get&lt;List&lt;FooBarOptions&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FooServiceClient FooServiceClient</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_client != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> _client;</span><br><span class="line"></span><br><span class="line">            _client = <span class="keyword">new</span> FooService(_fooBar);</span><br><span class="line">            <span class="keyword">return</span> _client;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... DisposeAsync, InitializeAsync</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We use <code>IAsyncLifetime</code> to call into the services to dispose of resources. If you use <code>InitializeAsync</code> here to seed any data you must remember its for all tests. If you want to seed data just for a subset then see <code>Class Fixtures</code> below.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Task <span class="title">DisposeAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// clean up test data if the database was not brought up as part of the environment, ie: its not in a test container</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dispose of clients</span></span><br><span class="line">    _client?.Dispose();</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Task <span class="title">InitializeAsync</span>()</span> =&gt; Task.CompletedTask;</span><br></pre></td></tr></table></figure><p>To then allow the <code>CollectionFixture</code> to be instanciated and managed we need to create a <code>SharedCollectionFixture</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CollectionDefinition(<span class="string">&quot;Shared Collection Fixture&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SharedCollectionFixture</span> : <span class="title">ICollectionFixture</span>&lt;<span class="title">CollectionFixture</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// This class has no implementation as is never created. </span></span><br><span class="line">    <span class="comment">// Its purpose is simply to be the place to apply [CollectionDefinition] and all the ICollectionFixture&lt;&gt; interfaces.</span></span><br><span class="line">    <span class="comment">// See https://xunit.net/docs/shared-context    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test classes that want to use <code>CollectionFixture</code> should be decorated with <code>[Collection(&quot;Shared Collection Fixture&quot;)]</code>. Their constructor parameters can then include <code>CollectionFixture collectionFixture</code>. The facts can then access <code>_collectionFixture.FooServiceClient</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Collection(<span class="string">&quot;Shared Collection Fixture&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArtistTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> CollectionFixture _collectionFixture;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArtistTests</span>(<span class="params">CollectionFixture collectionFixture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _collectionFixture = collectionFixture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">U_I_E</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FooServiceClient"><a href="#FooServiceClient" class="headerlink" title="FooServiceClient"></a>FooServiceClient</h4><p>The <code>FooServiceClient</code> should inherit/implement <code>IDisposable</code> to dispose of any clients it may have. This is called from the fixtures <code>DisposeAsync</code> method to ensure all state is disposed of.</p><p><code> GC.SuppressFinalize(this)</code> will prevent derived types that introduce a finalizer from needing to re-implement IDisposable to call it. See <a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1816">CA1816: Call GC.SuppressFinalize correctly</a></p><p>Alternatively the client <code>FooServiceClient</code> could use the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed">sealed keyword</a> to prevent inheritance.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooServiceClient</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooServiceClient</span>(<span class="params">FooServiceOptions fooServiceOptions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _client = <span class="keyword">new</span> HttpClient &#123; BaseAddress = <span class="keyword">new</span> Uri(fooServiceOptions.Url) &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ArtistDto&gt; <span class="title">GetArtistAsync</span>(<span class="params">Guid artistId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _client.Dispose();</span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class-Fixtures"><a href="#Class-Fixtures" class="headerlink" title="Class Fixtures"></a>Class Fixtures</h3><blockquote><p><strong>When to use</strong>: when you want to create a single test context and share it among all the tests ONE TEST CLASS, and have it cleaned up after all the tests in the class have finished. - xunit.net/docs/shared-context</p></blockquote><p>Examples of what it can do</p><ul><li>Seed data before each test, ie: call your API under test and seed data (this is more for an integration tests, it may not be sensible for component but I kept this point for completeness should you be reusing component as integration tests)</li><li>Provide IDs (often GUIDs) for the seeded data, you would then use this in your tests</li></ul><p>Create the fixture the same as above but it will not need the <code>CollectionDefinition</code> class.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> A base class for any tests that want to implement xunit&#x27;s IClassFixture functionality to share context between tests.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> This class should be inherited by a child class to be used with IClassFixture<span class="doctag">&lt;T&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FindStuffFixture</span> : <span class="title">IAsyncLifetime</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ... private state</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Note that if you wanted to use the class fixture that provides for example test clients to do http calls you would just as for it in the class fixtures constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FindStuffFixture</span>(<span class="params">CollectionFixture collectionFixture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ... set private state</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InitializeAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ... seed data using `collectionFixture` clients</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ... collection of tasks to run in parallel</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">await</span> Task.WhenAll(tasks);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... its sensible to still wait a 1 to 10 seconds</span></span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">DisposeAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ... cleanup if needed </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// then return</span></span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create the tests and inherit/implement <code>IClassFixture&lt;T&gt;</code> and <code>IAsyncLifetime</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FindStuffTests</span> : <span class="title">IClassFixture</span>&lt;<span class="title">FindStuffFixture</span>&gt;, <span class="title">IAsyncLifetime</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FindStuffTests</span>(<span class="params">FindStuffFixture findStuffFixture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _findStuffFixture = findStuffFixture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">U_I_E</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-Collection-Fixtures-And-Class-Fixtures-together"><a href="#Using-Collection-Fixtures-And-Class-Fixtures-together" class="headerlink" title="Using Collection Fixtures And Class Fixtures together"></a>Using Collection Fixtures And Class Fixtures together</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Collection(<span class="string">&quot;Shared Collection Fixture&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FindStuffTests</span> : <span class="title">IClassFixture</span>&lt;<span class="title">FindStuffFixture</span>&gt;, <span class="title">IAsyncLifetime</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FindStuffTests</span>(<span class="params">CollectionFixture collectionFixture, FindStuffFixture findStuffFixture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _findStuffFixture = findStuffFixture;</span><br><span class="line">        _collectionFixture = collectionFixture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">U_I_E</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://xunit.net/docs/shared-context">xUnit.net: Shared Context between Tests</a></li><li><a href="https://automationpanda.com/2017/10/19/in-bdd-what-should-be-a-feature/">In BDD what should be a feature</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integration Tests</title>
      <link href="/2022/01/integration-tests/"/>
      <url>/2022/01/integration-tests/</url>
      
        <content type="html"><![CDATA[<p>Every team you work in will have their own understanding of <code>integration tests</code>, I tried to explain this better in my post on <a href="/2021/01/testing-strategies/">Testing Strategies</a></p><p>A general explanation of <code>integration tests</code> could be as follows:</p><blockquote><p>Code that invokes a unit of work that crosses project boundaries, uses actual external dependencies, and/or validates many different aspects about the code under test.</p></blockquote><p>This can visually be understood as</p><p><img src="/d/integration-tests/crosses-project-boundaries.png" alt="Integration test crosses project boundaries"></p><p>That said, the integration can also be seen as the integration of units of work with-in your application. These units of work could be services or <a href="/2020/08/cqrs/">command/queries</a>. Depending on what these units actually do they could be crossing project boundaries. </p><p>Examples</p><ul><li><code>Unit b</code> may implement a http client that interacts with an external API - thats outside of your projects boundary. So the above image reflects this.</li><li><code>Unit b</code> may implement some math calculations like <code>return 42 + 0;</code> - thats inside your projects boundary but it still integrates with <code>Unit a</code></li></ul><p><img src="/d/integration-tests/crossing-unit-boundaries.png" alt="Integration test crossing unit boundaries"></p><h1 id="Integration-Test-example"><a href="#Integration-Test-example" class="headerlink" title="Integration Test example"></a>Integration Test example</h1><p>Probably controversial but I see <code>Integration Tests</code> as being the same as a <code>Component Tests</code> with the key difference that the <code>Integration Tests</code> dont mock anything but the <code>Component Tests</code> do.</p><p>So I would just use the <a href="/2022/01/component-tests/">Component Tests</a> and instead of reading <code>appsettings.Mock.json</code>, use <code>appsettings.UAT|Prod.json</code>.</p><p>Alternate appoaches could be</p><ul><li><a href="/2022/07/integration-tests-with-webapplicationfactory-testcontainers/">Integration Tests With WebApplicationFactory and Test Containers</a></li><li><a href="/2021/07/k6-performance-testing/">Load/Performance Testing</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests/">Integration tests in ASP.NET Core</a></li><li><a href="https://automationpanda.com/2017/10/19/in-bdd-what-should-be-a-feature/">In BDD what should be a feature</a></li><li><a href="https://www.softwaretestinghelp.com/the-difference-between-unit-integration-and-functional-testing/#What_is_Integration_Testing">What is Integration Testing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personal Development Plan</title>
      <link href="/2022/01/personal-development-plan/"/>
      <url>/2022/01/personal-development-plan/</url>
      
        <content type="html"><![CDATA[<p>Simliar to <a href="/2019/08/objectives/">Objectives</a> a <code>Personal Development Plan</code> is a structured plan setting out over arching long term goals (1 to 3 years), then breaking them down into short term goals (3 months) then breaking down the short term goals into actions.</p><p>These actions through continuous small improvements lay the foundation to achieve your bigger goals. Seeing yourself complete these actions can keep you motivated when the journey is long and hard.</p><h3 id="Over-arching-long-term-goals"><a href="#Over-arching-long-term-goals" class="headerlink" title="Over arching long term goals"></a>Over arching long term goals</h3><p><img src="/d/personal-development-plan/long-term-goal.png" alt="Over arching long term goals"></p><p>It takes time to do things, if everything was simple and easy we would not appreciate success. These long term goals need to be ambitious but realistically attainable. A great example goal is working towards a promotion, for example you may want to move from <code>Junior Software Engineer</code> to <code>Intermediate Software Engineer</code> so I am going to use that as my example for this post and draw inspiration from other goals and actions that I have set for myself in the past.</p><p>You dont have to only set one goal, you can work towards things in parallel just take into account your mental wellbeing and existing responsibilities you may have. In my case, I’m a dad and husband so I need to always remember my child and wife also need my time. Even your own hobbies are important, just remember you have to make sacrifices sometimes.</p><h3 id="Short-term-goals"><a href="#Short-term-goals" class="headerlink" title="Short term goals"></a>Short term goals</h3><p><img src="/d/personal-development-plan/short-term-goals.png" alt="Short term goals"></p><p>These dont need to hugely ambitious although dont make them super simple, remember its about growth. Each of these smaller goals collectively make up the over arching long term goal. Some example short term goals that would work pretty well with the promotion goal described above could be:</p><ul><li>Learn better communication skills</li><li>Improve upon impact on squad and wider team</li><li>Establish mentorship relationship</li><li>Improve foundational Javascript skills</li></ul><p>This would not be a complete list but serve as a pretty starting example, you could have 2 to 10 short term goals but it would depend on the over arching goal.</p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p><img src="/d/personal-development-plan/smart-actions.png" alt="Smart Actions"></p><p>One or more actions make up a short term goal. There is a neat framework called SMART that I really like to use to set these actions. <a href="https://www.mindtools.com/pages/article/smart-goals.htm">mindtools.com</a> have a great post on these so I’ll just summarize what SMART stands for here:</p><ul><li>Specific, the action you will take</li><li>Measurable, is how you know its done</li><li>Attainable, a goal you can actually do and keep yourself motivated to achieve</li><li>Relevant, is this relavant to your goals or just noise</li><li>Time orientated, stick to the time constructs you have set. If its too large, break it down.</li></ul><p>Using the short term goal <code>Improve foundational Javascript skills</code> I chose to build a grid based game by following a tutorial from <a href="https://www.youtube.com/watch?v=w1JJfK09ujQ">Ania Kubów</a>.</p><p>The result of this action was:</p><ul><li>Knowledge in Javascript and a pretty cool game that I could actually play!</li><li>Posts to reflect on the learnings being <a href="/2021/05/js-methods/">JavaScript Methods (Web API)</a>, <a href="/2021/07/js-math/">Javascript Math</a> and <a href="/2020/08/js-arrays/">Javascript Array</a>.</li><li><a href="https://github.com/carlpaton/grid-based-javascript-games/">Cool source code to reference</a></li></ul><h3 id="Keeping-track"><a href="#Keeping-track" class="headerlink" title="Keeping track"></a>Keeping track</h3><p>You can keep track in any manner that makes sense as long as you can explain it and show progess. With the current covid situation we work from home a lot so a <a href="https://miro.com/">miro board</a> is a common way to keep track and follow a logical flow. The below is a contrived example with a single flow. Your board may have many stickys, notes and links. When it becomes a mess (and it will) be sure to keep it relevant and updated so only useful data is kept.</p><p><img src="/d/personal-development-plan/keeping-track.jpg" alt="Keeping track with miro"></p><h3 id="Reporting-Back"><a href="#Reporting-Back" class="headerlink" title="Reporting Back"></a>Reporting Back</h3><p>Mature companies require staff to report back on their development plans. Using a structure like STAR to explore the behaviors in a constructive and detailed way is a great way to communicate with your People Lead / Manager. </p><p>If your employer doesnt have existing pillars / expectations that your over arching long term goal aligns to then you can still use structures like STAR to summarize your journey. </p><ul><li>Situation, set the scene</li><li>Task, describe the purpose</li><li>Action, exaplain what you did</li><li>Result, share the outcome</li></ul><p><img src="/d/personal-development-plan/star.png" alt="STAR"></p><p>An alternative structure is SBI</p><ul><li>Situation, set the scene</li><li>Behavior, observable action</li><li>Impact, what I felt/thought/experienced</li></ul><p><img src="/d/personal-development-plan/sbi.png" alt="SBI"></p><p>Good luck with your Personal Development Plan! If you stick to it, show ententional and sustained growth you will reach your goals.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.mindtools.com/pages/article/smart-goals.htm">https://www.mindtools.com/pages/article/smart-goals.htm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cinewhoop Bumblebee V3</title>
      <link href="/2022/01/cinewhoop-bumblebee-v3/"/>
      <url>/2022/01/cinewhoop-bumblebee-v3/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 28/01/2025</strong></p><p><img src="/d/cinewhoop-bumblebee-v3/bumblebee.png" alt="Bumblebee"></p><p>A space to keep track of all the parts needed to build this quad.</p><h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><ul><li>iFlight CineWhoop V3 HD Bumblebee</li></ul><h2 id="Flight-controllers"><a href="#Flight-controllers" class="headerlink" title="Flight controllers"></a>Flight controllers</h2><ul><li>My board is a <code>DIAT/MAMBAF722_I2C(STM32F7X2)</code> (Diatone MAMBA AIO F722 MK1 35A 6S 8bit Flight Controller Stack 25.5mm/M2)</li><li>Betaflight F4 flight controller</li><li>Diatone MAMBA F405 DJI FC</li><li>Diatone Mamba F405 MK2 DJI Flight Controller</li></ul><h2 id="ESC"><a href="#ESC" class="headerlink" title="ESC"></a>ESC</h2><p>40 amp seems to be the standard but depending on the props and motors I guess 20 would work too.</p><ul><li><a href="https://www.quadjunkie.co.nz/product/diatone-mamba-f40-mini-dshot1200-4in1-32bit-esc-40a-6s/">Diatone MAMBA F40 MINI Dshot1200 4IN1 32bit ESC 40A 6S</a></li></ul><h2 id="Motors"><a href="#Motors" class="headerlink" title="Motors"></a>Motors</h2><p>My motors are <code>BrotherBobby 1806 2850KV</code></p><ul><li><code>18</code> is the diameter in mm of the stator inside and <code>06</code> is its height.</li><li>the motor uses m3 cap-screws so I drilled the frame and added some super glue to help it from tearing</li></ul><p>This frame is 12x12 m2 for the motors and these are the suggested motors from iflight:</p><ul><li>4S XING 1408 3600KV (I think this was V1/V2)</li><li>4S XING 2203.5 3600KV (currently shipped with V3 of the frame)</li></ul><p>The KV rating is how fast it spins, Im never sure what KV to choose by my observations are </p><ul><li>around 2000kv is 6s (3 inch quad)</li><li>around 3500kv is 4s (3 inch quad)</li><li>around 4200kv is 4s (4 inch quad) but that would need to be 2204 (so physically bigger motor)</li></ul><h2 id="Battery"><a href="#Battery" class="headerlink" title="Battery"></a>Battery</h2><ul><li>Mine are CNHL Black 1300mAh 100c</li><li>From what Ive seen online up to 1550mAh will work（6-7 minutes flight time w/GoPro Hero8）</li></ul><h2 id="Betaflight"><a href="#Betaflight" class="headerlink" title="Betaflight"></a>Betaflight</h2><p>You can download <a href="https://github.com/betaflight/betaflight-configurator/releases">Betaflight Configurator from github</a>, look for the assets drop down.</p><details>  <summary>MAMBAF722</summary><p>Some settings like <code>Modes</code> are the same as the <code>OMNIBUSF4SD</code></p><h3 id="Ports"><a href="#Ports" class="headerlink" title="Ports"></a>Ports</h3><p>This means my SBUS (orange signal wire) to the Futaba RX is connected to <code>RX 4</code> on the MAMBAF722 controller. The brown is connected to <code>G</code> and the red is connected to <code>5V</code></p><p><img src="/d/cinewhoop-bumblebee-v3/f7-ports.jpg" alt="ports"></p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AIRMODE:            Enabled</span><br><span class="line">PID loop freq:      8.00hHz</span><br><span class="line">Max ARM angle:      180</span><br><span class="line">OSD:                Enabled</span><br></pre></td></tr></table></figure><h3 id="Motors-1"><a href="#Motors-1" class="headerlink" title="Motors"></a>Motors</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mixer:              QUAD X</span><br><span class="line">ESC/Motor:          DSHOT600</span><br></pre></td></tr></table></figure></details><br><details>  <summary>OMNIBUSF4SD</summary><p>This controller was second hand and kept dropping power so I bought the <code>MAMBAF722</code> and moved over to it.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p><img src="/d/cinewhoop-bumblebee-v3/setup.png" alt="setup"></p><h3 id="Ports-1"><a href="#Ports-1" class="headerlink" title="Ports"></a>Ports</h3><ul><li>This means the DJI white wire is connected to <code>TX6</code> and the DJI grey wire is connected to <code>RX6</code></li><li>The controller had a <code>SBUS</code> pad which I used for the orange signal wire to the Futaba RX, Futaba brown wire went to <code>-</code> and Futaba red wire went to <code>5V</code>. </li><li>My assumption is <code>SBUS</code> is <code>UART1</code> so enabled Serial Rx</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/ports.png" alt="ports"></p><h3 id="Configuration-1"><a href="#Configuration-1" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li>Mixer=Quad X : set the motors orientation</li><li>System configuration : I set the gyro &amp; loop frequency to <code>8.00 kHz</code> which is the highest. I dont think you can change the gyro speed on a F7 board.</li><li>ESC/Motor Features : DSHOT600 is the fastest</li><li>Board and Sensor Alignment : Yaw Degrees rotates the flight controller if you could not set it facing forward (look for an arrow on the board). Sensible values are <code>0, 90, 180 or 270</code></li><li>Arming : 180 is sensible so you can arm it on a surface that is not level</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/config.png" alt="config"></p><ul><li>Airmode : turning this on will allow you to steer the quad in the air when you are letting it fall. IE: you have cut throttle.</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/config-1.png" alt="config - other"></p><ul><li>SBUS connected receiver (mine is FUTABA)</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/config-2.png" alt="config - receiver"></p><h3 id="Power-amp-Battery"><a href="#Power-amp-Battery" class="headerlink" title="Power &amp; Battery"></a>Power &amp; Battery</h3><p>Check the total battery voltage with a muiltimeter, this should be the same as the voltage shown in betaflight. If its not drop the scale values until the shown voltage is the same.</p><p><img src="/d/cinewhoop-bumblebee-v3/power-battery.png" alt="power &amp; battery"></p><h3 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h3><p>Remove the props and power on the quad &amp; radio. Then check the <code>preview</code> - the quad will probably be rotating or moving slowly.</p><p><img src="/d/cinewhoop-bumblebee-v3/receiver.png" alt="receiver preview"></p><ul><li>Use <code>SUB TRIM</code> to trim these as close to <code>1500</code> as you can get them.</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/receiver-1.png" alt="receiver"></p><ul><li>For <code>Roll</code>, <code>Pitch</code> and <code>Yaw</code> move the radio sticks to their extreme end points and use <code>END POINT</code> on your radio to to trim as close as you can get to <code>1000</code> and <code>1500</code> </li></ul><p><img src="/d/cinewhoop-bumblebee-v3/receiver-2.png" alt="receiver"></p><h3 id="Modes"><a href="#Modes" class="headerlink" title="Modes"></a>Modes</h3><ul><li>Arm : I use the far left switch F (AUX 1) to arm ON/OFF</li><li><code>Angle</code>, <code>Horizon</code> I use switch C (AUX 2) to activate. Its a 3 position switch, up is <code>Angle</code> (self level mode). Middle is <code>Horizon</code> (Keeps pitch you set it at so you have to level it yourself). Down is <code>Acro</code> mode which means its all you :D</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/modes-1.png" alt="modes"></p><h3 id="OSD"><a href="#OSD" class="headerlink" title="OSD"></a>OSD</h3><p>These are the on screen display values that I thought would be useful - they are overlayed into my goggles and I can drag them around so they display where I want them to be.</p><ul><li>Battery average cell voltage</li><li>Batter current mAh draw</li><li>Crosshairs</li></ul><p><img src="/d/cinewhoop-bumblebee-v3/osd.png" alt="osd"></p><h3 id="Motors-2"><a href="#Motors-2" class="headerlink" title="Motors"></a>Motors</h3><p>Allows you to check the correct motors spin up, this confirms the orientation of the quad (front and back) and is helpful if you did not check the flight controllers arrow and set that to face forward.</p><ul><li>Note this is NOT affected by <code>Configuration</code> -&gt; <code>Board and Sensor Alignment</code> -&gt; <code>Yaw Degrees</code></li><li>See CLI <code>mmix</code></li></ul></details><br><h2 id="DJI-Air-Unit"><a href="#DJI-Air-Unit" class="headerlink" title="DJI Air Unit"></a>DJI Air Unit</h2><h3 id="Wires"><a href="#Wires" class="headerlink" title="Wires"></a>Wires</h3><p>If the flight controller doesnt have a DJI port (eg <code>OMNIBUSF4SD</code>) its still possible to solder it in, just make sure if you are using 6S you run though a BEC/Regulator.</p><p>The BEC is always ideal as it will give continuous clean power, the example in the video below was a 8V 3AMP (8x3 = 24 watts of power).</p><p>The air unit only needs 4 to 9 watts but its better to have more avalible to it (it will only draw what it needs). Apparently it will draw as much as 16 watts.</p><p>Common regulators are 9V 2AMP (9x2 = 18 watts)</p><p>If you are just running 4S then you can just use VBAT off the flight controller.</p><p><img src="/d/cinewhoop-bumblebee-v3/dji-air-unit-wires.png" alt="DJI Air Unit Wires"></p><ul><li>See this video <a href="https://www.youtube.com/watch?v=3qbQRJRmJrM">HOW-TO Wire the DJI FPV Air Unit (or Caddx Vista/Air Unit Lite) for Betaflight</a></li></ul><h3 id="Region-amp-Power-changes"><a href="#Region-amp-Power-changes" class="headerlink" title="Region &amp; Power changes"></a>Region &amp; Power changes</h3><ul><li>The Air Unit allows you to set the region with a text file <code>naco.txt</code>, set the region 1 (Country=US, Radio mode=FCC)</li><li>Save to the root of your SD card and pop it into the Air Unit</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">naco.txt</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li>The Goggles allow you to set the power with a text file <code>naco_pwr.txt</code></li><li>Save to the root of your SD card and pop it into the Goggles, this will allow up to <code>1000mw</code> of power output (default is <code>25mw</code>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">naco_pwr.txt</span><br><span class="line">pwr_1                         ~ this is 1000 mwah (this is the highest value allowed in the US)</span><br><span class="line">pwr_1                         ~ this is 1200 mwah</span><br></pre></td></tr></table></figure><ul><li>See this video <a href="https://www.youtube.com/watch?v=nOQ2jdoGGGQ&t=1s">How I Flew FAR With DJI’s FPV System - Easy Power Output Hacks!</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://shop.iflight-rc.com/bumblebee-hd-v3-cinewhoop-bnf-pro1487">https://shop.iflight-rc.com/bumblebee-hd-v3-cinewhoop-bnf-pro1487</a></li><li><a href="https://www.youtube.com/watch?v=iEo19JtVe1U">https://www.youtube.com/watch?v=iEo19JtVe1U</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Localstack</title>
      <link href="/2021/12/aws-localstack/"/>
      <url>/2021/12/aws-localstack/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A fully functional local cloud stack</p></blockquote><ul><li><a href="https://docs.localstack.cloud/aws/feature-coverage/">https://docs.localstack.cloud/aws/feature-coverage/</a></li><li><a href="https://github.com/localstack/localstack">https://github.com/localstack/localstack</a></li></ul><h2 id="Profile-settings-for-CLI-SDK-access-to-localstack"><a href="#Profile-settings-for-CLI-SDK-access-to-localstack" class="headerlink" title="Profile settings for CLI/SDK access to localstack"></a>Profile settings for CLI/SDK access to localstack</h2><p>config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[profile localstack]</span><br><span class="line">region = ap-southeast-2</span><br></pre></td></tr></table></figure><p>credentials</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[localstack]</span><br><span class="line">aws_access_key_id = test</span><br><span class="line">aws_secret_access_key = test</span><br></pre></td></tr></table></figure><h2 id="Persistence-Mechanism"><a href="#Persistence-Mechanism" class="headerlink" title="Persistence Mechanism"></a>Persistence Mechanism</h2><p>Set the <code>DATA_DIR=$&#123;TMPDIR&#125;/localstack/data</code> environment variable.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pky_localstack</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5007:4566&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=dynamodb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=$&#123;TMPDIR&#125;/localstack/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR&#125;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;TMPDIR:-/tmp/localstack&#125;:/tmp/localstack&quot;</span>  </span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.localstack.cloud/localstack/persistence-mechanism/">https://docs.localstack.cloud/localstack/persistence-mechanism/</a></li></ul><h2 id="Dynamodb"><a href="#Dynamodb" class="headerlink" title="Dynamodb"></a>Dynamodb</h2><ol><li>From compose bring up <code>image: localstack/localstack</code>. Note that <code>environment:SERVICES</code> can be comma delimited. Example <code>SERVICES=dynamodb,secretsmanager</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">localstack:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">localstack</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;5007:4566&quot;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SERVICES=dynamodb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;$&#123;TMPDIR:-/tmp/localstack&#125;:/tmp/localstack&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Use an ephemeral container to provision resources using <code>image: amazon/aws-cli</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">localstack_resources:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">localstack_resources</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">amazon/aws-cli</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AWS_DEFAULT_REGION=ap-southeast-2</span></span><br><span class="line">  <span class="attr">entrypoint:</span> <span class="string">/bin/sh</span> <span class="string">-c</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    &quot;</span></span><br><span class="line"><span class="string">      # Give localstack a chance to sort out its life</span></span><br><span class="line"><span class="string">      sleep 15;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="string">echo</span> <span class="string">Provision</span> <span class="string">dynamo</span> <span class="string">db</span> <span class="string">tables</span> <span class="string">Porky-Audits</span></span><br><span class="line">      <span class="string">aws</span> <span class="string">dynamodb</span> <span class="string">create-table</span> <span class="string">\</span></span><br><span class="line">        <span class="string">--table-name</span> <span class="string">Porky-Audits</span> <span class="string">\</span></span><br><span class="line">        <span class="string">--attribute-definitions</span> <span class="string">AttributeName=AuditId,AttributeType=S</span> <span class="string">\</span></span><br><span class="line">        <span class="string">--key-schema</span> <span class="string">AttributeName=AuditId,KeyType=HASH</span> <span class="string">\</span></span><br><span class="line">        <span class="string">--provisioned-throughput</span> <span class="string">ReadCapacityUnits=5,WriteCapacityUnits=5</span> <span class="string">\</span></span><br><span class="line">        <span class="string">--endpoint-url=http://localstack:4566;</span></span><br><span class="line">    <span class="string">&quot;</span></span><br><span class="line"><span class="string">  depends_on:</span></span><br><span class="line"><span class="string">    - localstack</span></span><br></pre></td></tr></table></figure><h2 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SERVICES=s3</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  &quot;</span></span><br><span class="line"><span class="string">    echo Provision simple storage</span></span><br><span class="line"><span class="string">    aws s3 mb s3://localstack-porky-bucket \</span></span><br><span class="line"><span class="string">    --endpoint-url=http://localstack:4566;</span></span><br><span class="line"><span class="string">  &quot;</span></span><br></pre></td></tr></table></figure><h2 id="Secrets-Manager"><a href="#Secrets-Manager" class="headerlink" title="Secrets Manager"></a>Secrets Manager</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SERVICES=secretsmanager</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  &quot;</span></span><br><span class="line"><span class="string">    echo Provision Secrets manager</span></span><br><span class="line"><span class="string">    aws secretsmanager create-secret \</span></span><br><span class="line"><span class="string">    --endpoint-url=http://localstack:4566  \</span></span><br><span class="line"><span class="string">    --name PorkyEncryptionMasterKey \</span></span><br><span class="line"><span class="string">    --secret-string bXlzZWNyZXQ=</span></span><br><span class="line"><span class="string">  &quot;</span></span><br></pre></td></tr></table></figure><h2 id="SQS"><a href="#SQS" class="headerlink" title="SQS"></a>SQS</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SERVICES=sqs</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  &quot;</span></span><br><span class="line"><span class="string">    echo Creating dead letter queue</span></span><br><span class="line"><span class="string">    aws sqs create-queue \</span></span><br><span class="line"><span class="string">    --queue-name foo_queue_dlq \</span></span><br><span class="line"><span class="string">    --endpoint-url=http://localstack:4566;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">echo</span> <span class="string">Creating</span> <span class="string">simple</span> <span class="string">queue</span></span><br><span class="line">    <span class="string">aws</span> <span class="string">sqs</span> <span class="string">create-queue</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--queue-name</span> <span class="string">foo_queue</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--attributes</span> <span class="string">ReceiveMessageWaitTimeSeconds=30</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--endpoint-url=http://localstack:4566;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">aws</span> <span class="string">sqs</span> <span class="string">set-queue-attributes</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--queue-url</span> <span class="string">http://localstack:4566/000000000000/foo_queue</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--attributes</span> <span class="string">&#x27;&#123;\&quot;RedrivePolicy\&quot;: \&quot;&#123;\\\&quot;deadLetterTargetArn\\\&quot;:\\\&quot;arn:aws:sqs:ap-southeast-2:000000000000:foo_queue_dlq\\\&quot;,\\\&quot;maxReceiveCount\\\&quot;:\\\&quot;5\\\&quot;&#125;\&quot;&#125;&#x27;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--endpoint-url=http://localstack:4566;</span></span><br><span class="line">  <span class="string">&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object Calisthenics</title>
      <link href="/2021/12/object-calisthenics/"/>
      <url>/2021/12/object-calisthenics/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>I love learning new things, often the way we code solutions has a cool name that we actually did not know about. <code>Object Calisthenics</code> is such a case (for me anyway) - I was amazed to read / watch engineers build and talk about code and draw similarities to the way I approach code solutions in the real world.</p><blockquote><p>Calisthenics are exercises that don’t rely on anything but a person’s own body weight.</p></blockquote><p>Interesting that this name was chosen :)</p><p>As with all patterns and principles, they are not rules but mostly rather guidelines. The actual implementation is always tailored to the problem and each engineers solution will be built from their perspective.</p><p>So what are object calisthenics? Well they are a set of rules written by Jeff Bay (<a href="https://www.amazon.com/ThoughtWorks-Anthology-Technology-Innovation-Programmers/dp/193435614X">The Thoughtworks Anthology</a>) and consist of the ‘rules’ defined below. I’m always sceptical of ‘rules’ for programming but feel its import to try understand other peoples perspective - we can ALL always learn something :)</p><ol><li>One level of indentation per method</li><li>Dont use the ELSE keyword</li><li>Wrap all primitives and strings</li><li>First class collections</li><li>One dot per line</li><li>Dont abbreviate</li><li>Keep all entities small</li><li>No class with more tan 2 instance variables</li><li>No getter/setter properties</li></ol><p>Most of the content below is based on the amazing work by <a href="https://www.youtube.com/channel/UCrkPsvLGln62OMZRO6K-llg">Nick Chapsas</a>. What a legend!</p><p>Examples below were simplified for readability.</p><h2 id="One-level-of-indentation-per-method"><a href="#One-level-of-indentation-per-method" class="headerlink" title="One level of indentation per method"></a>One level of indentation per method</h2><p>This is the level of nesting in methods. The value of following this is debatable but I do feel it will highlight where logic could possibly be injected and follow <a href="/2018/05/single-responsibility-principle-srp/">Single Responsibility Principle (SRP)</a></p><p>You can extract whole code blocks out to be their own private methods and where these grow or can be grouped extract them out to their own classes.</p><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AskForDrink</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (drink.Equals(<span class="string">&quot;beer&quot;</span>)) <span class="comment">// this is level 1 nest</span></span><br><span class="line">    &#123;</span><br><span class="line">        _outputProvider(<span class="string">&quot;How old are you?&quot;</span>); <span class="comment">// this is level 2 nest</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">int</span>.TryParse(_outProvider(), <span class="keyword">out</span> <span class="keyword">var</span> age))</span><br><span class="line">        &#123;</span><br><span class="line">            _outputProvider(<span class="string">&quot;Could not parse age&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                _outputProvider(<span class="string">&quot;Here&#x27;s your cold beer.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                _outputProvider(<span class="string">&quot;Sorry mate you are not old enough.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Becomes:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AskForDrink</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (drink.Equals(<span class="string">&quot;beer&quot;</span>)) <span class="comment">// this is level 1 nest</span></span><br><span class="line">    &#123;</span><br><span class="line">        HandleBeer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleBeer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _outputProvider(<span class="string">&quot;How old are you?&quot;</span>); <span class="comment">// this is level 2 nest</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">int</span>.TryParse(_outProvider(), <span class="keyword">out</span> <span class="keyword">var</span> age))</span><br><span class="line">    &#123;</span><br><span class="line">        _outputProvider(<span class="string">&quot;Could not parse age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) <span class="comment">// This could also then be extracted out</span></span><br><span class="line">        &#123;</span><br><span class="line">            _outputProvider(<span class="string">&quot;Here&#x27;s your cold beer.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _outputProvider(<span class="string">&quot;Sorry mate you are not old enough.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dont-use-the-ELSE-keyword"><a href="#Dont-use-the-ELSE-keyword" class="headerlink" title="Dont use the ELSE keyword"></a>Dont use the ELSE keyword</h2><ul><li><a href="https://www.youtube.com/watch?v=_ougvb8mT7k">Nick Chapsas - Why I don’t use the “else” keyword in my code anymore</a></li></ul><p>This this can significantly increase your codes readability, its not that we really remove the <code>else</code> but rather making use of language features to return when the <code>else</code> would be evaluated.</p><p>This is not going to work for MVC Views or Blazer but it can work very well for your class files (code behind)</p><p>Using <code>else</code> conditions can also introduce smells like violation of <a href="/2018/04/open-closed-principle-ocp/">Open/Closed Principle (OCP)</a>, so everytime we need a new condition the <code>else if</code> is used which is a modification. </p><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleBeer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _outputProvider(<span class="string">&quot;How old are you?&quot;</span>); <span class="comment">// this is level 2 nest</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">int</span>.TryParse(_outProvider(), <span class="keyword">out</span> <span class="keyword">var</span> age))</span><br><span class="line">    &#123;</span><br><span class="line">        _outputProvider(<span class="string">&quot;Could not parse age&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) <span class="comment">// This could also then be extracted out</span></span><br><span class="line">        &#123;</span><br><span class="line">            _outputProvider(<span class="string">&quot;Here&#x27;s your cold beer.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _outputProvider(<span class="string">&quot;Sorry mate you are not old enough.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>becomes</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleBeer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _outputProvider(<span class="string">&quot;How old are you?&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">int</span>.TryParse(_outProvider(), <span class="keyword">out</span> <span class="keyword">var</span> age))</span><br><span class="line">    &#123;</span><br><span class="line">        _outputProvider(<span class="string">&quot;Could not parse age&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) <span class="comment">// This could also then be extracted out</span></span><br><span class="line">    &#123;</span><br><span class="line">        _outputProvider(<span class="string">&quot;Here&#x27;s your cold beer.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _outputProvider(<span class="string">&quot;Sorry mate you are not old enough.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simple checks like these can also be represented with a ternary operator but that depends on your team ways of working - its always best to keep the code copy the same thoughout the code base.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_outputProvider(age &gt;= <span class="number">18</span>)</span><br><span class="line">    ? <span class="string">&quot;Here&#x27;s your cold beer.&quot;</span></span><br><span class="line">    : <span class="string">&quot;Sorry mate you are not old enough.&quot;</span></span><br></pre></td></tr></table></figure><p>Nick also extracted the whole age check out into its own method <code>HandleBeerAgeCheck(int age)</code> but I felt the above was fine.</p><h3 id="Use-a-switch"><a href="#Use-a-switch" class="headerlink" title="Use a switch"></a>Use a switch</h3><p>If you are using a modern IDE like <a href="https://visualstudio.microsoft.com/vs/">Visual Studio 2022</a> it will make these suggestions for you. This is not explicitly removing <code>else</code>, its just a different type of check which most engineers would find acceptable.</p><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AskForDrink</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (drink.Equals(<span class="string">&quot;beer&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        HandleBeer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (drink.Equals(<span class="string">&quot;juice&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        HandleJuice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        HandleUnavailableDrink(drink);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>becomes</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AskForDrink</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span>(drink)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;beer&quot;</span>:</span><br><span class="line">            HandleBeer();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;juice&quot;</span>:</span><br><span class="line">            HandleJuice();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            HandleUnavailableDrink();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Wrap-all-primitives-and-strings"><a href="#Wrap-all-primitives-and-strings" class="headerlink" title="Wrap all primitives and strings"></a>Wrap all primitives and strings</h2><p>A primitive type is a built in type, see <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types">example C# types</a>. Note that in some languages, strings are not primitives. (They are in C#)</p><ul><li><a href="https://www.youtube.com/watch?v=h4uldNA1JUE">Treating Primitive Obsession with ValueObjects | DDD in .NET</a></li></ul><h2 id="First-class-collections"><a href="#First-class-collections" class="headerlink" title="First class collections"></a>First class collections</h2><p><a href="https://youtu.be/gyrSiY4SHxI?t=402">https://youtu.be/gyrSiY4SHxI?t=402</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.youtube.com/watch?v=gyrSiY4SHxI">9 “rules” for cleaner code | Object Calisthenics - Nick Chapsas</a></li><li><a href="https://bolcom.github.io/student-dojo/legacy-code/DevelopersAnonymous-ObjectCalisthenics.pdf">https://bolcom.github.io/student-dojo/legacy-code/DevelopersAnonymous-ObjectCalisthenics.pdf</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing with CancellationToken</title>
      <link href="/2021/12/testing-with-cancellation-token/"/>
      <url>/2021/12/testing-with-cancellation-token/</url>
      
        <content type="html"><![CDATA[<p>The top level loop in a <a href="/2021/03/c-sharp-hosted-service/">hosted service (worker)</a> needs to execute while the <code>CancellationToken</code> has not recieved a cancellation request. This needs to be wrapped in a generic try/catch as when a BackgroundService throws an unhandled exception, the exception is lost and the service appears unresponsive. This is because the base class <code>BackgroundService</code> is <a href="https://github.com/aspnet/Hosting/blob/master/src/Microsoft.Extensions.Hosting.Abstractions/BackgroundService.cs#L65">awaiting the task to complete and return</a>.</p><p>.NET 6 <a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/hosting-exception-handling">fixes this behavior by logging the exception and stopping the host</a>.</p><p>As the code in this example was .NET 5 and I needed to test the try/catch is not removed.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stoppingToken.IsCancellationRequested)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _eventBroker.DoWork(cancellationToken);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger.LogError(<span class="string">$&quot;Unexpected error: <span class="subst">&#123;e.Message&#125;</span>&quot;</span>, );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code posed two problems</p><ol><li>How does the test break out the <code>while</code> loop</li><li>How do I test a <code>protected</code> method.</li></ol><p>The second issue can be resolved by <a href="/2021/01/unit-testing-protected-methods/">additional setup to expose <code>protected</code> behaviour</a> the first needed the token to be cancelled.</p><p>There were two ways this could be done:</p><ul><li>cancelling after a specific amount of time</li><li>mocking a dependnacy and using <code>Callback</code> to call the <code>.Cancel()</code> method on the token </li></ul><h2 id="Cancelling-after-a-specific-amount-of-time"><a href="#Cancelling-after-a-specific-amount-of-time" class="headerlink" title="Cancelling after a specific amount of time"></a>Cancelling after a specific amount of time</h2><p>This should work but the test could be flaky (fails to produce the same result each time) </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrange</span></span><br><span class="line"><span class="keyword">var</span> cancellationTokenSource = <span class="keyword">new</span> CancellationTokenSource()</span><br><span class="line">cancellationTokenSource.CancelAfter(TimeSpan.FromSeconds(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">await</span> classUnderTest.ExposedExecuteAsync(cancellationTokenSource);</span><br></pre></td></tr></table></figure><h2 id="Cancel-callback"><a href="#Cancel-callback" class="headerlink" title="Cancel callback"></a>Cancel callback</h2><p>This will only be possible if you have some mocked dependency. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrange</span></span><br><span class="line"><span class="keyword">var</span> cancellationTokenSource = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line"><span class="keyword">var</span> someServiceMock = <span class="keyword">new</span> Mock&lt;ISomeService&gt;();</span><br><span class="line"></span><br><span class="line">someServiceMock</span><br><span class="line">    .Setup(x =&gt; x.SomeMethodAsync(It.IsAny&lt;CancellationToken&gt;()))</span><br><span class="line">    .ThrowsAsync(<span class="keyword">new</span> Exception(<span class="string">&quot;Bork city!&quot;</span>))</span><br><span class="line">    .Callback(() =&gt; &#123;</span><br><span class="line">        cancellationTokenSource.Cancel();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">await</span> classUnderTest.ExposedExecuteAsync(cancellationTokenSource);    </span><br></pre></td></tr></table></figure><p>As the method handles the <code>Exception</code> the assertion <a href="/2021/02/mocking-ilogger/">could be on the ILogger</a> else the exception will need to be expected in the unit test, with <a href="/2019/06/unit-testing-with-xunit/">xUnit this can be handled with Assert.ThrowsAsync</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://stackoverflow.com/questions/59088678/simulating-cancellationtoken-iscancellationrequested-when-unit-testingbehaviour">https://stackoverflow.com/questions/59088678/simulating-cancellationtoken-iscancellationrequested-when-unit-testingbehaviour</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP Retry with Polly</title>
      <link href="/2021/12/http-retry-polly/"/>
      <url>/2021/12/http-retry-polly/</url>
      
        <content type="html"><![CDATA[<p>Polly allows http retries with exponential backoff so if the resource you are trying to reach throws a transient error (an error that should resolve itself) like <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500">500 (Server Error)</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408">408 (Request Timeout)</a> then the request will auto-magically be re-tried x times with an increased back-off (the period between re-tries) before giving up.</p><p>We can include <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404">404 (Not Found)</a> but that depends on the use case, in some API’s 404 means the data you were looking for is not avalible. Example if <code>GET /person/1</code> responded in 404 it COULD mean 1 doesnt exist but the resource is still there.</p><p>Polly can also do other cool things listed below but I’ll focus on simple retry.</p><ul><li>Circuit Breaker</li><li>Fallback</li><li>Timeout</li><li>Bulkhead Isolation</li></ul><h2 id="Create-the-retry-policy"><a href="#Create-the-retry-policy" class="headerlink" title="Create the retry policy"></a>Create the retry policy</h2><ol><li><p>Install nuget <code>Microsoft.Extensions.Http.Polly</code></p></li><li><p>In the DI container set the handler to be applied to the injected http client, this will be avalible to the constructor of <code>FooService</code>. The <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly">microsoft example</a> also sets <code>.SetHandlerLifetime(TimeSpan.FromMinutes(5))</code>.</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//ConfigureServices()  - Startup.cs</span><br><span class="line">services.AddHttpClient&lt;IFooService, FooService&gt;()</span><br><span class="line">        .AddPolicyHandler(GetRetryPolicy());</span><br></pre></td></tr></table></figure><ol start="3"><li>Define the handler which will cater for</li></ol><ul><li>Retry policy for 5xx, 408 and 404.</li><li>Retry based on <code>RetryCount</code> and exponentially back-off by retryAttempt starting at <code>RetrySleepDuration</code>.</li></ul><p>Here <code>onRetryAsync</code> is passed a deligate inline method that just writes out a message. This was helpful when manually testing my worker as its a console application. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAsyncPolicy&lt;HttpResponseMessage&gt; <span class="title">GetRetryPolicy</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> retryCount = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> retrySleepDuration = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpPolicyExtensions</span><br><span class="line">        .HandleTransientHttpError()</span><br><span class="line">        .OrResult(msg =&gt; msg.StatusCode == System.Net.HttpStatusCode.NotFound)</span><br><span class="line">        .WaitAndRetryAsync(</span><br><span class="line">            retryCount, </span><br><span class="line">            retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(retrySleepDuration, retryAttempt)),</span><br><span class="line">            onRetryAsync: (_, _) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;GetRetryPolicy retrying...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Building-on-WaitAndRetryAsync-gt-onRetry-onRetryAsync"><a href="#Building-on-WaitAndRetryAsync-gt-onRetry-onRetryAsync" class="headerlink" title="Building on WaitAndRetryAsync =&gt; onRetry/onRetryAsync"></a>Building on WaitAndRetryAsync =&gt; onRetry/onRetryAsync</h3><p>The 3rd parameter of <code>onRetry</code> is an int which represents <code>retryAttempt</code>, this can be added to logs.</p><p>I also wasnt sure on the value of using async when its just a log, so I switched it out.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.WaitAndRetryAsync(</span><br><span class="line">    retryCount,</span><br><span class="line">    retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(retrySleepDuration, retryAttempt)),</span><br><span class="line">    onRetry: (_, _, retryAttempt, _) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Retry attempt (<span class="subst">&#123;retryAttempt&#125;</span> of <span class="subst">&#123;retryCount&#125;</span>)&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.stevejgordon.co.uk/polly-using-context-to-obtain-retry-count-diagnostics">https://www.stevejgordon.co.uk/polly-using-context-to-obtain-retry-count-diagnostics</a></li><li><a href="https://github.com/App-vNext/Polly/issues/505">https://github.com/App-vNext/Polly/issues/505</a></li><li><a href="https://github.com/App-vNext/Polly/wiki/Polly-and-HttpClientFactory#use-case-exchanging-information-between-policy-execution-and-calling-code">https://github.com/App-vNext/Polly/wiki/Polly-and-HttpClientFactory#use-case-exchanging-information-between-policy-execution-and-calling-code</a></li></ul><h2 id="Unit-tests"><a href="#Unit-tests" class="headerlink" title="Unit tests"></a>Unit tests</h2><p>You may be tempted to create additional infastructure and unit test an <a href="/2021/01/mocking-httpclient-sendasync/">injected HttpClient with mocked out http responses</a> but its simpler to just unit test the extension method. This can be done with a simple <code>DummyMethod</code> that keeps track of its invocations and has a sorted and predefined collection of response http status codes.</p><p>For this test the following should be true per invocation</p><ul><li>4th =&gt; HttpStatusCode.OK (200)</li><li>3rd =&gt; HttpStatusCode.NotFound (404)</li><li>2nd =&gt; HttpStatusCode.RequestTimeout (408)</li><li>1st =&gt; HttpStatusCode.InternalServerError (500)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PollyExtensionTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _invocationCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> HttpStatusCode[] _httpStatusCodes = &#123;</span><br><span class="line">            HttpStatusCode.InternalServerError,</span><br><span class="line">            HttpStatusCode.RequestTimeout,</span><br><span class="line">            HttpStatusCode.NotFound,</span><br><span class="line">            HttpStatusCode.OK</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PollyExtensionTests</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _invocationCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Task&lt;HttpResponseMessage&gt; <span class="title">DummyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _invocationCount++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _httpStatusCodes.Length &gt;= _invocationCount</span><br><span class="line">            ? Task.FromResult(<span class="keyword">new</span> HttpResponseMessage(_httpStatusCodes[_invocationCount - <span class="number">1</span>]))</span><br><span class="line">            : Task.FromResult(<span class="keyword">new</span> HttpResponseMessage(HttpStatusCode.OK));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Theory</span>]</span><br><span class="line">    [<span class="meta">InlineData(3, HttpStatusCode.OK)</span>]</span><br><span class="line">    [<span class="meta">InlineData(2, HttpStatusCode.NotFound)</span>]</span><br><span class="line">    [<span class="meta">InlineData(1, HttpStatusCode.RequestTimeout)</span>]</span><br><span class="line">    [<span class="meta">InlineData(0, HttpStatusCode.InternalServerError)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetRetryPolicy_Retries_Transient_And_NotFound_Http_Errors</span>(<span class="params"><span class="built_in">int</span> retryCount, HttpStatusCode expectedHttpStatusCode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> httpResponseMessage = PollyExtension.GetRetryPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Act</span></span><br><span class="line">        <span class="keyword">var</span> result = httpResponseMessage.ExecuteAsync(() =&gt; DummyMethod()).Result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Assert</span></span><br><span class="line">        result.StatusCode.Should().Be(expectedHttpStatusCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly">Implement HTTP call retries with exponential backoff with IHttpClientFactory and Polly policies</a></li><li><a href="https://www.thecodebuzz.com/httpclient-resiliency-http-polly-csharp-netcore/">https://www.thecodebuzz.com/httpclient-resiliency-http-polly-csharp-netcore/</a></li><li><a href="https://josephwoodward.co.uk/2020/07/integration-testing-polly-policies-httpclient-interception">https://josephwoodward.co.uk/2020/07/integration-testing-polly-policies-httpclient-interception</a></li><li><a href="https://anthonygiretti.com/2019/03/26/best-practices-with-httpclient-and-retry-policies-with-polly-in-net-core-2-part-2/">https://anthonygiretti.com/2019/03/26/best-practices-with-httpclient-and-retry-policies-with-polly-in-net-core-2-part-2/</a></li><li><a href="https://nodogmablog.bryanhogan.net/2019/03/testing-your-code-when-using-polly/">https://nodogmablog.bryanhogan.net/2019/03/testing-your-code-when-using-polly/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQS with AWS Step Function and Lamdas</title>
      <link href="/2021/11/aws-sqs-step-function-and-lamdas/"/>
      <url>/2021/11/aws-sqs-step-function-and-lamdas/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><ul><li>Serverless function, <a href="https://github.com/carlpaton/aws-sdk-nodejs/blob/master/lambda-nodejs-sendsesemail-sqstrigger-dlq.js">example Node JS Lambda</a></li></ul><h1 id="Step-Functions"><a href="#Step-Functions" class="headerlink" title="Step Functions"></a>Step Functions</h1><ul><li><p>Create workflows that follow a fixed or dynamic sequence of steps</p></li><li><p>Step functions have built in re-try functionality</p></li><li><p>Natively integrate with AWS services such as lambda &amp; SNS</p></li><li><p><a href="https://www.youtube.com/watch?v=Dh7h3lkpeP4">SQS with AWS Step Function and Lamdas</a></p></li><li><p><a href="https://www.youtube.com/watch?v=zCIpWFYDJ8s">What are AWS Step Functions? (and why you should love them)</a></p></li><li><p><a href="https://www.youtube.com/watch?v=s0XFX3WHg0w">AWS Step Functions with Lambda Tutorial | Step by Step Guide</a></p></li></ul><h2 id="Workflow-studio"><a href="#Workflow-studio" class="headerlink" title="Workflow studio"></a>Workflow studio</h2><ul><li><a href="https://aws.amazon.com/blogs/aws/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/">https://aws.amazon.com/blogs/aws/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/</a></li></ul><h1 id="State-Machine"><a href="#State-Machine" class="headerlink" title="State Machine"></a>State Machine</h1><ul><li>Defined using JSON, its the structure of your step function</li><li>ASL - Amazon states language</li></ul><p>Manual Steps</p><ol><li>Create the lambda functions first (note the ARNs)</li><li>Create IAM roles, look for step functions roles (StepFunctionLamdaRole)</li><li>Create step function, call it TransactionProcessorStateMachine. Use the role you created above <code>StepFunctionLamdaRole</code>.</li></ol><ul><li><a href="https://www.youtube.com/watch?v=65MK5KqaVh4">Create AWS Step Functions Visually with Workflow Studio</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon SQS</title>
      <link href="/2021/11/aws-sqs/"/>
      <url>/2021/11/aws-sqs/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p><img src="/d/aws-sqs/aws-sqs-basic.png" alt="AWS SQS Basic"></p><h1 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h1><p>Below <code>sourceQueue</code> is the queue message are published to by the <code>publisher</code> and <code>deadQueue</code> is the dead letter queue (DLQ) use by the <code>sourceQueue</code>.</p><ul><li>Types are Standard and FIFO, <code>sourceQueue</code> and <code>deadQueue</code> need to have matching types.</li><li><code>sourceQueue</code> and <code>deadQueue</code> must be on the same region of the AWS Account</li><li><code>Message Retention</code>, the max value is 14 days for any queue and the default is 4 days.</li></ul><p><a href="https://github.com/carlpaton/AwsAdministrator/blob/master/tests/IntegrationTest/AwsAdmin.Application/Sqs/SqsServiceTests.cs">Some testing code to understand the magic.</a></p><h2 id="Source-Queue"><a href="#Source-Queue" class="headerlink" title="Source Queue"></a>Source Queue</h2><ul><li><code>Visibility timeout</code>, once a message is received by a consumer it is not visible to other consumers for the period of this timeout. Useful when your consumer application scales in K8s</li><li><code>RedrivePolicy</code>, specifies the source queue, the dead-letter queue and the conditions under which Amazon SQS moves messages from sourceQeueu to deadQueue if the consumer of the sourceQueue fails to process a message. This will contain the ARN of the <code>deadQueue</code> and the value of the <code>maxReceiveCount</code></li><li><code>maxReceiveCount</code>, used by the redrive policy to know how many times the message can be received before being auto-magically pushed to the deadQueue</li><li><code>Heartbeat</code>, used when you dont know how long it will take the consumer to process the message once receieved. Specify the initial visibility timeout (for example, 2 minutes) and then—as long as your consumer still works on the message—keep extending the visibility timeout by 2 minutes every minute.</li><li><code>Delete</code>, once processed the consumer must manually delete the message, else it will increment <code>maxReceiveCount</code></li></ul><h2 id="Dead-Letter-Queue"><a href="#Dead-Letter-Queue" class="headerlink" title="Dead Letter Queue"></a>Dead Letter Queue</h2><ul><li><code>Retention Period</code>, the expiration of a message is always based on its orginal enqueue timestamp. So it starts counting from the <code>sourceQueue</code>. The period in the <code>deadQueue</code> must always be larger than the <code>sourceQueue</code>.</li><li>Helps with message failures to isolate the failed message</li><li><code>Replay Policy</code>, this is manual, AWS suggest using a Lambda. A message could fail for a number of reasons including downstream dependancy borked or serialization failure.</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/ReceiveMessage.html">Receiving Amazon SQS messages</a></li><li><a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html">Amazon SQS short and long polling</a></li><li><a href="https://aws.amazon.com/blogs/compute/using-amazon-sqs-dead-letter-queues-to-replay-messages/">Using Amazon SQS dead-letter queues to replay messages</a></li><li><a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/working-with-messages.html#processing-messages-timely-manner">Processing messages in a timely manner</a></li><li><a href="https://github.com/cloudevents/spec/blob/v1.0/spec.md">Cloud Events</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> aws </tag>
            
            <tag> cloud events </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Special Case Pattern</title>
      <link href="/2021/11/special-case-pattern/"/>
      <url>/2021/11/special-case-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Use Case: When you need to return an alternate object of the same base type which will controll the flow of the application. Example: UserServiceClient can return a UserNotFound object instead of throwing a custom UserServiceException or having serialization exception caught in the consumer of the service.”</p></blockquote><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><blockquote><p>“A subclass that provides special behavior for particular cases.” - martinfowler.com</p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Consider the following <code>UserServiceClient</code> with method <code>GetUserAsync</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;UserDto&gt; <span class="title">GetUserAsync</span>(<span class="params">Guid userId, CancellationToken cancellationToken</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Get, <span class="string">$&quot;Users/<span class="subst">&#123;userId&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> _client.SendAsync(request, cancellationToken);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync(cancellationToken);</span><br><span class="line">    <span class="keyword">return</span> JsonSerializer.Deserialize&lt;UserDto&gt;(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The return type <code>UserDto</code> is a simple data transfer object.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the service returns 404 with no content this will throw <code>JsonException</code> as content will be null. We can fix this with the following steps:</p><ol><li>Add a virtual method to <code>UserDto</code> called <code>Found()</code> and return true</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Confirms if the User exists and was returned from the User Service.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">Found</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the <code>UserNotFound</code> object that inherits from <code>UserDto</code> and overrides the <code>Found</code> method which can then return false</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserNotFound</span> : <span class="title">UserDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">Found</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>In the <code>GetUserAsync</code> method inside <code>UserServiceClient</code> check the status code. Here we assume 404 (not found) but you could check for any other code like 500 and respond with either <code>UserServiceException</code> or another object like <code>UserError</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;UserDto&gt; <span class="title">GetUserAsync</span>(<span class="params">Guid userId, CancellationToken cancellationToken</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Get, <span class="string">$&quot;Users/<span class="subst">&#123;userId&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> _client.SendAsync(request, cancellationToken);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.IsSuccessStatusCode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// additionally we would add logging here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserNotFound();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync(cancellationToken);</span><br><span class="line">    <span class="keyword">return</span> JsonSerializer.Deserialize&lt;UserDto&gt;(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>In the consumer we would then check the response</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">await</span> _userServiceClient.GetUserAsync(userId, cancellationToken)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!user.Found()) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// not found logic, probably return here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assume found, normal logic here</span></span><br></pre></td></tr></table></figure><p>This code now has some defensive checks using the Special Case Pattern.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://martinfowler.com/eaaCatalog/specialCase.html">https://martinfowler.com/eaaCatalog/specialCase.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bias</title>
      <link href="/2021/10/bias/"/>
      <url>/2021/10/bias/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>There are two kinds of bias we can have when dealing with people, whether its an interview or a general conversion.</p><p>Conscious bias, also known as explicit bias is when you are aware you have the bias for or against somebody but dont do anything about it. This is very destructive behavior.</p><p>Unconscious bias is harder to understand as it can stem from up-bringing or general ignorance.</p><h1 id="How-can-I-mitigate-bias"><a href="#How-can-I-mitigate-bias" class="headerlink" title="How can I mitigate bias"></a>How can I mitigate bias</h1><ul><li>Acknowledge any bias you may have</li><li>Dont ignore red flags</li></ul><h1 id="Bias-Groups"><a href="#Bias-Groups" class="headerlink" title="Bias Groups"></a>Bias Groups</h1><h2 id="Gender-Bias"><a href="#Gender-Bias" class="headerlink" title="Gender Bias"></a>Gender Bias</h2><p>This can be when some certain traits like being confident or assertive are seen in a negative light in one gender, and positive in another. This is total contradiction.</p><h2 id="Affinity-Bias"><a href="#Affinity-Bias" class="headerlink" title="Affinity Bias"></a>Affinity Bias</h2><p>This is the tendency to have bias / get a long with other peole who are more like yourself. In an interview this could be bias towards somebody that went to the same school as you.</p><h2 id="Confirmation-Bias"><a href="#Confirmation-Bias" class="headerlink" title="Confirmation Bias"></a>Confirmation Bias</h2><p>Occurs when we make a decision about something, then actively look for information that supports that decision, while also overlooking any opposing facts and viewpoints.</p><h2 id="Stereotyping"><a href="#Stereotyping" class="headerlink" title="Stereotyping"></a>Stereotyping</h2><p>This is putting somebody in a box based on the actions or behavior of others. </p><p>Example: <code>All South African&#39;s chase lions in the street on the way to work.</code> - I lived in SA for over 3 decades, not once did I chase a lion.</p><h2 id="Ethnicity-and-race"><a href="#Ethnicity-and-race" class="headerlink" title="Ethnicity and race"></a>Ethnicity and race</h2><p>This is discrimination based on ethnic group or groups a person identifies with or their race. It is in my opinion one of the most destructive bias anybody can have. </p><h2 id="Priming"><a href="#Priming" class="headerlink" title="Priming"></a>Priming</h2><p>Occurs when an individual’s exposure to a certain stimulus influences their response to a subsequent stimulus.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://sprigghr.com/blog/hr-professionals/examples-of-unconscious-bias-and-how-to-reduce-their-impact/">https://sprigghr.com/blog/hr-professionals/examples-of-unconscious-bias-and-how-to-reduce-their-impact/</a></li><li><a href="https://diversity.ucsf.edu/resources/unconscious-bias">https://diversity.ucsf.edu/resources/unconscious-bias</a></li><li><a href="https://thedecisionlab.com/biases/priming/">https://thedecisionlab.com/biases/priming/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asynchronous Request-Reply pattern</title>
      <link href="/2021/10/asynchronous-request-reply-pattern/"/>
      <url>/2021/10/asynchronous-request-reply-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply">https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS App-env</title>
      <link href="/2021/08/reactjs-app-env/"/>
      <url>/2021/08/reactjs-app-env/</url>
      
        <content type="html"><![CDATA[<p>If you used <code>create-react-app</code> then some of the magic below would have already been done for you. </p><ol><li>Install <code>dotenv</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv --save</span><br></pre></td></tr></table></figure><ol start="2"><li>Next add the following line to your app.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;dotenv&#x27;).config()</span><br></pre></td></tr></table></figure><ol start="3"><li>Then create a .env file at the root directory of your application and add the variables to it. Variables needs to start with <code>REACT_APP_</code> for it to work.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_API_KEY = &#x27;my-secret-api-key&#x27;</span><br></pre></td></tr></table></figure><ol start="4"><li>To access</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&#123;process.env.REACT_APP_API_URL&#125;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">const &#123; REACT_APP_API_URL &#125; = process.env;</span><br></pre></td></tr></table></figure><p>This did work for a project that was created with.<br>Instead I had to access the env data as <code>const url = process.env.REACT_APP_API_URL;</code></p><ol start="5"><li>Finally, add .env to your .gitignore file so that Git ignores it and it never ends up on GitHub.</li></ol><h2 id="Built-in-magic"><a href="#Built-in-magic" class="headerlink" title="Built in magic"></a>Built in magic</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV</span><br><span class="line"></span><br><span class="line">npm start        = development</span><br><span class="line">npm run build    = production</span><br><span class="line">npm test         = test</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://create-react-app.dev/docs/adding-custom-environment-variables/">https://create-react-app.dev/docs/adding-custom-environment-variables/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS HTTP Clients</title>
      <link href="/2021/08/reactjs-http-clients/"/>
      <url>/2021/08/reactjs-http-clients/</url>
      
        <content type="html"><![CDATA[<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;REACT_APP_API_URL&#125;</span>/equipment`</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">signal</span>: abortController.<span class="property">signal</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//console.log(JSON.stringify(json));</span></span><br><span class="line">  <span class="comment">//setEquipment(json);</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS material-ui</title>
      <link href="/2021/08/reactjs-material-ui/"/>
      <url>/2021/08/reactjs-material-ui/</url>
      
        <content type="html"><![CDATA[<h2 id="FormControl"><a href="#FormControl" class="headerlink" title="FormControl"></a>FormControl</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">FormControl</span>, <span class="title class_">InputLabel</span>, makeStyles, <span class="title class_">MenuItem</span>, <span class="title class_">Select</span>, <span class="title class_">TextareaAutosize</span>, <span class="title class_">TextField</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@material-ui/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> makeStyles <span class="keyword">from</span> <span class="string">&#x27;@material-ui/core/styles/makeStyles&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = <span class="title function_">makeStyles</span>(&#123;</span><br><span class="line">    <span class="attr">textField</span>: &#123;</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">formControl</span>: &#123;</span><br><span class="line">        <span class="attr">margin</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">minWidth</span>: <span class="number">120</span>,</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AddSchedule</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function">(<span class="params">&#123; equipment, interval, schedule, setSchedule &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> classes = <span class="title function_">useStyles</span>();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FormControl</span> <span class="attr">className</span>=<span class="string">&#123;classes.formControl&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Redux Store</title>
      <link href="/2021/08/reactjs-redux/"/>
      <url>/2021/08/reactjs-redux/</url>
      
        <content type="html"><![CDATA[<p>This seems to be the <code>classic</code> way I see most people handeling state. Also see <a href="/2022/04/reactjs-redux-toolkit/">Redux Toolkit</a></p><p>Create the app and install the following </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app --template typescript react-redux-typescript</span><br><span class="line">cd react-redux-typescript</span><br><span class="line"></span><br><span class="line">npm i redux react-redux</span><br><span class="line">npm add @types/react-redux</span><br><span class="line"></span><br><span class="line">code .</span><br></pre></td></tr></table></figure><ol><li>In <code>index.tsx</code> wrap the <code>App</code> in a <code>Provider</code>, this will complain it needs a store.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Provider</span>&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create <code>redux\store.ts</code>, this will complain it needs a reducer.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>Create <code>redux\notesReducer.ts</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">INotesState</span> &#123;</span><br><span class="line">    <span class="attr">notes</span>: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">notes</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Action</span> = &#123;<span class="attr">type</span>: <span class="string">&quot;ADD_NOTE&quot;</span>, <span class="attr">payload</span>: <span class="built_in">string</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">notesReducer</span> = (<span class="params">state:INotesState = initialState, action:Action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ADD_NOTE&quot;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, <span class="attr">notes</span>: [ ...state.<span class="property">notes</span>, action.<span class="property">payload</span> ] &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Update <code>store.ts</code> to take the new reducer</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; notesReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./notesReducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(notesReducer);</span><br></pre></td></tr></table></figure><ul><li><a href="https://redux.js.org/usage/configuring-your-store">https://redux.js.org/usage/configuring-your-store</a></li><li><a href="https://redux.js.org/usage/configuring-your-store#integrating-the-devtools-extension">https://redux.js.org/usage/configuring-your-store#integrating-the-devtools-extension</a></li></ul><ol start="5"><li>Update <code>index.tsx</code> to take the store</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Provider</span> store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;/<span class="title class_">App</span>&gt;</span><br><span class="line">&lt;/<span class="title class_">Provider</span>&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>Now we can read the store in any component with a selector.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">INotesState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./redux/notesReducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notes = useSelector&lt;<span class="title class_">INotesState</span>, <span class="title class_">INotesState</span>[<span class="string">&quot;notes&quot;</span>]&gt;(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">notes</span>);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;notes.map((note) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;note&#125;</span>&gt;</span>&#123;note&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#125;)&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="7"><li>In redux state is updated by dispatching actions, we can use the <code>useDispatch</code> hook</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br></pre></td></tr></table></figure><ol start="8"><li>Create an action, here the action is in the <code>onAddNote</code> callback which is passed to <code>NewNoteInput</code> as a prop. An action is an object creating the action type and the payload.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onAddNote</span> = (<span class="params">note:<span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;ADD_NOTE&quot;</span>, <span class="attr">payload</span>:note &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>Create <code>redux\notesActions.ts</code> and refactor to have an actions creator. Move the action from the reducer into this file and export it. You will need to then import it in the reducer.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Action</span> = &#123;<span class="attr">type</span>: <span class="string">&quot;ADD_NOTE&quot;</span>, <span class="attr">payload</span>: <span class="built_in">string</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addNote = (<span class="attr">note</span>:<span class="built_in">string</span>):<span class="function"><span class="params">Action</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;ADD_NOTE&quot;</span>,</span><br><span class="line">    <span class="attr">payload</span>: note</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="10"><li>Update the dispatch</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addNote &#125; <span class="keyword">from</span> <span class="string">&#x27;./redux/notesActions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAddNote</span> = (<span class="params">note:<span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">addNote</span>(note));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.youtube.com/watch?v=WpvIihorarA">https://www.youtube.com/watch?v=WpvIihorarA</a></li></ul><h3 id="Redux-Devtools"><a href="#Redux-Devtools" class="headerlink" title="Redux Devtools"></a>Redux Devtools</h3><ol><li>install <code>redux-devtools-extension</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools-extension</span><br></pre></td></tr></table></figure><ol start="2"><li>create the store with the reducer(s), pre-defined state and composed enhancers</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; notesReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./notesReducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composedEnhancers = <span class="title function_">composeWithDevTools</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">  notesReducer,</span><br><span class="line">  &#123; <span class="attr">notes</span>: [<span class="string">&#x27;Initial note&#x27;</span>] &#125;,</span><br><span class="line">  composedEnhancers</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><code>store.ts</code> can be written as</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; notesReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./notesReducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composedEnhancers = <span class="title function_">composeWithDevTools</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">configureStore</span>(<span class="params">notes: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">createStore</span>(notesReducer, &#123; <span class="attr">notes</span>: notes &#125;, composedEnhancers);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Then <code>configureStore</code> can be used instead of <code>import &#123; store &#125; from &#39;./redux/store&#39;</code> </li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>([<span class="string">&#x27;whee&#x27;</span>]);</span><br></pre></td></tr></table></figure><ul><li><a href="https://redux.js.org/usage/configuring-your-store">https://redux.js.org/usage/configuring-your-store</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Router</title>
      <link href="/2021/08/reactjs-router/"/>
      <url>/2021/08/reactjs-router/</url>
      
        <content type="html"><![CDATA[<p>This is v5 of react router.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i npm i react-router-dom@5</span><br></pre></td></tr></table></figure><p>Then in <code>App.tsx</code> wrap all the component fragments in a <code>Switch</code> and separate them using <code>Route</code>.</p><p><code>Menu</code> here is always shown for all routes.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Menu</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/addequipment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">AddEquipment</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/addschedule&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">AddSchedule</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>Route</code> takes a property that matches the browser route, example <code>/addequipment</code>.</p><p>The <code>Home</code> component above is the root so will need <code>exact path=&quot;/&quot;</code> else this will match all routes as they start with <code>/</code></p><p>Then we cannot use <code>a href</code> in the menu. These need to be replaced with <code>Link to</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/AddSchedule&quot;</span>&gt;</span>Add Schedule<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/AddEquipment&quot;</span>&gt;</span>Add Equipment<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Usehistory</title>
      <link href="/2021/08/reactjs-usehistory/"/>
      <url>/2021/08/reactjs-usehistory/</url>
      
        <content type="html"><![CDATA[<p>Route needs to exist</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/editschedule/:id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditSchedule</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">equipment</span>=<span class="string">&#123;equipment&#125;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">interval</span>=<span class="string">&#123;interval&#125;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">schedule</span>=<span class="string">&#123;schedule&#125;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then use the hook to navigate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> history = <span class="title function_">useHistory</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">id: string</span>) &#123;</span><br><span class="line">  history.<span class="title function_">push</span>(<span class="string">&quot;editschedule/&quot;</span> + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Useparams</title>
      <link href="/2021/08/reactjs-useparams/"/>
      <url>/2021/08/reactjs-useparams/</url>
      
        <content type="html"><![CDATA[<p>Define route</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/editschedule/:id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Create type</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">IParameters</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Access route in browser</p><p><a href="http://localhost:3000/editschedule/cd7df19f-f594-454f-a242-4ce5b28df6b0">http://localhost:3000/editschedule/cd7df19f-f594-454f-a242-4ce5b28df6b0</a></p><p>Use hook <code>useParams</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = useParams&lt;<span class="title class_">IParameters</span>&gt;();</span><br></pre></td></tr></table></figure><p>Access values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;params.<span class="property">id</span>&#125;</span><br></pre></td></tr></table></figure><p>Expect to see <code>cd7df19f-f594-454f-a242-4ce5b28df6b0</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SA NZ Timezones</title>
      <link href="/2021/08/sa-nz-timezones/"/>
      <url>/2021/08/sa-nz-timezones/</url>
      
        <content type="html"><![CDATA[<p>Timezones are hard! New Zealand Standard Time (NZST) is <code>UTC+12</code>, and South Africa Standard Time (SAST) is <code>UTC+2</code>. South Africa does not observe daylight saving time.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">NZ      SA</span><br><span class="line">00:00   14:00</span><br><span class="line">01:00   15:00</span><br><span class="line">02:00   16:00</span><br><span class="line">03:00   17:00</span><br><span class="line">04:00   18:00</span><br><span class="line">05:00   19:00</span><br><span class="line">06:00   20:00 *</span><br><span class="line">07:00   21:00 *</span><br><span class="line">08:00   22:00 *</span><br><span class="line">09:00   23:00</span><br><span class="line">10:00   00:00</span><br><span class="line">11:00   01:00</span><br><span class="line">12:00   02:00</span><br><span class="line">13:00   03:00</span><br><span class="line">14:00   04:00</span><br><span class="line">15:00   05:00</span><br><span class="line">16:00   06:00</span><br><span class="line">17:00   07:00</span><br><span class="line">18:00   08:00 *</span><br><span class="line">19:00   09:00 *</span><br><span class="line">20:00   10:00 *</span><br><span class="line">21:00   11:00</span><br><span class="line">22:00   12:00</span><br><span class="line">23:00   13:00</span><br></pre></td></tr></table></figure><p>Daylight savings which is from early April till late September NZ changes to <code>UTC+13</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">NZ      SA</span><br><span class="line">00:00   13:00</span><br><span class="line">01:00   14:00</span><br><span class="line">02:00   15:00</span><br><span class="line">03:00   16:00</span><br><span class="line">04:00   17:00</span><br><span class="line">05:00   18:00</span><br><span class="line">06:00   19:00 *</span><br><span class="line">07:00   20:00 *</span><br><span class="line">08:00   21:00 *</span><br><span class="line">09:00   22:00</span><br><span class="line">10:00   23:00</span><br><span class="line">11:00   00:00</span><br><span class="line">12:00   01:00</span><br><span class="line">13:00   02:00</span><br><span class="line">14:00   03:00</span><br><span class="line">15:00   04:00</span><br><span class="line">16:00   05:00</span><br><span class="line">17:00   06:00</span><br><span class="line">18:00   07:00 *</span><br><span class="line">19:00   08:00 *</span><br><span class="line">20:00   09:00 *</span><br><span class="line">21:00   10:00</span><br><span class="line">22:00   11:00</span><br><span class="line">23:00   12:00</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Lightsail</title>
      <link href="/2021/08/aws-lightsail/"/>
      <url>/2021/08/aws-lightsail/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/aws-lightsail/aws-lightsail.png" alt="AWS Lightsail"></p><blockquote><p>Amazon Lightsail is a virtual private server (VPS) provider and is the easiest way to get started with AWS for developers, small businesses, students, and other users who need a solution to build and host their applications on cloud. - <a href="https://aws.amazon.com/lightsail/faq/">https://aws.amazon.com/lightsail/faq/</a></p></blockquote><p>Its supports <code>instances</code>, <code>containers</code>, <code>databases</code> and many other simple AWS features. For this post I will focus on <code>containers</code>. I initially made this post following <a href="https://www.youtube.com/watch?v=6S2brobgmBA">Getting Started with Amazon Lightsail Containers: An Easy-to-Use Containers Service - AWS Online Tech Talks</a> and then later fixed my mistakes following <a href="https://aws.amazon.com/getting-started/hands-on/setup-an-nginx-reverse-proxy/">How to Setup an Nginx Reverse Proxy</a></p><p>Additional blog post <a href="https://aws.amazon.com/blogs/aws/lightsail-containers-an-easy-way-to-run-your-containers-in-the-cloud/">Lightsail Containers: An Easy Way to Run your Containers in the Cloud</a></p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><h3 id="Access-command-line-interface"><a href="#Access-command-line-interface" class="headerlink" title="Access command-line interface"></a>Access command-line interface</h3><p>The user needs to have full access or specific access to Lightsail actions.</p><ol><li>Create a policy, search for service <code>lightsail</code></li><li>Allowed actions</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetContainerServices (no resources need to be set)</span><br><span class="line">CreateContainerService (Resources -&gt; Specific [Any in this account])</span><br></pre></td></tr></table></figure><p>I eventually gave up and selected <code>All Lightsail actions (lightsail:*)</code> hence using the <code>FullAccess</code> suffix below.</p><ol start="3"><li>Tag the infastructure, it is best practice and can be used for audits and other automation</li><li>Create policy as <code>CarlLightsailFullAccess</code></li><li>Attach the new policy to your <code>User Group</code> under permissions, its best practice to add users to groups so they inherit policys</li></ol><ul><li><a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lightsail/index.html">Lightsail CLI v2</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/lightsail/index.html">Lightsail CLI v1 (they will probably deprecate this at some point)</a></li><li><a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlightsail.html">Actions, resources, and condition keys for Amazon Lightsail</a></li><li><a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli">Create an access key to use the Amazon Lightsail API or the AWS Command Line Interface</a></li></ul><h3 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h3><ul><li>Invalid choice: ‘push-container-image’, maybe you meant</li></ul><p>When I first tried running <code>push-container-image</code> I got the error <code>Invalid choice: &#39;push-container-image&#39;, maybe you meant: ...</code> which meant I needed to <a href="/2019/09/aws-install-and-configure-cli/">updated the CLI</a> to v2. I ended up un-installing v1 to get it to work.</p><ul><li>The Lightsail Control (lightsailctl) plugin was not found</li></ul><p>I also got the error <code>The Lightsail Control (lightsailctl) plugin was not found</code>, I fixed this following the post <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-install-software#install-lightsailctl-on-windows">Install the lightsailctl plugin on Windows</a></p><h2 id="Containers-Command-Line-Interface"><a href="#Containers-Command-Line-Interface" class="headerlink" title="Containers: Command Line Interface"></a>Containers: Command Line Interface</h2><p>As I have more than one local profile I add <code>--profile carlos</code> to these commands. All the code used below is at <a href="https://github.com/carlpaton/LightsailDemo">https://github.com/carlpaton/LightsailDemo</a> and the AWS example is at <a href="https://github.com/awsgeek/lightsail-containers-nginx">https://github.com/awsgeek/lightsail-containers-nginx</a></p><ol><li>Clone the code and hop into the folder</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/carlpaton/LightsailDemo</span><br><span class="line">cd LightsailDemo</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the container service and query the service. The name will used in the public domain, example <code>containerservice42</code> so the complete URL could be <code>https://containerservice42.xxx.ap-southeast-2.cs.amazonlightsail.com/</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos lightsail create-container-service --service-name containerservice42 --power micro --scale 1</span><br><span class="line">aws --profile carlos lightsail get-container-services</span><br></pre></td></tr></table></figure><ol start="3"><li>Build the application container and test it locally</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f app-container                                 // trash existing from past tests</span><br><span class="line">docker build -t app-image ./app/                           // build locally</span><br><span class="line">docker run --name app-container -p 5000:5000 -d app-image  // run to test</span><br></pre></td></tr></table></figure><p>We also need to build the proxy image if its going to be used.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f proxy-container</span><br><span class="line">docker build -t proxy-image ./proxy/</span><br></pre></td></tr></table></figure><p>Testing the proxy image is not 100% possible as it will probably need <code>host.docker.internal:5000</code> in the place of <code>server $&#123;APP_HOST&#125;:$&#123;APP_PORT&#125;;</code> but you can atleast test the config for syntax errors.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --env APP_HOST=localhost --env APP_PORT=5000 --env NGINX_ENVSUBST_OUTPUT_DIR=/ect/nginx --name proxy-container -p 82:80 -d proxy-image</span><br></pre></td></tr></table></figure><ol start="4"><li>Push the container to lightsail, you can do this many times and the docker tag (the number right at the end) will increment for you. The local image name is not used in Lightsail - they will refere to it as <code>SERVICE-NAME.LABLE-NAME.1</code> where 1 is the version which increments.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos lightsail push-container-image --service-name containerservice42 --image app-image --label app-image</span><br></pre></td></tr></table></figure><p>This will do some AWS and Docker magic - note the image name returned, example <code>:containerservice42.app-image.3</code>. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon <code>:</code>.</p><p>We also need to push the proxy image if its going to be used.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos lightsail push-container-image --service-name containerservice42 --image proxy-image --label proxy-image</span><br></pre></td></tr></table></figure><p>Returned name <code>:containerservice42.proxy-image.10</code></p><ol start="5"><li>Deploy the container. The parameters <code>--containers</code> and <code>--public-endpoint</code> are respectively <code>map</code> and <code>structure</code> types so its far easier to represent them as JSON and use <code>file</code> to reference the JSON. The command needs to be run in the directory that the JSON files exist. <a href="https://github.com/carlpaton/LightsailDemo">All the source code is here</a>. </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos lightsail create-container-service-deployment --service-name containerservice42 --containers file://containers.json --public-endpoint file://public-endpoint.json</span><br></pre></td></tr></table></figure><p><img src="/d/aws-lightsail/deploy.png" alt="After deployment "></p><p>If you dont want to use the proxy then just set the public endpoint in <code>public-endpoint.json</code> to be as the below and remove the <code>proxy</code> attribute and its children from <code>containers.json</code></p><ul><li>public-endpoint.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;containerName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;containerPort&quot;</span><span class="punctuation">:</span> <span class="number">5000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>containers.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:containerservice42.app-image.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;5000&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HTTP&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>View the status of the service</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos lightsail get-container-services --service-name containerservice42</span><br></pre></td></tr></table></figure><ol start="7"><li>You can then cleanup by deleting the service, this will also delete the images</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos lightsail delete-container-service --service-name containerservice42</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.youtube.com/watch?v=6S2brobgmBA">Getting Started with Amazon Lightsail Containers: An Easy-to-Use Containers Service - AWS Online Tech Talks</a></li><li><a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_Operations.html">lightsail API Operations (Actions)</a></li><li><a href="https://www.awsgeek.com/How-To-Serve-a-Flask-App-with-Amazon-Lightsail-Containers/">How to Serve a Flask App with Amazon Lightsail Containers</a></li><li><a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services">Container services in Amazon Lightsail</a></li></ul><h2 id="Instances"><a href="#Instances" class="headerlink" title="Instances"></a>Instances</h2><p>I though this post to <a href="https://aws.amazon.com/getting-started/hands-on/host-net-web-app/">Publish a .NET application to a Windows Server instance in Amazon Lightsail</a> was really good. I followed it to setup a Windows Server instance which ran IIS and Crystal Reports.</p>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection Container In Console App</title>
      <link href="/2021/08/dependency-injection-container-console-app/"/>
      <url>/2021/08/dependency-injection-container-console-app/</url>
      
        <content type="html"><![CDATA[<p>I got tired of figuring this out everytime I had a play with something in a console application. DI is a great pattern to understand and use even when just having a play.</p><h1 id="IHostBuilder"><a href="#IHostBuilder" class="headerlink" title="IHostBuilder"></a>IHostBuilder</h1><p>Examples based on <a href="https://www.youtube.com/watch?v=VAQkk8vM53Q">Jonathan Williams - Dependency Injection In a C# Console Application (.NET Core)</a></p><p>Required nuget packages are <code>Microsoft.Extensions.Hosting</code></p><h2 id="Create-services"><a href="#Create-services" class="headerlink" title="Create services"></a>Create services</h2><p>These would be services you want to be injected into the dependency injection container and be avalible inside your application.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ServiceB _serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceA</span>(<span class="params">ServiceB serviceB</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span> =&gt; _serviceB.DoSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ServiceB&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceB</span>(<span class="params">ILogger&lt;ServiceB&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span> =&gt; _logger.LogInformation(<span class="string">&quot;Service B is doing something.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Create-Host-Builder"><a href="#Create-Host-Builder" class="headerlink" title="Create Host Builder"></a>Create Host Builder</h2><p>This will build the dependency injection container.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureServices(services =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            services.AddTransient&lt;Program&gt;();</span><br><span class="line">            services.AddTransient&lt;ServiceA&gt;();</span><br><span class="line">            services.AddTransient&lt;ServiceB&gt;();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Entry-Point"><a href="#Entry-Point" class="headerlink" title="Entry Point"></a>Entry Point</h2><p>Refactor Program.cs to have <code>Program</code> as public and have a constructor to accept instantiated objects.</p><p>Add a public <code>Run()</code> method to execute your service code. This will run after the dependency injection container has been built.</p><p>In <code>Main</code> which is the console applications entry point, create the host and run the program. Here call <code>CreateHostBuilder</code> which will return an <code>IHost</code> which contains all of the services.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;Program&gt; _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ServiceA _serviceA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Program</span>(<span class="params">ILogger&lt;Program&gt; logger, ServiceA serviceA</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _serviceA = serviceA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;Program is running.&quot;</span>);</span><br><span class="line">        _serviceA.DoSomething();</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;Program is completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> host = CreateHostBuilder(args).Build();</span><br><span class="line">        host.Services.GetRequiredService&lt;Program&gt;().Run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This would then output our logs which is expected.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info: ConsoleAppDependencyInjection.Program[0]</span><br><span class="line">      Program is running.</span><br><span class="line">info: ConsoleAppDependencyInjection.ServiceB[0]</span><br><span class="line">      Service B is doing something.</span><br><span class="line">info: ConsoleAppDependencyInjection.Program[0]</span><br><span class="line">      Program is completed.</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/ConsoleAppDependencyInjection">https://github.com/carlpaton/ConsoleAppDependencyInjection</a></li></ul><h1 id="IServiceProvider"><a href="#IServiceProvider" class="headerlink" title="IServiceProvider"></a>IServiceProvider</h1><p>Required nuget packages are <code>Microsoft.Extensions.DependencyInjection</code></p><h2 id="ContainerConfiguration"><a href="#ContainerConfiguration" class="headerlink" title="ContainerConfiguration"></a>ContainerConfiguration</h2><p>Create the provider that returns <code>IServiceProvider</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RedisDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ContainerConfiguration</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceProvider <span class="title">Configure</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// this is a convenience method from `Extensions.DependencyInjection` for distributed redis cache</span></span><br><span class="line">            services.AddDistributedRedisCache(option =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                option.Configuration = <span class="string">&quot;localhost:6379,allowAdmin=true&quot;</span>;</span><br><span class="line">                option.InstanceName = <span class="string">&quot;foo-redis&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add your classes to the `services` container</span></span><br><span class="line">            services.AddSingleton&lt;ICacheRepository, CacheRepository&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> services.BuildServiceProvider();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/CachingDemo/blob/main/src/RedisDemo/ContainerConfiguration.cs">https://github.com/carlpaton/CachingDemo/blob/main/src/RedisDemo/ContainerConfiguration.cs</a></li></ul><h2 id="Configure-Provider"><a href="#Configure-Provider" class="headerlink" title="Configure Provider"></a>Configure Provider</h2><p>Configure the provider and resolve dependencies with <code>GetService&lt;T&gt;</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RedisDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> provider = ContainerConfiguration.Configure();</span><br><span class="line">            <span class="keyword">var</span> cacheRepository = provider.GetService&lt;ICacheRepository&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> key = <span class="string">&quot;some-string-key-42&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> val = <span class="string">&quot;some string value that you need fast access to!&quot;</span>;</span><br><span class="line"></span><br><span class="line">            cacheRepository.Set(key, val);</span><br><span class="line">            <span class="keyword">var</span> valFromCache = cacheRepository.Get(key);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;REDIS: Value from cache = `<span class="subst">&#123;valFromCache&#125;</span>`&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/CachingDemo/blob/main/src/RedisDemo/Program.cs">https://github.com/carlpaton/CachingDemo/blob/main/src/RedisDemo/Program.cs</a></li></ul><h2 id="App-Settings"><a href="#App-Settings" class="headerlink" title="App Settings"></a>App Settings</h2><p>You can also create configuration options</p><ol><li><p>Add the nuget package <code>Microsoft.Extensions.Configuration</code> and <code>Microsoft.Extensions.Configuration.Json</code></p></li><li><p>Add <code>appsettings.json</code> in the root and in its properties set <code>Copy to Output Director</code> = <code>Copy if newer</code></p></li></ol><p>Example:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;LaunchDarkly&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SdkKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sdk-00000000-0000-0000-0000-000000000000&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Create the ConfigurationBuilder</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">    .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)</span><br><span class="line">    .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>)</span><br><span class="line">    .Build();</span><br></pre></td></tr></table></figure><ol start="3"><li>Read the values by name</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sdkKey = configuration[<span class="string">&quot;LaunchDarkly:SdkKey&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="Add-to-DI-container-and-use-Options-pattern"><a href="#Add-to-DI-container-and-use-Options-pattern" class="headerlink" title="Add to DI container and use Options pattern"></a>Add to DI container and use Options pattern</h3><p>You can also add it to the DI container</p><ol><li>Add as singleton</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton(configuration);</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the options class</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LaunchDarklyOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> Section = <span class="string">&quot;LaunchDarkly&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SdkKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Resolve the values</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> launchDarkly = configuration</span><br><span class="line">    .GetSection(LaunchDarklyOptions.Section)</span><br><span class="line">    .Get&lt;LaunchDarklyOptions&gt;();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Management - Dot Net</title>
      <link href="/2021/08/feature-management-dot-net/"/>
      <url>/2021/08/feature-management-dot-net/</url>
      
        <content type="html"><![CDATA[<p>Most of the code examples below are by Nick Chapsas, his youtube video <a href="https://youtu.be/6EebLChouDE">Dynamically enabling features with Feature Flags in .NET Core 3.1</a> was super helpful.</p><p>All the code snippets below are available at <a href="https://github.com/carlpaton/FeatureFlagDemo">https://github.com/carlpaton/FeatureFlagDemo</a></p><h2 id="What-is-a-feature"><a href="#What-is-a-feature" class="headerlink" title="What is a feature?"></a>What is a feature?</h2><p>In its simplest form, a <code>feature</code> is some new behavior in your application. Having feature managment allows us to iteratively ship small changes to production which are essentially hidden / turned off. We can turn these on based on some predicate, its common to use a <a href="/2021/07/oauth2-delegation-token/">claim from the authenticated users JWT</a> in the logic.</p><p>Examples</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if `user-email` ends with `@gmail.com` then return true</span><br><span class="line">if `user-id` is in a known collection of allowed ids then return true</span><br></pre></td></tr></table></figure><h2 id="Feature-flags-in-an-ASP-NET"><a href="#Feature-flags-in-an-ASP-NET" class="headerlink" title="Feature flags in an ASP.NET"></a>Feature flags in an ASP.NET</h2><p>.Net supports feature flags in the following namespaces</p><ul><li><a href="https://www.nuget.org/packages/Microsoft.FeatureManagement/">Microsoft.FeatureManagement</a></li><li><a href="https://www.nuget.org/packages/Microsoft.FeatureManagement.AspNetCore/">Microsoft.FeatureManagement.AspNetCore</a></li></ul><h3 id="Config-Driven"><a href="#Config-Driven" class="headerlink" title="Config Driven"></a>Config Driven</h3><p>We use <a href="https://github.com/carlpaton/FeatureFlagDemo/blob/main/src/FeatureFlagDemo/appsettings.json">appsettings.json</a> as a home for the config.</p><p><strong>Custom Flag</strong></p><p>This is a great way to integrate with <a href="/2021/08/feature-management-launchdarkly/">Launch Darkly</a> as the filter would call out to <a href="https://launchdarkly.com/">launchdarkly.com</a> and it would manage the flag based on what you have configured.</p><p>See <code>Custom Flag Implementation</code> code example below for this configuration.</p><p><strong>Simple on/off</strong></p><p>Here <code>NewFeatureAFlag</code> is on and <code>NewFeatureBFlag</code> is off.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;FeatureManagement&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;NewFeatureAFlag&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;NewFeatureBFlag&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Time Window</strong></p><p>Here <code>HappyHolidaysFlag</code> is on only between given time windows.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;FeatureManagement&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;HappyHolidaysFlag&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;EnabledFor&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TimeWindow&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9 Aug 2021 09:10:00 +12:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;End&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9 Aug 2021 09:11:00 +12:00&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Percentage</strong></p><p>Although .Net supports this out the box a percentage calculation should not really be the responsability of the application instance. If this was running in a cluster (so several nodes running in K8’s) it would make sense for the load balancer to make this decision.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;FeatureManagement&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RandomFlag&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;EnabledFor&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Percentage&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Value&quot;</span><span class="punctuation">:</span> <span class="number">50</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Custom-Flag-Implementation"><a href="#Custom-Flag-Implementation" class="headerlink" title="Custom Flag Implementation"></a>Custom Flag Implementation</h3><ol><li>Create the configuration, here the flag is <code>BrowserFlag</code> and the filter is <code>BrowserFeatureFilter</code> which configuration <code>Parameters:AllowedBrowsers</code>. The configuration can be anything and just needs to match </li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;FeatureManagement&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;BrowserFlag&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;EnabledFor&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BrowserFeatureFilter&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;AllowedBrowsers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;Firefox&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Create the options file as <a href="https://github.com/carlpaton/FeatureFlagDemo/blob/main/src/FeatureFlagDemo/Features/BrowserFeatureOptions.cs">Features/BrowserFeatureOptions.cs</a>, this is not automagically resolved but needs to be done using the filters context.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FeatureFlagDemo.Features</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BrowserFeatureOptions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>[] AllowedBrowsers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>Create the the filter as <a href="https://github.com/carlpaton/FeatureFlagDemo/blob/main/src/FeatureFlagDemo/Features/BrowserFeatureFilter.cs">Features/BrowserFeatureFilter.cs</a>, the alias <code>BrowserFeatureFilter</code> needs to match the name in the appsettings.json configuration. The interface <code>IFeatureFilter</code> comes from the namespace <code>Microsoft.FeatureManagement</code> and has a single method <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.featuremanagement.ifeaturefilter.evaluateasync?view=azure-dotnet-preview">EvaluateAsync</a> which will be called by the framework.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.FeatureManagement;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FeatureFlagDemo.Features</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">FilterAlias(<span class="string">&quot;BrowserFeatureFilter&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BrowserFeatureFilter</span> : <span class="title">IFeatureFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BrowserFeatureFilter</span>(<span class="params">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _httpContextAccessor = httpContextAccessor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">EvaluateAsync</span>(<span class="params">FeatureFilterEvaluationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> userAgent = _httpContextAccessor.HttpContext.Request.Headers[<span class="string">&quot;User-Agent&quot;</span>].ToString();</span><br><span class="line">            <span class="keyword">var</span> settings = context.Parameters.Get&lt;BrowserFeatureOptions&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(settings.AllowedBrowsers.Any(userAgent.Contains));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>Dependency injection</li></ol><p>Add a default implementation for the <code>Microsoft.AspNetCore.Http.IHttpContextAccessor</code> this is the <code>httpContextAccessor</code> instance injected into the filter.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddHttpContextAccessor();</span><br></pre></td></tr></table></figure><p>Finally resolve the feature managment services</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddFeatureManagement()</span><br><span class="line">    .AddFeatureFilter&lt;BrowserFeatureFilter&gt;()</span><br><span class="line">    .AddFeatureFilter&lt;Foo2Filter&gt;()</span><br><span class="line">    .AddFeatureFilter&lt;Foo3Filter&gt;();</span><br></pre></td></tr></table></figure><ol start="5"><li>Validate the flag <code>BrowserFlag</code> in code</li></ol><p><strong>Controller action result annotation</strong></p><p>If the flag passes then the endpoint will be served else it will return 404 Not found.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FeatureFlagDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">FeatureGate(<span class="string">&quot;BrowserFlag&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">BrowserNewFeature</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using tag helpers in the view</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@using Microsoft.FeatureManagement</span><br><span class="line">@inject IFeatureManager FeatureManager</span><br><span class="line">@addTagHelper *, Microsoft.FeatureManagement.AspNetCore</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;BrowserFlag&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>You can see BrowserFlag things!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Using conditions in the view</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@if (await FeatureManager.IsEnabledAsync(&quot;BrowserFlag&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>You can see BrowserFlag things!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://youtu.be/6EebLChouDE">Dynamically enabling features with Feature Flags in .NET Core 3.1 - Nick Chapsas</a></li><li><a href="https://docs.microsoft.com/en-us/azure/azure-app-configuration/use-feature-flags-dotnet-core?tabs=core5x">Tutorial: Use feature flags in an ASP.NET Core app</a></li><li><a href="https://docs.microsoft.com/en-us/azure/azure-app-configuration/concept-feature-management">Feature management overview</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> feature management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Management - Launch Darkly</title>
      <link href="/2021/08/feature-management-launchdarkly/"/>
      <url>/2021/08/feature-management-launchdarkly/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/feature-management-launchdarkly/launch-darkly.jpg" alt="Feature Management - Launch Darkly"></p><blockquote><p>“LaunchDarkly provides simple, scalable feature flag &amp; toggle management (feature management) for the modern enterprise.”</p></blockquote><p>You can create a trial account at <a href="https://launchdarkly.com/">launchdarkly.com</a> and their docs are at <a href="https://docs.launchdarkly.com/sdk/server-side/dotnet">docs.launchdarkly.com</a> are really good.</p><p>All the code snippets below are available at <a href="https://github.com/carlpaton/LaunchDarklyDemo">https://github.com/carlpaton/LaunchDarklyDemo</a></p><h2 id="Launch-Darkly-packages"><a href="#Launch-Darkly-packages" class="headerlink" title="Launch Darkly packages"></a>Launch Darkly packages</h2><p>The API’s for the Launch Darkly client are avalible in these SDKs</p><ul><li><a href="https://www.nuget.org/packages/LaunchDarkly.Client/">LaunchDarkly.Client</a></li><li><a href="https://www.nuget.org/packages/LaunchDarkly.ServerSdk/">LaunchDarkly.ServerSdk</a></li></ul><h2 id="Launch-Darkly-Projects-amp-Environments"><a href="#Launch-Darkly-Projects-amp-Environments" class="headerlink" title="Launch Darkly Projects &amp; Environments"></a>Launch Darkly Projects &amp; Environments</h2><p>Each Launch Darkly project can have multiple environments, the default project is called <code>Default Project</code> but you can add more.</p><p>Each environment has its own <code>SDK key</code>, when creating the client this is a required parameter. The default environments are <code>Test</code> and <code>Production</code>. Its sensible for your code to have no knowledge of the environments and simply rely on the correct <code>SDK key</code> to be injected.</p><p>An example SDK key could look like <code>sdk-00000000-0000-0000-0000-000000000000</code> (this is not the same as a REST clients Authorization access token, example <code>api-00000000-0000-0000-0000-000000000000</code>)</p><p>The first time you create your environment, the GUI will prompt you to connect as SDK - mine was at <a href="https://app.launchdarkly.com/default/production/get-started/connect-an-sdk">https://app.launchdarkly.com/default/production/get-started/connect-an-sdk</a></p><p>Example client:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> launchDarklyClient = <span class="keyword">new</span> LdClient(_sdkKey);</span><br><span class="line">services.AddSingleton&lt;ILdClient&gt;(launchDarklyClient);</span><br></pre></td></tr></table></figure><h3 id="Segments"><a href="#Segments" class="headerlink" title="Segments"></a>Segments</h3><p>Segments can be applied to a flag, <a href="/2023/06/ld-restapi/">see this newer post for more details</a>.</p><h2 id="Local-development"><a href="#Local-development" class="headerlink" title="Local development"></a>Local development</h2><p>When developing locally the <code>LdClient</code> can be configured to return pre-defined settings. This would also be useful when running integration tests.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_environment.IsDevelopment() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dataSource = FileData</span><br><span class="line">        .DataSource()</span><br><span class="line">        .FilePaths(<span class="string">&quot;foo/bar/LocalLdClientFeatures.json&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> config = Configuration.Builder(_sdkKey)</span><br><span class="line">        .DataSource(dataSource)</span><br><span class="line">        .Events(Components.NoEvents)</span><br><span class="line">        .Build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> launchDarklyClient = <span class="keyword">new</span> LdClient(config);</span><br><span class="line">    services.AddSingleton&lt;ILdClient&gt;(launchDarklyClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><h3 id="BoolVariation"><a href="#BoolVariation" class="headerlink" title="BoolVariation"></a>BoolVariation</h3><p>The examples below assume <code>_sdkKey</code> is injected and the features <code>sweet-feature-name-1</code> and <code>sweet-feature-name-2</code> has been configured in Launch Darkly.</p><p><strong>User.WithKey</strong></p><p>This works with both <code>LaunchDarkly.Client</code> or <code>LaunchDarkly.ServerSdk</code>. </p><p>This example will return true only when the <code>userId</code> of <code>cc04e5b8-b483-47fe-8ce6-0098487e91a8</code> is configured in Launch Darkly under the flag <code>sweet-feature-name-1</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V7.0.3</span></span><br><span class="line"><span class="keyword">var</span> defaultValue = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> userId = <span class="string">&quot;e3dbd64b-f51d-4aff-a4e5-f334960b9045&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> featureName = <span class="string">&quot;sweet-feature-name-3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = Context.New(userId);</span><br><span class="line"><span class="keyword">var</span> allowed = ldClient.BoolVariation(featureName, context, defaultValue);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;CheckByUserKey: userId=&#123;0&#125; returned allowed=&#123;1&#125;&quot;</span>, userId, allowed);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V6.2.0</span></span><br><span class="line"><span class="keyword">var</span> defaultValue = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> userId = <span class="string">&quot;cc04e5b8-b483-47fe-8ce6-0098487e91a8&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> featureName = <span class="string">&quot;sweet-feature-name-1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ldClient = <span class="keyword">new</span> LdClient(_sdkKey);</span><br><span class="line"><span class="keyword">var</span> ldUser = User.WithKey(userId);</span><br><span class="line"><span class="keyword">var</span> allowed = ldClient.BoolVariation(featureName, ldUser, defaultValue);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;CheckByUserKey: userId=&#123;0&#125; returned allowed=&#123;1&#125;&quot;</span>, userId, allowed);</span><br></pre></td></tr></table></figure><p><img src="/d/feature-management-launchdarkly/user-withkey.jpg" alt="User.WithKey"></p><p><strong>User.Builder</strong></p><p>This only works with <code>LaunchDarkly.ServerSdk</code>.</p><p>This example will return true when either of the following is configured in Launch Darkly under the flag <code>sweet-feature-name-2</code>. These are custom fields in Launch Darkly.</p><ul><li><code>cityId</code> of <code>ea2b6efc-020d-4469-a993-1bd5baf78adc</code><br>OR</li><li><code>regionId</code> of <code>nz</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V7.0.3</span></span><br><span class="line"><span class="keyword">var</span> defaultValue = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> userId = Guid.NewGuid().ToString().ToLowerInvariant(); <span class="comment">// this is not validated in LD</span></span><br><span class="line"><span class="keyword">var</span> cityId = <span class="string">&quot;ea2b6efc-020d-4469-a993-1bd5baf78adc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> regionId = <span class="string">&quot;nz&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> featureName = <span class="string">&quot;sweet-feature-name-2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = Context</span><br><span class="line">    .Builder(userId)</span><br><span class="line">    .Set(<span class="string">&quot;CityId&quot;</span>, cityId)</span><br><span class="line">    .Set(<span class="string">&quot;RegionId&quot;</span>, regionId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowed = ldClient.BoolVariation(featureName, context.Build(), defaultValue);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;CheckByCustom: cityId=&#123;0&#125; with regionId=&#123;1&#125; returned allowed=&#123;2&#125;&quot;</span>,</span><br><span class="line">    cityId,</span><br><span class="line">    regionId,</span><br><span class="line">    allowed);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V6.2.0</span></span><br><span class="line"><span class="keyword">var</span> defaultValue = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> userId = Guid.NewGuid().ToString().ToLowerInvariant(); <span class="comment">// this is not validated in LD</span></span><br><span class="line"><span class="keyword">var</span> cityId = <span class="string">&quot;ea2b6efc-020d-4469-a993-1bd5baf78adc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> regionId = <span class="string">&quot;nz&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> featureName = <span class="string">&quot;sweet-feature-name-2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ldClient = <span class="keyword">new</span> LdClient(_sdkKey);</span><br><span class="line"><span class="keyword">var</span> ldUser = User</span><br><span class="line">    .Builder(userId)</span><br><span class="line">    .Custom(<span class="string">&quot;CityId&quot;</span>, cityId)</span><br><span class="line">    .Custom(<span class="string">&quot;RegionId&quot;</span>, regionId)</span><br><span class="line">    .Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowed = ldClient.BoolVariation(featureName, ldUser, defaultValue);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;CheckByCustom: cityId=&#123;0&#125; with regionId=&#123;1&#125; returned allowed=&#123;2&#125;&quot;</span>, </span><br><span class="line">    cityId, </span><br><span class="line">    regionId, </span><br><span class="line">    allowed);</span><br></pre></td></tr></table></figure><p><img src="/d/feature-management-launchdarkly/user-builder.jpg" alt="User.Builder"></p><ul><li><a href="https://docs.launchdarkly.com/sdk/features/user-context-config#net-client-side">https://docs.launchdarkly.com/sdk/features/user-context-config#net-client-side</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> feature management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript JSON</title>
      <link href="/2021/07/js-json/"/>
      <url>/2021/07/js-json/</url>
      
        <content type="html"><![CDATA[<h3 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h3><p>The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse</a></li></ul><h3 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h3><p>The JSON.stringify() method converts a JavaScript object or value to a JSON string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(JSON.stringify(response));</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Math</title>
      <link href="/2021/07/js-math/"/>
      <url>/2021/07/js-math/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a> is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.</p><h3 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h3><p><code>Math.floor()</code> function returns the largest integer less than or equal to a given number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5.95</span>));</span><br><span class="line"><span class="comment">// expected output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5.05</span>));</span><br><span class="line"><span class="comment">// expected output: 5</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor</a></li></ul><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p><code>Math.random()</code> returns a floating-point, pseudo-random number in the range 0 to less than 1 (inclusive of 0, but not 1). Example <code>0.9448960908626425</code></p><p>Using <code>floor</code> and <code>random</code> together:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomInt</span>(<span class="params">max</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;max = &#x27;</span> + max);</span><br><span class="line">   <span class="comment">// max = 3</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Math.random() = &#x27;</span> + random);</span><br><span class="line">   <span class="comment">// Math.random() = 0.9448960908626425</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> randomTimesMax = random * max;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;randomTimesMax = &#x27;</span> + randomTimesMax);</span><br><span class="line">   <span class="comment">// randomTimesMax = 2.834688272587927</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> mathFloor = <span class="title class_">Math</span>.<span class="title function_">floor</span>(randomTimesMax);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Math.floor(randomTimesMax) = &#x27;</span> + mathFloor);</span><br><span class="line">   <span class="comment">// Math.floor(randomTimesMax) = 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getRandomInt</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Networking</title>
      <link href="/2021/07/docker-networking/"/>
      <url>/2021/07/docker-networking/</url>
      
        <content type="html"><![CDATA[<p>We use docker to stub out dependencies (things like API responses with <a href="/2021/05/wiremocks/">wiremock</a>) and quicky bring up standard infastructure like a SQL Database. This is great for local development as our local application can connect to the docker bridge network by using <code>http://localhost:81</code> where 81 is the containers public port.</p><p><img src="/d/docker-networking/docker-dependencies.jpg" alt="Stub out dependencies"></p><h3 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h3><p>I ran into an intersting problem where I needed a containerized application (In this case <a href="/2021/07/k6-performance-testing/">K6 performance testing</a>) to connect to both stubbed out dependencies and an application running at <code>localhost:6000</code>. This wouldnt be a problem in UAT / Production as everything would be either containerized or accessible to the container - this was purely a local development issue.</p><p>A quick hack was to add <code>--network=&quot;host&quot;</code> and then specify as <code>[IPADD]:6000</code> when spinning up the container, as the IP is not static this is not a good solution.</p><p><img src="/d/docker-networking/docker-network-problem.jpg" alt="Docker network problem"></p><h3 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h3><p>The simplest way to allow communication for local development was to use the special DNS name <code>host.docker.internal</code> which resolves to the internal IP address used by the host.</p><p>Interestingly this worked both in the docker bridge network (so the K6 container could see other containers) and in the local pc’s network (so the container k6 container could see the local application on :6000)</p><p><img src="/d/docker-networking/docker-network-solution.jpg" alt="Docker network solution"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.docker.com/desktop/windows/networking/#known-limitations-use-cases-and-workarounds">https://docs.docker.com/desktop/windows/networking/#known-limitations-use-cases-and-workarounds</a></li><li><a href="https://docs.docker.com/network/host/">https://docs.docker.com/network/host/</a></li><li><a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach">https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Program Analysis</title>
      <link href="/2021/07/dynamic-program-analysis/"/>
      <url>/2021/07/dynamic-program-analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>My work colleague demo’d this to us today and it blew my mind! Definitely worth having a deep dive into!</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.jetbrains.com/help/resharper/Dynamic_Program_Analysis.html">https://www.jetbrains.com/help/resharper/Dynamic_Program_Analysis.html</a><br><a href="https://www.jetbrains.com/dotnet/guide/tutorials/rider-profiling/dynamic-program-analysis/">https://www.jetbrains.com/dotnet/guide/tutorials/rider-profiling/dynamic-program-analysis/</a></li><li><a href="https://www.youtube.com/watch?v=Kv35XmR4SG8">https://www.youtube.com/watch?v=Kv35XmR4SG8</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K6 Performance Testing</title>
      <link href="/2021/07/k6-performance-testing/"/>
      <url>/2021/07/k6-performance-testing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“k6 is an open-source load testing tool”</p></blockquote><p>The <a href="https://k6.io/docs/">k6 documentation</a> is amazing and a massive shout out to <a href="https://www.linkedin.com/in/chrisalwinjames/">Chris Alwin James</a> for his <a href="https://github.com/cajames/performance-testing-with-k6">github examples</a> and <a href="https://www.youtube.com/watch?v=Hu1K2ZGJ_K4">YouTube video</a>.</p><h3 id="Useful-links"><a href="#Useful-links" class="headerlink" title="Useful links"></a>Useful links</h3><ul><li><a href="https://test-api.k6.io/">https://test-api.k6.io/</a></li><li><a href="https://k6.io/docs/using-k6/http-requests/">https://k6.io/docs/using-k6/http-requests/</a></li><li><a href="https://k6.io/docs/using-k6/environment-variables/">https://k6.io/docs/using-k6/environment-variables/</a></li><li><a href="https://k6.io/docs/examples/correlation-and-dynamic-data/">JSON Parse</a></li><li><a href="https://k6.io/docs/using-k6/http-debugging/">Debug http</a></li><li><a href="https://k6.io/docs/examples/data-uploads/">File upload</a></li></ul><h3 id="Test-life-cycle"><a href="#Test-life-cycle" class="headerlink" title="Test life cycle"></a>Test life cycle</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. init code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 2. setup code</span></span><br><span class="line">  <span class="comment">// Anything returned here is passed into life cycle steps 3 and 4</span></span><br><span class="line">  <span class="comment">// This is useful for getting access tokens</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 3. VU code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teardown</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 4. teardown code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://k6.io/docs/using-k6/test-life-cycle/">https://k6.io/docs/using-k6/test-life-cycle/</a></li></ul><h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><ul><li><strong>VU (Virtual User)</strong>, an entity that executes a test and makes requests. These are run concurrently and repeat the test over and over.</li><li><strong>Checks</strong>, are like asserts but differ in that they dont halt execution.</li><li><strong>Thresholds</strong>, are global pass/fail criteria for k6 to use, this can fail a load test.</li></ul><h3 id="Types-of-tests"><a href="#Types-of-tests" class="headerlink" title="Types of tests"></a>Types of tests</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baseline</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="attr">stages</span>: [</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;1m&quot;</span>, <span class="attr">target</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;10m&quot;</span>, <span class="attr">target</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;1m&quot;</span>, <span class="attr">target</span>: <span class="number">10</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//load</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="attr">stages</span>: [</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;5m&quot;</span>, <span class="attr">target</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;15m&quot;</span>, <span class="attr">target</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;5m&quot;</span>, <span class="attr">target</span>: <span class="number">0</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//spike</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="attr">stages</span>: [</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;1m&quot;</span>, <span class="attr">target</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;9m&quot;</span>, <span class="attr">target</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;3m&quot;</span>, <span class="attr">target</span>: <span class="number">10000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;7m&quot;</span>, <span class="attr">target</span>: <span class="number">10000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">duration</span>: <span class="string">&quot;10m&quot;</span>, <span class="attr">target</span>: <span class="number">0</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://k6.io/docs/test-types/load-testing/">https://k6.io/docs/test-types/load-testing/</a></li></ul><h3 id="Metrics-amp-Example-test"><a href="#Metrics-amp-Example-test" class="headerlink" title="Metrics &amp; Example test"></a>Metrics &amp; Example test</h3><ul><li><strong>Counter</strong> - A metric that cumulatively sums added values.</li><li><strong>Gauge</strong> -  A metric that stores the min, max and last values added to it.</li><li><strong>Rate</strong> - A metric that tracks the percentage of added values that are non-zero.</li><li><strong>Trend</strong> - A metric that allows for calculating statistics on the added values (min, max, average and percentiles).</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&quot;k6/http&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; check, sleep &#125; <span class="keyword">from</span> <span class="string">&quot;k6&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span>, <span class="title class_">Gauge</span>, <span class="title class_">Rate</span>, <span class="title class_">Trend</span>  &#125; <span class="keyword">from</span> <span class="string">&quot;k6/metrics&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ErrorCount</span> = <span class="keyword">new</span> <span class="title class_">Counter</span>(<span class="string">&quot;foo_error_count&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ErrorGauge</span> = <span class="keyword">new</span> <span class="title class_">Gauge</span>(<span class="string">&quot;foo_gauge&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ErrorRate</span> = <span class="keyword">new</span> <span class="title class_">Rate</span>(<span class="string">&quot;foo_error_rate&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ErrorTrend</span> = <span class="keyword">new</span> <span class="title class_">Trend</span>(<span class="string">&quot;foo_trend&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> statusPercentage = __ENV.<span class="property">STATUS_PERCENTAGE</span>;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Up to 100 looping VUs for 1m over 3 stages</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  <span class="attr">stages</span>: [</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">&quot;15s&quot;</span>, <span class="attr">target</span>: <span class="number">50</span> &#125;, <span class="comment">// ramp up from 0 to 50vu in 50s</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">&quot;30s&quot;</span>, <span class="attr">target</span>: <span class="number">50</span> &#125;, <span class="comment">// stay at 50vu for 30s</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">&quot;15s&quot;</span>, <span class="attr">target</span>: <span class="number">0</span> &#125;   <span class="comment">// over the last 15s ramp down from 50 to 0vu</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">thresholds</span>: &#123;</span><br><span class="line">    <span class="attr">foo_error_count</span>: [<span class="string">&quot;count&lt;10&quot;</span>],    <span class="comment">// error count needs to be less than 10, else fail the custom count metric `foo_error_count`</span></span><br><span class="line">    <span class="attr">foo_error_rate</span>: [<span class="string">&quot;rate&lt;0.1&quot;</span>],     <span class="comment">// error rate needs to be less than 10%, if its more than 10% then fail the custom rate metric `foo_error_rate`</span></span><br><span class="line">    <span class="attr">http_req_duration</span>: [<span class="string">&#x27;p(99)&lt;1100&#x27;</span>] <span class="comment">// 99% of requests must complete below 1.1s, else fail the built in metric `http_req_duration`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;STATUS_PERCENTAGE=&quot;</span> + statusPercentage);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; statusPercentage ? <span class="string">&quot;200&quot;</span> : <span class="string">&quot;500&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = http.<span class="title function_">get</span>(<span class="string">`http://httpbin.org/status/<span class="subst">$&#123;status&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">let</span> success = <span class="title function_">check</span>(response, &#123;</span><br><span class="line">    <span class="string">&quot;status is 200&quot;</span>: <span class="function"><span class="params">r</span> =&gt;</span> r.<span class="property">status</span> === <span class="number">200</span></span><br><span class="line">  &#125;);</span><br><span class="line">  counter++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">    <span class="title class_">ErrorCount</span>.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title class_">ErrorRate</span>.<span class="title function_">add</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">ErrorRate</span>.<span class="title function_">add</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">ErrorTrend</span>.<span class="title function_">add</span>(status);</span><br><span class="line">  <span class="title class_">ErrorGauge</span>.<span class="title function_">add</span>(counter); <span class="comment">// the last value will be kept</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">sleep</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://k6.io/docs/using-k6/metrics/#metric-types">https://k6.io/docs/using-k6/metrics/#metric-types</a></li></ul><h4 id="Understanding-the-metric-results"><a href="#Understanding-the-metric-results" class="headerlink" title="Understanding the metric results"></a>Understanding the metric results</h4><p>The following are results based on <a href="https://github.com/carlpaton/performance-testing-with-k6/blob/master/tests/simple-poll.test.js">simple-poll.test.js</a> with status percentage set at <code>0.1</code> and <code>0.9</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------------- status percentage 0.1</span><br><span class="line"></span><br><span class="line">-------------- status percentage 0.9</span><br></pre></td></tr></table></figure><p>Looking at <code>status percentage 0.1</code> results its a little confusing as the <code>✗</code> are the passes and the <code>✓</code> are the failures (except for the checks metric!)</p><p><strong>Built-in metric</strong></p><table><thead><tr><th>Metric name</th><th>Comments</th></tr></thead><tbody><tr><td>checks</td><td></td></tr><tr><td>http_req_duration</td><td></td></tr><tr><td>iterations</td><td></td></tr><tr><td>http_reqs</td><td><a href="https://community.k6.io/t/difference-in-iterations-and-http-reqs/738">Difference in iterations and http_reqs</a></td></tr></tbody></table><p><strong>Custom metric</strong></p><table><thead><tr><th>Metric name</th><th>Comments</th></tr></thead><tbody><tr><td>foo_error_count</td><td></td></tr><tr><td>foo_error_rate</td><td></td></tr><tr><td>foo_gauge</td><td></td></tr><tr><td>foo_trend</td><td></td></tr></tbody></table><h3 id="Extensions-amp-Typescript-support"><a href="#Extensions-amp-Typescript-support" class="headerlink" title="Extensions &amp; Typescript support"></a>Extensions &amp; Typescript support</h3><p><a href="https://chrome.google.com/webstore/detail/k6-browser-recorder/phjdhndljphphehjpgbmpocddnnmdbda?hl=en">k6 Browser Recorder</a> can be used to simulate load and generate a baseline test.</p><ul><li><a href="https://k6.io/docs/test-authoring/recording-a-session/browser-recorder/">https://k6.io/docs/test-authoring/recording-a-session/browser-recorder/</a></li></ul><p>JS is great but type safety is great(er) :D</p><ul><li><a href="https://www.npmjs.com/package/@types/k6">https://www.npmjs.com/package/@types/k6</a></li><li><a href="https://github.com/grafana/k6-template-typescript">Template to use TypeScript with k6</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 - Delegation Token</title>
      <link href="/2021/07/oauth2-delegation-token/"/>
      <url>/2021/07/oauth2-delegation-token/</url>
      
        <content type="html"><![CDATA[<p>Token Delegation (a form of extension grant) is when an authorized user/service needs to make futher service calls to downstream dependencies. All the examples below use the <a href="https://community.auth0.com/t/rs256-vs-hs256-jwt-signing-algorithms/58609">asymmetric algorithm RS256</a> which is means it uses a public and private key pair.</p><p>A common flow could be: <code>UI</code> -&gt; <code>BFF</code> -&gt; <code>Resource API</code></p><p><img src="/d/oauth2-delegation-token/delegation-token.png" alt="Delegation token"></p><p>Here the user is authenticated at the <code>UI</code>. This means they have a token that grants them access to do their work. Best practice would be <a href="/2020/12/oauth2-authorization-code-flow/">Authorization Code + PKCE</a>. This token is used when the user interacts with the the <code>BFF</code>. </p><p>Example JWT (JSON Web Token) generated at <a href="https://jwt.io/">jwt.io</a> that could be used between <code>UI</code> and <code>BFF</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2p3dC5pby8iLCJhdWQiOiJiZmYtYXBpIiwiaWF0IjoxNjI1NzY5MzI2LCJleHAiOjE2MjU3Njk5MjYsInVzZXItZnVsbG5hbWUiOiJDYXJsIFBhdG9uIiwidXNlci1pZCI6IjE2ZDMyMTc3LTgxY2YtNDg0OC04NWYzLTYxNTRhZDg0NzJhZSJ9.EYKK4GjD_GokVLcVP5Po1pY8AH6nXiPwG9iDK3-dRUh27XrJ_LW4ZgD-7m0bl0MYIWkqhWZbZFNUTpdhBXtZNBDMQzDaF-Y9S0XhlGfnQiHDM6-f_o0xoB-GYO0K1d9l1Ixi-gwkCIrViJ4hWItxridSdR1hsMaCzTvRv4HVjE6DU1NrpCdD8KDHGTFi55IFTv7PWbQoEabZxZ2CYVfHPSmajv_cfG9BIC_Vm04meKrU2wbWDU9R3vkiwxX00RK_Vmjj90hafe3cbEHJ2aRtkIjXOkBx-r6Zifibhmwf8SENZOdpRCt1fpV1oHd6bLtj_9_dyMiPvVkHB3DD0lebDQ</span><br></pre></td></tr></table></figure><p>The decoded payload is</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;iss&quot;: &quot;https://jwt.io/&quot;,</span><br><span class="line">  &quot;aud&quot;: &quot;bff-api&quot;,</span><br><span class="line">  &quot;iat&quot;: 1625769326,</span><br><span class="line">  &quot;exp&quot;: 1625769926,</span><br><span class="line">  &quot;user-fullname&quot;: &quot;Carl Paton&quot;,</span><br><span class="line">  &quot;user-id&quot;: &quot;16d32177-81cf-4848-85f3-6154ad8472ae&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>BFF</code> may check any of these claims to validate the token.</p><ul><li><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1">“iss” (Issuer) Claim</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3">“aud” (Audience) Claim</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6">“iat” (Issued At) Claim</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4">“exp” (Expiration Time) Claim</a></li><li>The <code>user-x</code> claims are not part of <a href="https://datatracker.ietf.org/doc/html/rfc7519">rfc7519</a>, these are custom claims I made up and can be anything.</li></ul><p>The delegation token comes into play when the <code>BFF</code> needs to make a call to the <code>Resource API</code>. The current token claims may not satisfy this request as additional claims or scopes may be required.</p><p>Example based on <a href="https://www.scottbrady91.com/OAuth/Delegation-Patterns-for-OAuth-20">scottbrady91.com</a></p><p>Here we would take the token above and pass it as a form field parameter of <code>&amp;token=</code> along with the scope we need, the example below is <code>&amp;scope=calendar.edit</code>. This assumes the client <code>resource-api</code> has been provisioned to have these scopes and the required additional claims are returned.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /token</span><br><span class="line">Host: auth.example.com</span><br><span class="line">Authorization: Basic cmVzb3VyY2UtYXBpOnNlY3JldA==   // base64 encoded string of `resource-api:secret`</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=delegation</span><br><span class="line">&amp;scope=calendar.edit</span><br><span class="line">&amp;token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2p3dC5pby8iLCJhdWQiOiJiZmYtYXBpIiwiaWF0IjoxNjI1NzY5MzI2LCJleHAiOjE2MjU3Njk5MjYsInVzZXItZnVsbG5hbWUiOiJDYXJsIFBhdG9uIiwidXNlci1pZCI6IjE2ZDMyMTc3LTgxY2YtNDg0OC04NWYzLTYxNTRhZDg0NzJhZSJ9.EYKK4GjD_GokVLcVP5Po1pY8AH6nXiPwG9iDK3-dRUh27XrJ_LW4ZgD-7m0bl0MYIWkqhWZbZFNUTpdhBXtZNBDMQzDaF-Y9S0XhlGfnQiHDM6-f_o0xoB-GYO0K1d9l1Ixi-gwkCIrViJ4hWItxridSdR1hsMaCzTvRv4HVjE6DU1NrpCdD8KDHGTFi55IFTv7PWbQoEabZxZ2CYVfHPSmajv_cfG9BIC_Vm04meKrU2wbWDU9R3vkiwxX00RK_Vmjj90hafe3cbEHJ2aRtkIjXOkBx-r6Zifibhmwf8SENZOdpRCt1fpV1oHd6bLtj_9_dyMiPvVkHB3DD0lebDQ</span><br></pre></td></tr></table></figure><p>The response JWT could be</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2p3dC5pby8iLCJhdWQiOiJyZXNvdXJjZS1hcGkiLCJpYXQiOjE2MjU3NjkzMjYsImV4cCI6MTYyNTc2OTkyNiwidXNlci1mdWxsbmFtZSI6IkNhcmwgUGF0b24iLCJ1c2VyLWlkIjoiMTZkMzIxNzctODFjZi00ODQ4LTg1ZjMtNjE1NGFkODQ3MmFlIiwidXNlci1hY2Nlc3MiOiJyZXNvdXJjZS1hcGkiLCJzY29wZSI6WyJjYWxlbmRhci5lZGl0Il19.SW1f7_XVkWE4B_XtjF_Ti6-Z6Zs9XozJz0YIW768NM2n0e2Wf8pHh9jme_dTpwtLAS2_fJt5taVkdYC1d8nK38_aeW6qEYrdaj29FO--D-hJAdxOGSM1gbUwXbuKjawMSMCkwmVO8g9bPJ8ayBx07KURAa0ke8KeGL_GlvsBsInGzJaGC6SuPdkynQu2H0pfaduD0IHVvpVucg1p-fRSg5D7joNIcpxIaHne2SOkz9xNMLNOQuluifQ2Us_hpzc31h5Bn7GJBzMd8ZNFIp8C5AJnqyM5EG7M0suvHkJ-ThXPYO1VgTGVpparfXU547NM-d_W7IY1MFg1gMLWDj2chg</span><br></pre></td></tr></table></figure><p>The decoded payload is</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;iss&quot;: &quot;https://jwt.io/&quot;,</span><br><span class="line">  &quot;aud&quot;: &quot;resource-api&quot;,</span><br><span class="line">  &quot;iat&quot;: 1625769326,</span><br><span class="line">  &quot;exp&quot;: 1625769926,</span><br><span class="line">  &quot;user-fullname&quot;: &quot;Carl Paton&quot;,</span><br><span class="line">  &quot;user-id&quot;: &quot;16d32177-81cf-4848-85f3-6154ad8472ae&quot;,</span><br><span class="line">  &quot;user-access&quot;: &quot;resource-api&quot;,</span><br><span class="line">  &quot;scope&quot;: [</span><br><span class="line">    &quot;calendar.edit&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This token can then be used to query <code>Resource API</code> with endpoints that require these new claims such as</p><ul><li>The <code>calendar.edit</code> scope</li><li>The claim <code>user-access</code> to equal <code>resource-api</code></li></ul><p>These checks would be anything that is sensible to your business requirements. Its would also be best practice to check <code>aud=resource-api</code>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://jwt.io/">https://jwt.io/</a></li><li><a href="https://www.unixtimestamp.com/">https://www.unixtimestamp.com/</a></li><li><a href="https://www.scottbrady91.com/OAuth/Delegation-Patterns-for-OAuth-20">https://www.scottbrady91.com/OAuth/Delegation-Patterns-for-OAuth-20</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Sharp Timed Hosted Service</title>
      <link href="/2021/07/c-sharp-timed-hosted-service/"/>
      <url>/2021/07/c-sharp-timed-hosted-service/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/c-sharp-timed-hosted-service/header.jpg" alt="Sharp Timed Hosted Service"></p><p>This is just a <a href="/2021/03/c-sharp-hosted-service/">Hosted Service</a> that runs with a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.timers.timer">timer</a>, this means the task is run at intervals. For example every 60 seconds poll a service for changes. <code>Hosted Service</code> is a generic term Microsoft uses as they state “Hosted Services are services/logic that you host within your host/application/microservice.” The Microsoft project template for this is <a href="https://devblogs.microsoft.com/premier-developer/demystifying-the-new-net-core-3-worker-service/">Worker Service</a> (using the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0&tabs=visual-studio#backgroundservice-base-class-1">BackgroundService</a> base class) and other common names I’ve seen are <code>Bots</code>, <code>Worker Processes</code>, <code>Workers</code> and my personal favorite <code>Daemon</code> 😈</p><blockquote><p>non-HTTP workloads like messaging, background tasks, console applications etc. These types of applications don’t have the notion of an incoming HTTP request like a traditional ASP.NET/ASP.NET Core Web Application - docs.microsoft.com</p></blockquote><h1 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h1><p>Consider the following events feed for a shopping cart below. These events are CRUD actions <code>CART_CREATE</code>, <code>CART_UPDATE</code> and <code>CART_DELETE</code>. The following query string parameters are used from the <a href="https://github.com/typicode/json-server">json-server</a> instance.</p><ul><li>The watermark is set with <code>id_gte=42</code> this means where <code>events.id</code> &gt;= 42</li><li>Pagination is set with <code>_page=3</code> this means only show page 3</li><li>Set the page size with <code>_limit=25</code> this means the page size is 25, ie: the max <code>events</code> count will be 25</li></ul><table><thead><tr><th>Verb</th><th>URI example</th></tr></thead><tbody><tr><td>GET</td><td><a href="http://localhost:3331/events?id_gte=42&amp;_page=3&amp;_limit=25">http://localhost:3331/events?id_gte=42&amp;_page=3&amp;_limit=25</a></td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;event_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CART_CREATE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;985e732f-bf00-4999-a1b6-873973f9b8ff&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;date_utc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-08T04:56:19Z&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0760c3e1-1ceb-4a00-aede-328c66f729c7&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;quantity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;unit_cost&quot;</span><span class="punctuation">:</span> <span class="number">1.99</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;117e986e-c08f-4483-8a8f-d5e1c0512650&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;quantity&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;unit_cost&quot;</span><span class="punctuation">:</span> <span class="number">0.29</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;event_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CART_UPDATE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;61af172f-ec9e-4789-848c-9a2bf3f16ba3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;date_utc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-08T04:59:30Z&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f4e0cc62-5be9-4ecc-82b4-4c90968a293c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;quantity&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;unit_cost&quot;</span><span class="punctuation">:</span> <span class="number">3.25</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;event_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CART_DELETE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5d9e7c82-0341-4d1c-aba4-f62789d77e6f&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><p>Create a hosted service that fulfills the following acceptance criteria:</p><ul><li>consumes this feed and persists the CRUD event to a database as a <code>CREATE</code>, <code>UPDATE</code> or <code>DELETE</code></li><li>a <code>watermark</code> needs to be used so events are not processed again</li><li>use <code>page</code> and <code>size</code> parameters</li><li>the service should run infinitely until the process is interupted with <code>ctrl+c</code></li><li>the solution should be extensible</li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>This is the simplest no frills solution, from here it could be adapted to inlude message queues and better separation of concerns. The code for this solution can be found at <a href="https://github.com/carlpaton/TimedHostedServiceDemo">https://github.com/carlpaton/TimedHostedServiceDemo</a></p><p><img src="/d/c-sharp-timed-hosted-service/timed-hosted-service-simple.jpg" alt="Timed Hosted Service Simple"></p><h2 id="TimedHostedService-Worker"><a href="#TimedHostedService-Worker" class="headerlink" title="TimedHostedService.Worker"></a>TimedHostedService.Worker</h2><ol><li><p>Create a <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0&tabs=visual-studio#timed-background-tasks">timed background task per the Microsoft documentation</a> using the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostedservice">IHostedService</a> interface. Note that the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0&tabs=visual-studio#backgroundservice-base-class">BackgroundService</a> is a base class for implementing a long running IHostedService. So this would work but I’ve use the interface instead as that the example for a time hosted service at <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0&tabs=visual-studio#timed-background-tasks">docs.microsoft.com</a>.</p></li><li><p>In Program.cs use <code>HostBuilder</code> to configure the startup pipeline. Use <code>ConfigureServices</code> to register <code>TimedHostedService</code> with <code>AddHostedService</code>. Additionally add console logging with <code>ConfigureLogging</code> and configuration with <code>ConfigureAppConfiguration</code></p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimedHostedService</span> : <span class="title">IHostedService</span>, <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;TimedHostedService&gt; _logger;</span><br><span class="line">    <span class="keyword">private</span> Timer _timer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimedHostedService</span>(<span class="params">ILogger&lt;TimedHostedService&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">StartAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;STARTASYNC RUN&quot;</span>);</span><br><span class="line">        _timer = <span class="keyword">new</span> Timer(DoWork, <span class="literal">null</span>, TimeSpan.Zero, TimeSpan.FromSeconds(<span class="number">42</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">StopAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;STOPASYNC RUN&quot;</span>);</span><br><span class="line">        _timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _timer?.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">$&quot;EVENT BROKER RUNS AGAIN IN 42 SECONDS.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Running the app now produces a timed event every 42 seconds and this is shown in the logs until <code>ctrl+c</code> is pressed. </li></ol><p>Beauty!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info: TimedHostedService.Worker.TimedHostedService[0]</span><br><span class="line">      STARTASYNC RUN</span><br><span class="line">info: TimedHostedService.Worker.TimedHostedService[0]</span><br><span class="line">      EVENT BROKER RUNS AGAIN IN 42 SECONDS.</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice">Design a DDD-oriented microservice</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0&tabs=visual-studio#timed-background-tasks">Timed background tasks</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#implement-domain-events">Implement domain events</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice">Implement background tasks in microservices with IHostedService and the BackgroundService class</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0&tabs=visual-studio">Background tasks with hosted services in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-5.0">.NET Generic Host in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/worker-service">Application Insights for Worker Service applications (non-HTTP applications)</a></li></ul><h3 id="Alternative-to-Time-Hosted"><a href="#Alternative-to-Time-Hosted" class="headerlink" title="Alternative to Time Hosted"></a>Alternative to Time Hosted</h3><p>Instead of using a <code>Timer</code> its also acceptable to just use a loop that exits based on a <code>CancellationToken</code>, here its more common to then just use the <code>BackgroundService</code> base class and only override <code>ExecuteAsync</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Worker</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken token</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!token.IsCancellationRequested)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// worker things!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TimedHostedService-Worker-Domain"><a href="#TimedHostedService-Worker-Domain" class="headerlink" title="TimedHostedService.Worker.Domain"></a>TimedHostedService.Worker.Domain</h2><h3 id="Event-Broker-CartEvents"><a href="#Event-Broker-CartEvents" class="headerlink" title="Event Broker (CartEvents)"></a>Event Broker (CartEvents)</h3><p>This orchestrates the flow and doesnt have to be called a <code>Broker</code> could be <code>Processor</code> or anything that makes sense to your team. This will be called by DoWork in <code>TimedHostedService</code> and only needs one method <code>ProcessAsync</code></p><ul><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/EventBroker.cs">EventBroker implementation of IEventBroker</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimedHostedService.Worker.Domain.CartEvents</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventBroker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Orchestrates the following:</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> - Check watermark.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> - Collect new events from HTTP events feed.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> - Dispatch events.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function">Task <span class="title">ProcessAsync</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Event-Feed-Service-Services"><a href="#Event-Feed-Service-Services" class="headerlink" title="Event Feed Service (Services)"></a>Event Feed Service (Services)</h3><p>This will create the <a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/Services/EventDto.cs">DTO entities</a> based on the JSON events feed, tools like <a href="https://json2csharp.com/">json2csharp.com</a> can help quickly generate these classes.</p><ul><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/Services/HttpEventFeedService.cs">HttpEventFeedService implementation of IEventFeedService</a>. I used the <code>Http</code> prefix as these events could be fetched by other implementations such as local config file.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimedHostedService.Worker.Domain.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventFeedService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Get a collection of events from the feed. </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;watermark&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        Task&lt;IEnumerable&lt;EventDto&gt;&gt; GetEventsAsync(<span class="built_in">long</span> watermark);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The domain events are used to explicitly implement side effects across multiple aggregates. In C#, a domain event is simply a data-holding structure or class, like a DTO.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation">Domain events: design and implementation</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#implement-domain-events">Implement domain events</a></li></ul><h3 id="Cart-Mapper-CartEvents-Mappers"><a href="#Cart-Mapper-CartEvents-Mappers" class="headerlink" title="Cart Mapper (CartEvents/Mappers)"></a>Cart Mapper (CartEvents/Mappers)</h3><p>We will need to map the <a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/Services/EventDto.cs">EventDto</a> to the domain event <a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/Events/CartEvent.cs">CartEvent</a></p><ul><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/Mappers/CartMapper.cs">CartMapper implementation of ICartMapper</a>.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimedHostedService.Worker.Domain.CartEvents.Mappers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICartMapper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Maps `EventDto` to domain event `CartEvent`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;eventDtos&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function">IEnumerable&lt;CartEvent&gt; <span class="title">MapCartEvent</span>(<span class="params">IEnumerable&lt;EventDto&gt; eventDtos</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Maps `CartEvent` to domain model `Cart`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cartEvent&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function">Cart <span class="title">MapCart</span>(<span class="params">CartEvent cartEvent</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our <a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/Events/EventType.cs">EventType</a>‘s are based on the feed.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> EventType</span><br><span class="line">&#123;</span><br><span class="line">    CART_CREATE = <span class="number">1</span>,</span><br><span class="line">    CART_UPDATE = <span class="number">2</span>,</span><br><span class="line">    CART_DELETE = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Event-Handler-CartEvents-Events-Handlers"><a href="#Event-Handler-CartEvents-Events-Handlers" class="headerlink" title="Event Handler (CartEvents/Events/Handlers)"></a>Event Handler (CartEvents/Events/Handlers)</h3><p>To separate out the concearns we have handlers for each event type.</p><ul><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/Handlers/CartCreateEventHandler.cs">CartCreateEventHandler implementation of IEventHandler</a>.</li><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/Handlers/EmailOnCartCreateEventHandler.cs">EmailOnCartCreateEventHandler implementation of ICartMapper</a> (this is just an example of the extensibility, it doesnt actually send emails - but it could)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimedHostedService.Worker.Domain.CartEvents.Handlers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Handles the given event based on the action type in the event.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cartEvent&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function">Task <span class="title">HandleAsync</span>(<span class="params">CartEvent cartEvent</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Matches the handler from the injected collection based on EventType</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;eventType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params">EventType eventType</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TimedHostedService-Worker-Infrastructure"><a href="#TimedHostedService-Worker-Infrastructure" class="headerlink" title="TimedHostedService.Worker.Infrastructure"></a>TimedHostedService.Worker.Infrastructure</h2><p>This has <a href="https://github.com/carlpaton/TimedHostedServiceDemo/tree/master/src/TimedHostedService.Worker.Infrastructure/Repositories">Repositories</a> for persistant storage of data and the interfaces are defined in <a href="https://github.com/carlpaton/TimedHostedServiceDemo/tree/master/src/TimedHostedService.Worker.Domain/Interfaces">TimedHostedService.Worker.Domain/Interfaces</a></p><p><code>ICartItemRepository</code> and <code>ICartRepository</code> are very simliar.</p><ul><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Infrastructure/Repositories/CartRepository.cs">ICartRepository implementation of ICartRepository</a>.</li><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Infrastructure/Repositories/CartItemRepository.cs">CartItemRepository implementation of ICartItemRepository</a>.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimedHostedService.Worker.Domain.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICartItemRepository</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Insert a new cart_item row</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cartItem&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">long</span> <span class="title">Add</span>(<span class="params">CartItem cartItem</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Updates the existing cart_item row</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cartItem&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params">CartItem cartItem</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Deletes the cart_item row</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cartItemId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> cartItemId</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>IWatermarkRepository</code> is used to keep track of the watermark in a local .ini file.</p><ul><li><a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Infrastructure/Repositories/WatermarkRepository.cs">WatermarkRepository implementation of IWatermarkRepository</a>.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TimedHostedService.Worker.Domain.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IWatermarkRepository</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Selects the current watermark value</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Only items greater than or equal to this value will be requested from the event feed</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">long</span> <span class="title">Get</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Sets the watermark to the given value</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;watermark&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">long</span> watermark</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At the start of each <code>ProcessAsync</code> in the <a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/EventBroker.cs">EventBroker</a> the watermark is read from the ini file.</p><p>After each event is dispatched and awaited the watermark is updated with <code>+1</code>. This implementation of the watermark would NOT scale well if the hosted service was with muiltiple instances but this is fine for a POC.</p><p>Thats it, the hosted service would continue to poll for new events and handle them. When new events are needed they can be implemented with <a href="https://github.com/carlpaton/TimedHostedServiceDemo/blob/master/src/TimedHostedService.Worker.Domain/CartEvents/Handlers/IEventHandler.cs">IEventHandler</a> and injected as part of the collection using <a href="/2018/04/dependency-inversion-principle-dip/">dependency injection</a>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/background-jobs">https://docs.microsoft.com/en-us/azure/architecture/best-practices/background-jobs</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> workers </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-tier Application Component Package (DACPAC)</title>
      <link href="/2021/06/dacpac/"/>
      <url>/2021/06/dacpac/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>“A DACPAC (Data-tier Application Component Package) is a package that contains the state of your database. It is generated from tools such as SQL Projects that you can create from Visual Studio 2017.”</p></blockquote><h3 id="EF-DacPacs"><a href="#EF-DacPacs" class="headerlink" title="EF DacPacs"></a>EF DacPacs</h3><p>WIP</p><h3 id="EF-migrations"><a href="#EF-migrations" class="headerlink" title="EF migrations"></a>EF migrations</h3><p>This is done with <code>dotnet-ef</code>, example commands could be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add MeaningfulMigrationName</span><br><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><ul><li><a href="/2021/02/entity-framework-core/">See Entity Framework Core</a> </li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://blog.raph.ws/2019/01/migrations-vs-dacpacs/">https://blog.raph.ws/2019/01/migrations-vs-dacpacs/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse A Linked List</title>
      <link href="/2021/06/reverse-a-linked-list/"/>
      <url>/2021/06/reverse-a-linked-list/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>foo</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>bar</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>baz</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>bat</p>]]></content>
      
      
      
        <tags>
            
            <tag> data structures </tag>
            
            <tag> algorithms </tag>
            
            <tag> wip </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Invert A Binary Tree (BST)</title>
      <link href="/2021/06/rosetta-code-invert-a-binary-tree/"/>
      <url>/2021/06/rosetta-code-invert-a-binary-tree/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/rosetta-code-invert-a-binary-tree/meme.png" alt="Poking some fun"></p><p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>Another popular interview question/assessment is to invert a binary tree. This is where all the left and right children of all non-leaf nodes are interchanged. Think of it as a mirror of the input tree.</p><p>This can be visually understood as follows, where 4 is the root node and its subsequent children are inverted.</p><p><img src="/d/rosetta-code-invert-a-binary-tree/invert-binary-tree-example.png" alt="Invert Binary Tree Example"></p><h4 id="What-exactly-is-a-binary-tree"><a href="#What-exactly-is-a-binary-tree" class="headerlink" title="What exactly is a binary tree?"></a>What exactly is a binary tree?</h4><p>Its simply a data structure</p><ul><li>Used to represent data in a hierarchical format starting from the root node, the subsequent nodes are left/right children nodes</li><li>Every node has 2 components, Data (so its value) and references. These references are either null or a reference to the left/right children </li><li>Adding data to a tree starts at the root node, if its not null the value is added at the root. If the value to be added is LESS than the root its added on the LEFT. If its greater its added on the right. This pattern builds the entire tree and is then performant for searching.</li></ul><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><p>Given the binary tree from the story above, invert it so its values show as the example Output. Its important to remember that its a mirror image so the left and right children are swapped. (Dont try flip it so the root node is at the bottom)</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>Some of the code below is based on the hilarious <a href="https://www.youtube.com/watch?v=ijL0h6-1qbQ">Inverting Binary Trees - You Suck at Coding [1]</a> video by <a href="https://www.youtube.com/channel/UC-8QAzbLcRglXeN_MY9blyw">Ben Awad</a>. The rest is base on learnings from <a href="/2022/03/data-structures-algorithms-in-c-sharp/">Data Structures and Algorithms in C#</a></p><p>This would be my pseudocode, I feel its important to try set yourself up for success - pseudocode is part of the journey.</p><ol><li>Understand what the class will look like</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BstNode</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> data;</span><br><span class="line">  BstNode left;</span><br><span class="line">  BstNode right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>There are many ways to do this (see the references at the end) but upfront we need to atleast choose one of</li></ol><ul><li><em>Iterative</em> - this is when a loop repeatedly executes until the controlling condition becomes false.</li><li><em>Recursive</em> - this is when a statement in a function calls itself repeatedly.</li></ul><p>Recursion is how most of the online examples are doing it so lets roll with that.</p><ol start="2"><li>Ensure you have a base case</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>In the function swap the nodes</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = node.left;</span><br><span class="line">node.left = node.right;</span><br><span class="line">node.right = temp;</span><br></pre></td></tr></table></figure><ol start="4"><li>Call the inversion function with each node</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invert(node.left);</span><br><span class="line">Invert(node.right);</span><br></pre></td></tr></table></figure><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><p>Given the following binary tree, invert it from the specified node.</p><p><img src="/d/rosetta-code-invert-a-binary-tree/invert-binary-tree-from-specified-node.png" alt="Task 2: Invert from specified node"></p><h3 id="Solutions-1"><a href="#Solutions-1" class="headerlink" title="Solutions"></a>Solutions</h3><h4 id="pseudocode"><a href="#pseudocode" class="headerlink" title="pseudocode"></a>pseudocode</h4><ul><li>Use recursion to find the node we are interested in inverting from<ul><li>My picture above is from 6, so we want 7 and 5 swapped</li><li>I have moved the <code>Traverse</code> examples to <a href="/2022/03/data-structures-algorithms-in-c-sharp/">Data Structures and Algorithms in C#</a></li></ul></li><li>Use recursion to invert from there the same as we did in task 1 above</li></ul><p>Example code to traverse recursively</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BstNode</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> data;</span><br><span class="line">  BstNode left;</span><br><span class="line">  BstNode right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Traverse</span>()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">    left.Traverse();</span><br><span class="line">  &#125;</span><br><span class="line">  Console.WriteLine(<span class="keyword">this</span>.data);</span><br><span class="line">  <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">    right.Traverse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://afteracademy.com/blog/invert-a-binary-tree">https://afteracademy.com/blog/invert-a-binary-tree</a></li><li><a href="https://thecodebarbarian.com/i-dont-want-to-hire-you-if-you-cant-reverse-a-binary-tree">https://thecodebarbarian.com/i-dont-want-to-hire-you-if-you-cant-reverse-a-binary-tree</a></li><li><a href="http://csharpexamples.com/c-binary-search-tree-implementation/">http://csharpexamples.com/c-binary-search-tree-implementation/</a></li><li><a href="https://rosettacode.org/wiki/Tree_traversal#C.23">https://rosettacode.org/wiki/Tree_traversal#C.23</a></li><li><a href="https://stackoverflow.com/questions/9460255/reverse-a-binary-tree-left-to-right">https://stackoverflow.com/questions/9460255/reverse-a-binary-tree-left-to-right</a></li><li><a href="https://www.reddit.com/r/ProgrammerHumor/comments/i49h96/jobs_requirements/">https://www.reddit.com/r/ProgrammerHumor/comments/i49h96/jobs_requirements/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> data structures </tag>
            
            <tag> algorithms </tag>
            
            <tag> wip </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remote Procedure Call (gRPC)</title>
      <link href="/2021/06/remote-procedure-call/"/>
      <url>/2021/06/remote-procedure-call/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>“In distributed computing, a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction.”</p></blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Remote_procedure_call">https://en.wikipedia.org/wiki/Remote_procedure_call</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/grpc/">https://docs.microsoft.com/en-us/aspnet/core/grpc/</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/api-design">https://docs.microsoft.com/en-us/azure/architecture/microservices/design/api-design</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Copy From Exited Container</title>
      <link href="/2021/06/docker-copy-from-exited-container/"/>
      <url>/2021/06/docker-copy-from-exited-container/</url>
      
        <content type="html"><![CDATA[<p>I needed to copy data from an exited container to debug a database deployment failure. The container was in an error state so I could not start it again.</p><p>We need to look for the container ID with the list containers function (this is the <code>ps</code> processes command and the <code>-a</code> means show all. The default only shows those running)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure><p>Commit the containers file changes or settings into a new image, most of the examples I could find put in <code>user/something</code> which helps to identify the image.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [EXITED CONTAINER ID] user/copied_from_foo</span><br></pre></td></tr></table></figure><p>Now run the image in interactive mode (this is the <code>-i</code> option) so the container stays up. If you dont want a random name then include <code>--name sweet-container-name</code>. I like the random names as I know those were just for a hoon and can be trashed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i --entrypoint=sh user/copied_from_foo</span><br></pre></td></tr></table></figure><p>From the interactive terminal, <code>ll</code> or <code>dir</code> to find what you want and to figure out the folder stucture. I normally try get to the root and filter out from there.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">dir</span><br></pre></td></tr></table></figure><p>Hop over to another PWSH window on your local machine.</p><p>Find the new container id that is running in iteractive mode, here the random name and status are helpful, it will be only a few seconds old.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>Copy locally, I like to copy to a temp folder in my local machines root.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd\</span><br><span class="line">mkdir temp</span><br><span class="line">cd temp</span><br><span class="line">docker cp [NEW CONTAINER ID]:/some folder/ .</span><br></pre></td></tr></table></figure><p>The content from the container’s <code>some folder</code> folder is now local in the root at <code>/temp/</code>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/commit/">https://docs.docker.com/engine/reference/commandline/commit/</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/exec/">https://docs.docker.com/engine/reference/commandline/exec/</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/cp/">https://docs.docker.com/engine/reference/commandline/cp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Two Player Settlers Of Catan</title>
      <link href="/2021/06/two-player-settlers-of-catan/"/>
      <url>/2021/06/two-player-settlers-of-catan/</url>
      
        <content type="html"><![CDATA[<p>My wife and love playing <a href="https://www.catan.com/game/catan">Settlers Of Catan</a> but its often just the two of us and its a 3+ player game. This is my attempt to collate adapted setup and rules to allow us to play this as a 2 player.</p><h3 id="Adapted-Board"><a href="#Adapted-Board" class="headerlink" title="Adapted Board"></a>Adapted Board</h3><p>This was our first attempt to setup the board.</p><ul><li>All ports upside down to start, this is the outside of the hex. </li><li>Fill as normal with the hex resources, we just place them randomly and try separate a bit so there is little grouping</li><li>Flip 5 to show as water, the remaining hex’s should be<ul><li>3 Wood </li><li>3 Sheep</li><li>3 wheat</li><li>2 Ore </li><li>2 Brick</li><li>1 Desert</li></ul></li><li>Use the expansion ports and place randomly with atleast 1 space between</li><li><code>2</code> &amp; <code>12</code> values grouped together</li><li>Remove <code>3</code>, <code>4</code>, <code>10</code> &amp; <code>11</code></li></ul><p><img src="/d/two-player-settlers-of-catan/adapted-board.jpg" alt="Example Aapted Board"></p><h3 id="Initial-Placements"><a href="#Initial-Placements" class="headerlink" title="Initial Placements"></a>Initial Placements</h3><ul><li>Roll the dice, highest value starts</li><li>Take it in turns to place a settlement and a road</li><li>Each player must have 2 settlements and 2 roads to start the game</li></ul><h3 id="Adapted-Rules"><a href="#Adapted-Rules" class="headerlink" title="Adapted Rules"></a>Adapted Rules</h3><p>Robin Hood Robber</p><ul><li>Only in play when each player has 3 VP</li><li>If nobody is at 3 VP and a 7 is rolled, roll again</li><li>When players have the same number of victory points, the player who rolled the dice controls the robber.</li><li>Once one player has reached 3 VP, the player with the least amount of VP (not including development cards) controls the robber each time a 7 is rolled and they get to loot their opponent</li><li>Max cards when the robber is in play is 9</li></ul><p>Resource Cards</p><ul><li>Start with 4</li><li>Highest settlement placement in terms of round dice numbers determines the 4</li><li>No trading</li></ul><p>Bridges</p><ul><li>Can go over water, maximum of 2 lengths</li><li>Cost is 1 Ore &amp; 1 Wood</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.youtube.com/watch?v=xcK5WhjRWio">http://www.youtube.com/watch?v=xcK5WhjRWio</a></li><li><a href="https://boardgames.stackexchange.com/questions/6104/how-do-you-make-settlers-of-catan-work-well-for-2-players-problems-and-play-te">https://boardgames.stackexchange.com/questions/6104/how-do-you-make-settlers-of-catan-work-well-for-2-players-problems-and-play-te</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> board games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Equilibrium Index of an Array</title>
      <link href="/2021/05/rosetta-code-equilibrium-index-of-an-array/"/>
      <url>/2021/05/rosetta-code-equilibrium-index-of-an-array/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>A popular interview question/assessment is to find the equilibrium index of an array. Generally its to assess the candidates approach to a problem more so than actually solving it.</p><p>The equilibrium index of an array is an index where the sum of elements at lower indexes (to the left) is equal to the sum of elements at higher indexes (to the right). Should none of the above hold truth, the array has no equilibrium index.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Given the following zero index array <code>[2,2,4,1,3]</code> consisting of integers write a function that determines the equilibrium index. If an equilibrium index exists, return it. Else return -1.</p><p>For this example the its clear that the answer is <code>A[2]</code> as shown below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A[0] + A[1] = A[2]</span><br><span class="line">2    + 2    = 4</span><br><span class="line"></span><br><span class="line">A[3] + A[4] = A[2]</span><br><span class="line">1    + 3    = 4</span><br></pre></td></tr></table></figure><p>The step by step calculations shown from a simple to cognitively calculate array <code>[1,2,3,4,5]</code> which has no equilibrium index would be as follows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1         =  1</span><br><span class="line">5 + 4 + 3 = 12</span><br><span class="line"></span><br><span class="line">1 + 2     =  3</span><br><span class="line">5 + 4     =  9</span><br><span class="line"></span><br><span class="line">1 + 2 + 3 =  6</span><br><span class="line">5         =  5</span><br></pre></td></tr></table></figure><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>Pseudocode would be acceptable during an interview question but for an assessment I’d expect to see some code (points for unit tests!)</p><h4 id="pseudocode"><a href="#pseudocode" class="headerlink" title="pseudocode"></a>pseudocode</h4><p>Simplest approach, probably in-efficient but good enough as a first cut.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iterate over the collection with a for loop `i=0; i&lt;a.len; i++`</span><br><span class="line">if at the first or last index, continue</span><br><span class="line"></span><br><span class="line">iterate from the start of the collection with a for loop `ii=0; ii&lt;i; ii++`</span><br><span class="line">    sum the lower bound index values `lowerValues += a[ii]`</span><br><span class="line">    we use `ii&lt;i` as the current index must not be part of the sum</span><br><span class="line"></span><br><span class="line">iterate backwards from the end of the collection with a for loop `iii=a.len-1; iii&gt;i; iii--`</span><br><span class="line">    sum the upper bound index values `upperValues += a[iii]`</span><br><span class="line">    we use `iii&gt;i` as the current index must not be part of the sum</span><br><span class="line"></span><br><span class="line">if `lowerValues == upperValues`</span><br><span class="line">    return a[i]</span><br><span class="line">else</span><br><span class="line">    return -1</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>Probably not something we would ship to production but good enough to iterate on and refactor to a better design with unit tests. (we always write unit tests right? :D)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _array.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || i == _array.Length - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lowerValues = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> upperValues = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> ii = <span class="number">0</span>; ii &lt; i; ii++)</span><br><span class="line">    &#123;</span><br><span class="line">        lowerValues += _array[ii];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> iii = _array.Length<span class="number">-1</span>; iii &gt; i; iii--)</span><br><span class="line">    &#123;</span><br><span class="line">        upperValues += _array[iii];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lowerValues == upperValues)</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>Code solution from <a href="https://rosettacode.org/wiki/Equilibrium_index#C.23">rosettacode.org</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">EquilibriumIndices</span>(<span class="params">IEnumerable&lt;<span class="built_in">int</span>&gt; sequence</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> right = sequence.Sum();</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> element <span class="keyword">in</span> sequence)</span><br><span class="line">    &#123;</span><br><span class="line">        right -= element;</span><br><span class="line">        <span class="keyword">if</span> (left == right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">        left += element;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://rosettacode.org/wiki/Equilibrium_index#C.23">https://rosettacode.org/wiki/Equilibrium_index#C.23</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/Boilerplate/tree/master/Rosetta%20Code/Equilibrium%20Index">https://github.com/carlpaton/Boilerplate/tree/master/Rosetta%20Code/Equilibrium%20Index</a></li><li><a href="https://www.geeksforgeeks.org/equilibrium-index-of-an-array/">https://www.geeksforgeeks.org/equilibrium-index-of-an-array/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngleSharp (.NET library)</title>
      <link href="/2021/05/anglesharp/"/>
      <url>/2021/05/anglesharp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“AngleSharp is a .NET library that gives you the ability to parse angle bracket based hyper-texts like HTML, SVG, and MathML.”</p></blockquote><ul><li><a href="https://github.com/AngleSharp/AngleSharp">https://github.com/AngleSharp/AngleSharp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> orm </tag>
            
            <tag> .net library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINQ to DB</title>
      <link href="/2021/05/linq2db/"/>
      <url>/2021/05/linq2db/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a type safe ORM a work colleague told me about, this is my hoon with it!</p></blockquote><ul><li><a href="https://github.com/linq2db/linq2db">https://github.com/linq2db/linq2db</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> orm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wire Mocks (Mock API Using .Net)</title>
      <link href="/2021/05/wiremocks/"/>
      <url>/2021/05/wiremocks/</url>
      
        <content type="html"><![CDATA[<p>Also see <a href="/2024/10/mockoon/">Mockoon</a></p><blockquote><p>“The core feature of WireMock is the ability to return predefined HTTP responses for requests matching criteria.”</p></blockquote><p>I would create these Mocks (Stubs really) grouped by feature, ie: <code>MyWorker\stubs\MyWorker.Stubs\Services\FooService</code> which is the same logical manner we group class files in code.</p><h2 id="Setup-Project"><a href="#Setup-Project" class="headerlink" title="Setup Project"></a>Setup Project</h2><p>The simplest way is to use <a href="/2021/03/c-sharp-hosted-service/">BackgroundService</a> running in a console application</p><ol><li><p>Use the VS GUI scaffold to create a new Console Application</p></li><li><p>Create all the <code>WireMockServer</code>‘s using avalible ports, we normally call this file <code>Stubs.cs</code>, the example below will create wire mock servers on ports 6010 &amp; 6020. These represent Restful APIs your application will interact with in development and/or under test. You would configure these in <code>appsettings.Development.json</code> / <code>appsettings.Test.json</code>.</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> WireMock.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Stubs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> WireMockServer MyService1 = WireMockServer.Start(<span class="number">6010</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> WireMockServer MyService2 = WireMockServer.Start(<span class="number">6020</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create the known contracts as DTOs and the static ids you will call with expecting x result</li></ol><p>Example DTO</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs.Services.MyService1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid? Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example known Ids</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs.Common</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;see href=&quot;https://somedocs&quot;&gt;</span>See Subs Documentation</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">KnownFoos</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Guid MyKnownFooId = Guid.Parse(<span class="string">&quot;aaaaaaaa-aaaa-aaaa-aaaa-111111111111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Create the mocked services</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs.Services.MyService1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyService1Stubs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">WireMockServer server</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Starting MyService1 Stubs...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> atPriority = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> responseBody = <span class="keyword">new</span> FooDto()</span><br><span class="line">        &#123;</span><br><span class="line">            Id = KnownFoos.MyKnownFooId,</span><br><span class="line">            Description = <span class="string">&quot;Yeah baby!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> request = Request</span><br><span class="line">            .Create()</span><br><span class="line">            .UsingGet()</span><br><span class="line">            .WithPath(<span class="string">&quot;/foos&quot;</span>)</span><br><span class="line">            .WithParam(<span class="string">&quot;fooId&quot;</span>, <span class="keyword">new</span> ExactMatcher(KnownFoos.MyKnownFooId.ToString()));</span><br><span class="line">        server.SetupResponse(</span><br><span class="line">            responseBody, </span><br><span class="line">            request, </span><br><span class="line">            atPriority, </span><br><span class="line">            HttpStatusCode.OK);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Default to bad request (higher priority of 100)</span></span><br><span class="line">        server.SetupResponse(</span><br><span class="line">            Request.Create().WithPath(<span class="string">&quot;/foos&quot;</span>),</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            HttpStatusCode.BadRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Its common to abstract logic away into extension methods, as the mock/stub grows it will be harder to maintain if you dont add these abstractions.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs.Services.MyService1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyService1Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetupGetFoos</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">this</span> WireMockServer server, </span></span></span><br><span class="line"><span class="params"><span class="function">        Guid fooId, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">object</span> responseBody, </span></span></span><br><span class="line"><span class="params"><span class="function">        HttpStatusCode httpStatusCode, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">int</span> atPriority = <span class="number">1</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> request = Request</span><br><span class="line">            .Create()</span><br><span class="line">            .UsingGet()</span><br><span class="line">            .WithPath(<span class="string">&quot;/foos&quot;</span>)</span><br><span class="line">            .WithParam(<span class="string">&quot;fooId&quot;</span>, <span class="keyword">new</span> ExactMatcher(fooId.ToString()));</span><br><span class="line"></span><br><span class="line">        server.SetupResponse(</span><br><span class="line">            responseBody, </span><br><span class="line">            request, </span><br><span class="line">            atPriority, </span><br><span class="line">            httpStatusCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SetupResponse</code> is futher abstraction which should only be added when sensible to allow re-use and mitigate repetition.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs.Common</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WireMockExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetupResponse</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">this</span> WireMockServer server, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">object</span> responseBody, </span></span></span><br><span class="line"><span class="params"><span class="function">        IRequestBuilder request,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">int</span> atPriority, </span></span></span><br><span class="line"><span class="params"><span class="function">        HttpStatusCode statusCode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = Response</span><br><span class="line">            .Create()</span><br><span class="line">            .WithStatusCode(statusCode)</span><br><span class="line">            .WithJsonResponse(responseBody);</span><br><span class="line"></span><br><span class="line">        server.SetupServer(</span><br><span class="line">            request, </span><br><span class="line">            atPriority, </span><br><span class="line">            response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Create the <code>StubsHub</code>, we normally call this file <code>StubsHub.cs</code>, then inherit and implement <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services">BackgroundService</a></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyWorker.Stubs</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StubsHub</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Starting Stubs...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MyService1Stubs.InitialiseStubs(Stubs.MyService1);</span><br><span class="line">        MyService2Stubs.InitialiseStubs(Stubs.MyService2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-methods"><a href="#Other-methods" class="headerlink" title="Other methods"></a>Other methods</h3><p>Beside the simple <code>var request = Request.Create().UsingGet() ...</code> there are other methods in the fluent API.</p><p>ExactMatcher</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = Request</span><br><span class="line">    .Create()</span><br><span class="line">    .UsingPost()</span><br><span class="line">    .WithHeader(HeaderConstants.ClientName, <span class="keyword">new</span> ExactMatcher(TestConstants.SomeKnownClientName))</span><br><span class="line">    .WithPath(<span class="string">&quot;/foos&quot;</span>);</span><br></pre></td></tr></table></figure><p>RegexMatcher</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = Request</span><br><span class="line">    .Create()</span><br><span class="line">    .UsingPost()</span><br><span class="line">    .WithPath(<span class="string">&quot;/foo.svc&quot;</span>)</span><br><span class="line">    .WithHeader(<span class="string">&quot;SOAPAction&quot;</span>, <span class="keyword">new</span> RegexMatcher(<span class="string">&quot;.*/somepath/someaction&quot;</span>))</span><br><span class="line">    .WithBody(<span class="keyword">new</span> XPathMatcher(<span class="string">$&quot;//*[local-name() = &#x27;fooID&#x27;][text()=&#x27;<span class="subst">&#123;KnownFoos.MyKnownFooId.ToString()&#125;</span>&#x27;]&quot;</span>))</span><br></pre></td></tr></table></figure><p>JsonPartialMatcher</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ignoreCase = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> options =  <span class="keyword">new</span> JsonSerializerOptions()</span><br><span class="line">&#123;</span><br><span class="line">    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,</span><br><span class="line">    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,</span><br><span class="line">    Converters = &#123; <span class="keyword">new</span> JsonStringEnumConverter() &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> matchOn = JsonSerializer.Serialize(partialMatchObject, options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = Request</span><br><span class="line">    .Create()</span><br><span class="line">    .UsingPost()</span><br><span class="line">    .WithPath(<span class="string">&quot;/foos&quot;</span>)</span><br><span class="line">    .WithBody(<span class="keyword">new</span> JsonPartialMatcher(matchOn, ignoreCase));</span><br></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Do you even code if you dont package up your things into a nice container :D</p><ol><li>Create the <code>Stubs.Dockerfile</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env</span><br><span class="line"></span><br><span class="line">WORKDIR /code</span><br><span class="line">COPY [&quot;MyWorker.Stubs/MyWorker.Stubs.csproj&quot;, &quot;MyWorker.Stubs/&quot;]</span><br><span class="line"></span><br><span class="line"># --- Restore project (build)</span><br><span class="line">RUN dotnet restore &quot;MyWorker.Stubs/MyWorker.Stubs.csproj&quot;</span><br><span class="line"></span><br><span class="line"># --- Publish</span><br><span class="line">COPY MyWorker.Stubs/ MyWorker.Stubs/</span><br><span class="line">WORKDIR /code/MyWorker.Stubs</span><br><span class="line">RUN dotnet publish &quot;MyWorker.Stubs.csproj&quot; -c Release -o /out</span><br><span class="line"></span><br><span class="line">FROM mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># --- Copy the compiled code from build-env and set entrypoint</span><br><span class="line">COPY --from=build-env /out .</span><br><span class="line">ENTRYPOINT [&quot;dotnet&quot;, &quot;MyWorker.Stubs.dll&quot;]</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the docker compose file <code>docker-compose.yml</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.8&quot;</span><br><span class="line">services:</span><br><span class="line">  stubs_services:</span><br><span class="line">    container_name: fooapi_stubs_services</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Stubs.Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - 6010:6010 # MyService1</span><br><span class="line">      - 6020:6020 # MyService2</span><br></pre></td></tr></table></figure><ol start="3"><li>Now run the mock/stubs</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --project-name foo_worker -f ./stubs/docker-compose.yml up --build</span><br></pre></td></tr></table></figure><p>The mocked services are then avalible at the routes below, they will respond to matched requests.</p><ul><li><a href="http://localhost:6010/foos/1">http://localhost:6010/foos/1</a></li><li><a href="http://localhost:6020/foos/2">http://localhost:6020/foos/2</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/WireMock-Net/WireMock.Net/wiki/Stubbing">https://github.com/WireMock-Net/WireMock.Net/wiki/Stubbing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Methods (Web API)</title>
      <link href="/2021/05/js-methods/"/>
      <url>/2021/05/js-methods/</url>
      
        <content type="html"><![CDATA[<h2 id="Global-scope"><a href="#Global-scope" class="headerlink" title="Global scope"></a>Global scope</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><p><code>setInterval()</code> repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.</p><p>The example below will call <code>function</code> every 1000 milliseconds (1 second).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval</a></li></ul><h3 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval"></a>clearInterval</h3><p><code>clearInterval()</code> cancels a timed, repeating action which was previously established by a call to <code>setInterval()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(timerId)</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval</a></li></ul><h2 id="EventTarget"><a href="#EventTarget" class="headerlink" title="EventTarget"></a>EventTarget</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget">EventTarget</a> is a DOM interface implemented by objects that can receive events and may have listeners for them. Element, Document, and Window are the most common event targets.</p><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><p><code>addEventListener()</code> sets up a function that will be called whenever the specified event is delivered to the target, here it will fire when the DOM is loaded. This is the same as jQuerys <code>$(document).ready(function() &#123; &#125;);</code>.</p><p>The syntax is <code>[TARGET].addEventListener(&#39;event&#39;, function)</code>, common targets include</p><ul><li>element</li><li>document</li><li>window</li></ul><p>Some common events</p><ul><li>onclick</li><li>keydown</li><li>keypress</li><li>keyup</li><li>click</li><li>auxclick</li><li>contextmenu</li><li>mousedown</li><li>mouseenter</li><li>mouseleave</li><li>mouseover</li><li>mouseout</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, control);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#start-button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;startButton clicked&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener</a></li></ul><h3 id="removeEventListener"><a href="#removeEventListener" class="headerlink" title="removeEventListener"></a>removeEventListener</h3><p>Removes the event listner.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, control);</span><br></pre></td></tr></table></figure><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">Document</a> interface represents any web page loaded in the browser and serves as an entry point into the web page’s content, which is the DOM tree.</p><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p><code>querySelector()</code> returns the first Element within the document that matches the specified selector</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> grid = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grid&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector</a></li></ul><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p><code>querySelectorAll()</code> returns a static node list representing a list of the document’s elements that match the specified group of selectors.</p><p>For the ids like <code>#score</code> we can also use <code>document.getElementById(&#39;#score&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squares = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.grid div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> scoreDisplay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#score&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> startButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#start-button&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll">https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll</a></li></ul><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><p><code>classList</code> is used to access an element’s list of classes as a space-delimited string.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList">https://developer.mozilla.org/en-US/docs/Web/API/Element/classList</a></li></ul><p> <code>classList.add</code> then appends to it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br></pre></td></tr></table></figure><p> <code>classList.remove</code> then appends to it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure><p> <code>classList.contains</code> checks if the class exists then returns true if it does, else returns false.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="appendChild-amp-createElement"><a href="#appendChild-amp-createElement" class="headerlink" title="appendChild &amp; createElement"></a>appendChild &amp; createElement</h3><p><code>appendChild</code> allows us to append elements to an existing element, here the element that to be appended is created with <code>createElement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> grid = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grid&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> square = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// creates an HTML element of div</span></span><br><span class="line">grid.<span class="title function_">appendChild</span>(square);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild">https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement">https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement</a></li></ul><h2 id="KeyboardEvent"><a href="#KeyboardEvent" class="headerlink" title="KeyboardEvent"></a>KeyboardEvent</h2><h3 id="keyCode-DEPRICATED"><a href="#keyCode-DEPRICATED" class="headerlink" title="keyCode (DEPRICATED)"></a>keyCode (DEPRICATED)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">control</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">37</span>) &#123; </span><br><span class="line">        <span class="title function_">moveLeft</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">38</span>) &#123; </span><br><span class="line">        <span class="title function_">rotate</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">39</span>) &#123; </span><br><span class="line">        <span class="title function_">moveRight</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">40</span>) &#123; </span><br><span class="line">        <span class="title function_">moveDown</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, control);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode</a></li><li><a href="http://keycode.info/">http://keycode.info/</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/grid-based-javascript-games/">https://github.com/carlpaton/grid-based-javascript-games/</a></li><li><a href="https://www.javascriptgames.online/">https://www.javascriptgames.online/</a></li><li><a href="https://www.youtube.com/watch?v=w1JJfK09ujQ">https://www.youtube.com/watch?v=w1JJfK09ujQ</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polymorphic Deserialization</title>
      <link href="/2021/05/polymorphic-deserialization/"/>
      <url>/2021/05/polymorphic-deserialization/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h3><p>My team was faced with an interesting challange where the shape of an object changed in a JSON collection. The collection only consisted of a few items but the shape was not consistent which broke the deserialization.</p><p>The example below consists of a JSON payload with 2 items, the common properties are <code>Id</code>, <code>ProductType</code>, <code>ShortDescription</code>. Each then have a unique property of <code>Foo</code> and <code>Bar</code> respectively.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;511d1dda-3c62-47e1-9197-c84564f39520&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ProductType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XML 2 SMS&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ShortDescription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Designed for developers, the XML / HTTP interface will allow you to send and receive SMS messages and query current and historical logs using HTTP request and XML response.&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Foo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Some foo property&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1f2bd60f-8fe8-4e55-aebd-fa50e2b51086&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ProductType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SMPP 2 SMS&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ShortDescription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SMPP (Short Message Peer to Peer) is an industry standard form of connection for SMS Messaging.&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Bar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Some bar property&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="Solution-God-Object"><a href="#Solution-God-Object" class="headerlink" title="Solution (God Object)"></a>Solution (God Object)</h3><p>Typically this could be deserialized to an object that has all of the properties mashed together and anything that doesnt exist in the payload will get the default value (normally null)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDeserializedClass = JsonConvert.DeserializeObject&lt;SmsProduct&gt;(myJsonResponse);</span><br></pre></td></tr></table></figure><p>The <code>SmsProduct</code> entity would then look like this</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmsProduct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ProductType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ShortDescription &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Bar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-Custom-converter"><a href="#Solution-Custom-converter" class="headerlink" title="Solution (Custom converter)"></a>Solution (Custom converter)</h3><p>This is more complex and if you are a API provider this may cause your consumers headache. The flow of the custom serilizer at a high level would be:</p><ol><li>Identify a <code>Discriminator</code>, this is something common to all the entities where discrimination can be applied. For the JSON example above this would be <code>ProductType</code> as we have two options that should repeat over the collection:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;ProductType&quot;: &quot;XML 2 SMS&quot;</span><br><span class="line">&quot;ProductType&quot;: &quot;SMPP 2 SMS&quot;</span><br></pre></td></tr></table></figure><p>This is just an enum</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> ProductTypeDiscriminator</span><br><span class="line">&#123;</span><br><span class="line">    XML2SMS,</span><br><span class="line">    SMPP2SMS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>The microsoft example then does the some validations on the <code>Utf8JsonReader reader</code>, I have substituted with my example values and between the property checks the reader needs to be advanced with <code>reader.Read();</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (reader.TokenType != JsonTokenType.StartObject)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonException();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (reader.TokenType != JsonTokenType.PropertyName)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonException();</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> propertyName = reader.GetString();</span><br><span class="line"><span class="keyword">if</span> (propertyName != <span class="string">&quot;ProductType&quot;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonException();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (reader.TokenType != JsonTokenType.Number)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JsonException();</span><br></pre></td></tr></table></figure><ol start="3"><li>Extract the <code>discriminator</code> from the reader and create a response object based on it.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> discriminator = (ProductTypeDiscriminator)reader.GetInt32();</span><br><span class="line">Person person = typeDiscriminator <span class="keyword">switch</span></span><br><span class="line">&#123;</span><br><span class="line">    TypeDiscriminator.Customer =&gt; <span class="keyword">new</span> Customer(),</span><br><span class="line">    TypeDiscriminator.Employee =&gt; <span class="keyword">new</span> Employee(),</span><br><span class="line">    _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> JsonException()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>Itterate over the reader and set each property value manually.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (reader.Read())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (reader.TokenType == JsonTokenType.EndObject)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reader.TokenType == JsonTokenType.PropertyName)</span><br><span class="line">    &#123;</span><br><span class="line">        propertyName = reader.GetString();</span><br><span class="line">        reader.Read();</span><br><span class="line">        <span class="keyword">switch</span> (propertyName)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;CreditLimit&quot;</span>:</span><br><span class="line">                <span class="built_in">decimal</span> creditLimit = reader.GetDecimal();</span><br><span class="line">                ((Customer)person).CreditLimit = creditLimit;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;OfficeNumber&quot;</span>:</span><br><span class="line">                <span class="built_in">string</span> officeNumber = reader.GetString();</span><br><span class="line">                ((Employee)person).OfficeNumber = officeNumber;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Name&quot;</span>:</span><br><span class="line">                <span class="built_in">string</span> name = reader.GetString();</span><br><span class="line">                person.Name = name;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An alternative could be to read the json object before progressing the reader and then deserializing it.</p><ul><li>needs a copy of the reader as <code>copiedReader</code> (its a struct so will be a copy on the heap)</li><li>the reader needs to be completed else it will shout, a hack is to have <code>while (reader.Read())</code> and then a condition to check for <code>if (reader.TokenType == JsonTokenType.EndObject)</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObject = JsonDocument.ParseValue(<span class="keyword">ref</span> copiedReader).RootElement.GetRawText();</span><br><span class="line"><span class="keyword">var</span> myDto = (MyDto) JsonSerializer.Deserialize(jsonObject, myDtoType, DeserializerOptions.Default);</span><br></pre></td></tr></table></figure><h4 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> serializeOptions = <span class="keyword">new</span> JsonSerializerOptions();</span><br><span class="line"></span><br><span class="line">serializeOptions</span><br><span class="line">    .Converters</span><br><span class="line">    .Add(<span class="keyword">new</span> SmsProductConverterWithTypeDiscriminator());</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to?pivots=dotnet-core-3-1#support-polymorphic-deserialization">Support polymorphic deserialization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> serialization </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rapid Prototyping</title>
      <link href="/2021/05/rapid-prototyping/"/>
      <url>/2021/05/rapid-prototyping/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="Low-fidelity-prototypes"><a href="#Low-fidelity-prototypes" class="headerlink" title="Low-fidelity prototypes"></a>Low-fidelity prototypes</h3><p>This could be a paper based prototype.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/JMjozqJS44M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://miro.com/templates/wireframe-tool/?utm_source=google&utm_medium=cpc&utm_campaign=S%7CGOO%7CNB%7CNZ%7CALL-EN%7CCore&utm_adgroup=dsa&adgroupid=120704179190&utm_custom=12126975766&utm_content=492754101065&utm_term=&matchtype=b&device=c&location=1011036&gclid=Cj0KCQjwvr6EBhDOARIsAPpqUPG-RfNQZVDymzt3jo2lzMfcuOg_Ndz3O4YqNlXGjULWz9IRTHkmG3QaAiHBEALw_wcB">Miro - App Wireframe Template</a></li><li><a href="https://blog.adobe.com/en/publish/2017/11/29/prototyping-difference-low-fidelity-high-fidelity-prototypes-use.html#gs.0i83f0">https://blog.adobe.com/en/publish/2017/11/29/prototyping-difference-low-fidelity-high-fidelity-prototypes-use.html#gs.0i83f0</a></li><li><a href="https://www.invisionapp.com/inside-design/low-fi-vs-hi-fi-prototyping/">https://www.invisionapp.com/inside-design/low-fi-vs-hi-fi-prototyping/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Full-Text Search</title>
      <link href="/2021/05/sql-full-text-search/"/>
      <url>/2021/05/sql-full-text-search/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>“Full-Text Search in SQL Server and Azure SQL Database lets users and applications run full-text queries against character-based data in SQL Server tables.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/relational-databases/search/full-text-search">https://docs.microsoft.com/en-us/sql/relational-databases/search/full-text-search</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cryptography</title>
      <link href="/2021/04/cryptography/"/>
      <url>/2021/04/cryptography/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 13/02/2025</strong></p><p><img src="/d/cryptography/cryptography.jpg" alt="Cryptography"></p><p>Cryptography vs encryption: Cryptography is the science of concealing messages with a secret code. Encryption is the way to encrypt and decrypt data.</p><p>.Net provides classes in the namespace <code>System.Security.Cryptography</code></p><h3 id="Rfc2898DeriveBytes"><a href="#Rfc2898DeriveBytes" class="headerlink" title="Rfc2898DeriveBytes"></a>Rfc2898DeriveBytes</h3><p>Suggested use case would be for a <code>one way hash</code> although it CAN BE de-hashed with a key and salt.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes">https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes</a></li></ul><h3 id="HMACSHA512"><a href="#HMACSHA512" class="headerlink" title="HMACSHA512"></a>HMACSHA512</h3><p>C# code <a href="/2018/05/salted-hash/">examples here</a>.</p><p>Suggested use case would be for <code>signing a payload</code> so it can be de-hashed with a key, the salt is optional.</p><p>Ciphertext is encrypted text transformed from plaintext using an encryption algorithm. Ciphertext can’t be read until it has been converted into plaintext (decrypted) with a key. The decryption cipher is an algorithm that transforms the ciphertext back into plaintext.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hmacsha512">https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hmacsha512</a></li></ul><h3 id="AES-Advanced-Encryption-Standard"><a href="#AES-Advanced-Encryption-Standard" class="headerlink" title="AES (Advanced Encryption Standard)"></a>AES (Advanced Encryption Standard)</h3><p>Suggested use case would be symmetric algorithm (same key for encryption &amp; decryption)</p><p>See <a href="/2021/04/encrypt-decrypt-aes/">Encrypt and Decrypt with AES</a></p><h3 id="SHA2"><a href="#SHA2" class="headerlink" title="SHA2"></a>SHA2</h3><p>The most commonly used is SHA-256 as there are many SHA2 variants. produces a 256-bit has (64 hexadecimal digits).</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256managed">https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256managed</a></li></ul><h3 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h3><p><em>Has known to be insecure with a bunch of practical collision attacks already publicly disclosed.</em></p><p>SHA1, Secure Hash Algorithm v1 produces a 160-bit hash (20 bytes). In hexadecimal format it is an integer 40 digits long.</p><p>Example from <a href="https://www.geekytidbits.com/one-way-hashing/">geekytidbits.com</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> password = <span class="string">&quot;qwerty&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> salt = <span class="string">&quot;MySecretSalt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> hasher = <span class="keyword">new</span> SHA1CryptoServiceProvider();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textWithSaltBytes = Encoding.UTF8.GetBytes(<span class="built_in">string</span>.Concat(password, salt));</span><br><span class="line"><span class="keyword">var</span> hashedBytes = hasher.ComputeHash(textWithSaltBytes);</span><br><span class="line">hasher.Clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hashedPassword = Convert.ToBase64String(hashedBytes);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.geekytidbits.com/one-way-hashing/">https://www.geekytidbits.com/one-way-hashing/</a></li></ul><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p><em>Has known to be insecure with a bunch of practical collision attacks already publicly disclosed.</em></p><p>MD5 produces a 128-bit hash value, there is an <a href="/2018/05/salted-hash/">example here</a> to hash a password using MD5 with salt.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">carl                             // string</span><br><span class="line">a0df931e7a7f9b608c165504bde9b620 // md5 hash of this string</span><br><span class="line"></span><br><span class="line">cArl                             // string</span><br><span class="line">aeab68e8acc704f7d63e677a32bd8d4f // md5 hash of this string</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.md5hashgenerator.com/">https://www.md5hashgenerator.com/</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.freecodecamp.org/news/md5-vs-sha-1-vs-sha-2-which-is-the-most-secure-encryption-hash-and-how-to-check-them/">https://www.freecodecamp.org/news/md5-vs-sha-1-vs-sha-2-which-is-the-most-secure-encryption-hash-and-how-to-check-them/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valet Key pattern</title>
      <link href="/2021/04/valet-key-pattern%20-%20Copy/"/>
      <url>/2021/04/valet-key-pattern%20-%20Copy/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><blockquote><p>“Use a token that provides clients with restricted direct access to a specific resource, in order to offload data transfer from the application.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/valet-key">https://docs.microsoft.com/en-us/azure/architecture/patterns/valet-key</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valet Key pattern</title>
      <link href="/2021/04/valet-key-pattern/"/>
      <url>/2021/04/valet-key-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><blockquote><p>“Use a token that provides clients with restricted direct access to a specific resource, in order to offload data transfer from the application.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/valet-key">https://docs.microsoft.com/en-us/azure/architecture/patterns/valet-key</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encrypt and Decrypt with AES</title>
      <link href="/2021/04/encrypt-decrypt-aes/"/>
      <url>/2021/04/encrypt-decrypt-aes/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 13/02/2025</strong></p><p>My team needed a simple way to encrypt and decrypt some data, We chose <a href="https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aes">Advanced Encryption Standard (AES)</a>, being a symmetric algorithm, it would use the same key for encryption &amp; decryption.</p><h2 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h2><p>The high level steps are:</p><ol><li>Create the encryptor method, <code>00000000000000000000000000000001</code> should be treated as a secret and <code>byte[16]</code> is trash per the comments below</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">Encrypt</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> aes = Aes.Create();</span><br><span class="line">    aes.Key = <span class="string">&quot;00000000000000000000000000000001&quot;</span>u8.ToArray(); <span class="comment">//  Key length is important, 16 (AES-128), 24 (AES-192), or 32 (AES-256) bytes</span></span><br><span class="line">                                                              <span class="comment">// this example uses a 16-byte key (128-bit)</span></span><br><span class="line">                                                              <span class="comment">// the `u8` bit tells the compiler to treat the string as a UTF-8 encoded string</span></span><br><span class="line">    aes.IV = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">16</span>]; <span class="comment">// IV is used to ensure that even if the same plaintext is encrypted multiple times, the ciphertext will be different</span></span><br><span class="line">                           <span class="comment">// The IV should be randomly generated for each encryption operation.  Reusing the same IV weakens the encryption significantly</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> encryptor = aes.CreateEncryptor(aes.Key, aes.IV);</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> stream = <span class="keyword">new</span> CryptoStream(ms, encryptor, CryptoStreamMode.Write); <span class="comment">// CryptoStream performs cryptographic transformations on the data written to it</span></span><br><span class="line">    stream.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">    stream.FlushFinalBlock(); <span class="comment">// This is crucial. AES, in certain modes of operation such as Cipher Block Chaining (CBC), uses padding, </span></span><br><span class="line">                              <span class="comment">// FlushFinalBlock() ensures that any padding required by the encryption algorithm is added to the end of the encrypted data and that the final block is completely processed.</span></span><br><span class="line">    <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the decryptor method</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">Decrypt</span>(<span class="params"><span class="built_in">byte</span>[] cipherText</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> aes = Aes.Create();</span><br><span class="line">    aes.Key = <span class="string">&quot;00000000000000000000000000000001&quot;</span>u8.ToArray();</span><br><span class="line">    aes.IV = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> decryptor = aes.CreateDecryptor(aes.Key, aes.IV);</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> msDecrypt = <span class="keyword">new</span> MemoryStream(cipherText);</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> csDecrypt = <span class="keyword">new</span> CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> msPlain = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    csDecrypt.CopyTo(msPlain); <span class="comment">// Simpler way to read the entire stream, could also use StreamReader</span></span><br><span class="line">                               <span class="comment">// CopyTo is a convenient way to read the entire contents of a stream.</span></span><br><span class="line">    <span class="keyword">return</span> msPlain.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Test the code</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> originalText = <span class="string">&quot;This is something Id like to Encrypt for network transport.&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;OriginalText:\n <span class="subst">&#123;originalText&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;--------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataToEncrypt = Encoding.UTF8.GetBytes(originalText);</span><br><span class="line"><span class="keyword">var</span> encryptedData = Encrypt(dataToEncrypt);</span><br><span class="line"><span class="keyword">var</span> encryptedBase64 = Convert.ToBase64String(encryptedData); <span class="comment">// Good for storage/transmission</span></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Encrypted (and converted Base64 for storage/transmission):\n <span class="subst">&#123;encryptedBase64&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;--------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decryptedFromBase64 = Convert.FromBase64String(encryptedBase64); <span class="comment">// Back from storage/transmission</span></span><br><span class="line"><span class="keyword">var</span> decryptedData = Decrypt(decryptedFromBase64);</span><br><span class="line"><span class="keyword">var</span> decryptedText = Encoding.UTF8.GetString(decryptedData);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Decrypted:\n <span class="subst">&#123;decryptedText&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>This will output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OriginalText:</span><br><span class="line"> This is something Id like to Encrypt for network transport.</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Encrypted (and converted Base64 for storage/transmission):</span><br><span class="line"> jALGsEjOBWur5Yd4lz6lnk8k/55u1d12Xf9D905FfcJbE3UCXZSHBLn/60tzSFq8vqM4cgUSEGn2YX2lxqATOg==</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Decrypted:</span><br><span class="line"> This is something Id like to Encrypt for network transport.</span><br></pre></td></tr></table></figure><h2 id="Refactoring-to-a-better-design"><a href="#Refactoring-to-a-better-design" class="headerlink" title="Refactoring to a better design"></a>Refactoring to a better design</h2><ol><li>Pop the <code>Encrypt</code> and <code>Decrypt</code> methods into a class, change their <code>key,iv</code> to use the private members.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AesEncryptionService</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> iv</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">byte</span>[] _key = SHA256.HashData(Encoding.UTF8.GetBytes(key)); <span class="comment">// takes the input key string, converts it to a byte array using UTF8 encoding</span></span><br><span class="line">                                                                                 <span class="comment">// and then calculates the SHA256 hash of that byte array</span></span><br><span class="line">                                                                                 <span class="comment">// the result of the SHA256 hash (32 bytes long)  is what&#x27;s actually used as the AES encryption key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">byte</span>[] _initializationVector = SHA256.HashData(Encoding.UTF8.GetBytes(iv)).Take(<span class="number">16</span>).ToArray();</span><br><span class="line">                                                                                 <span class="comment">// same as the above but we only need 16 bytes</span></span><br><span class="line">                                                                                 <span class="comment">// the IV is not strictly a nonce in all AES modes of operation, though it serves a similar purpose in many modes</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li>You can then instanciate the class and pass the <code>key</code> and <code>iv</code> you want to use</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">&quot;00000000-0000-0000-0000-000000000001&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> iv =  <span class="string">&quot;00000000-0000-0000-0000-000000000002&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> service = <span class="keyword">new</span> AesEncryptionService(key, iv);</span><br></pre></td></tr></table></figure><p>Complete code is here <a href="https://github.com/carlpaton/EncryptDecryptDemo">https://github.com/carlpaton/EncryptDecryptDemo</a></p><h2 id="But-I-want-to-Encrypt-an-object"><a href="#But-I-want-to-Encrypt-an-object" class="headerlink" title="But I want to Encrypt an object"></a>But I want to Encrypt an object</h2><p>Calm down, you just serialize it 🐒</p><p>The examples above encrypt and decrypt the text <code>This is something Id like to Encrypt for network transport.</code>, you could have an object instance thats needed to be transported/persisted:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyObj &#123; Id = <span class="number">1</span>, Foo = <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line">originalText = JsonConvert.SerializeObject(obj);</span><br></pre></td></tr></table></figure><p>So if you plug that into the code the output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OriginalText:</span><br><span class="line"> &#123;&quot;Id&quot;:1,&quot;Foo&quot;:&quot;bar&quot;&#125;</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Encrypted (and converted Base64 for storage/transmission):</span><br><span class="line"> kv+TWU0M14jtL9qvGhlOZLcAkCPP+kv9c0oZIKDHHYM=</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Decrypted:</span><br><span class="line"> &#123;&quot;Id&quot;:1,&quot;Foo&quot;:&quot;bar&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.techtarget.com/whatis/definition/initialization-vector-IV">https://www.techtarget.com/whatis/definition/initialization-vector-IV</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aes">https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNC Machine Scratch Build (IndyMill by Nikodem Bartnik)</title>
      <link href="/2021/03/cnc-machine-scratch-build-indymill/"/>
      <url>/2021/03/cnc-machine-scratch-build-indymill/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/cnc-machine-scratch-build-indymill/indymill-01.jpg" alt="IndyMill"></p><p>For details on what makes up a <a href="/2021/03/cnc-machine/">CNC Machine look here</a>.</p><p>While researching scratch built CNC machines I came across the <code>IndyMill</code> by Youtuber <a href="https://www.youtube.com/channel/UChrCgXmIW1toX2B7viP6S7Q">Nikodem Bartnik</a> I was blown away by his passion for engineering and the content he uploads for free. Like many machines I’ve seen so far, his <code>IndyMill</code> has an alloy frame which looks amazing. A <a href="/2021/03/cnc-machine-scratch-build/">simple wooden frame</a> will work just as well but I personally think alloy has that professional touch.</p><ul><li>Heaps of information on his website: <a href="https://indystry.cc/indymill/">https://indystry.cc/indymill/</a>, this guy is such a legend!</li></ul><p><img src="/d/cnc-machine-scratch-build-indymill/indymill-02.jpg" alt="IndyMill"></p><h3 id="IndyMill-Build"><a href="#IndyMill-Build" class="headerlink" title="IndyMill Build"></a>IndyMill Build</h3><p>IndyMill - Open Source DIY CNC Machine #1 Parts</p><iframe width="560" height="315" src="https://www.youtube.com/embed/rHl9UwlDZbE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>IndyMill - DIY CNC Machine #2 Assembly</p><iframe width="560" height="315" src="https://www.youtube.com/embed/YcuXGD3IoZw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Fixing IndyMill With Dremel CNC - Milling Aluminium With DIY CNC</p><iframe width="560" height="315" src="https://www.youtube.com/embed/nsJg3jCN2j0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>GRBL Arduino Controller For IndyMill - IndyShield</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Qr6HrrcY3_E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>IndyMill - Open Source DIY CNC Machine #3 Electronics</p><iframe width="560" height="315" src="https://www.youtube.com/embed/6M8flHuN3BE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>IndyMill #3.5 Welding the Table, Finishing Z Axis And Motor Test</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VSE4KyWP8eM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>IndyMill - Open Source DIY CNC Machine #4 Final Test!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/5jFCecZdbGs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>DIY Telescopic Ball Screw Covers For A CNC Machine</p><iframe width="560" height="315" src="https://www.youtube.com/embed/iX00YX6wYsE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Adding Limit Switches, Z Probe, Safety Switch And LEDs to IndyMill</p><iframe width="560" height="315" src="https://www.youtube.com/embed/LZri0vlNrRs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> cnc </tag>
            
            <tag> indymill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autodesk Fusion 360</title>
      <link href="/2021/03/fusion-360/"/>
      <url>/2021/03/fusion-360/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.youtube.com/playlist?list=PLWLtHp5rnDuTFa2CpkuF_eYK8-aCMMID1">https://www.youtube.com/playlist?list=PLWLtHp5rnDuTFa2CpkuF_eYK8-aCMMID1</a></li></ul><h3 id="How-To-Start-Designing-RC-Airplanes-in-Fusion-360-Tutorial"><a href="#How-To-Start-Designing-RC-Airplanes-in-Fusion-360-Tutorial" class="headerlink" title="How To Start Designing RC Airplanes in Fusion 360 Tutorial"></a>How To Start Designing RC Airplanes in Fusion 360 Tutorial</h3><h4 id="Tutorial-Episode-1"><a href="#Tutorial-Episode-1" class="headerlink" title="Tutorial [Episode 1]"></a>Tutorial [Episode 1]</h4><ul><li><a href="https://www.autodesk.com/products/fusion-360/personal">Download Fusion 360, its free for personal and hobby use.</a></li><li><a href="https://www.rccad2vr.com/rc-airplane-design-build-episodes/how-i-designed-a-rc-airplane-in-fusion-360">Working images (L-1011 Footprint Diagram, L-1011 Profile Diagam, L-1011 Front Elevation Diagram)</a></li><li><a href="https://github.com/carlpaton/Fusion360Data">https://github.com/carlpaton/Fusion360Data</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/_7vmUEARiYE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><strong>Axis</strong></p><ul><li>Z: up and down</li><li>X: lateral</li><li>Y: depth</li></ul><p><strong>Canvas</strong> </p><ul><li><code>INSERT</code> -&gt; <code>Canvas</code> -&gt; Browse for image -&gt; Select <code>Face</code> (this is the axis)</li><li>Expand the image, place at start of origin point</li><li>Repeat for all axis</li></ul><p><em>To calibrate the canvas</em></p><ul><li>Set unit of measure (top left under <code>Document Settings</code>, mm is the default)</li><li>Right click each canvase and select <code>Calibrate</code></li><li>Select nose center (center top) and then select the very edge where the wing ends. Set this to half the wing span. EG: 1000mm /2 = 500mm  </li><li>Calibrate help - <a href="https://www.youtube.com/watch?v=ui-rieDDdTQ">https://www.youtube.com/watch?v=ui-rieDDdTQ</a></li></ul><h4 id="Part-1-Airfoils-Episode-2"><a href="#Part-1-Airfoils-Episode-2" class="headerlink" title="Part 1 | Airfoils [Episode 2]"></a>Part 1 | Airfoils [Episode 2]</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/r2uzPa9xtaw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Part-2-Spars-amp-Ribs-Episode-3"><a href="#Part-2-Spars-amp-Ribs-Episode-3" class="headerlink" title="Part 2 | Spars &amp; Ribs [Episode 3]"></a>Part 2 | Spars &amp; Ribs [Episode 3]</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/t5zMI34ZE6I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Part-3-Joints-Spar-Caps-amp-Wing-Mount-Episode-4"><a href="#Part-3-Joints-Spar-Caps-amp-Wing-Mount-Episode-4" class="headerlink" title="Part 3 | Joints, Spar Caps &amp; Wing Mount [Episode 4]"></a>Part 3 | Joints, Spar Caps &amp; Wing Mount [Episode 4]</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/OIBXSqw_frM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="3D-Model-an-Airplane-Fuselage-Nose-Episode-5"><a href="#3D-Model-an-Airplane-Fuselage-Nose-Episode-5" class="headerlink" title="3D Model an Airplane Fuselage Nose [Episode 5]"></a>3D Model an Airplane Fuselage Nose [Episode 5]</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/aG9bX2T9o1Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="3D-Model-Airplane-Empennage-“Tail”-Episode-6"><a href="#3D-Model-Airplane-Empennage-“Tail”-Episode-6" class="headerlink" title="3D Model Airplane Empennage “Tail” [Episode 6]"></a>3D Model Airplane Empennage “Tail” [Episode 6]</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/Ii1llR3i7o4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Longerons-amp-Stringers-Episode-7"><a href="#Longerons-amp-Stringers-Episode-7" class="headerlink" title="Longerons &amp; Stringers [Episode 7]"></a>Longerons &amp; Stringers [Episode 7]</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/VkqpWPg2X-w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> cnc </tag>
            
            <tag> cad </tag>
            
            <tag> cam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNC Machine Scratch Build (Wood Frame by Gokmen Altuntas)</title>
      <link href="/2021/03/cnc-machine-scratch-build/"/>
      <url>/2021/03/cnc-machine-scratch-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Following on the <a href="/2021/03/cnc-machine/">CMC Machine</a> post where I tried to understand the flow from <code>Computer Aided Design (CAD)</code> to <code>Computer Aided Manufacturing (CAM)</code> and finally to <code>Computer Numerical Control (CNC)</code> I felt I was in a good space to look at scratch building a Machine. Although it is possible to purchase a kit, its a lot more expensive and I was inspired by <a href="https://www.youtube.com/channel/UCnRwrrMKMCvcHhY5hhE3YZw">Gökmen ALTUNTAŞ</a> to build a CNC Machine with a wood frame.</p><p>These are some of the DIY Kits I looked at, the cost was just too high for my pocket!</p><ul><li><a href="https://www.inventables.com/technologies/x-carve">Inventables X-Carve</a> - USD2999</li><li><a href="https://www.aliexpress.com/item/1005001689987581.html">QueenBee PRO</a> - USD1000 (approx ex import duty, shipping and GTS)</li></ul><h3 id="Gokmen-Altuntas-CNC-Machine-Scratch-Build"><a href="#Gokmen-Altuntas-CNC-Machine-Scratch-Build" class="headerlink" title="Gokmen Altuntas CNC Machine Scratch Build"></a>Gokmen Altuntas CNC Machine Scratch Build</h3><p>I thought a good place to start is watch and understand the two part Youtube series, then document the steps and finally cost it. At 600mm by 400mm working bed area I felt this is a pretty good first machine.</p><p>DIY CNC Router Part 1 // Building a Small CNC Router</p><iframe width="560" height="315" src="https://www.youtube.com/embed/qab0aceb7uw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>DIY CNC Router Part 2 // Building a Small CNC Router</p><iframe width="560" height="315" src="https://www.youtube.com/embed/TTEhwzCbWMA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Building-the-machine"><a href="#Building-the-machine" class="headerlink" title="Building the machine"></a>Building the machine</h3><p>Trying to un-pack the videos into steps I can follow.</p><p><img src="/d/cnc-machine/xyz-axis.png" alt="XYZ Axis - Cartesian Coordinate System"></p><h4 id="Base-Frame-Y-Axis"><a href="#Base-Frame-Y-Axis" class="headerlink" title="Base Frame / Y-Axis"></a>Base Frame / Y-Axis</h4><p>The base frame is just a rectangle with the 12mm Linear Rail for the <code>Y Axis</code>. </p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-01.png" alt="CNC Machine base"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-07.png" alt="Y-Axis lead screw mount"></p><h4 id="X-Axis"><a href="#X-Axis" class="headerlink" title="X-Axis"></a>X-Axis</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-03.png" alt="CNC Machine router bracket mount"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-02.png" alt="CNC Machine with bed removed"></p><h4 id="Z-Axis"><a href="#Z-Axis" class="headerlink" title="Z-Axis"></a>Z-Axis</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-06.png" alt="Building up the gantry height"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-router-bracket.png" alt="CNC Machine router bracket"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-10.png" alt="Foo"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-11.png" alt="Foo"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-12.png" alt="Foo"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-08.png" alt="Z-Axis Router Mount"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-09.png" alt="Foo"></p><h4 id="Bed"><a href="#Bed" class="headerlink" title="Bed"></a>Bed</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-04.png" alt="CNC Machine with bed"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-13.png" alt="Raw bed with keyhole/T-slot grooves"></p><p><img src="/d/cnc-machine-scratch-build/cnc-machine-14.png" alt="Sacrificial masonite wood"></p><h4 id="CNC-Machine-in-action"><a href="#CNC-Machine-in-action" class="headerlink" title="CNC Machine in action"></a>CNC Machine in action</h4><p><img src="/d/cnc-machine-scratch-build/cnc-machine-05.png" alt="CNC Machine in action"></p><h3 id="Shopping-List"><a href="#Shopping-List" class="headerlink" title="Shopping List"></a>Shopping List</h3><p>Details on each of these <a href="/2021/03/cnc-machine/">parts is in this post</a>.</p><table><thead><tr><th>Group</th><th>Details</th><th>Link</th></tr></thead><tbody><tr><td>Linear Guide Rail</td><td>2x 600mm SBR12 Linear Guide Rail</td><td></td></tr><tr><td></td><td>2x 400mm SBR12 Linear Guide Rail</td><td><a href="https://bit.ly/2GSWhDv%E2%80%8B">Ali Express</a></td></tr><tr><td>Rods</td><td>2x 12mm by 18cm rods</td><td></td></tr><tr><td>Coupling Bore</td><td>x3 Aluminum Alloy 5x8</td><td><a href="https://bit.ly/3mbvvGN%E2%80%8B">Ali Express</a></td></tr><tr><td>Linear Bearing</td><td>8x SBR12UU</td><td><a href="https://bit.ly/3kdXNym%E2%80%8B">Ali Express</a></td></tr><tr><td></td><td>4x SCE12</td><td><a href="http://www.makershop.co.nz/Bearings/10mmLinear/SCS10UU">makershop.co.nz ~ SCS10UU :(</a></td></tr><tr><td>Lead Screw &amp; Nuts</td><td>1x 600mm T8 Lead Screw with lead 4mm</td><td></td></tr><tr><td></td><td>1x 400mm T8 Lead Screw with lead 4mm</td><td></td></tr><tr><td></td><td>1x 200mm T8 Lead Screw with lead 4mm</td><td><a href="https://bit.ly/2FqdGTB%E2%80%8B">Ali Express</a></td></tr><tr><td></td><td>x3 T8 Nut for lead screw with lead 4mm</td><td><a href="https://bit.ly/33pJAYA">Ali Express</a></td></tr><tr><td>Bearings</td><td>x3 698 zz bearing</td><td><a href="https://nzminiaturebearings.com/product/8x19x6-mm-698-ZZ-Bearing.html">nzminiaturebearings.com</a></td></tr><tr><td>Stepper Motors</td><td>x3 NEMA 17 17HS4401</td><td><a href="https://www.trademe.co.nz/3024612797">trademe.co.nz</a></td></tr><tr><td></td><td></td><td><a href="https://bit.ly/2ZP308n%E2%80%8B">Ali Express</a></td></tr><tr><td></td><td>or x3 NEMA 17 High torque</td><td><a href="https://www.trademe.co.nz/3025910539">trademe.co.nz</a></td></tr><tr><td>Mounting Plate</td><td>x2 NEMA 17 42-Series</td><td><a href="https://bit.ly/2RondwS%E2%80%8B">Ali Express</a></td></tr><tr><td>Drivers</td><td>x3 L298N Stepper Motor Driver</td><td><a href="https://www.trademe.co.nz/3025327682">trademe.co.nz</a></td></tr><tr><td>Micro Controller</td><td>Arduino Uno + 4pcs DRV8825 Stepper-Motor Driver + CNC Shield v3</td><td><a href="https://www.trademe.co.nz/3023322576">trademe.co.nz</a></td></tr><tr><td></td><td>Arduino Uno + 4pcs A4988 Stepper-Motor Driver + CNC Shield v3</td><td><a href="https://www.trademe.co.nz/3023102863">trademe.co.nz</a></td></tr><tr><td></td><td>Original 3018 CNC Control Board</td><td><a href="https://bit.ly/2ZurTpl%E2%80%8B">Ali Express</a></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
            <tag> cnc </tag>
            
            <tag> wood work </tag>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNC Machine</title>
      <link href="/2021/03/cnc-machine/"/>
      <url>/2021/03/cnc-machine/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/cnc-machine/cnc-machine.png" alt="CNC Machines"></p><p>I want to understand how these machines work, what they can do and how to build a hobbyist machine. Something with 3 axis that can do 2D cuts. A lot of my research below is based on <a href="https://www.youtube.com/watch?v=lQ-MYnyxh7M">CNC Basics - What You Need To Get Started</a> from <a href="https://www.youtube.com/channel/UCooViVfi0DaWk_eqxIXXiOQ">Product Design Online</a>. There are many use cases such as water-jet and laser cutting but from a cost and simplicity point and my own personal use case I felt a CNC Router is an achievable / realistic goal. </p><p><img src="/d/cnc-machine/xyz-axis.png" alt="XYZ Axis - Cartesian Coordinate System"></p><h2 id="Open-Source-Machines"><a href="#Open-Source-Machines" class="headerlink" title="Open Source Machines"></a>Open Source Machines</h2><p>These are two open source CNC Machines which I think are fantastic starting points.</p><ul><li><a href="/2021/03/cnc-machine-scratch-build-indymill/">CNC Machine Scratch Build (IndyMill by Nikodem Bartnik)</a></li><li><a href="/2021/03/cnc-machine-scratch-build/">CNC Machine Scratch Build (Wood Frame by Gokmen Altuntas)</a></li></ul><h1 id="CNC-workflows"><a href="#CNC-workflows" class="headerlink" title="CNC workflows"></a>CNC workflows</h1><p>CNC workflows can grouped as follows:</p><table><thead><tr><th>Computer Aided Design (CAD)</th><th>Computer Aided Manufacturing (CAM)</th><th>Computer Numerical Control (CNC)</th></tr></thead><tbody><tr><td>Design your item on the computer</td><td>Create instructions how to carve the item</td><td>Pass instructions via a digital interface to the machine</td></tr><tr><td>2D File</td><td>Material</td><td>G-Code</td></tr><tr><td>2.5D File</td><td>Tool</td><td>Control Box</td></tr><tr><td>3D File</td><td>Speeds &amp; Feeds</td><td></td></tr><tr><td></td><td>Toolpath</td><td></td></tr></tbody></table><h2 id="Computer-Aided-Design-CAD"><a href="#Computer-Aided-Design-CAD" class="headerlink" title="Computer Aided Design (CAD)"></a>Computer Aided Design (CAD)</h2><p>Software to design your item on the computer. Often the for personal / hobby use these are free with basic functionality.</p><p>Some like <a href="https://www.autodesk.com/products/fusion-360/personal">Fusion 360</a> combine CAD and CAM features and <a href="https://www.youtube.com/c/ProductDesignOnline/playlists">Product Design Online</a> have MANY Fusion tutorials.</p><ul><li><a href="https://www.autodesk.com/products/fusion-360/personal">Autodesk Fusion 360</a> | <a href="/2021/03/fusion-360/">RC CAD-2-VR Fusion 360 Tutorial</a></li><li><a href="http://camlab.sienci.com/camlab">CAMLab - runs entirely within your browser</a></li><li><a href="https://carbide3d.com/carbidecreate/">Carbide Create - download and install</a></li><li><a href="https://www.inventables.com/technologies/easel">Easel</a></li><li>Inkscape</li><li>Adobe Illustrator</li><li><a href="https://www.solidsolutions.co.uk/blog/2009/10/solidworks-2010-available-to-download-now/#.YGGA_q8zZPY">Solid Works 2010</a></li></ul><p><strong>Cutting strategies</strong></p><p>Cuts can be before the line, on the line or past the line.</p><table><thead><tr><th>2D</th><th>2.5D</th><th>3D</th></tr></thead><tbody><tr><td>The machine will trace an object to cut it out, things like letters and basic shapes.</td><td>Simple 2D cut shapes but the machine cuts deeper in certain areas.</td><td>The machine will use X,Y and Z axis at the same time. These are for complex projects.</td></tr></tbody></table><p><img src="/d/cnc-machine/cutting-strategies.png" alt="Cutting strategies"></p><h2 id="Computer-Aided-Manufacturing-CAM"><a href="#Computer-Aided-Manufacturing-CAM" class="headerlink" title="Computer Aided Manufacturing (CAM)"></a>Computer Aided Manufacturing (CAM)</h2><p>Using a computer to control a machine that can manufacture things, the flow here would be</p><ol><li>Material: Define the material, this is at a high level the dimensions (width and breadth)</li><li>Tool: The cutting tool must be smaller than the object we are going to cut.</li><li>Speeds &amp; Feeds: Cutting speed is how fast the cutting tool spins in relation to the material. The feed rate is the distance the tool travels during one revolution of the tool.</li><li>Toolpath: The body of instructions, this is where we tell the machine what shape to cut out. (This is the path though space that our cutting tool follows). CAM software can simulate the cut before sending it to the machine.</li></ol><p>At step 3 above we can just use the ideal numbers from an online cheat sheet:</p><p><img src="/d/cnc-machine/speeds-and-feeds.png" alt="Speeds &amp; Feeds"></p><h2 id="Computer-Numerical-Control-CNC"><a href="#Computer-Numerical-Control-CNC" class="headerlink" title="Computer Numerical Control (CNC)"></a>Computer Numerical Control (CNC)</h2><p>At a high level the physical machine flow would be</p><ol><li>Stap down material (clamps, double sided tape or vacuum)</li><li>Place appropriate bit in collet, this needs to be the same as what was defined in the CAM software.</li><li>Place machine in starting position, this is manual with a hobbyist machine.</li><li>Set speed of router and turn it on (this would be manual for a hobbyist machine)</li><li>Hit Run/Play and the machine will start to cut.</li></ol><p>Before we get to that we would need to:</p><ul><li>We need to export the instructions to a langauge the machine can understand. This is nomally G-Code (Geometric Code). </li><li>G-Code simply tells the machine where to travel to.</li><li>The toolpaths would dictate what the software includes in the G-Code.</li></ul><blockquote><p>“G-codes, also called preparatory codes, are any word in a CNC program that begins with the letter G. Generally it is a code telling the machine tool what type of action to perform, such as: Rapid movement (transport the tool as quickly as possible in between cuts) Controlled feed in a straight line or arc.”</p></blockquote><ul><li><a href="https://www.youtube.com/watch?v=iMx_UYrvuos">What is G-Code? – Haas Automation Tip of the Day</a></li><li><a href="https://listoffreeware.com/free-image-to-gcode-converter-software-windows/">https://listoffreeware.com/free-image-to-gcode-converter-software-windows/</a></li></ul><p>A shopping list of these parts are at the <a href="/2021/03/cnc-machine-scratch-build/">bottom of this post</a>.</p><h3 id="Micro-Controller"><a href="#Micro-Controller" class="headerlink" title="Micro Controller"></a>Micro Controller</h3><p>A post processor for <a href="https://github.com/grbl/grbl">GRBL</a> will take the G-Code as an input, these are some controllers that can be used:</p><ul><li><code>Arduino Uno</code>- cheap, simple and comes with some driver kits.</li><li><code>Original 3018 CNC Control Board</code>- little more expensive option. </li></ul><blockquote><p>“GRBL is an open source software or firmware which enables motion control for CNC machines.”</p></blockquote><blockquote><p>“GRBL is a firmware for arduino boards(uno,nano,Duemillanove) that controls stepper motors and spindles/lasers. GRBL uses gcode as input and outputs signals via the arduino pins. Most industrial cnc machines uses parallel port controller that requires Those big purple connectors.”</p></blockquote><p><img src="/d/cnc-machine/arduino-uno.jpg" alt="Arduino Uno"><br><img src="/d/cnc-machine/original-3018-cnc-control-board.jpg" alt="Original 3018 CNC Control Board"></p><h3 id="Raspberry-Pi-Controller"><a href="#Raspberry-Pi-Controller" class="headerlink" title="Raspberry Pi Controller"></a>Raspberry Pi Controller</h3><p>All of this is based on <a href="https://www.youtube.com/watch?v=u35L0jGCqFc">Raspberry Pi as a CNC Controller</a> from <a href="https://www.youtube.com/channel/UChtY6O8Ahw2cz05PS2GhUbg">Make:</a>. The Raspberry Pi would run <a href="https://github.com/winder/Universal-G-Code-Sender">Universal GCode Sender which was developed by Will Winder</a>. It essentially controls the micro controller which will be an Arduino.</p><p>After installing the <a href="2019/10/raspberry-pi-cluster-setup-os/">full raspbian image</a> and setting up the Wifi &amp; SSH the following setup would be needed on the Pi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install maven</span><br><span class="line">git clone https://github.com/winder/Universal-G-Code-Sender</span><br><span class="line">cd Universal-G-Code-Sender</span><br><span class="line">./run_platform.sh</span><br></pre></td></tr></table></figure><p><img src="/d/cnc-machine/raspberry-pi.jpg" alt="Raspberry Pi v4"></p><h3 id="Drivers"><a href="#Drivers" class="headerlink" title="Drivers"></a>Drivers</h3><ul><li><a href="https://qqtrading.com.my/blog/key-differences-between-the-drv8825-and-a4988">https://qqtrading.com.my/blog/key-differences-between-the-drv8825-and-a4988</a></li><li><a href="https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/">https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/</a></li></ul><p><img src="/d/cnc-machine/shield-with-4-drivers.png" alt="Shield with 4 Drivers"></p><p>Alternatively you can use drivers like the TB6560 3A. These provide higher amps</p><p><img src="/d/cnc-machine/tb6560-driver.png" alt="TB6560 3.5A Driver"></p><p>Another alternative is the TB6600, offer 4A and much bigger heatsync. </p><p><img src="/d/cnc-machine/tb6600-driver.png" alt="TB6600"></p><h3 id="Stepper-Motors-amp-Mounting-Plate"><a href="#Stepper-Motors-amp-Mounting-Plate" class="headerlink" title="Stepper Motors &amp; Mounting Plate"></a>Stepper Motors &amp; Mounting Plate</h3><p>These have 2 coils to allow them to run backwards or forwards. Atleast 1 is needed for each axis <code>X,Y</code> and <code>Z</code>. An additional motor can be added on <code>A</code> for more power/control. Some machines have this along side their <code>Y</code> - I would guess its for milling harder materials.</p><p>Motor sizes: NEMA 17, Nema 23, NEMA 34 (I think 17 is fine for basic use)</p><p><img src="/d/cnc-machine/stepper-motor.png" alt="Stepper Motor"></p><p><img src="/d/cnc-machine/mounting-plate.png" alt="Mounting Plate"></p><h3 id="Power-Supply"><a href="#Power-Supply" class="headerlink" title="Power Supply"></a>Power Supply</h3><p>Power Supply 12V 30A</p><p><img src="/d/cnc-machine/power-supply.png" alt="Power Supply"></p><h3 id="Coupling-Bore"><a href="#Coupling-Bore" class="headerlink" title="Coupling Bore"></a>Coupling Bore</h3><p>Aluminum Alloy Coupling Bore 5x8. The <code>5x8</code> means the stepper motor shaft is 5mm and the lead screw is 8mm.</p><p><img src="/d/cnc-machine/coupling-bore.png" alt="Coupling Bore"></p><h3 id="Linear-Guide-Rail"><a href="#Linear-Guide-Rail" class="headerlink" title="Linear Guide Rail"></a>Linear Guide Rail</h3><p><img src="/d/cnc-machine/linear-guide-rail.png" alt="Linear Guide Rail"></p><p>Alternative flat Linear Guide (MGN12)</p><p><img src="/d/cnc-machine/linear-guide-rail-mgn.png" alt="Linear Guide Rail MGN12"></p><p>Other alternative guide rails</p><ul><li>maker slide</li></ul><p><img src="/d/cnc-machine/maker-slide-01.jpg" alt="Maker slide"></p><ul><li>V-Rail</li></ul><p><img src="/d/cnc-machine/v-rail.jpg" alt="V-Rail"></p><h3 id="Linear-Rods"><a href="#Linear-Rods" class="headerlink" title="Linear Rods"></a>Linear Rods</h3><p><img src="/d/cnc-machine/linear-rods-and-SCE12-linear-bearing.png" alt="Linear Rods and SCE12 Linear Bearing"></p><h3 id="Linear-Bearing"><a href="#Linear-Bearing" class="headerlink" title="Linear Bearing"></a>Linear Bearing</h3><p><img src="/d/cnc-machine/linear-bearing-01.png" alt="SBR12UU Linear Bearing"></p><p><img src="/d/cnc-machine/linear-bearing-02.png" alt="SCE12 Linear Bearing"></p><h3 id="Lead-Screw-and-Nuts"><a href="#Lead-Screw-and-Nuts" class="headerlink" title="Lead Screw and Nuts"></a>Lead Screw and Nuts</h3><ul><li><a href="https://www.blanch.org/belts-vs-screws-in-cnc-design/">https://www.blanch.org/belts-vs-screws-in-cnc-design/</a></li></ul><p><img src="/d/cnc-machine/lead-screw-and-nut.png" alt="Lead Screw and Nuts"></p><p>Alternative to lead screw/nuts are</p><ul><li>Belt systems</li></ul><p><img src="/d/cnc-machine/belt-system.png" alt="Belt system"></p><h3 id="Bearings"><a href="#Bearings" class="headerlink" title="Bearings"></a>Bearings</h3><p><strong>698-ZZ</strong></p><p>The 698-ZZ inner diameter is 8 mm, the 698-ZZ outer diameter is 19 mm, the 698-ZZ width is 6 mm and <code>zz</code> means both sides have a metal shield.</p><p><img src="/d/cnc-machine/bearings.png" alt="698-ZZ Bearings"></p><p><strong>SFU1605</strong></p><p>These are bearings on a roller screw, they are super rigid and expensive.</p><ul><li>Has 51 steel balls</li><li>Size is 3.175mm</li><li>Bearing steel grade is GCR15 G10</li></ul><h3 id="Bits-Endmill"><a href="#Bits-Endmill" class="headerlink" title="Bits / Endmill"></a>Bits / Endmill</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1/8&quot;  =&gt;  3.175mm</span><br><span class="line">1/4&quot;  =&gt;  6.350mm</span><br><span class="line">1/2&quot;  =&gt; 12.070mm</span><br><span class="line">1&quot;    =&gt; 25.400mm</span><br></pre></td></tr></table></figure><p>Starter bits suggested by <a href="https://www.youtube.com/watch?v=fR-sbgmMwp8">Andy Bird Builds</a></p><ul><li>Downcut Router Bit (1/4” shank, 1/4” diamter, 1” cutting length)<ul><li>Cut out profiles, clear pockers </li></ul></li><li>Downcut Router Bit (1/4” shank, 1/8” diamter, 1/2” cutting length)<ul><li>Smaller projects</li></ul></li><li>60 degree V-Groove Bit (1/4” shank, 1/2” diameter, 5/8” cutting length)<ul><li>Medium to small lettering, covers middle ground size of text</li><li>Vcarving or lettering</li><li>Chamfering edge profiles</li><li>Sign making</li></ul></li><li>30 degree V-Groove Bit<ul><li>Small intricate designs and carves</li></ul></li><li>Bowl and Tray Bit (1/4” shank, 3/4” diameter, 1/4” radius)<ul><li>Bowls and trays</li><li>Juice grooves</li><li>Clearing material away quickly</li></ul></li><li>Flattening/Surfacing Bit (1/4” shank, 1” diamter, 1/4” cutting length)<ul><li>Flatten waste board and material before milling</li></ul></li></ul><p>Starter bits suggested by <a href="https://www.youtube.com/watch?v=Od_std1q114">MakeTech</a></p><ul><li>Upcut Router Bit (1/4”)</li><li>Downcut Router Bit (1/4”)</li><li>Compression Bit (1/4”)</li><li>Ball Nose End Mill (1/4”)</li><li>1/8”</li><li>1/16”</li></ul><p>Advise: You will break bits while learning, buy the cheap ones to start!</p><ul><li>Single flute un-coated cutters are your best option for soft wood, plastic and aluminium.</li><li>Coated cutters have a duller cutting edge which is not good for plastic and aluminium.</li><li>Coatings are many and varied but essentially they provide a very hard surface to the cutter that resists abrasion.</li><li>Cutters from China are usually graded HRC45,55,65 etc the larger the number the stronger the cutter.</li></ul><h1 id="Other-use-cases"><a href="#Other-use-cases" class="headerlink" title="Other use cases"></a>Other use cases</h1><h2 id="Plotter"><a href="#Plotter" class="headerlink" title="Plotter"></a>Plotter</h2><p>I found these plotter examples of stepper motor from a CD-ROM really cool, not what I want to build but worth having a look at.</p><ul><li><a href="https://www.youtube.com/watch?v=-XhMT4wXSG4">Plotter made of two old CD drives, a servo and a Raspberry Pi</a></li><li><a href="https://homofaciens.de/bilder/technik/plotter-cdrom_010.htm">https://homofaciens.de/bilder/technik/plotter-cdrom_010.htm</a></li><li><a href="https://www.raspberrypi.org/blog/we-love-a-good-pen-plotter/">https://www.raspberrypi.org/blog/we-love-a-good-pen-plotter/</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.instructables.com/Arduino-Controlled-CNC-3D-Printer/">https://www.instructables.com/Arduino-Controlled-CNC-3D-Printer/</a></li></ul><p><strong>4th Axis</strong></p><ul><li><a href="https://hackaday.com/2017/09/03/rolling-around-a-4th-axis/">https://hackaday.com/2017/09/03/rolling-around-a-4th-axis/</a></li><li><a href="https://www.youtube.com/watch?v=2ZVmKiehGnU">DIY CNC 4th Axis Testing</a></li></ul><p><strong>Makerslide.co.za</strong></p><ul><li><a href="https://www.makerslide.co.za/">https://www.makerslide.co.za/</a></li><li><a href="https://www.youtube.com/watch?v=Gzs53Y0-pCo">Makerslide.co.za CNC Machine Assembly Part 1</a></li><li><a href="https://www.youtube.com/watch?v=VVDBCZhRTkM">Makerslide.co.za CNC Machine Assembly Part 2</a></li><li><a href="https://www.youtube.com/watch?v=LrgjOvMdp08">Makerslide.co.za CNC Machine Assembly Part 3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
            <tag> cnc </tag>
            
            <tag> wood work </tag>
            
            <tag> arduino </tag>
            
            <tag> cad </tag>
            
            <tag> cam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Hosted Service</title>
      <link href="/2021/03/c-sharp-hosted-service/"/>
      <url>/2021/03/c-sharp-hosted-service/</url>
      
        <content type="html"><![CDATA[<p>A simple hosted service running in a console application.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> task = <span class="keyword">new</span> HostBuilder()</span><br><span class="line">            .ConfigureLogging((context, builder) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">            &#125;)</span><br><span class="line">            .ConfigureAppConfiguration((context, builder) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder</span><br><span class="line">                    .AddEnvironmentVariables()</span><br><span class="line">                    .AddCommandLine(args);</span><br><span class="line">            &#125;)</span><br><span class="line">            .ConfigureServices((hostBuilderContext, services) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                services.AddHostedService&lt;MyBackgroundService&gt;();</span><br><span class="line">                services.AddHostedService&lt;MyHostedService&gt;();</span><br><span class="line">            &#125;)</span><br><span class="line">            .RunConsoleAsync();</span><br><span class="line"></span><br><span class="line">        task.Wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBackgroundService"><a href="#MyBackgroundService" class="headerlink" title="MyBackgroundService"></a>MyBackgroundService</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Worker.Console</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBackgroundService</span> : <span class="title">BackgroundService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;MyBackgroundService&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyBackgroundService</span>(<span class="params">ILogger&lt;MyBackgroundService&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;BBBBBBBBBBBBBBBBBBBBBBB MyBackgroundService ExecuteAsync&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MyHostedService"><a href="#MyHostedService" class="headerlink" title="MyHostedService"></a>MyHostedService</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Worker.Console</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHostedService</span> : <span class="title">IHostedService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;MyHostedService&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHostedService</span>(<span class="params">ILogger&lt;MyHostedService&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task <span class="title">StartAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;HHHHHHHHHHHHHHHHHHH  MyHostedService StartAsync&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task <span class="title">StopAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;SSSSSSSSSSSSSSSSSS  MyHostedService StopAsync&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FooService"><a href="#FooService" class="headerlink" title="FooService"></a>FooService</h1><p>This will create a worker that does some background work. The complete code for these snippets is at <a href="https://github.com/carlpaton/ThreadingDemo/tree/main/src/HostedService.Ca">https://github.com/carlpaton/ThreadingDemo/tree/main/src/HostedService.Ca</a></p><ol><li>Create the empty console application</li><li>Add <code>Microsoft.Extensions.Hosting</code></li><li>Create <code>FooService</code> which inherits and implements <code>BackgroundService</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Update <code>Program.cs</code> to add your worker/service to as a hosted service with <code>.AddHostedService</code>. My service below is <code>FooService</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    CreateHostBuilder(args).Build().Run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            services.AddHostedService&lt;FooService&gt;();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>Update <code>FooService</code> to do something, here we just write to the console every 2 seconds. Microsoft suggest the following things you could use this for</li></ol><ul><li>A background task polling a database looking for changes.</li><li>A scheduled task updating some cache periodically.</li><li>An implementation of QueueBackgroundWorkItem that allows a task to be executed on a background thread.</li><li>Processing messages from a message queue in the background of a web app while sharing common services such as ILogger.</li><li>A background task started with Task.Run().</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">int</span> _millisecondsTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooService</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _millisecondsTimeout = <span class="number">2000</span>; <span class="comment">// the value would have been injected with IOptions/Settings</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//_logger.LogDebug($&quot;FooService is starting.&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stoppingToken.IsCancellationRequested)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//_logger.LogDebug($&quot;FooService task doing background work.&quot;);</span></span><br><span class="line"></span><br><span class="line">            SimulateSomeWorker();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//await Task.Delay(_settings.CheckUpdateTime, stoppingToken);</span></span><br><span class="line">            <span class="keyword">await</span> Task.Delay(_millisecondsTimeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//_logger.LogDebug($&quot;GracePeriod background task is stopping.&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SimulateSomeWorker</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Worker was run &#123;0&#125;&quot;</span>, DateTime.Now);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>“By default, the cancellation token is set with a 5 seconds timeout, although you can change that value when building your WebHost using the UseShutdownTimeout extension of the IWebHostBuilder. This means that our service is expected to cancel within 5 seconds otherwise it will be more abruptly killed.”</p></blockquote><ul><li><a href="https://github.com/dotnet-architecture/eShopOnContainers/blob/df93807677a9871dba38264459c258cf532af5a8/src/Services/Ordering/Ordering.BackgroundTasks/Services/GracePeriodManagerService.cs">https://github.com/dotnet-architecture/eShopOnContainers/blob/df93807677a9871dba38264459c258cf532af5a8/src/Services/Ordering/Ordering.BackgroundTasks/Services/GracePeriodManagerService.cs</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/@nickfane/queue-processing-with-net-core-worker-services-eaccff28ba69">https://medium.com/@nickfane/queue-processing-with-net-core-worker-services-eaccff28ba69</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> workers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core on Raspberry Pi</title>
      <link href="/2021/03/dot-net-core-paspberry-pi/"/>
      <url>/2021/03/dot-net-core-paspberry-pi/</url>
      
        <content type="html"><![CDATA[<p>Raspberry Pi’s can run <a href="http://localhost:4000/tags/c/">C#</a> controlling the <a href="/2019/12/pi-resources/">GPIO</a> with the librarys below. I had a hoon at <a href="https://github.com/carlpaton/SweetPi">https://github.com/carlpaton/SweetPi</a>.</p><ul><li><a href="https://www.nuget.org/packages/System.Device.Gpio">System.Device.Gpio</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.device.gpio">System.Device.Gpio</a> Namespace</li><li><a href="https://www.nuget.org/packages/Iot.Device.Bindings">Iot.Device.Bindings</a></li></ul><h3 id="Install-Net-Core"><a href="#Install-Net-Core" class="headerlink" title="Install .Net Core"></a>Install .Net Core</h3><p>I tried to use the <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script">dotnet-install scripts</a> and even after manually adding to path it didnt work. So I did it manually:</p><p>Update the OS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>Check for dotnet and install it</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet --info                      ~ fails: &#x27;dotnet1&#x27; is not recognized as an internal or external command, operable program or batch file.</span><br><span class="line">echo $0                            ~ expect `bash`</span><br></pre></td></tr></table></figure><p>At the time these were latest but always check <a href="https://dotnet.microsoft.com/download/dotnet/3.1">dotnet.microsoft.com/download</a> for the latest versions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir dev</span><br><span class="line">cd dev</span><br><span class="line">wget https://download.visualstudio.microsoft.com/download/pr/349f13f0-400e-476c-ba10-fe284b35b932/44a5863469051c5cf103129f1423ddb8/dotnet-sdk-3.1.102-linux-arm.tar.gz</span><br><span class="line">wget https://download.visualstudio.microsoft.com/download/pr/8ccacf09-e5eb-481b-a407-2398b08ac6ac/1cef921566cb9d1ca8c742c9c26a521c/aspnetcore-runtime-3.1.2-linux-arm.tar.gz</span><br></pre></td></tr></table></figure><p>The tar command is also used to extract tar archives: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir dotnet-arm32</span><br><span class="line">tar zxf dotnet-sdk-3.1.102-linux-arm.tar.gz -C $HOME/dev/dotnet-arm32</span><br><span class="line">tar zxf aspnetcore-runtime-3.1.2-linux-arm.tar.gz -C $HOME/dev/dotnet-arm32</span><br><span class="line"></span><br><span class="line">export DOTNET_ROOT=$HOME/dev/dotnet-arm32</span><br><span class="line">export PATH=$PATH:$HOME/dev/dotnet-arm32</span><br><span class="line"></span><br><span class="line">dotnet --info                      ~ works</span><br></pre></td></tr></table></figure><p>Adding <code>export</code> above only adds it for that session, you can perminantly add it as follows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH                        ~ wont have `dev/dotnet`</span><br><span class="line">sudo nano ~/.bashrc               ~ edit PATH in [~/.bashrc] file</span><br><span class="line"></span><br><span class="line">At the bottom of the file add the exports. Save and exit.</span><br><span class="line"></span><br><span class="line">export DOTNET_ROOT=$HOME/dev/dotnet-arm32</span><br><span class="line">export PATH=$PATH:$HOME/dev/dotnet-arm32</span><br><span class="line"></span><br><span class="line">source ~/.bashrc                 ~ reload the [~/.bashrc] file </span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/iot/deployment">https://docs.microsoft.com/en-us/dotnet/iot/deployment</a></li><li><a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></li><li><a href="https://www.raspberrypi.org/blog/visual-studio-code-comes-to-raspberry-pi/">https://www.raspberrypi.org/blog/visual-studio-code-comes-to-raspberry-pi/</a></li><li><a href="https://edi.wang/post/2019/9/29/setup-net-core-30-runtime-and-sdk-on-raspberry-pi-4">https://edi.wang/post/2019/9/29/setup-net-core-30-runtime-and-sdk-on-raspberry-pi-4</a></li><li><a href="https://elbruno.com/2020/01/05/raspberrypi-how-to-solve-dotnet-core-not-recognized-after-reboot/">https://elbruno.com/2020/01/05/raspberrypi-how-to-solve-dotnet-core-not-recognized-after-reboot/</a></li></ul><h3 id="Install-VS-Code"><a href="#Install-VS-Code" class="headerlink" title="Install VS Code"></a>Install VS Code</h3><p>I like to edit and run the code on the Pi, VS code can be used with the <a href="/2019/09/ide-visual-studio-code/">C# extensions</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install code -y</span><br></pre></td></tr></table></figure><h3 id="Hardware-ideas-amp-Help"><a href="#Hardware-ideas-amp-Help" class="headerlink" title="Hardware ideas &amp; Help"></a>Hardware ideas &amp; Help</h3><p>Its amazing the things people share online, helps noobs like me!</p><p><strong>LED</strong></p><ul><li><a href="https://github.com/dotnet/iot/blob/main/samples/led-blink/README.md">Blink an LED with .NET Core on a Raspberry Pi</a></li><li><a href="https://www.youtube.com/watch?v=S0jY6ClycrM">Peter Gallagher: LED GPIO</a></li><li><a href="https://www.youtube.com/watch?v=BY6d8JoGS2E">Industry40tv: LED GPIO</a></li></ul><p><strong>LEDS &amp; Resistors</strong></p><ul><li><a href="https://www.youtube.com/watch?v=BWYy3qZ315U&amp;t=225s">https://www.youtube.com/watch?v=BWYy3qZ315U&amp;t=225s</a></li><li><a href="https://www.youtube.com/watch?v=hduuUDiku80">https://www.youtube.com/watch?v=hduuUDiku80</a></li></ul><p><strong>Servos</strong></p><ul><li><a href="https://github.com/dotnet/iot/tree/main/src/devices/ServoMotor">Servo Motor</a></li><li><a href="https://gist.github.com/jsturtevant/6aa9832d0072438c1069">Windows IoT 10 Servo Motor Example</a></li></ul><p><strong>Sensor</strong></p><ul><li><a href="https://www.youtube.com/watch?v=j8homytc3g4">DHT11 - Digital temperature and humidity sensor.</a></li></ul><p><strong>Breadboards</strong></p><ul><li><a href="https://magpi.raspberrypi.org/articles/breadboard-tutorial">https://magpi.raspberrypi.org/articles/breadboard-tutorial</a></li></ul><h3 id="Netstat-amp-UFW"><a href="#Netstat-amp-UFW" class="headerlink" title="Netstat &amp; UFW"></a>Netstat &amp; UFW</h3><p>You can confirm if the port is listing on your Pi with <code>netstat -nltp</code>, it needs to have a <code>Local Address</code> of <code>:::5001</code> this means its listing to the outside world.</p><p>All ports on the Pi should be open but if this still doesnt work you can try Uncomplicated Firewall (UFW) which is a front-end to iptables.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ufw</span><br><span class="line">ufw status</span><br><span class="line">ufw allow in from any to any port 5001</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Options pattern in ASP.NET Core</title>
      <link href="/2021/02/options-pattern-asp-net-core/"/>
      <url>/2021/02/options-pattern-asp-net-core/</url>
      
        <content type="html"><![CDATA[<p>The options pattern uses classes to provide strongly typed access to groups of related settings.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol><li>Install the following libraries</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Extensions.Configuration&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Extensions.Configuration.Binder&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Extensions.Configuration.Json&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Create your appsettings.json file - there can be nesting like <code>Services:FooService</code></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;RedisServer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ConnectionString&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost:6379,allowAdmin=true&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Services&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;FooService&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Create the options class file, example <code>RedisServerOptions</code>.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">RedisAdmin.Infrastructure.IntegrationTests.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedisServerOptions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> RedisServer = <span class="string">&quot;RedisServer&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For the nested <code>Services:FooService</code> example the const string would be</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">RedisAdmin.Infrastructure.IntegrationTests.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooServiceOptions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> FooService = <span class="string">&quot;Services:FooService&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Populate the file using <code>ConfigurationBuilder</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CollectionFixture</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RedisServerOptions _redisServerOptions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CollectionFixture</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> appSettings = <span class="string">&quot;appsettings.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .AddJsonFile(appSettings)</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line">        _redisServerOptions = configuration</span><br><span class="line">            .GetSection(RedisServerOptions.RedisServer)</span><br><span class="line">            .Get&lt;RedisServerOptions&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>The example above is manual for integration tests. You can use your applications start up instead and pop the options file into the dependency injection container.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">    .Configure&lt;RedisServerOptions&gt;(configuration.GetSection(RedisServerOptions.RedisServer));</span><br></pre></td></tr></table></figure><p>This can then be injected into your applications constructor as follows</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooServiceClient</span> : <span class="title">IFooServiceClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FooServiceOptions _options;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooServiceClient</span>(<span class="params">IOptions&lt;FooServiceOptions&gt; options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _options = options.Value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options</a></li></ul><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0#named-options-support-using-iconfigurenamedoptions">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0#named-options-support-using-iconfigurenamedoptions</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core</title>
      <link href="/2021/02/entity-framework-core/"/>
      <url>/2021/02/entity-framework-core/</url>
      
        <content type="html"><![CDATA[<p>Many years back I looked at <a href="https://docs.microsoft.com/en-us/ef/">Entity Framework</a>, this was still when I wanted to learn about the <a href="https://dotnet.microsoft.com/download/dotnet-framework">Microsoft .Net framework</a> which was before <a href="https://dotnet.microsoft.com/download">.Net Core</a> came along. At the time most of my day was consumed by <a href="https://www.guru99.com/introduction-to-vbscript.html">VB Script</a> and <a href="https://www.microsoft.com/en-us/sql-server">Microsoft SQL</a>. Typically connecting to the database in VB Script meant hand rolling the connection and working with a data reader and record set. It was, to say the least painful!</p><details>  <summary>VB Script example of my pain</summary><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> dbCon = CreateObject(<span class="string">&quot;ADODB.Connection&quot;</span>)</span><br><span class="line">dbCon.Open <span class="string">&quot;Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;MultipleActiveResultSets=true;&quot;</span></span><br><span class="line"></span><br><span class="line">    sql = <span class="string">&quot;SELECT id, desc FROM foo WHERE bar = &#x27;bat&#x27; ORDER BY id DESC&quot;</span></span><br><span class="line">    <span class="keyword">set</span> rs = dbCon.execute(sql)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">not</span> rs.eof <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">do</span> <span class="keyword">until</span> rs.eof</span><br><span class="line"></span><br><span class="line">                response.Write rs(<span class="string">&quot;id&quot;</span>) &amp; <span class="string">&quot; &quot;</span> &amp; rs(<span class="string">&quot;desc&quot;</span>) &amp; <span class="string">&quot;&lt;br /&gt;&quot;</span></span><br><span class="line">            </span><br><span class="line">            rs.movenext</span><br><span class="line">            <span class="keyword">loop</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">    rs.Close</span><br><span class="line">    <span class="keyword">set</span> rs = <span class="literal">nothing</span></span><br><span class="line"></span><br><span class="line">dbCon.Close</span><br><span class="line"><span class="keyword">set</span> dbCon = <span class="literal">nothing</span></span><br></pre></td></tr></table></figure></details><p>So when I finally started looking at <a href="https://docs.microsoft.com/en-us/dotnet/csharp/">C#</a> and .Net I found something called a <a href="/2017/10/sqlite-with-repository-pattern/">Repository Pattern</a>. This was awesome as it promoted <a href="/2018/04/dependency-inversion-principle-dip/">dependency inversion</a> and I could create my own repository using an ORM (Object Relational Mapper) called <a href="https://github.com/StackExchange/Dapper">Dapper</a> which provided extension methods like: </p><ul><li>Select: <code>connection.Query&lt;T&gt;(sql, parameters).FirstOrDefault();</code></li><li>SelectList: <code>connection.Query&lt;T&gt;(sql, parameters).ToList();</code></li><li>Insert: <code>connection.ExecuteScalar&lt;int&gt;(sql, (T)poco);</code></li><li>Update: <code>connection.Execute(sql, (T)poco);</code></li><li>Delete: <code>connection.Execute(sql, parameters);</code></li></ul><p>Entity Framework felt like it abstracted away so much of the <code>magic</code> that I didnt actually know what it was doing, this worried me as what would I do when it breaks? I also <a href="/2020/09/mysql-performance/">profiled</a> the SQL Database when trying out Entity Framework boilerplate code and I was amazed to see how many SQL Queries were running! I figured yeah na this is too complex for my brain.</p><p>For this reason I happily plodded along with my new friend the <a href="https://github.com/StackExchange/Dapper">Dapper</a> and the <a href="/2017/10/sqlite-with-repository-pattern/">Repository Pattern</a>. However last year I changed jobs and my new team wanted to use Entity Framework Core. I was pretty excited about this as .Net Core is amazing and it was a chance to learn by doing!</p><h3 id="Database-Setup"><a href="#Database-Setup" class="headerlink" title="Database Setup"></a>Database Setup</h3><p>The database is configured in the applications db context <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Infrastructure/DatabaseContext.cs">DatabaseContext.cs</a> with extension methods. The examples below are for <a href="https://www.sqlite.org/index.html">SQLite</a> and <a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads">SQL Server</a> although EF works with many more.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- when using Sqlite</span><br><span class="line">options.UseSqlite(&quot;Data Source=sweetapp.db&quot;);</span><br><span class="line"></span><br><span class="line">--- when using `Microsoft.EntityFrameworkCore.SqlServer`</span><br><span class="line">options.UseSqlServer(&quot;Data Source=localhost,1401;Initial Catalog=SweetApp;Integrated Security=False;User Id=sa;Password=2dd73426-d37a-4fd2-89e9-92f2a8f1a526;Pooling=False&quot;)</span><br><span class="line"></span><br><span class="line">--- when using `Npgsql.EntityFrameworkCore.PostgresSQL`</span><br><span class="line">options.UseNpgsql(&quot;Server=localhost;Port=5432;Database=demo_db;UserId=postgres;Password=42ebe52d-ddc9-47c6-b03d-b2cd1ca17393&quot;)</span><br></pre></td></tr></table></figure><p>Although SQLite is self contained and free tools like <a href="/2018/05/ide-editor-and-database-tools/">DBeaver</a> can manage the <code>sweetapp.db</code> file I wanted to use SQL Server. The fastest way to get an instance running is with docker and the <a href="https://hub.docker.com/_/microsoft-mssql-server">mssql-server-linux</a> image.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull microsoft/mssql-server-linux:2017-latest</span><br><span class="line">docker run --name=ef-core -e &#x27;ACCEPT_EULA=Y&#x27; -e &#x27;MSSQL_SA_PASSWORD=2dd73426-d37a-4fd2-89e9-92f2a8f1a526&#x27; -p 1401:1433 -d microsoft/mssql-server-linux:2017-latest</span><br></pre></td></tr></table></figure><p>Once up check you can connect with <a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio (SSMS)</a>. If you can it means your containerized database is ready for action.</p><p><img src="/d/entity-framework-core/connect-to-sql.png" alt="SQL Server Management Studio (SSMS)"></p><p>Install the command-line interface (CLI) tools for <a href="https://docs.microsoft.com/en-us/ef/core/cli/dotnet">Entity Framework Core</a> to perform design-time development tasks. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-ef</span><br></pre></td></tr></table></figure><p>Create the application and install the relavant packages. The folder structure I used was <code>/EntityFrameworkCoreDemo/src/SweetApp/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o SweetApp</span><br><span class="line"></span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Sqlite</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Design</span><br></pre></td></tr></table></figure><h3 id="Domain-Models"><a href="#Domain-Models" class="headerlink" title="Domain Models"></a>Domain Models</h3><p>Create the domain models, these would be for internal application use and then create the infastructure database context for <code>DbSet</code> commands.</p><ul><li><a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Domain/Models/Blog.cs">Domain/Models/Blog.cs</a></li><li><a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Domain/Models/Post.cs">Domain/Models/Post.cs</a></li><li><a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Infrastructure/DatabaseContext.cs">Infrastructure/DatabaseContext.cs</a></li></ul><p>Entities in the models with <code>xId</code> in them are assumed as primary keys, example <code>BlogId</code>. We could also use <code>ID</code>. We can also then control mapping, cascase deletes, relations ect with entity propertys or builder configuration with EntityTypeBuilder.</p><ul><li><a href="https://docs.microsoft.com/en-us/ef/core/modeling/entity-properties">Entity Properties</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.metadata.builders.entitytypebuilder-1">Builder configuration with EntityTypeBuilder</a></li></ul><p>The update/delete in <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Program.cs">Program.cs</a> affects both tables <code>dbo.Blog</code> and <code>dbo.Post</code> because of the domain model relationship <code>blog.Posts.Add( ...</code></p><h3 id="Migrations"><a href="#Migrations" class="headerlink" title="Migrations"></a>Migrations</h3><p>Create the migration and run it, this is a code first approach. Any changes to the domain models will be applied to the database each time you run <code>migrations add</code> and then <code>database update</code>. The <code>Initial_Migration</code> needs to be unique for each migration.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add Initial_Migration</span><br><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><p>This will be reflected in the <code>__EFMigrationsHistory</code> table.</p><p><img src="/d/entity-framework-core/migration-run.png" alt="Migration Run"></p><p>To make additional changes to the database update the <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/tree/main/src/SweetApp/Domain/Models">domain models</a> and repeat the steps above with <code>The_Thing_I_Changed</code> instead of <code>Initial_Migration</code>.</p><p>If things go sideways you can revert with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations remove</span><br></pre></td></tr></table></figure><p>I use <code>Database.Migrate()</code> per the below, so the app then migrates the deployed environment so I commit <code>/Migrations</code> to source control. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">using (var scope = app.Services.CreateScope())</span><br><span class="line">&#123;</span><br><span class="line">    var context = scope.ServiceProvider.GetRequiredService&lt;DatabaseContext&gt;();</span><br><span class="line">    context.Database.Migrate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CRUD-commands"><a href="#CRUD-commands" class="headerlink" title="CRUD commands"></a>CRUD commands</h3><p>Run the application. This will execute the commands in <a href="https://github.com/carlpaton/EntityFrameworkCoreDemo/blob/main/src/SweetApp/Program.cs">Program.cs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure><p><img src="/d/entity-framework-core/console-output.png" alt="SQL Server Management Studio (SSMS)"></p><p>These are simple CRUD (Create, read, update and delete) commands copied from <a href="https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app">Getting Started with EF Core</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> db = <span class="keyword">new</span> DatabaseContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Inserting a new blog&quot;</span>);</span><br><span class="line">db.Add(<span class="keyword">new</span> Blog &#123; Url = <span class="string">&quot;http://blogs.msdn.com/adonet&quot;</span> &#125;);</span><br><span class="line">db.SaveChanges();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Querying for a blog&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> blog = db.Blogs</span><br><span class="line">    .OrderBy(b =&gt; b.BlogId)</span><br><span class="line">    .First();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Updating the blog and adding a post&quot;</span>);</span><br><span class="line">blog.Url = <span class="string">&quot;https://devblogs.microsoft.com/dotnet&quot;</span>;</span><br><span class="line">blog.Posts.Add(</span><br><span class="line">    <span class="keyword">new</span> Post &#123; Title = <span class="string">&quot;Hello World&quot;</span>, Content = <span class="string">&quot;I wrote an app using EF Core!&quot;</span> &#125;);</span><br><span class="line">db.SaveChanges();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Delete the blog&quot;</span>);</span><br><span class="line">db.Remove(blog);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure><p>If you look at the data before the delete command is run, it will be persisted to SQL.</p><p><img src="/d/entity-framework-core/persisted-data.png" alt="Persisted data"></p><h3 id="Refrences"><a href="#Refrences" class="headerlink" title="Refrences"></a>Refrences</h3><ul><li><a href="https://docs.microsoft.com/en-us/ef/core/">https://docs.microsoft.com/en-us/ef/core/</a></li><li><a href="https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app">https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro">https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro</a></li><li><a href="https://docs.microsoft.com/en-us/ef/core/cli/dotnet">https://docs.microsoft.com/en-us/ef/core/cli/dotnet</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> orm </tag>
            
            <tag> sql </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluent Validation</title>
      <link href="/2021/02/fluent-validation/"/>
      <url>/2021/02/fluent-validation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“A popular .NET library for building strongly-typed validation rules.”</p></blockquote><ul><li><a href="https://fluentvalidation.net/">https://fluentvalidation.net/</a></li><li><a href="https://docs.fluentvalidation.net/en/latest/aspnet.html">ASP.NET Core</a></li></ul><p>The example below could be used to validate a simple request object - <code>FooRequest</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FooApi.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooRequest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Guid SomeId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SomeString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Setup-Web-API"><a href="#Setup-Web-API" class="headerlink" title="Setup (Web API)"></a>Setup (Web API)</h2><p>Install the following from nuget, at the the time I updated this post the latest versions were <code>10.3.6</code></p><ul><li><a href="https://www.nuget.org/packages/FluentValidation/">FluentValidation</a></li><li><a href="https://www.nuget.org/packages/FluentValidation.AspNetCore/">FluentValidation.AspNetCore</a></li></ul><p>Use the built in extension method <code>AddFluentValidation</code> to resolve the rules you will write provided the inherit from <code>AbstractValidators</code>. This is probably using reflection to resolve from <code>AbstractValidator</code>. (This will resolve as <code>Scoped</code>) - <a href="https://docs.fluentvalidation.net/en/latest/aspnet.html#automatic-registration">read the docs for more info</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services</span><br><span class="line">        .AddControllers()</span><br><span class="line">        .AddFluentValidation(fv =&gt; &#123; </span><br><span class="line">            fv.RegisterValidatorsFromAssemblyContaining&lt;Startup&gt;(); </span><br><span class="line">        &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Simple-validation"><a href="#Simple-validation" class="headerlink" title="Simple validation"></a>Simple validation</h3><p>Here <code>FooRequestValidator</code> is the validator and its constructor executes the validation(s)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FooApi.Validators</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooRequestValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">FooRequest</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FooRequestValidator</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            RuleFor(x =&gt; x.SomeId)</span><br><span class="line">                .NotEmpty()</span><br><span class="line">                .WithMessage((_, someId) =&gt;</span><br><span class="line">                    <span class="string">$&quot;SomeId must be set. Got <span class="subst">&#123;someId&#125;</span>.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inject-and-resolve"><a href="#Inject-and-resolve" class="headerlink" title="Inject and resolve"></a>Inject and resolve</h3><p>You only need to inject <code>IValidator&lt;FooRequest&gt;</code> and call <code>_requestValidator.ValidateAsync</code> is you need perform async validation. Else the <code>FooRequestValidator</code> will be automagically called for you \ :D /</p><p>The magic from <code>RegisterValidatorsFromAssemblyContaining</code> will now resolve the validators for you. Use constructor injection to resolve concrete implementations at runtime.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IValidator&lt;FooRequest&gt; _requestValidator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FooController</span>(<span class="params">IValidator&lt;FooRequest&gt; requestValidator</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _requestValidator = requestValidator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">SomePost</span>(<span class="params">[FromBody] FooRequest request</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> _requestValidator.ValidateAsync(request, options =&gt; options.ThrowOnFailures());</span><br></pre></td></tr></table></figure><p>Should <code>request.SomeId</code> be a default guid (the 000000 one) then the response would be a 400.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://tools.ietf.org/html/rfc7231#section-6.5.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;One or more validation errors occurred.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;traceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;PartnerId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;SomeId must be set. Got 00000000-0000-0000-0000-000000000000.&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Complex-validations"><a href="#Complex-validations" class="headerlink" title="Complex validations"></a>Complex validations</h3><p>You can inject services that do validations into the validator, it then pays to stop at that validation failure with <code>.Cascade(CascadeMode.Stop)</code>. The services need to already be in the dependency injection container.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FooApi.Validators</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooRequestValidator</span> : <span class="title">AbstractValidator</span>&lt;<span class="title">FooRequest</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FooRequestValidator</span>(<span class="params">IMyService myservice1, IMyService myservice2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            RuleFor(x =&gt; x.SomeId)</span><br><span class="line">                .Cascade(CascadeMode.Stop)</span><br><span class="line">                .NotEmpty()</span><br><span class="line">                .WithMessage((_, someId) =&gt;</span><br><span class="line">                    <span class="string">$&quot;SomeId must be set. Got <span class="subst">&#123;someId&#125;</span>.&quot;</span>);</span><br><span class="line">                .MustAsync(<span class="keyword">async</span> (_, someId, cancellationToken) =&gt;</span><br><span class="line">                    <span class="keyword">await</span> myservice1.IsValid(someId, cancellationToken)) <span class="comment">// here IsValid returns `Task&lt;bool&gt;`</span></span><br><span class="line">                .WithMessage((_, someId) =&gt; <span class="string">$&quot;Some data for <span class="subst">&#123;someId&#125;</span> could not be found.&quot;</span>)</span><br><span class="line">                .MustAsync(<span class="keyword">async</span> (_, someId, cancellationToken) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> someCollection = <span class="keyword">await</span> myservice2.GetStuff(someId, cancellationToken);</span><br><span class="line">                    <span class="keyword">return</span> !someCollection.Any(x =&gt; x.SomeProp);</span><br><span class="line">                &#125;)</span><br><span class="line">                .WithMessage((_, someId) =&gt; <span class="string">$&quot;Some other data for <span class="subst">&#123;someId&#125;</span> could not be found.&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            RuleFor(x =&gt; x.SomeString)</span><br><span class="line">                .NotEmpty()</span><br><span class="line">                .WithMessage((_, someString) =&gt;</span><br><span class="line">                    <span class="string">$&quot;SomeString must be set. Got <span class="subst">&#123;someString&#125;</span>.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Unit-tests"><a href="#Unit-tests" class="headerlink" title="Unit tests"></a>Unit tests</h3><p>Testing is done with <code>FluentValidation.TestHelper</code>. Simply new up the validator and await the extension method <code>TestValidateAsync</code> and assert on <code>ShouldHaveValidationErrorFor</code>.</p><p>The <code>.Should().BeFalse()</code> assertions are done using <a href="/2020/02/fluent-assertions/">Fluent Assertions</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> FluentValidation.TestHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooRequestValidatorTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RuleForSomeId_GivenEmptyGuid_ShouldFailValidation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> validator = <span class="keyword">new</span> FooRequestValidator();</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> FooRequest()</span><br><span class="line">        &#123;</span><br><span class="line">            SomeId = Guid.Empty <span class="comment">// this will be the default but this is more verbose</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> validator.TestValidateAsync(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        result.IsValid.Should().BeFalse();</span><br><span class="line"></span><br><span class="line">        result</span><br><span class="line">            .ShouldHaveValidationErrorFor(x =&gt; x.SomeId)</span><br><span class="line">            .WithErrorMessage(<span class="string">&quot;SomeId must be set. Got 00000000-0000-0000-0000-000000000000.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> software testing </tag>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking ILogger</title>
      <link href="/2021/02/mocking-ilogger/"/>
      <url>/2021/02/mocking-ilogger/</url>
      
        <content type="html"><![CDATA[<p>Mocking extension methods is not possible as they are <code>static</code>.</p><blockquote><p>Use the static modifier to declare a static member, which belongs to the type itself rather than to a specific object.</p></blockquote><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static</a>.</li></ul><h2 id="Invocations"><a href="#Invocations" class="headerlink" title="Invocations"></a>Invocations</h2><p>After injecting <code>loggerMock.Object</code> and calling the unit of work you can verify <code>Invocations</code> by index</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loggerMock</span><br><span class="line">    .Invocations[<span class="number">0</span>]</span><br><span class="line">    .Arguments[<span class="number">0</span>]</span><br><span class="line">    .Should().Be(LogLevel.Error);</span><br><span class="line"></span><br><span class="line">loggerMock</span><br><span class="line">    .Invocations[<span class="number">0</span>]</span><br><span class="line">    .Arguments[<span class="number">2</span>]</span><br><span class="line">    .ToString().Should().Be(<span class="string">&quot;The what what borked&quot;</span>);</span><br></pre></td></tr></table></figure><p>You can also use the <a href="https://github.com/adrianiftode/Moq.ILogger">ILogger.Moq</a> library and then instead do something like </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loggerMock.VerifyLog(</span><br><span class="line">    i =&gt; i.LogInformation(<span class="string">&quot;The what what borked&quot;</span>),</span><br><span class="line">    Times.Once);</span><br></pre></td></tr></table></figure><h2 id="Plan-B-Query-Underlying-Method"><a href="#Plan-B-Query-Underlying-Method" class="headerlink" title="Plan B, Query Underlying Method"></a>Plan B, Query Underlying Method</h2><p>Create the mocked logger that is injected into <code>SomeServiceClient</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loggerMock = <span class="keyword">new</span> Mock&lt;ILogger&lt;SomeServiceClient&gt;&gt;();</span><br></pre></td></tr></table></figure><p>After injecting <code>loggerMock.Object</code> and calling the unit of work you can verify what the extension method is calling under the hood.</p><p>Key things to look at here are:</p><ul><li><code>LogLevel</code> below is <code>LogLevel.Error</code> which will be for <code>_logger.LogError</code> from <code>Microsoft.Extensions.Logging</code></li><li><code>logEntryToBeWritten</code> is the text to be logged without the exeption.</li></ul><pre><code class="c#">var logEntryToBeWritten = &quot;The what what borked&quot;;loggerMock.Verify(    x =&gt; x.Log(        It.Is&lt;LogLevel&gt;(l =&gt; l == LogLevel.Error),        It.IsAny&lt;EventId&gt;(),        It.Is&lt;It.IsAnyType&gt;((v, t) =&gt; v.ToString() == logEntryToBeWritten),        It.IsAny&lt;Exception&gt;(),        It.Is&lt;Func&lt;It.IsAnyType, Exception, string&gt;&gt;((v, t) =&gt; true)));</code></pre><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://adamstorr.azurewebsites.net/blog/mocking-ilogger-with-moq">https://adamstorr.azurewebsites.net/blog/mocking-ilogger-with-moq</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filters in ASP.NET Core</title>
      <link href="/2021/02/filters-in-asp-net-core/"/>
      <url>/2021/02/filters-in-asp-net-core/</url>
      
        <content type="html"><![CDATA[<h3 id="What-are-Filters"><a href="#What-are-Filters" class="headerlink" title="What are Filters?"></a>What are Filters?</h3><blockquote><p>Filters in ASP.NET Core allow code to be run before or after specific stages in the request processing pipeline.</p></blockquote><p>Filter types include Authorization, Resource, Action, Exception and Result. <a href="/2015/05/custom-authentication/">A pretty crude Authorization could be to check the HTTP Headers have have some expected value like an API Key.</a></p><p><img src="/d/filters-in-asp-net-core/filter-pipeline.png" alt="Example filter pipeline from docs.microsoft.com"></p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters">https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters</a></li></ul><h3 id="Custom-Authorization-Policy"><a href="#Custom-Authorization-Policy" class="headerlink" title="Custom Authorization Policy"></a>Custom Authorization Policy</h3><p>The following sample code adds a simple API Key check to all requests. The complete solution is here <a href="https://github.com/carlpaton/AuthorizationDemo">https://github.com/carlpaton/AuthorizationDemo</a>.</p><p>We can apply custom authorization policys using <code>IAuthorizationPolicyProvider</code> from <code>Microsoft.AspNetCore.Authorization;</code> with the following flow.</p><ol><li>Create <code>/Authorization/Requirements/ApiKeyRequirement.cs</code> where ApiKey is the business use case. This could be anything that is sensible for your use case. EG: <code>AdminUser</code></li></ol><p><code>IAuthorizationRequirement</code> is a marker interface with no methods and the mechanism for tracing whether authorization is successful.</p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies#requirements">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies#requirements</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization.Requirements</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyRequirement</span> : <span class="title">IAuthorizationRequirement</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can however include state in the requirements construction, the <code>ApiKeyRequirement</code> instance will be passed into the handler so you would then access it as <code>requirement.Permission</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization.Requirements</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Permission &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyRequirement</span> : <span class="title">IAuthorizationRequirement</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiKeyRequirement</span>(<span class="params"><span class="built_in">string</span> permission</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Permission = permission;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create <code>/Authorization/Handlers/ApiKeyRequirementHandler.cs</code> with constructor injection resources such as repository, contexts, services ect.</li></ol><p>The flows could then be:</p><ul><li>Extract data from CTR injected resources</li><li>Based on the result apply logic for failure; <code>context.Fail();</code> and success; <code>context.Succeed(requirement);</code></li></ul><p>My flow was real simple and just checks for the <code>ApiKey</code> in the given RequestContext.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization.Handlers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyRequirementHandler</span> : <span class="title">AuthorizationHandler</span>&lt;<span class="title">ApiKeyRequirement</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IGeneralRequestContext _generalRequestContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiKeyRequirementHandler</span>(<span class="params">IGeneralRequestContext generalRequestContext</span>)</span> </span><br><span class="line">        &#123;</span><br><span class="line">            _generalRequestContext = generalRequestContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">HandleRequirementAsync</span>(<span class="params">AuthorizationHandlerContext context, ApiKeyRequirement requirement</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> expectedGuid = Guid.Parse(<span class="string">&quot;cdef007a-5d8e-496d-b123-c9055d157d5f&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_generalRequestContext.ApiKey.Equals(expectedGuid)) </span><br><span class="line">            &#123;</span><br><span class="line">                context.Succeed(requirement);</span><br><span class="line">                <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Fail();</span><br><span class="line">            <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies</a></li></ul><ol start="2"><li>Create <code>/Authorization/AuthorizationRequirementMapper.cs</code>. This will hold a collection of key/values being <code>string</code> and <code>IAuthorizationRequirement</code> and methods to access these. <a href="https://github.com/carlpaton/AuthorizationDemo/blob/main/src/policy-based-authorization/SweetApp/Authorization/Policys.cs">Policys</a> is just a static class with static string members.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationRequirementMapper</span> : <span class="title">IAuthorizationRequirementMapper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IDictionary&lt;<span class="built_in">string</span>, IAuthorizationRequirement&gt; <span class="title">GetAuthorizationRequirementMappings</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IAuthorizationRequirement&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; Policys.FallbackRequirementPolicy, <span class="keyword">new</span> FallbackRequirement() &#125;,</span><br><span class="line">                &#123; Policys.RequireHeaderKeyPolicy, <span class="keyword">new</span> ApiKeyRequirement() &#125;,</span><br><span class="line">                &#123; Policys.DefaultPolicy, <span class="keyword">new</span> DefaultPolicyRequirement() &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAuthorizationRequirement <span class="title">GetDefaultPolicy</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetAuthorizationRequirementMappings()[Policys.DefaultPolicy];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IAuthorizationRequirement <span class="title">GetFallbackPolicy</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetAuthorizationRequirementMappings()[Policys.FallbackRequirementPolicy];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create <code>/Authorization/AuthorizationPolicyProvider.cs</code> then inherit and implement <code>IAuthorizationPolicyProvider</code>. This will give you <code>GetDefaultPolicyAsync()</code>, <code>GetFallbackPolicyAsync()</code> and <code>GetPolicyAsync(policyName)</code>.</li></ol><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SweetApp.Authorization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationPolicyProvider</span> : <span class="title">IAuthorizationPolicyProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">readonly</span> IAuthorizationRequirementMapper _authorizationRequirementMapper;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationPolicyProvider</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">            IAuthorizationRequirementMapper authorizationRequirementMapper</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _authorizationRequirementMapper = authorizationRequirementMapper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GetDefaultPolicyAsync returns the default authorization policy (the policy used for [Authorize] attributes without a policy specified).</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetDefaultPolicyAsync</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> requirement = _authorizationRequirementMapper</span><br><span class="line">                .GetDefaultPolicy();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetPolicy(requirement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GetFallbackPolicyAsync returns the fallback authorization policy (the policy used by the Authorization Middleware when no policy is specified).</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetFallbackPolicyAsync</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> requirement = _authorizationRequirementMapper</span><br><span class="line">                .GetFallbackPolicy();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetPolicy(requirement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GetPolicyAsync returns an authorization policy for a given name. Example `[Authorize(Policy = &quot;RequireHeaderKeyPolicy&quot;)]`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;policyName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetPolicyAsync</span>(<span class="params"><span class="built_in">string</span> policyName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_authorizationRequirementMapper</span><br><span class="line">                .GetAuthorizationRequirementMappings()</span><br><span class="line">                .TryGetValue(policyName, <span class="keyword">out</span> IAuthorizationRequirement requirement))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> GetPolicy(requirement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetDefaultPolicyAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Task&lt;AuthorizationPolicy&gt; <span class="title">GetPolicy</span>(<span class="params">IAuthorizationRequirement requirement</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> policy = <span class="keyword">new</span> AuthorizationPolicyBuilder()</span><br><span class="line">                .AddRequirements(requirement)</span><br><span class="line">                .Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(policy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Add the authorization mapper, policy provider and handlers to the application pipeline in <code>Startup.cs</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IAuthorizationRequirementMapper, AuthorizationRequirementMapper&gt;();</span><br><span class="line">services.AddSingleton&lt;IAuthorizationPolicyProvider, AuthorizationPolicyProvider&gt;();</span><br><span class="line"></span><br><span class="line">services.AddScoped&lt;IAuthorizationHandler, FallbackRequirementHandler&gt;();</span><br><span class="line">services.AddScoped&lt;IAuthorizationHandler, ApiKeyRequirementHandler&gt;();</span><br><span class="line">services.AddScoped&lt;IAuthorizationHandler, DefaultPolicyRequirementHandler&gt;();</span><br></pre></td></tr></table></figure><ol start="5"><li>So now the application has 3 authorization options</li></ol><p>5.1 <strong>GetFallbackPolicyAsync</strong> The policy run for all end points with no authorization annotation. The value could be that it now replaces <code>[Authorize]</code> attribute on all controllers. Note that if you do this, for end points that dont require authorization checks you now need to add the <code>[AllowAnonymous]</code> annotation. This would be <a href="https://github.com/carlpaton/AuthorizationDemo/blob/main/src/policy-based-authorization/SweetApp/Authorization/Handlers/FallbackRequirementHandler.cs">FallbackRequirementHandler</a></p><p>5.2 <strong>GetDefaultPolicyAsync</strong> The policy run for end points with the annotation <code>[Authorize]</code>.</p><p>5.3 <strong>GetPolicyAsync</strong> The policy run for end points with the policy name specified in the annotation <code>[Authorize(Policy = &quot;RequireHeaderKeyPolicy&quot;)]</code>.</p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider">https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/roles">Role-based authorization in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies">Policy-based authorization in ASP.NET Core</a></li><li><a href="https://jakeydocs.readthedocs.io/en/latest/security/authorization/policies.html">Custom Policy-Based Authorization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking HttpClient SendAsync</title>
      <link href="/2021/01/mocking-httpclient-sendasync/"/>
      <url>/2021/01/mocking-httpclient-sendasync/</url>
      
        <content type="html"><![CDATA[<p>In the past the only way I’ve known how to deal with mocking Http/Web clients is to <a href="https://github.com/carlpaton/Common/blob/master/Common/Http/HttpWebRequestFactory.cs">wrap the methods</a> using a custom interface. This is a lot of overhead and I feel teaches us its ok to write code that was not written in a way that is testable from the start. Wrappers are a smell in my opion.</p><p>.Net Core have solved the <code>HttpClient</code> problem by providing a way to inject a <code>HttpClient</code> instance using <code>.AddHttpClient</code> which is in the <code>Microsoft.Extensions.DependencyInjection</code> namespace. This is great as it then gives the consumer a valid object for them to setup things like their <code>BaseAddress</code> and other settings needed.</p><h2 id="Mock-HttpMessageHandler"><a href="#Mock-HttpMessageHandler" class="headerlink" title="Mock HttpMessageHandler"></a>Mock HttpMessageHandler</h2><ol><li>In the pipeline add</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">    .AddHttpClient&lt;IFooServiceClient, FooServiceClient&gt;()</span><br></pre></td></tr></table></figure><ol start="2"><li>In the constructor for <code>FooServiceClient</code> you will automagically get a <code>HttpClient</code> instance which you can then set any propertys needed.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooServiceClient</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _client;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FooServiceClient</span>(<span class="params">HttpClient client, IConfiguration config</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    client.BaseAddress = <span class="keyword">new</span> Uri(config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Services:FooService:Url&quot;</span>));</span><br><span class="line"></span><br><span class="line">    _client = client;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;SomeClass&gt; <span class="title">SomeMethod</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> requestUri = <span class="string">&quot;http://localhost:81&quot;</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Get, requestUri);</span><br><span class="line">    <span class="comment">//add headers to request if required</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> _client.SendAsync(request);</span><br><span class="line">    response.EnsureSuccessStatusCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> do something with the response :D</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SomeClass();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Now if you try mock to perhaps assert what the <code>HttpRequestMessage</code> request was, or even that <code>SendAsync</code> was called it cannot be done as it has no override modifier. If you try construct the mock it will protest at runtime about setup / verification expressions.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpClientMock = <span class="keyword">new</span> Mock&lt;HttpClient&gt;();</span><br><span class="line">httpClientMock</span><br><span class="line">  .Verify(x =&gt; x.SendAsync(It.IsAny&lt;HttpRequestMessage&gt;()), Times.Once);</span><br></pre></td></tr></table></figure><p>Injecting the above with <code>httpClientMock.Object</code> will be fine but the <code>.Verify</code> will fail as expected.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message: </span><br><span class="line">    System.NotSupportedException : Unsupported expression: x =&gt; x.SendAsync(It.IsAny&lt;HttpRequestMessage&gt;())</span><br><span class="line">    Non-overridable members (here: HttpClient.SendAsync) may not be used in setup / verification expressions.</span><br></pre></td></tr></table></figure><p>3.1. The work around is to look at the <code>HttpClient</code> constructor overloads, one takes an instance of <code>HttpMessageHandler</code> which has an abstract <code>SendAsync</code> method that is used by HttpClient under the hood. Credit to <a href="https://dev.to/gautemeekolsen/how-to-test-httpclient-with-moq-in-c-2ldp">Gaute Meek Olsen’s</a> post explaining this far better than I could.</p><p>Create the <code>httpMessageHandlerMock</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpMessageHandlerMock = <span class="keyword">new</span> Mock&lt;HttpMessageHandler&gt;();</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> HttpResponseMessage &#123; StatusCode = HttpStatusCode.OK &#125;;</span><br></pre></td></tr></table></figure><p>You can also add to the response body if needs be, the below is manual json - best to do it with a <a href="/2020/01/json-serializers/">serialized object</a> of what ever your end point returns.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> HttpResponseMessage &#123; </span><br><span class="line">  StatusCode = HttpStatusCode.OK </span><br><span class="line">  Content = <span class="keyword">new</span> StringContent(<span class="string">@&quot;[&#123; &quot;&quot;id&quot;&quot;: 1, &quot;&quot;desc&quot;&quot;: &quot;&quot;foo&quot;&quot;&#125;]&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then define a <code>.Setup</code> to return the response above. As <code>SendAsync</code> is protected we need to use <code>.Protected()</code></p><p>Note that if in your implementation of <code>HttpClient</code> calls <code>.GetAsync(...)</code> this will still work as internally <code>GetAsync</code> will eventually call <code>SendAsync</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">httpMessageHandlerMock</span><br><span class="line">  .Protected()</span><br><span class="line">  .Setup&lt;Task&lt;HttpResponseMessage&gt;&gt;(</span><br><span class="line">    <span class="string">&quot;SendAsync&quot;</span>,</span><br><span class="line">    ItExpr.IsAny&lt;HttpRequestMessage&gt;(),</span><br><span class="line">    ItExpr.IsAny&lt;CancellationToken&gt;())</span><br><span class="line">  .ReturnsAsync(response);</span><br></pre></td></tr></table></figure><p>Create the client for dependancy injection</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient(httpMessageHandlerMock.Object);</span><br><span class="line"><span class="comment">// Then pass `httpClient` to `FooServiceClient` and call `SomeMethod` </span></span><br></pre></td></tr></table></figure><p>A mock <code>.Verify</code> to check <code>SendAsync</code> was called once with an expected request.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">httpMessageHandlerMock</span><br><span class="line">  .Protected()</span><br><span class="line">  .Verify(</span><br><span class="line">      <span class="string">&quot;SendAsync&quot;</span>,</span><br><span class="line">      Times.Exactly(<span class="number">1</span>),</span><br><span class="line">      ItExpr.Is&lt;HttpRequestMessage&gt;(</span><br><span class="line">          request =&gt;</span><br><span class="line">              request.Method == HttpMethod.Get</span><br><span class="line">              &amp;&amp; <span class="comment">// other checks like `request.RequestUri`, `request.Headers.GetValues` ect),</span></span><br><span class="line">      ItExpr.IsAny&lt;CancellationToken&gt;());</span><br></pre></td></tr></table></figure><p>Beauti!</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://dev.to/gautemeekolsen/how-to-test-httpclient-with-moq-in-c-2ldp">https://dev.to/gautemeekolsen/how-to-test-httpclient-with-moq-in-c-2ldp</a></li></ul><h2 id="Delegating-Handler"><a href="#Delegating-Handler" class="headerlink" title="Delegating Handler"></a>Delegating Handler</h2><p>Alternatively we can use a named http client and add a custom handler using the base class <code>DelegatingHandler</code></p><p>Create the handler</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StubDelegatingHandler</span> : <span class="title">DelegatingHandler</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> HttpStatusCode _stubHttpStatusCode;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StubDelegatingHandler</span>(<span class="params">HttpStatusCode stubHttpStatusCode</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      _stubHttpStatusCode = stubHttpStatusCode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span> </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> Task.FromResult(<span class="keyword">new</span> HttpResponseMessage(stubHttpStatusCode));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inject in tests</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> NamedHttpClient = <span class="string">&quot;MyClient&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expectedHttpStatusCode = HttpStatusCode.OK;</span><br><span class="line"><span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">services</span><br><span class="line">  .AddHttpClient(NamedHttpClient)</span><br><span class="line">  .AddHttpMessageHandler(() =&gt; <span class="keyword">new</span> StubDelegatingHandler(expectedHttpStatusCode));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> configuredClient =</span><br><span class="line">  services</span><br><span class="line">  .BuildServiceProvider()</span><br><span class="line">  .GetRequiredService&lt;IHttpClientFactory&gt;()</span><br><span class="line">  .CreateClient(NamedHttpClient);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> configuredClient.GetAsync(<span class="string">&quot;https://carlpaton.github.io/&quot;</span>);</span><br><span class="line">result.StatusCode.Should().Be(expectedHttpStatusCode);</span><br></pre></td></tr></table></figure><p>Boom!</p><h3 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/54030145/test-polly-retry-polly-configured-via-startup-configureservices-with-asp-net-c">https://stackoverflow.com/questions/54030145/test-polly-retry-polly-configured-via-startup-configureservices-with-asp-net-c</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Testing When SUT Has Protected Methods</title>
      <link href="/2021/01/unit-testing-protected-methods/"/>
      <url>/2021/01/unit-testing-protected-methods/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 18/09/2024</strong></p><ul><li>Also see <a href="/2024/09/unit-testing-static-methods/">Unit Testing When SUT Has Static Methods</a></li></ul><p>I have a custom <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authorization.authorizeattribute">AuthorizeAttribute</a> called <code>FooAttribute</code>, this is my SUT (software under test) and its core implementation is not important for this post but the fact that the base class <code>AuthorizeAttribute</code> has <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/protected">protected</a> <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual">virtual</a> keywords before the method <code>IsAuthorized</code> is.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">IsAuthorized</span>(<span class="params">HttpActionContext actionContext</span>)</span></span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>So the custom <code>FooAttribute</code> looks something like this, it has some logic in <code>IsAuthorized</code> that I want to unit test because its important that this code behaves as expected and doesnt change.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooAttribute</span> : <span class="title">AuthorizeAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsAuthorized</span>(<span class="params">HttpActionContext context</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// please unit test me</span></span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>The noob would just try something like the below but this would protest as <code>FooAttribute.IsAuthorized(HttpActionContext)</code> is inaccessible due to its protection level, which is to be expected 🐒</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsAuthorized_GivenWhenThen</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// Arrange</span></span><br><span class="line">   <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> FooAttribute(_scope);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Act</span></span><br><span class="line">   <span class="keyword">var</span> actual = classUnderTest.IsAuthorized(_context);  <span class="comment">// &lt;-- wont compile</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Work-Around"><a href="#Work-Around" class="headerlink" title="Work Around"></a>Work Around</h2><p>A work around is just to add some additional setup to expose ‘protected’ behaviour in the test.</p><ol><li>Add the additional setup <code>ExposedFooAttribute</code> to the test class file</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Additional setup required to expose &#x27;protected&#x27; behaviour</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExposedFooAttribute</span> : <span class="title">FooAttribute</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExposedFooAttribute</span>(<span class="params"><span class="built_in">string</span> scope</span>) : <span class="title">base</span>(<span class="params">scope</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ExposedIsAuthorized</span>(<span class="params">HttpActionContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> IsAuthorized(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Change the noob test above to use the exposed method as the entry point</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsAuthorized_GivenWhenThen</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// Arrange</span></span><br><span class="line">   <span class="keyword">var</span> classUnderTest = <span class="keyword">new</span> ExposedFooAttribute(_scope);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Act</span></span><br><span class="line">   <span class="keyword">var</span> actual = classUnderTest.ExposedIsAuthorized(_context);  <span class="comment">// this will compile</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This works because a protected member is accessible within its class and by derived class instances, so we are taking advantage of how the .Net framework behaves.</p><p>So now you can test <code>IsAuthorized</code> in the unit tests and trust the code in the future. </p><p>I only trust Batman ❤️</p>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking .Net Core IConfiguration</title>
      <link href="/2021/01/mocking-net-core-iconfiguration/"/>
      <url>/2021/01/mocking-net-core-iconfiguration/</url>
      
        <content type="html"><![CDATA[<p>The <code>appsettings.json</code> configuration can be mocked in several ways, the examples below use <a href="/2018/09/mocking-frameworks/">Moq</a>.</p><p>Consider these settings:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Services&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SomeService&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://someservice:81&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>This would be read in the consumer class as:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Services:SomeService:Url&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Option-1-Mock-configurationSection-and-configuration"><a href="#Option-1-Mock-configurationSection-and-configuration" class="headerlink" title="Option 1: Mock configurationSection and configuration"></a>Option 1: Mock configurationSection and configuration</h3><p>In the testing class you need to mock <code>configurationSection</code> and <code>configuration</code> as follows</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configurationSectionMock = <span class="keyword">new</span> Mock&lt;IConfigurationSection&gt;();</span><br><span class="line"><span class="keyword">var</span> configurationMock = <span class="keyword">new</span> Mock&lt;IConfiguration&gt;();</span><br><span class="line"></span><br><span class="line">configurationSectionMock</span><br><span class="line">   .Setup(x =&gt; x.Value)</span><br><span class="line">   .Returns(<span class="string">&quot;http://someservice:81&quot;</span>);</span><br><span class="line"></span><br><span class="line">configurationMock</span><br><span class="line">   .Setup(x =&gt; x.GetSection(<span class="string">&quot;Services:SomeService:Url&quot;</span>))</span><br><span class="line">   .Returns(configurationSectionMock.Object);</span><br></pre></td></tr></table></figure><p>Then inject <code>configurationMock.Object</code> and it will be happy as when <code>config.GetValue</code> is called.</p><h3 id="Option-2-Read-appsettings-file-based-on-Environment"><a href="#Option-2-Read-appsettings-file-based-on-Environment" class="headerlink" title="Option 2: Read appsettings file based on Environment"></a>Option 2: Read appsettings file based on Environment</h3><p>Build up <code>configuration</code> and read appsettings file.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> environment = Environment.GetEnvironmentVariable(<span class="string">&quot;ASPNETCORE_ENVIRONMENT&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">    .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">    .AddJsonFile(<span class="string">$&quot;appsettings.<span class="subst">&#123;environment&#125;</span>.json&quot;</span>)</span><br><span class="line">    .Build();</span><br></pre></td></tr></table></figure><p>You can now read the configuration from <code>configuration</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = configuration.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Services:SomeService:Url&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> connectionString = configuration.GetConnectionString(<span class="string">&quot;FooConnectionString&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Option-3-In-Memory-Collection"><a href="#Option-3-In-Memory-Collection" class="headerlink" title="Option 3: In Memory Collection"></a>Option 3: In Memory Collection</h3><p>If the settings are nested and you need to mock several you can use a dictionary and add to the builder with <code>.AddInMemoryCollection(appSettingsStub)</code></p><p>Consider these settings, the mock concearned with the <code>RetryCount</code> and <code>RetrySleepDuration</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Services&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SomeService&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://someservice:81&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;RetryCount&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;RetrySleepDuration&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Create the dictionary</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appSettingsStub = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Services:SomeService:RetryCount&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Services:SomeService:RetrySleepDuration&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Create the config</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">    .AddInMemoryCollection(appSettingsStub)</span><br><span class="line">    .Build();</span><br></pre></td></tr></table></figure><p>Using a simple options class</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SomeServiceOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> SomeService = <span class="string">&quot;Services:SomeService&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RetryCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RetrySleepDuration &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can then access this config and bind it to the options class.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someServiceConfig = configuration</span><br><span class="line">  .GetSection(SomeServiceOptions.SomeService)</span><br><span class="line">  .Get&lt;SomeServiceOptions&gt;();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing Strategies</title>
      <link href="/2021/01/testing-strategies/"/>
      <url>/2021/01/testing-strategies/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“A test strategy is an outline that describes the testing approach of the software development cycle. - <a href="https://en.wikipedia.org/wiki/Test_strategy&quot;">https://en.wikipedia.org/wiki/Test_strategy&quot;</a></p></blockquote><p>I was recently afforded the opertunity for a deep dive into software testing strategies - it was a amazing! I’ve realized that different teams have a different understanding and naming of tests. As long as the team agree and document the stratagy all will be well in the world. Its also not always best practice to do every kind of test possible, as a team you need to agree on your working/social contracts and then add this to your DoD (Definition of done).</p><h2 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h2><p>These define the smallest unit of work we can have, normally a well written method in a class that takes advantage of <a href="/2018/04/dependency-inversion-principle-dip/">dependency inversion</a>.</p><p>Key points</p><ul><li>This will have a very narrow scope &amp; test logic would be given <code>x</code> the behaviour is <code>y</code>, this doesnt guarantee feature works</li><li><a href="/2018/09/mocking-frameworks/">Mock</a> out all dependencies</li><li>Pick a <a href="/2018/09/unit-testing-frameworks/">Unit Testing Framework</a></li><li>Decide on a pattern and stick to it, <a href="https://gist.github.com/carlpaton/77ae278b904cab2a19423809a69c2c67">AAA</a> is the only one I really know</li></ul><p>See <a href="/2018/05/unit-tests-overview/">Unit Tests Overview</a> for more details.</p><h3 id="Unit-Test-Test-Naming"><a href="#Unit-Test-Test-Naming" class="headerlink" title="Unit Test Test Naming"></a>Unit Test Test Naming</h3><p><strong>U_I_E</strong></p><p><code>U_I_E</code> signatures are <code>Unit of work</code>, <code>inital condition</code> and <code>expected result</code>.</p><p>Most of the names Ive see would however end up as <code>UnitOfWork_GivenX_ShouldY</code> (which is pretty much the below)</p><p>If you need to use <code>And</code> then consider what you are actually testing, potentially the test is too board and you can narrow scope (not always possible though!) Example: <code>UnitOfWork_GivenXAndY_ShouldZ</code>. You could sneak in a <em>with</em> and have <code>UnitOfWork_GivenXWithY_ShouldZ</code> … LOL.</p><p><strong>G_W_T</strong></p><p>Another signature could be <code>G_W_T</code> which is Given-When-Then: This pattern is often used in behavior-driven development (BDD). It consists of three parts:</p><ul><li>Given: The preconditions that must be met before the test can be run.</li><li>When: The action that is being tested.</li><li>Then: The expected result of the action.</li></ul><p>This can be described as </p><p>Given: A database with a table called “users”<br>When: I insert a new user into the table<br>Then: The user should be visible in the table</p><p>Most of the names I’ve see would however end up as <code>UnitOfWork_GivenX_ShouldY</code> or <code>UnitOfWork_WhenX_ShouldY</code></p><h2 id="Component-Test"><a href="#Component-Test" class="headerlink" title="Component Test *"></a>Component Test *</h2><p><em>* The understanding of <code>Component</code> and <code>Integration</code> tests are often switched around, this means what one team calls <code>Component testing</code> is <code>Integration testing</code> to another and vice versa. It doesnt matter as long as you and your team (current pod and adjacent) have a simliar understanding. This understanding needs to be shared as part of your onboarding into the team.</em></p><p><strong>Component Test</strong> will test a deployable boundary and generally dependencies outside the boundary are mocked.</p><p>Key points</p><ul><li>Makes sense to run this on PR and Master builds</li><li>Wiremocks are useful here to mock external dependencies (anything the component doesnt own)</li><li>You could test the integration of the service and its db</li><li>Genrally tests the integration with a single external component at a time (ie: the database)</li></ul><h2 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test *"></a>Integration Test *</h2><p>The goal is to give higher confidence that components work together.</p><p>This will cross boundaries and the real implementation of resources are used, this is normally done in a UAT environment. Depending on data constraints this can also be done in Production but thats not always possible or sensible if it impacts what your clients will see.</p><p>Key points</p><ul><li>This can be run after Master is deployed to UAT</li><li>Ensures that the external services that were mocked out in <code>Component Tests</code> are right</li><li>Tests the boundaries between components (focus on the contract). Test interactions with 3rd party components (the actual contract)</li><li>Usually doesn’t involve UI (but it can)</li></ul><p>See <a href="/2022/01/integration-tests/">Integration Tests</a> for more details.</p><h3 id="End-to-end-testing-E2E-Test"><a href="#End-to-end-testing-E2E-Test" class="headerlink" title="End to end testing (E2E Test)"></a>End to end testing (E2E Test)</h3><p>E2E will test the flow as a whole where integration tests normally test a feature made up of the applications components.</p><h4 id="Front-End"><a href="#Front-End" class="headerlink" title="Front End"></a>Front End</h4><p>These are slow, expensive and generally pretty flakey! A great testing tool for this is <a href="https://www.cypress.io/">cypress</a></p><p>Key points</p><ul><li>Only do these tests for the most common flows</li><li>Normally tests the happy path</li><li>Driven by the UI (User Interface) and can test down the stack to the database</li><li>Should cover what you would manually test after deployment</li></ul><h4 id="Back-End"><a href="#Back-End" class="headerlink" title="Back End"></a>Back End</h4><p>Its often thought that E2E is only for the front end but this is not true, you can have E2E tests that tests the end to end functionality of a worker process or API.</p><h3 id="Acceptance-Test"><a href="#Acceptance-Test" class="headerlink" title="Acceptance Test"></a>Acceptance Test</h3><p>These are manual tests done by a user, should be the engineer and QA doing these to ensure they fifull the stories acceptance criteria and mandatory requirements.</p><p>Key points</p><ul><li>Tests the UI from a user perspective and is is focused on user behaviour</li></ul><h3 id="Load-Test-Performance-Testing"><a href="#Load-Test-Performance-Testing" class="headerlink" title="Load Test / Performance Testing"></a>Load Test / Performance Testing</h3><ul><li>See <a href="/2021/07/k6-performance-testing/">K6 Performance Testing</a></li><li><a href="https://ardalis.com/load-testing-and-the-requests-per-second-curve/">https://ardalis.com/load-testing-and-the-requests-per-second-curve/</a></li></ul><h3 id="Penetration-Test"><a href="#Penetration-Test" class="headerlink" title="Penetration Test"></a>Penetration Test</h3><blockquote><p>“A penetration test, colloquially known as a pen test, pentest or ethical hacking, is an authorized simulated cyberattack on a computer system, performed to evaluate the security of the system;”</p></blockquote><p>This is things like DDOS (Distributed Denial of Service) or known variabilities on the host or code base.</p><ul><li><a href="https://cipher.com/blog/the-types-of-pentests-you-must-know-about/">https://cipher.com/blog/the-types-of-pentests-you-must-know-about/</a></li><li><a href="https://en.wikipedia.org/wiki/Penetration_test">https://en.wikipedia.org/wiki/Penetration_test</a></li></ul><h3 id="Accessibility-Test"><a href="#Accessibility-Test" class="headerlink" title="Accessibility Test"></a>Accessibility Test</h3><p>I briefly touched on this at a previouse employer, we used <a href="https://carlpaton.github.io/2019/02/accessibility-utilities/">NVDA screen reader</a> to look for accessibility tags and help make our HTML more semantic. Things like ALT tags in images, linking text in A HREF anchors that made sense, tabindex for keyboard control ect.</p><blockquote><p>“Semantic HTML is the use of HTML markup to reinforce the semantics, or meaning, of the information in webpages and web applications rather than merely to define its presentation or look.”</p></blockquote><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML">https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML</a></li><li><a href="https://www.w3schools.com/html/html_accessibility.asp">https://www.w3schools.com/html/html_accessibility.asp</a></li><li><a href="https://en.wikipedia.org/wiki/Semantic_HTML">https://en.wikipedia.org/wiki/Semantic_HTML</a></li></ul><h3 id="Other-tests"><a href="#Other-tests" class="headerlink" title="Other tests"></a>Other tests</h3><ul><li>System Testing</li><li>Feature Testing</li><li>Functional Testing</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Architecture</title>
      <link href="/2020/12/clean-architecture/"/>
      <url>/2020/12/clean-architecture/</url>
      
        <content type="html"><![CDATA[<p>I dont feel <code>Clean Architecture</code> is a one size fits all solution, each project I’ve worked on had different needs/fits. I think its about understanding the benifits of each approach and adopting what works for your problem domain. <a href="/2019/12/web-application-architecture/">Web Application Architecture</a> or the <a href="/2020/07/microservice-architecture/">DDD Oriented Microservice</a> examples will all work as long as the team communicate and stick to the decided architecture.</p><h3 id="Clean-Architecture"><a href="#Clean-Architecture" class="headerlink" title="Clean Architecture"></a>Clean Architecture</h3><p>This has been known by a few names over the years: <code>Hexagonal Architecture</code>, <code>Ports-and-Adapters</code> and <code>Onion Architecture</code>. Its all really the same thing.</p><blockquote><p>“Clean architecture puts the business logic and application model at the center of the application. Instead of having business logic depend on data access or other infrastructure concerns, this dependency is inverted: infrastructure and implementation details depend on the Application Core. This is achieved by defining abstractions, or interfaces, in the Application Core, which are then implemented by types defined in the Infrastructure layer.”</p></blockquote><h3 id="Example-Ardalis"><a href="#Example-Ardalis" class="headerlink" title="Example: Ardalis"></a>Example: Ardalis</h3><p>Application architecture of the <code>ardalis/CleanArchitecture</code> example application that follows <code>clean architecture</code> and  <a href="/2020/04/domain-driven-design/">Domain Driven Design</a>.</p><ul><li><a href="https://github.com/carlpaton/clean-architecture-ardalis">https://github.com/carlpaton/clean-architecture-ardalis</a></li></ul><p><img src="/d/clean-architecture/ardalis-clean-architecture.png" alt="ardalis/CleanArchitecture"></p><h3 id="Example-Jason-Taylor"><a href="#Example-Jason-Taylor" class="headerlink" title="Example: Jason Taylor"></a>Example: Jason Taylor</h3><p>Jason describes this with the domain layer first however it makes more sense to me to have the UI first, this also makes it simpler for me to draw similarities with other examples.</p><ul><li><a href="https://github.com/carlpaton/clean-architecture-jasontaylordev">https://github.com/carlpaton/clean-architecture-jasontaylordev</a></li></ul><p><img src="/d/clean-architecture/jason-taylor-clean-architecture.png" alt="Jason Taylor/CleanArchitecture"></p><iframe width="560" height="315" src="https://www.youtube.com/embed/dK4Yb6-LxAk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Building-on-these"><a href="#Building-on-these" class="headerlink" title="Building on these"></a>Building on these</h4><p>Other common <code>things</code> these projects house:</p><ul><li>Infrastructure</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Feature.FeatureStrategies                 ~ abstract factory based on `IFeatureStrategy` for AB toggle </span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 Client Credentials Flow</title>
      <link href="/2020/12/oauth2-client-credentials-flow/"/>
      <url>/2020/12/oauth2-client-credentials-flow/</url>
      
        <content type="html"><![CDATA[<p>Grant Type - <code>Client Credentials</code> is used when the application needs an access token to:</p><ul><li>Act on behalf of themselves (so not a user)</li><li>AKA Service to Service</li></ul><p><img src="/d/oauth2-client-credentials-flow/client-credentials.png" alt="Grant Type - Client Credentials"></p><ol><li>Do a POST request to <code>https://authorisation-service.local/token</code> including your <code>client_id</code> and <code>client_secret</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorisation-service.local/token</span><br><span class="line"></span><br><span class="line">grant_type=client_credentials</span><br><span class="line">&amp;client_id=dd938314e8e1</span><br><span class="line">&amp;client_secret=20166c44bc7e</span><br><span class="line">&amp;scope=foo</span><br></pre></td></tr></table></figure><ol start="2"><li>The response could look like</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">86400</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eaabf941fbd1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2501d78c0345&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Resource requests then need to include the <code>token_type</code> and <code>access_token</code> in the authorisation header. Note the American spelling with a <code>z</code>. </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Authorization&#x27;:&#x27;Bearer eaabf941fbd1&#x27;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/">https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/</a></li><li><a href="https://aaronparecki.com/oauth-2-simplified/#client-credentials">https://aaronparecki.com/oauth-2-simplified/#client-credentials</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 Authorization Code Flow</title>
      <link href="/2020/12/oauth2-authorization-code-flow/"/>
      <url>/2020/12/oauth2-authorization-code-flow/</url>
      
        <content type="html"><![CDATA[<p>Grant Type - Authorization Code Flow, steps 1-&gt;7 are explained below.</p><p><img src="/d/oauth2-authorization-code-flow/workflow.png" alt="Grant Type - Authorization Code Flow"></p><p>The flows below assume you have registered the client (your application) and created a user. Typically registration involves a developer account at the service, answering questions about your application, uploading a logo etc.</p><p>The user is the single sign on (SSO) account. This could be Google, Facebook, Active Directory ect. </p><p>All the tokens and secrets below are overly simplified. </p><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><ol><li><p>The user opens your application at <code>https://your-application.local</code> and is not authenticated. </p></li><li><p>Your application builds an authorization URL and redirect to the authorization service at <code>https://authorisation-service.local</code></p></li></ol><ul><li><code>client_id</code> is your application id that is registered with the authorization service</li><li><code>redirect_uri</code> is the landing page on your application where the now authenticated user will be redirected to along with the <code>authorization-code</code></li><li><code>scope</code> is used for the resource access</li><li><code>state</code> is a random string</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://authorisation-service.local/authorise?</span><br><span class="line"></span><br><span class="line">response_type=code</span><br><span class="line">&amp;client_id=dd938314e8e1</span><br><span class="line">&amp;redirect_uri=https://your-application.local/authorization-code.html</span><br><span class="line">&amp;scope=foo</span><br><span class="line">&amp;state=18b1abb9830d</span><br></pre></td></tr></table></figure><ol start="3"><li><p>The user then provides the authorization service their <strong>USERNAME</strong> and <strong>PASSWORD</strong>, it then validates the users credentials. </p></li><li><p><strong>The username/password are never given back to your application</strong>. The user is then redirected back to your application based on <code>redirect_uri</code> with query parameters <code>state</code> and <code>code</code>. You must then verify the state parameter is what you passed above, so <code>18b1abb9830d=18b1abb9830d</code> to protect against <a href="https://owasp.org/www-community/attacks/csrf">Cross Site Request Forgery (CSRF)</a> attacks.</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://your-application.local/authorization-code.html?</span><br><span class="line"></span><br><span class="line">state=18b1abb9830d</span><br><span class="line">&amp;code=ca9c004f825b</span><br></pre></td></tr></table></figure><ol start="5"><li>The authorization code is then programatically sent back to <code>https://authorisation-service.local/token</code> with a POST request <strong>to exchange it for an access token</strong>. This POST includes your <code>client_secret</code></li></ol><ul><li>Its considered best practice to to include the <code>Proof Key for Code Exchange</code> (PKCE) flow here (pronounced “pixy”)</li><li>You just need to provide a <code>client_secret</code> authorization code. </li><li><code>client_secret</code> would have been provided when the client was registered.</li></ul><blockquote><p>“The key difference between the PKCE flow and the standard Authorization Code flow is users aren’t required to provide a client_secret. PKCE reduces security risks for native apps, as embedded secrets aren’t required in source code, which limits exposure to reverse engineering.” - developers.onelogin.com</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorisation-service.local/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=dd938314e8e1</span><br><span class="line">&amp;client_secret=20166c44bc7e</span><br><span class="line">&amp;code=ca9c004f825b</span><br></pre></td></tr></table></figure><ol start="6"><li>The response could look like</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">86400</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eaabf941fbd1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2501d78c0345&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>Resource requests then need to include the <code>token_type</code> and <code>access_token</code> in the authorisation header. Note the American spelling with a <code>z</code>. </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Authorization&#x27;:&#x27;Bearer eaabf941fbd1&#x27;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aaronparecki.com/oauth-2-simplified/#web-server-apps">https://aaronparecki.com/oauth-2-simplified/#web-server-apps</a></li><li><a href="https://oauth.net/2/grant-types/authorization-code/">https://oauth.net/2/grant-types/authorization-code/</a></li><li><a href="https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type">https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type</a></li><li><a href="https://developers.onelogin.com/openid-connect/guides/auth-flow-pkce">https://developers.onelogin.com/openid-connect/guides/auth-flow-pkce</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> wip </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2</title>
      <link href="/2020/12/oauth2/"/>
      <url>/2020/12/oauth2/</url>
      
        <content type="html"><![CDATA[<h3 id="Grant-Types"><a href="#Grant-Types" class="headerlink" title="Grant Types"></a>Grant Types</h3><ul><li><a href="/2020/12/oauth2-authorization-code-flow/">Authorization Code + PKCE</a> </li><li><a href="/2020/12/oauth2-client-credentials-flow/">Client Credentials</a></li><li><a href="/2021/07/oauth2-delegation-token/">Delegation</a></li><li>Implicit</li></ul><blockquote><p>“The Implicit flow was a simplified OAuth flow previously recommended for native apps and JavaScript apps where the access token was returned immediately without an extra authorization code exchange step.” - <a href="https://oauth.net/2/grant-types/implicit/">https://oauth.net/2/grant-types/implicit/</a></p></blockquote><ul><li>Password Credentials</li></ul><blockquote><p>“The Password grant type is a way to exchange a user’s credentials for an access token. Because the client application has to collect the user’s password and send it to the authorization server, it is not recommended that this grant be used at all anymore.” - <a href="https://oauth.net/2/grant-types/password/">https://oauth.net/2/grant-types/password/</a></p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.oauth.com/oauth2-servers/background/">https://www.oauth.com/oauth2-servers/background/</a></li><li><a href="https://aaronparecki.com/oauth-2-simplified/">https://aaronparecki.com/oauth-2-simplified/</a></li><li><a href="https://example-app.com/pkce">https://example-app.com/pkce</a></li><li><a href="https://www.youtube.com/watch?v=CPbvxxslDTU">https://www.youtube.com/watch?v=CPbvxxslDTU</a></li><li><a href="https://auth0.com/docs/authorization/which-oauth-2-0-flow-should-i-use">https://auth0.com/docs/authorization/which-oauth-2-0-flow-should-i-use</a></li><li><a href="https://www.oauth.com/playground/index.html">https://www.oauth.com/playground/index.html</a></li><li><a href="https://auth0.com/blog/is-building-identity-really-that-hard-a-closer-look/">https://auth0.com/blog/is-building-identity-really-that-hard-a-closer-look/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What makes a great API</title>
      <link href="/2020/11/what-makes-a-great-api/"/>
      <url>/2020/11/what-makes-a-great-api/</url>
      
        <content type="html"><![CDATA[<p>I recently did some work on a new <a href="https://dotnet.microsoft.com/apps/aspnet/apis">ASP.NET Web API</a> project using <a href="https://dotnet.microsoft.com/download/dotnet-core">.Net Core</a>. While  doing research and development I could see some themes and patterns on <code>What makes a great API</code> and decided to collate this information.</p><p>This was for a RESTful (Representational State Transfer) Web based API (hypertext-driven) with JSON resonse, this was not the API of a new class interface. I dont believe being RESTful makes your API great, SOAP (Simple Object Access Protocol) could work just as well however REST is certainly more popular today. Have a look at <a href="https://www.upwork.com/resources/soap-vs-rest-a-look-at-two-different-api-styles">SOAP vs. REST: A Look at Two Different API Styles</a>.</p><p>For the URI format see <a href="/2018/06/http-verbs/">HTTP verbs</a>.</p><h1 id="Pillars"><a href="#Pillars" class="headerlink" title="Pillars"></a>Pillars</h1><p>Clear pillars are needed for a great API, this is certainly not an exhaustive list but these stood out for me.</p><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p><strong>Dont bolt security on at the end</strong>, secure your API from the start.</p><ul><li>Use <a href="https://tools.ietf.org/html/rfc6749">OAuth 2.0</a> for authorization</li><li>Never put <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace">stack traces</a> in responses, this can disclose sensitive information</li><li>Errors must be represented in <a href="https://tools.ietf.org/html/rfc7807">Problem JSON (RFC 7807)</a> format, providing error <code>type</code> (URI), and optionally <code>title</code>, <code>status</code>, <code>detail</code> along with others.</li></ul><h2 id="Supported-amp-Well-Architected"><a href="#Supported-amp-Well-Architected" class="headerlink" title="Supported &amp; Well Architected"></a>Supported &amp; Well Architected</h2><ul><li>Use the <a href="https://swagger.io/specification/">OpenAPI specification</a></li><li>Later updates to the specification can be done at <a href="https://editor.swagger.io/">editor.swagger.io</a></li><li>Document the API first as a proposal and then implement the empty controllers and Generate the OpenAPI specification via Swashbuckle. Use the generated specification to test that the implementation respects the contract.</li><li>Write <a href="https://www.altexsoft.com/blog/api-documentation/">API documentation</a> and build API client SDKs (Software development kit) </li><li>Utilize patterns, standards, templates, and frameworks to realize the features of an API which are not domain specific.</li></ul><h2 id="Consistent"><a href="#Consistent" class="headerlink" title="Consistent"></a>Consistent</h2><ul><li>Be stateless</li><li>have a common look and feel</li><li>The number of items returned by a collection must be limited and paginated (Sorting &amp; Paging)</li><li>Fielding defined appropriate use within HTTP of the canonical verbs <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>, <code>HEAD</code>, and <code>OPTIONS</code>. So don’t change state with GET :). See <a href="/2018/06/http-verbs/">http-verbs</a> and verb notes below.</li><li>Search by criteria, examples<ul><li><code>/audits/date?start=&amp;end=</code></li><li><code>/audits/search?q=foobar</code></li></ul></li><li>HTTP header Fields should be in Hyphenated-Pascal-Case format</li><li>Date and Time values must be represented as <code>YYYY-MM-DDThh:mm:ss[.sss]Z</code> format strings.<ul><li>This is <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></li></ul></li><li>Dont use null for any represented types</li><li>Resource endpoints must use plural resource forms, example <code>/foos</code></li><li>Resources and sub-resources must be hierarchically identified, examples <ul><li><code>/&#123;resources&#125;/[resource-id]/&#123;sub-resources&#125;/[sub-resource-id]</code></li></ul></li><li>Use hyphens to to improve readability<ul><li>GOOD: <code>/&#123;resources&#125;/[resource-id]</code></li><li>BAD: <code>/&#123;resources&#125;/[resourceId]</code></li></ul></li><li>Always use lower case in URI paths</li><li>Resources naming<ul><li><strong>document</strong>, this is a single resource inside the collection. eg: <code>/&#123;resources&#125;/</code> document would be <code>resource</code></li><li><strong>collection</strong>, this is a collection of documents. eg: <code>/&#123;resources&#125;/</code></li><li><strong>store</strong>, WAT</li><li><strong>controller</strong>, this is a procedural concept / executable function with parameters. eg: <code>/&#123;resources&#125;/&#123;id&#125;/some-thing-related-to-resource/archive</code> (archive is the controller)</li></ul></li></ul><h3 id="Verb-Notes"><a href="#Verb-Notes" class="headerlink" title="Verb Notes"></a>Verb Notes</h3><p><strong>GET</strong></p><ul><li>returns <code>200</code> when the resource or collection is found, the resource or collection is returned in the body</li><li>returns <code>404</code> and no body when nothing was found </li><li>should not have a payload, if you are in a situation where you need to send heaps of data as encoded query parameters then rather use a POST with content body</li></ul><details>  <summary>GET Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /users/12345                ~ filter in user 12345</span><br><span class="line"></span><br><span class="line">RESPONSE</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;Jane Doe&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /users?name=John%20Doe      ~ filter by name, this would return an array</span><br><span class="line"></span><br><span class="line">RESPONSE</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /users                      ~ get all users</span><br><span class="line">                                ~ pagination would be sensible. ie: return 10 users at page 1</span><br><span class="line"></span><br><span class="line">RESPONSE</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: 2,</span><br><span class="line">    &quot;name&quot;: &quot;Jane Doe&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;jane.doe@example.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /users                     ~ example of how pagination can be added </span><br><span class="line">                               ~ with new props `items` and `links`</span><br><span class="line"></span><br><span class="line">RESPONSE</span><br><span class="line">&#123;</span><br><span class="line">  &quot;items&quot;: [</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  &quot;links&quot;: &#123;</span><br><span class="line">    &quot;next&quot;: &quot;/users?page=2&quot;,</span><br><span class="line">    &quot;previous&quot;: &quot;/users?page=1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><br/><p><strong>PUT</strong></p><ul><li>used to do a resource update, complete content is provided </li><li>sometimes partial resource is provided (here you should consider a PATCH)</li><li>returns <code>200</code> if the update was completed and no body, generally rather return <code>204</code> No Content</li><li>returns <code>201</code> if something was created (here you should consider a POST)</li></ul><details>  <summary>PUT Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /users/12345</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Body:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 12345,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RESPONSE (if you return a body)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 12345,</span><br><span class="line">  &quot;name&quot;: &quot;Jane Doe&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><br/><p>This request will replace the entire user resource with the new data.</p><p><strong>POST</strong></p><ul><li>used to create a single complete resource, not idempotent</li><li>returns <code>200</code> if successful, the resource or collection is returned in the body</li><li>returns <code>201</code> if something was created, the resource or collection is returned in the body</li><li>returns <code>202</code> if the request was accepted and will be completed later</li><li>returns <code>204</code> with <code>Location</code> header if the resource is not returned</li></ul><details>  <summary>POST Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /users</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Body:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RESPONSE (if you return a body)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 12346,</span><br><span class="line">  &quot;name&quot;: &quot;Jane Doe&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;jane.doe@example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><br/><p><strong>PATCH</strong></p><ul><li>used to do a resource update, partial content is provided</li></ul><p>The main difference between HTTP PATCH and PUT is that PATCH is used for partial updates to a resource, while PUT is used for full updates. This means that with PATCH, you can send only the data that you want to update, without having to send the entire resource again. With PUT, you must send the entire resource, even if you only want to update a small part of it.</p><details>  <summary>PATCH Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PATCH /users/12345</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Body:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RESPONSE (if you return a body)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 12345,</span><br><span class="line">  &quot;name&quot;: &quot;Jane Doe&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><br/><p>This request will update the user’s name to “John Doe”, without modifying any of their other data.</p><p><strong>DELETE</strong></p><ul><li>used to delete a resource</li><li>returns <code>200</code> with the deleted resource in the body</li><li>returns <code>204</code> if you dont wish to return the deleted resource</li><li>returns <code>404</code> if the resource you wanted to delete was not found</li><li>returns <code>410</code> if the resource was already deleted</li></ul><details>  <summary>DELETE Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE /users/12345</span><br><span class="line"></span><br><span class="line">RESPONSE (if you are not returning a body)</span><br><span class="line">HTTP/1.1 204 No Content</span><br></pre></td></tr></table></figure></details><br/><p><strong>HEAD</strong></p><ul><li>used to retrieve header information, often used by web crawlers to check the availability and last modification date of resources before downloading them</li><li>its the same as a GET but only returns header and never a body</li></ul><details>  <summary>HEAD Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HEAD /index.html</span><br><span class="line"></span><br><span class="line">RESPONSE</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Last-Modified: Tue, 29 Aug 2023 15:55:18 GMT</span><br><span class="line">Content-Length: 1024</span><br></pre></td></tr></table></figure></details><br/><p><strong>OPTIONS</strong></p><ul><li>used to inspect the avalible operations (so the HTTP verbs) of a given endpoint</li></ul><details>  <summary>OPTIONS Examples</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /users HTTP/1.1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS</span><br></pre></td></tr></table></figure></details><br/><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><ul><li>Allow to scale horizontally by using Docker containers and orchestration software like <a href="https://aws.amazon.com/kubernetes">Kubernetes</a></li><li>Rate limit client requests using HTTP Status Code <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429">429 Too Many Requests</a></li></ul><h2 id="Ability-to-change"><a href="#Ability-to-change" class="headerlink" title="Ability to change"></a>Ability to change</h2><ul><li>Avoid breaking changes, dont remove fields/methods/add additional validations</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/">https://swagger.io/resources/articles/adopting-an-api-first-approach/</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api">https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api</a></li><li><a href="http://spec.openapis.org/oas/v3.0.3">http://spec.openapis.org/oas/v3.0.3</a></li><li><a href="https://tools.ietf.org/html/rfc3339">https://tools.ietf.org/html/rfc3339</a></li><li><a href="https://tools.ietf.org/html/rfc7807">https://tools.ietf.org/html/rfc7807</a></li><li><a href="https://www.elastic.io/6-characteristics-of-great-api/">https://www.elastic.io/6-characteristics-of-great-api/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anti Patterns</title>
      <link href="/2020/11/anti-pattern/"/>
      <url>/2020/11/anti-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>I’ve been pretty focused on learning <a href="/tags/patterns-principles/">software patterns</a> and only recently learnt that what I perceived as <code>bad code</code> can sometimes actually called an <a href="https://en.wikipedia.org/wiki/Anti-pattern">Anti Pattern</a>.</p><blockquote><p>“An anti-pattern is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive.” - wikipedia.org</p></blockquote><h3 id="Golden-Hammer-Anti-pattern"><a href="#Golden-Hammer-Anti-pattern" class="headerlink" title="Golden Hammer Anti-pattern"></a>Golden Hammer Anti-pattern</h3><p>This is the repetitive use of one pattern that has worked amazingly in some applications however is not the best fit for your current problem domain.</p><blockquote><p>“ … everything always ends up using this architecture. A flat head screw? Hammer. Phillips head screw? Hammer. You need an Allen wrench? No you don’t, hammer it.” - freecodecamp.org</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.freecodecamp.org/news/antipatterns-to-avoid-in-code/">https://www.freecodecamp.org/news/antipatterns-to-avoid-in-code/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> anti pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serilog</title>
      <link href="/2020/11/serilog/"/>
      <url>/2020/11/serilog/</url>
      
        <content type="html"><![CDATA[<p>Serilog is an alternative logging implementation that plugs into ASP.NET Core.</p><blockquote><p>“Like many other libraries for .NET, Serilog provides diagnostic logging to files, the console, and elsewhere. It is easy to set up, has a clean API, and is portable between recent .NET platforms.”</p></blockquote><h3 id="Setup-for-Net-Core-3"><a href="#Setup-for-Net-Core-3" class="headerlink" title="Setup for .Net Core 3"></a>Setup for .Net Core 3</h3><ol><li>Install packages</li></ol><ul><li><a href="https://www.nuget.org/packages/serilog.aspnetcore">Serilog.AspNetCore 3.4.0</a>, this is the core logger</li><li><a href="https://github.com/serilog/serilog-expressions">Serilog.Expressions 1.0.0</a>, can be used to filter, see Exclude Logging below.</li><li><a href="https://github.com/serilog/serilog-formatting-compact">Serilog.Formatting.Compact 1.1.0</a>, reduce the log byte count. see <code>formatter</code> in the json config below</li><li><a href="https://github.com/serilog/serilog-settings-configuration">Serilog.Settings.Configuration 3.1.0</a>, provides extension methods to read config</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Serilog.AspNetCore</span><br></pre></td></tr></table></figure><ol start="2"><li>Initialization with top-level <code>try/catch</code> block in <code>Program.cs</code></li></ol><ul><li>Doing it this way catches any start up errors and closes high level streams with <code>CloseAndFlush</code></li><li><code>Log.x</code> static instances can also be used through-out the application however Im a fan of rather using dependancy injection so the coupling is to the <code>ILogger</code> interface.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">        .Enrich.FromLogContext()</span><br><span class="line">        .WriteTo.Console()</span><br><span class="line">        .CreateLogger();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Information(<span class="string">&quot;START UP&quot;</span>);</span><br><span class="line">        CreateHostBuilder(args).Build().Run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.Fatal(ex, <span class="string">&quot;APPLICATION EXEPTION AT START UP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Remove <code>LoggerConfiguration</code> instantiation from <code>Main</code> in <code>Program.cs</code> and rather use <code>UseSerilog()</code> in <code>CreateHostBuilder()</code>. This comes from <a href="https://github.com/serilog/serilog-settings-configuration">Serilog.Settings.Configuration</a></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateHostBuilder(args).Build().Run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.Fatal(ex, <span class="string">&quot;APPLICATION EXEPTION AT START UP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureAppConfiguration(ConfigureAppLogging)     <span class="comment">// Serilog configuration is done in `ConfigureAppLogging` and not the `webBuilder`</span></span><br><span class="line">        .UseSerilog()                                       <span class="comment">// Sets Serilog as the logging provider. </span></span><br><span class="line">        .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            webBuilder.UseStartup&lt;Startup&gt;();               <span class="comment">// You dont have to do any manual DI in `Startup`, `UseSerilog()` above creates an instance of `ILogger&lt;T&gt;` for you</span></span><br><span class="line">        &#125;);      </span><br></pre></td></tr></table></figure><p>4.1 The <code>Serilog</code> configuration can then either be read from <code>appSettings.json</code> in the <code>Serilog:</code> key/value</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConfigureAppLogging</span>(<span class="params">IConfigurationBuilder config</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">        .ReadFrom.Configuration(config.Build())</span><br><span class="line">        .CreateLogger();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>This default config is from <a href="https://github.com/serilog/serilog-settings-configuration">https://github.com/serilog/serilog-settings-configuration</a> with some added configuration.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Serilog&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Using&quot;</span><span class="punctuation">:</span>  <span class="punctuation">[</span> <span class="string">&quot;Serilog.Sinks.Console&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Serilog.Sinks.File&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;MinimumLevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;WriteTo&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Console&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;formatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span>          </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;File&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Logs/log.txt&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Enrich&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;FromLogContext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;WithMachineName&quot;</span><span class="punctuation">,</span> <span class="string">&quot;WithThreadId&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Destructure&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;With&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;policy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sample.CustomPolicy, Sample&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ToMaximumDepth&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;maximumDestructuringDepth&quot;</span><span class="punctuation">:</span> <span class="number">4</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ToMaximumStringLength&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;maximumStringLength&quot;</span><span class="punctuation">:</span> <span class="number">100</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ToMaximumCollectionCount&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;maximumCollectionCount&quot;</span><span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Application&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sample&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Its a good idea to also include <code>MinimumLevel</code> -&gt; <code>Override</code> overrides</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Override&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Microsoft&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;System&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Error&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>4.2 Alternatively if you dont have different configurations per environment you can just use <code>Serilog</code>‘s fluent api and configure the logging in code.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConfigureAppLogging</span>(<span class="params">IConfigurationBuilder config</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">        .WriteTo.Console(<span class="keyword">new</span> CompactJsonFormatter())</span><br><span class="line">        .WriteTo.File(<span class="string">@&quot;Logs\log.txt&quot;</span>, rollingInterval: RollingInterval.Day)</span><br><span class="line">        .CreateLogger();</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><ol start="5"><li>Delete all remnants of the default logger in <code>appSettings.json</code>, this is <code>Logging</code> key/values shown below.</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Microsoft&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>Add Serilog to the applications middleware pipeline in <code>Startup.cs</code> for the <code>Configure()</code> method, this will enable log events per request.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseSerilogRequestLogging();</span><br></pre></td></tr></table></figure><ol start="7"><li>You can then use the <code>ILogger&lt;T&gt;</code> instance using constructor injection and resolve with <code>using Microsoft.Extensions.Logging;</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;FooController&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooController</span>(<span class="params">ILogger&lt;FooController&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;FOO INDEX RUN!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h3 id="Exclude-Logging"><a href="#Exclude-Logging" class="headerlink" title="Exclude Logging"></a>Exclude Logging</h3><p>Tools like kubernetes need to know if the container is alive, the simplest way to do this is though a <code>ping</code> endpoint that doesnt have any <a href="/tags/authentication/">authentication</a>. </p><p>Logging these requests is just noise, so you can exclude this in your <a href="https://github.com/serilog/serilog-settings-configuration">serilog settings configuration</a> file using the <code>Filter</code> node and <a href="https://www.nuget.org/packages/Serilog.Expressions/">Serilog.Expressions</a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Serilog&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Using&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Serilog.Expressions&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ByExcluding&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;expression&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RequestPath like &#x27;/ping&#x27;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://serilog.net/">https://serilog.net/</a></li><li><a href="https://blog.datalust.co/serilog-tutorial/">https://blog.datalust.co/serilog-tutorial/</a></li><li><a href="https://nblumhardt.com/2019/10/serilog-in-aspnetcore-3/">https://nblumhardt.com/2019/10/serilog-in-aspnetcore-3/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon S3</title>
      <link href="/2020/11/aws-s3/"/>
      <url>/2020/11/aws-s3/</url>
      
        <content type="html"><![CDATA[<h3 id="S3-vs-S3-Glacier"><a href="#S3-vs-S3-Glacier" class="headerlink" title="S3 vs S3 Glacier"></a>S3 vs S3 Glacier</h3><blockquote><p>“S3: Amazon Simple Storage Service (Amazon S3) is storage for the internet. You can use Amazon S3 to store and retrieve any amount of data at any time, from anywhere on the web.”</p></blockquote><blockquote><p>“S3 Glacier: Low-cost storage service that provides highly secure, durable, and flexible storage for data archiving and online backup.”</p></blockquote><h3 id="Code-Examples"><a href="#Code-Examples" class="headerlink" title="Code Examples"></a>Code Examples</h3><p>The following are the interface definitions for a <a href="https://carlpaton.github.io/2020/02/facade-pattern/">facade</a> I built using the <a href="https://aws.amazon.com/sdk-for-net/">AWS SDK for .NET</a>. For me it made sense to create two responsibilities <a href="https://github.com/carlpaton/AwsAdministrator/blob/master/src/AwsAdmin.Application/S3/Interface/IBucketService.cs">IBucketService</a> to manage the bucket itself and <a href="https://github.com/carlpaton/AwsAdministrator/blob/master/src/AwsAdmin.Application/S3/Interface/IBucketObjectService.cs">IBucketObjectService</a> to manage the content in the bucket.</p><h2 id="Bucket-Service"><a href="#Bucket-Service" class="headerlink" title="Bucket Service"></a>Bucket Service</h2><p><strong>Interface</strong>: <code>IBucketService</code></p><h3 id="PutBucketAsync"><a href="#PutBucketAsync" class="headerlink" title="PutBucketAsync"></a>PutBucketAsync</h3><p>Creates the given bucket, note that buckets are globally unique in name.<br>Will throw if the bucket already exists:</p><ul><li><p><code>Amazon.S3.AmazonS3Exception : Your previous request to create the named bucket succeeded and you already own it.</code></p></li><li><p><code>Amazon.S3.AmazonS3Exception : The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.</code></p></li><li><p><code>bucketName</code> - Globally unique bucket name</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;PutBucketResponse&gt; <span class="title">PutBucketAsync</span>(<span class="params"><span class="built_in">string</span> bucketName</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="ListBucketsAsync"><a href="#ListBucketsAsync" class="headerlink" title="ListBucketsAsync"></a>ListBucketsAsync</h3><p>Gets a list of buckets for the authenticated user</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;ListBucketsResponse&gt; <span class="title">ListBucketsAsync</span>()</span>;</span><br></pre></td></tr></table></figure><p>CLI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 ls</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html">https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html</a></li></ul><h3 id="DeleteBucketAsync"><a href="#DeleteBucketAsync" class="headerlink" title="DeleteBucketAsync"></a>DeleteBucketAsync</h3><p>Deletes the given bucket, will throw if its not empty.</p><ul><li><code>Amazon.S3.AmazonS3Exception : The bucket you tried to delete is not empty</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;DeleteBucketResponse&gt; <span class="title">DeleteBucketAsync</span>(<span class="params"><span class="built_in">string</span> bucketName</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/DeletingOneObjectUsingNetSDK.html">https://docs.aws.amazon.com/AmazonS3/latest/dev/DeletingOneObjectUsingNetSDK.html</a></li></ul><h2 id="Bucket-Object-Service"><a href="#Bucket-Object-Service" class="headerlink" title="Bucket Object Service"></a>Bucket Object Service</h2><p><strong>Interface</strong>: <code>IBucketObjectService</code></p><h3 id="GetPreSignedURL"><a href="#GetPreSignedURL" class="headerlink" title="GetPreSignedURL"></a>GetPreSignedURL</h3><p>Create a signed URL allowing access to a resource that would usually require authentication.</p><ul><li><code>expireInHours</code> hours in the future in which the URL will expire</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetPreSignedURL</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key, <span class="built_in">double</span> expireInHours</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/S3/MS3GetPreSignedURLGetPreSignedUrlRequest.html">https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/S3/MS3GetPreSignedURLGetPreSignedUrlRequest.html</a></li></ul><h3 id="PutTextObjectAsync"><a href="#PutTextObjectAsync" class="headerlink" title="PutTextObjectAsync"></a>PutTextObjectAsync</h3><p>Put the plaintext object in the S3 bucket. The content type will be set to ‘text/plain’.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;PutObjectResponse&gt; <span class="title">PutTextObjectAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key, <span class="built_in">string</span> contentBody</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">Object Tagging</a></li><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-metadata">Object Metadata</a></li></ul><h3 id="GetObjectAsync"><a href="#GetObjectAsync" class="headerlink" title="GetObjectAsync"></a>GetObjectAsync</h3><p>Get the value of the object on the bucket by reading <code>response.ResponseStream</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;GetObjectResponse&gt; <span class="title">GetObjectAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="GetObjectMetadataAsync"><a href="#GetObjectMetadataAsync" class="headerlink" title="GetObjectMetadataAsync"></a>GetObjectMetadataAsync</h3><p>Retrieves metadata from an object without returning the object itself.</p><p>I think this is used as HTTP header data.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;GetObjectMetadataResponse&gt; <span class="title">GetObjectMetadataAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="DeleteObjectAsync"><a href="#DeleteObjectAsync" class="headerlink" title="DeleteObjectAsync"></a>DeleteObjectAsync</h3><p>Deletes the given object (key).</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;DeleteObjectResponse&gt; <span class="title">DeleteObjectAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="GetObjectTaggingAsync"><a href="#GetObjectTaggingAsync" class="headerlink" title="GetObjectTaggingAsync"></a>GetObjectTaggingAsync</h3><p>Gets the tags as <code>response.Tagging</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;GetObjectTaggingResponse&gt; <span class="title">GetObjectTaggingAsync</span>(<span class="params"><span class="built_in">string</span> bucketName, <span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="ListObjectsAsync"><a href="#ListObjectsAsync" class="headerlink" title="ListObjectsAsync"></a>ListObjectsAsync</h3><p>Gets data about the objects as <code>response.S3Objects</code> where <code>.Key</code> is the filename</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;ListObjectsResponse&gt; <span class="title">ListObjectsAsync</span>(<span class="params"><span class="built_in">string</span> bucketName</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aws.amazon.com/s3/">https://aws.amazon.com/s3/</a></li><li><a href="https://docs.aws.amazon.com/s3/index.html">https://docs.aws.amazon.com/s3/index.html</a></li><li><a href="https://github.com/carlpaton/AwsAdministrator/tree/master/src/AwsAdmin.Application/S3">https://github.com/carlpaton/AwsAdministrator/tree/master/src/AwsAdmin.Application/S3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Malva Pudding</title>
      <link href="/2020/11/malva-pudding/"/>
      <url>/2020/11/malva-pudding/</url>
      
        <content type="html"><![CDATA[<p>Amazing malva pudding recipe my mother in law borrowed from <a href="https://en.wikipedia.org/wiki/Oprah_Winfrey">Oprah</a> :)</p><p><strong>Baking time :</strong> 40-50 minutes until firm.</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><p><em>Cake</em></p><ul><li>1 cup brown sugar</li><li>1 egg</li><li>1 table spoon butter</li><li>4 table spoons apricot jam</li><li>1 cup milk</li><li>2 tea spoons vinigar</li><li>2 tea spoons vanilla essence</li><li>1 cup cake flour</li><li>1 tea spoon bicarb of soda</li></ul><p><em>Sauce</em></p><ul><li>1 cup cream</li><li>7 table spoons butter</li><li>1/2 cup sugar</li><li>1/4 cup water</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Grease oven proof dish.</p><ol><li>Beat together the sugar, egg, butter and apricot jam.</li><li>Combine in the milk, vinigar, vanilla essence and bicarb of soda</li><li>Sift in the cake flour and combine</li><li>Pour batter into dish and cover with foil</li><li>Bake 40 to 50 minutes until firm</li><li>Combine sauce over high heat bringing to boil</li><li>Pour the sauce over the cooked cake and allow to soak </li><li>Serve warm with dollops of vanilla ice cream</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.oprah.com/food/malva-pudding">https://www.oprah.com/food/malva-pudding</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon Dynamodb</title>
      <link href="/2020/11/aws-dynamodb/"/>
      <url>/2020/11/aws-dynamodb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. - docs.aws.amazon.com</p></blockquote><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html">What Is Amazon DynamoDB?</a></li></ul><h2 id="Programming-Interfaces"><a href="#Programming-Interfaces" class="headerlink" title="Programming Interfaces"></a>Programming Interfaces</h2><p>There are are 3 <a href="https://aws.amazon.com/blogs/developer/dynamodb-apis/">programming interfaces</a> each have their own use case.</p><h3 id="Low-Level-Interfaces"><a href="#Low-Level-Interfaces" class="headerlink" title="Low-Level Interfaces"></a>Low-Level Interfaces</h3><blockquote><p>The low-level programming model wraps direct calls to the DynamoDB service. You access this model through the Amazon.DynamoDBv2 namespace.</p></blockquote><ul><li><a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/dynamodb-intro.html#dynamodb-intro-apis-low-level">Low-Level Model</a></li><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LowLevelDotNetItemCRUD.html">Working with Items: .NET</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------- client</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> AmazonDynamoDBConfig()</span><br><span class="line">&#123;</span><br><span class="line">    ServiceURL = <span class="string">&quot;http://localhost:4001&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This expects `access key` and `secret access key` to either be set in:</span></span><br><span class="line"><span class="comment">// the system file .aws\credentials</span></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="comment">// as environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`</span></span><br><span class="line">_client = AmazonDynamoDBClient(config);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- GetItemAsync</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,AttributeValue&gt;() &#123; &#123; <span class="string">&quot;Id&quot;</span>, <span class="keyword">new</span> AttributeValue &#123; N = <span class="string">&quot;42&quot;</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> GetItemRequest</span><br><span class="line">&#123;</span><br><span class="line">    TableName = _dynamoDbOptions.TableName,</span><br><span class="line">    Key = key</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the item attributes for the given key</span></span><br><span class="line">_client.GetItemAsync(request);</span><br></pre></td></tr></table></figure><h3 id="Document-Interfaces"><a href="#Document-Interfaces" class="headerlink" title="Document Interfaces"></a>Document Interfaces</h3><blockquote><p>The document programming model provides an easier way to work with data in DynamoDB. This model is specifically intended for accessing tables and items in tables. You access this model through the Amazon.DynamoDBv2.DocumentModel namespace.</p></blockquote><ul><li><a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/dynamodb-intro.html#dynamodb-intro-apis-document">Document Model</a></li><li><a href="https://benfoster.io/blog/20200615-querying-a-dynamodb-partition-with-dotnet/">Querying and paging a DynamoDB Partition using .NET</a></li></ul><h3 id="Object-Persistence-Interface"><a href="#Object-Persistence-Interface" class="headerlink" title="Object Persistence Interface"></a>Object Persistence Interface</h3><blockquote><p>The object persistence programming model is specifically designed for storing, loading, and querying .NET objects in DynamoDB. You access this model through the Amazon.DynamoDBv2.DataModel namespace.</p></blockquote><ul><li><a href="https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/dynamodb-intro.html#dynamodb-intro-apis-object-persistence">Object Persistence Model</a></li><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBContext.QueryScan.html">Example: Query and Scan in DynamoDB Using the AWS SDK for .NET Object Persistence Model</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------- client and di</span></span><br><span class="line"><span class="keyword">using</span> Amazon.DynamoDBv2;</span><br><span class="line"><span class="keyword">using</span> Amazon.DynamoDBv2.DataModel;</span><br><span class="line"><span class="keyword">using</span> Amazon.Extensions.NETCore.Setup;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="comment">// creating the client as part of the .net application startup using IServiceCollection</span></span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> AWSOptions();</span><br><span class="line">options.DefaultClientConfig.ServiceURL = <span class="string">&quot;http://localhost:4001&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> DynamoDBOperationConfig</span><br><span class="line">&#123;</span><br><span class="line">    TableNamePrefix = <span class="string">&quot;Porky-&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">services.AddAWSService&lt;IAmazonDynamoDB&gt;(options);</span><br><span class="line">services.AddSingleton&lt;IDynamoDBContext&gt;(p =&gt; ActivatorUtilities.CreateInstance&lt;DynamoDBContext&gt;(p, config));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- creating the client manually could be used with integration tests</span></span><br><span class="line"><span class="keyword">var</span> dynamoDBContextConfig = <span class="keyword">new</span> DynamoDBContextConfig()</span><br><span class="line">&#123;</span><br><span class="line">    TableNamePrefix = <span class="string">&quot;Porky-&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> amazonDynamoDBConfig = <span class="keyword">new</span> AmazonDynamoDBConfig()</span><br><span class="line">&#123;</span><br><span class="line">    ServiceURL = <span class="string">&quot;http://localhost:4001&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> AmazonDynamoDBClient(amazonDynamoDBConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This expects `access key` and `secret access key` to either be set in:</span></span><br><span class="line"><span class="comment">// the system file .aws\credentials</span></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="comment">// as environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DynamoDBContext(client, dynamoDBContextConfig);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- LoadAsync</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> _dynamoDbContext.LoadAsync&lt;MyTableSchema&gt;(keyId);</span><br></pre></td></tr></table></figure><p>Where the class <code>MyTableSchema</code> is defined below. Note that <code>DynamoDBHashKey</code> is the partition key.</p><p>Optionally we can add <code>DynamoDBRangeKey</code> as a sort key.</p><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DeclarativeTagsList.html">DynamoDB Attributes</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DynamoDBTable(<span class="string">&quot;Audit&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyTableSchema</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DynamoDBHashKey</span>] </span><br><span class="line">    <span class="keyword">public</span> Guid KeyId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DynamoDBProperty</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> SomeString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">DynamoDBProperty</span>]</span><br><span class="line">    <span class="keyword">public</span> Guid SomeGuid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamoDBHashKey,DynamoDBRangeKey and DynamoDBProperty can also include enums using <code>IPropertyConverter</code> implemented in <code>MyEnumConverter</code></p><p>See <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBContext.ArbitraryDataMapping.html">Mapping Arbitrary Data with DynamoDB Using the AWS SDK for .NET Object Persistence Model</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DynamoDBProperty(typeof(MyEnumConverter))</span>]</span><br><span class="line"><span class="keyword">public</span> MyEnum MyEnum &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h2><p>Two types of Primary Keys and their valid data types are <code>String</code>, <code>Number</code> and <code>Binary</code>. All the examples below use the table <code>Music</code></p><h3 id="Partition-Key"><a href="#Partition-Key" class="headerlink" title="Partition Key"></a>Partition Key</h3><p><code>Artists</code> Partition/Primary/Hash key by itself, it must be unique in the table. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Artists&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Celine Dion&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Composite-primary-key"><a href="#Composite-primary-key" class="headerlink" title="Composite primary key"></a>Composite primary key</h3><p>Combination of partition Key and a sort/range key which makes it a composite key. Individually, the partition key and the sort/range key does not need to be unique, but the combination of both which makes it into a primary key needs to be unique.</p><p><code>Artists</code> Partition/Primary/Hash key and <code>Songtitle</code> Sort key. This allows for a query like <code>Artists = &#39;Celine Dion&#39; &amp; Songtitle = &#39;My Heart Will Go On&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Artists&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Celine Dion&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Songtitle&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;My Heart Will Go On&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Indexes"><a href="#Indexes" class="headerlink" title="Indexes"></a>Indexes</h2><p>When you need to query data and the current <code>Partition/Primary/Hash</code> key and/or <code>sort/range</code> keys are not enough - and you dont want to perform a db scan (ie: loop though all the data in the table) the you can add additional indexes.</p><h3 id="Global-secondary-index-GSI"><a href="#Global-secondary-index-GSI" class="headerlink" title="Global secondary index (GSI)"></a>Global secondary index (GSI)</h3><ul><li>Simple or composite</li><li>Can be created after the table is created</li><li>Max GSI per table is 20</li><li>Results in additional writes (cost)</li><li>Keep WCU (write capacity units) on GSI &gt;= WCU on main table</li></ul><p>An index with a partition key and sort key that can be different from those on the table. If you need to query on <code>Genre</code> you would create a <code>GenreIndex</code> and then query on <code>Genre=Pop</code>.</p><p>This means <code>Genre</code> is now a partition key for <code>GenreIndex</code> (its a new table that is automagically kept in sync) - anything needed to be returned when querying on the index is defined with <code>Projection</code>. If you ask for attributes not in the projection dynamo will do a Fetch, the default Projection is ALL.</p><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/getting-started-step-6.html">Create a Global Secondary Index</a></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Music Table</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Artists&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Celine Dion&quot;</span><span class="punctuation">,</span> <span class="comment">// Partition key</span></span><br><span class="line">    <span class="attr">&quot;Songtitle&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;My Heart Will Go On&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Genre&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pop&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AlbumTitle&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Let&#x27;s Talk About Love&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Year&quot;</span> <span class="punctuation">:</span> <span class="number">2007</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GenreIndex (GSI)</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Genre&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pop&quot;</span><span class="punctuation">,</span> <span class="comment">// Partition key</span></span><br><span class="line">    <span class="comment">// and any projected attributes</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Local-secondary-index-LSI"><a href="#Local-secondary-index-LSI" class="headerlink" title="Local secondary index (LSI)"></a>Local secondary index (LSI)</h3><ul><li>Only composite</li><li>Must be created with the table</li><li>Esentially extends the functionality of the <code>sort/range key</code> to other attributes so you can perform more optimal queries</li><li>You need to know the <code>Partition key</code> value</li><li>Soft limit of 5 LSI</li><li>There is no additional cost for LSI’s</li></ul><p>An index that has the same partition key as the table, but a different sort key. So when the LSI has <code>Artists</code> as partition key and <code>Year</code> as sort key, you can get a list of records with <code>Artists = &#39;Celine Dion&#39; &amp; Year &gt; 2000</code></p><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.SecondaryIndexes">Secondary Indexes</a></li><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LCICli.html">Working with Local Secondary Indexes: AWS CLI</a></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Music Table</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Artists&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Celine Dion&quot;</span><span class="punctuation">,</span> <span class="comment">// Partition key</span></span><br><span class="line">    <span class="attr">&quot;Songtitle&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;My Heart Will Go On&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Genre&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pop&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AlbumTitle&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Let&#x27;s Talk About Love&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Year&quot;</span> <span class="punctuation">:</span> <span class="number">2007</span> <span class="comment">// LSI</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Locking"><a href="#Locking" class="headerlink" title="Locking"></a>Locking</h2><p>The SDK provides some settings that we can simply turn on/off. Consistent Read is one of them.</p><h3 id="Consistent-Read"><a href="#Consistent-Read" class="headerlink" title="Consistent Read"></a>Consistent Read</h3><p><code>Eventually consistent reads</code> - By default is when you read data from a table, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If you repeat your read request after a short time, the response should return the latest data.</p><p><code>Strongly consistent reads</code> - When you request a strongly consistent read, DynamoDB returns a response with the most up-to-date data, reflecting the updates from all prior write operations that were successful.<br>but it has a higher latency and it uses more throughput capacity</p><h3 id="Optimistic-Locking"><a href="#Optimistic-Locking" class="headerlink" title="Optimistic Locking"></a>Optimistic Locking</h3><p>This can be easily enabled/disabled in the table.</p><p>We can add a version number column to our table to enable optimistic locking. When updating the item, it checks whether the version of the item matches the one stored in DynamoDB. If not, it throws exception. If version is the same, DynamoDB updates the record and automatically increments the version number.</p><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.OptimisticLocking.html">Optimistic Locking with Version Number</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DynamoDBVersion</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>? VersionNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a></li></ul><h3 id="Scalar-Types"><a href="#Scalar-Types" class="headerlink" title="Scalar Types"></a>Scalar Types</h3><p>Scalar Types represent exactly one value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Number</span><br><span class="line">String</span><br><span class="line">Binary             // base 64 encoded</span><br><span class="line">Boolean</span><br><span class="line">Null</span><br></pre></td></tr></table></figure><h3 id="Document-Types"><a href="#Document-Types" class="headerlink" title="Document Types"></a>Document Types</h3><p>Can represent a complex structure with nested attributes such as a JSON document.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List, can be a combination of data types</span></span><br><span class="line">MyCoolList <span class="punctuation">[</span><span class="string">&quot;Foo&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Bar&quot;</span><span class="punctuation">,</span> <span class="number">42</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map, complext object</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    Pineapple<span class="punctuation">:</span> <span class="string">&quot;Pen&quot;</span></span><br><span class="line">    Notes<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="attr">&quot;Do&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Better&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            Thing <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                Id <span class="punctuation">:</span> <span class="number">42</span></span><br><span class="line">                Message <span class="punctuation">:</span> <span class="string">&quot;The answer&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Set-Types"><a href="#Set-Types" class="headerlink" title="Set Types"></a>Set Types</h3><p>Can represent multiple scalar values, the types in the set need to be the same, else it needs to be a <code>List</code> type</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String Set</span></span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;Foo&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Bar&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Biz&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Bat&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number Set</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">-42</span><span class="punctuation">,</span> <span class="number">42</span><span class="punctuation">,</span> <span class="number">142</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Binary Set</span></span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;NDI=&quot;</span><span class="punctuation">,</span> <span class="string">&quot;bGlmZQ==&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>Thew binary sets are <a href="https://www.base64encode.org/">base64 encoded</a>.</p><ul><li><code>NDI=</code> = 42</li><li><code>bGlmZQ==</code> = life</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Parameter Sniffing</title>
      <link href="/2020/11/sql-parameter-sniffing/"/>
      <url>/2020/11/sql-parameter-sniffing/</url>
      
        <content type="html"><![CDATA[<p>This was a super wierd problem where SQL was perfoming poorly however the table in question had indexes on the columns we were filtering on and they were not fragmented.</p><table><thead><tr><th>Table</th><th>Column</th><th align="center">Indexed</th><th align="center">Fragmented</th></tr></thead><tbody><tr><td>foo</td><td>some_email</td><td align="center">yes</td><td align="center">no</td></tr><tr><td>foo</td><td>user_id</td><td align="center">yes</td><td align="center">no</td></tr></tbody></table><p>What we found was that in some cases <code>some_email</code> was null and <code>user_id</code> was not (and vice-versa). Then for that sql command text execution the index used was on the <code>null</code> value.</p><p>So simplifying the SQL statements they would look like this:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dbo.foo <span class="keyword">where</span> some_email <span class="operator">=</span> <span class="keyword">null</span> <span class="keyword">and</span> user_id <span class="operator">=</span> <span class="number">123</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dbo.foo <span class="keyword">where</span> some_email <span class="operator">=</span> <span class="string">&#x27;biz@bat.com&#x27;</span> <span class="keyword">and</span> user_id <span class="operator">=</span> <span class="keyword">null</span> </span><br></pre></td></tr></table></figure><p>The SQL statement in the stored procedure checked the parameter is null before using it, for some reason SQL Server then decided that was the indexed column we wanted to filter on even when that value was not null. It seemed to work the first time and not on subsequent requests. Wierd.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> dbo.foo</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="variable">@someEmail</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> foo.some_email <span class="operator">=</span> <span class="variable">@someEmail</span>)</span><br><span class="line"><span class="keyword">AND</span> (<span class="variable">@userId</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> s.user_id <span class="operator">=</span> <span class="variable">@userId</span>)</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/set-statistics-io-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/statements/set-statistics-io-transact-sql?view=sql-server-ver15</a></li></ul><p>Causes SQL Server to display information about the amount of disk activity generated by Transact-SQL statements.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SET STATISTICS TIME, IO ON</span><br><span class="line"></span><br><span class="line">run query and check messages</span><br><span class="line"></span><br><span class="line">look for scans (BAD)</span><br><span class="line">look for logical reads</span><br><span class="line">look for physical reads (anything here means you are not using in memory)</span><br><span class="line"></span><br><span class="line">generally over 10 000 is bad</span><br></pre></td></tr></table></figure><h3 id="Quick-Fix"><a href="#Quick-Fix" class="headerlink" title="Quick Fix"></a>Quick Fix</h3><p>What we needed was for the <code>null</code> filters to be removed as in this case, null was pointless and we needed data based on <code>some_email</code> or <code>user_id</code>.</p><h3 id="Extract-the-command-text-into-the-application"><a href="#Extract-the-command-text-into-the-application" class="headerlink" title="Extract the command text into the application"></a>Extract the command text into the application</h3><p>Before</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = connection.QueryMultiple(<span class="string">&quot;Foo_Read&quot;</span>, <span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">    someEmail = someEmail,</span><br><span class="line">    userId = userId</span><br><span class="line">&#125;, commandType: CommandType.StoredProcedure);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = reader.Read().ToList();</span><br></pre></td></tr></table></figure><p>After</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fooQuery = sb.AddTemplate(<span class="string">@&quot;</span></span><br><span class="line"><span class="string">        SELECT *</span></span><br><span class="line"><span class="string">        FROM</span></span><br><span class="line"><span class="string">            dbo.Foo f</span></span><br><span class="line"><span class="string">        /**where**/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(someEmail))</span><br><span class="line">&#123;</span><br><span class="line">    sb.Where(<span class="string">&quot;f.some_email = @someEmail&quot;</span>, <span class="keyword">new</span> &#123; someEmail = someEmail &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (userId != <span class="literal">null</span> &amp;&amp; userId != Guid.Empty)</span><br><span class="line">&#123;</span><br><span class="line">    sb.Where(<span class="string">&quot;f.user_id = @userId&quot;</span>, <span class="keyword">new</span> &#123; userId = userId &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = connection.Query(fooQuery.RawSql, fooQuery.Parameters).ToList();</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.sqlshack.com/query-optimization-techniques-in-sql-server-parameter-sniffing/">https://www.sqlshack.com/query-optimization-techniques-in-sql-server-parameter-sniffing/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sonarqube With Opencover And xUnit Reports</title>
      <link href="/2020/11/sonarqube-with-opencover-xunit-reports/"/>
      <url>/2020/11/sonarqube-with-opencover-xunit-reports/</url>
      
        <content type="html"><![CDATA[<p>Previously Ive used <a href="/2018/07/sonarqube-and-docker/">Sonarqube to analyze without test coverage</a>, recently Ive learnt how to use <a href="https://github.com/OpenCover/opencover">opencover</a> to generate code coverage stats and use <a href="https://www.nuget.org/packages/XunitXml.TestLogger/">XunitXml.TestLogger</a> to generate the test coverage report, this data is then used by Sonarqube to generate reports on the code base.</p><h2 id="Software-Setup"><a href="#Software-Setup" class="headerlink" title="Software Setup"></a>Software Setup</h2><h3 id="Sonarqube-Server"><a href="#Sonarqube-Server" class="headerlink" title="Sonarqube Server"></a>Sonarqube Server</h3><ol><li>Start the container, the default login is <code>admin\admin</code>, here Im using v8.3 community</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonarqube83c -p 9000:9000 sonarqube:8.3-community</span><br></pre></td></tr></table></figure><h3 id="Sonar-Scanner"><a href="#Sonar-Scanner" class="headerlink" title="Sonar Scanner"></a>Sonar Scanner</h3><ol><li>Install the <a href="https://www.nuget.org/packages/dotnet-sonarscanner/5.0.4">dotnet-sonarscanner</a> tool into the path <code>c:\dev\sonardemo\tools</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install dotnet-sonarscanner --tool-path tools --version 5.0.4</span><br></pre></td></tr></table></figure><h3 id="Net-Core-SDK"><a href="#Net-Core-SDK" class="headerlink" title=".Net Core SDK"></a>.Net Core SDK</h3><p>The source code Im going scan is <code>netcoreapp2.2</code>, I think later versions will be backwards compatible so you could skip this step.</p><ol><li>Download and install <a href="https://dotnet.microsoft.com/en-us/download/dotnet/2.2">SDK 2.2.207</a></li></ol><p>On my machine this installs to <code>C:\Program Files\dotnet\sdk\2.2.207</code></p><h2 id="Setup-Source-Code"><a href="#Setup-Source-Code" class="headerlink" title="Setup Source Code"></a>Setup Source Code</h2><h3 id="Clone-And-Build"><a href="#Clone-And-Build" class="headerlink" title="Clone And Build"></a>Clone And Build</h3><ol><li>Clone the project <a href="https://github.com/carlpaton/VulnusCloud/">VulnusCloud</a> to <code>c:\dev\sonardemo\tmp</code>, I picked this project for a few reasons:</li></ol><ul><li>it uses <a href="https://nunit.org/">NUnit</a> and I wanted to see if this would work the same as it does for a project using <a href="https://xunit.net/">xUnit</a>, turn out it does. FYI <code>xUnit</code> is more popular and its the default at most companys Ive worked for.</li><li>its got muiltiple test projects, I want to only run the <a href="https://github.com/carlpaton/VulnusCloud/tree/master/UnitTests">UnitTests</a> and ignore the <a href="https://github.com/carlpaton/VulnusCloud/tree/master/IntegrationTest">IntegrationTest</a> in the coverage report, currently the <a href="https://github.com/carlpaton/VulnusCloud/blob/master/VulnusCloud.sln">sln</a> only references the UnitTests, I’ll include the IntegrationTest to test excluding them from the dotnet build and test steps.</li></ul><ol start="2"><li><p>Copy the contents of <code>C:\dev\sonardemo\tmp\VulnusCloud</code> to <code>C:\dev\sonardemo\</code> so that the <code>.sln</code> file is in the root, this just makes the sonar steps easier.</p></li><li><p>Check the solution builds</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet &quot;C:\Program Files\dotnet\sdk\2.2.207\MSBuild.dll&quot; .</span><br></pre></td></tr></table></figure><h3 id="Add-Dependencies"><a href="#Add-Dependencies" class="headerlink" title="Add Dependencies"></a>Add Dependencies</h3><ol><li>We need to install <a href="https://www.nuget.org/packages/XunitXml.TestLogger/2.1.26">XunitXml.TestLogger</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\dev\sonardemo\UnitTests</span><br><span class="line">dotnet add package XunitXml.TestLogger --version 2.1.26</span><br></pre></td></tr></table></figure><ol start="2"><li>Additionally we need a collector, the de facto is <a href="https://www.nuget.org/packages/coverlet.collector/1.3.0">coverlet.collector</a>. <code>coverlet.collector</code> is a tool specifically designed to measure code coverage for .NET applications running on various platforms</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\dev\sonardemo\UnitTests</span><br><span class="line">dotnet add package coverlet.collector --version 1.3.0</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a <code>.runsettings</code> file in <code>C:\dev\sonardemo\UnitTests</code>, the <code>friendlyName=&quot;XPlat code coverage&quot;</code> refers to the measurement of how much of your codebase is executed during testing across different platforms (hence, “cross-platform” or “XPlat”)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RunSettings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DataCollectionRunSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DataCollectors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DataCollector</span> <span class="attr">friendlyName</span>=<span class="string">&quot;XPlat code coverage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Format</span>&gt;</span>opencover<span class="tag">&lt;/<span class="name">Format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DataCollector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DataCollectors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">DataCollectionRunSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RunSettings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Other examples from the <a href="https://www.nuget.org/packages/coverlet.collector/#readme-body-tab">docs</a> include</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ExcludeByAttribute</span>&gt;</span>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute<span class="tag">&lt;/<span class="name">ExcludeByAttribute</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ExcludeByFile</span>&gt;</span>**/dir1/class1.cs,**/dir2/*.cs,**/dir3/**/*.cs,<span class="tag">&lt;/<span class="name">ExcludeByFile</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>Runsettings can be added in <code>UnitTests.csproj</code> with in the PropertyGroup, the downside is then when you run the tests from an IDE like Visual Studio it will create <code>TestResults</code> folder in the root, adding to the csproj file is not required because we will pass it with the <code>dotnet test</code> command so I just mention it here for completeness.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">RunSettingsFilePath</span>&gt;</span>$(MSBuildProjectDirectory)\.runsettings<span class="tag">&lt;/<span class="name">RunSettingsFilePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Also see</p><ul><li><a href="https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/scanners/sonarscanner-for-dotnet/">https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/scanners/sonarscanner-for-dotnet/</a> </li><li><a href="https://docs.sonarsource.com/sonarqube/latest/project-administration/analysis-scope/">https://docs.sonarsource.com/sonarqube/latest/project-administration/analysis-scope/</a></li></ul><h2 id="Oh-Its-Scan-time-😬"><a href="#Oh-Its-Scan-time-😬" class="headerlink" title="Oh Its Scan time! 😬"></a>Oh Its Scan time! 😬</h2><p>You can use <code>sonar.login</code> and pass a key like I did <a href="/2018/07/sonarqube-and-docker/">here</a> but passwords belong in source code right? (I do what I want 🙈)</p><ol><li>Run scanner begin</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./tools/dotnet-sonarscanner.exe begin `</span><br><span class="line">    -d:sonar.login=admin `</span><br><span class="line">    -d:sonar.password=admin `</span><br><span class="line">    -d:sonar.host.url=http://localhost:9000 `</span><br><span class="line">    -k:VulnusCloud `</span><br><span class="line">    -d:sonar.cs.opencover.reportsPaths=&#x27;UnitTests\TestResults\**\coverage.opencover.xml&#x27; `</span><br><span class="line">    -d:sonar.cs.xunit.reportsPaths=&#x27;UnitTests\TestResults\xunit.report.xml&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>Run dotnet tests, if you dont specify the <code>--framework</code> argument it will use what ever version of dotnet thats in your systems <code>PATH</code> environmental variables, here Im rolling with .Net Core 2.2</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet test VulnusCloud.sln `</span><br><span class="line">    --settings &#x27;./UnitTests/.runsettings&#x27; `</span><br><span class="line">    --logger &#x27;xunit;LogFilePath=TestResults\xunit.report.xml&#x27; `</span><br><span class="line">    --framework netcoreapp2.2</span><br></pre></td></tr></table></figure><p>Along with running the tests it creates the XML reports listed below, you could delete them as a run step, however sonarscanner keeps track of the based on the path but if this is running in a CI/CD pipeline on a volatile TeamCity agent the report file probably wont exist on the next run. Ta ta ma chance, uhambe kahle mfowethu ❤️</p><ul><li>C:\dev\sonardemo\UnitTests\TestResults\20cbc40e-1bb1-449e-a3e2-3d1a33c75315\coverage.opencover.xml</li><li>C:\dev\sonardemo\UnitTests\TestResults\xunit.report.xml</li></ul><ol start="3"><li>Run scanner end</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./tools/dotnet-sonarscanner.exe end `</span><br><span class="line">    -d:sonar.login=admin `</span><br><span class="line">    -d:sonar.password=admin</span><br></pre></td></tr></table></figure><p>The code analysis can then be seen at <a href="http://localhost:9000/dashboard?id=VulnusCloud">http://localhost:9000/dashboard?id=VulnusCloud</a></p><p><img src="/d/sonarqube-with-opencover-xunit-reports/report-with-coverage.png" alt="Yeah Boi"></p><h3 id="xUnit-Report-Path-Defaults"><a href="#xUnit-Report-Path-Defaults" class="headerlink" title="xUnit Report Path Defaults"></a>xUnit Report Path Defaults</h3><p>Adding <code>sonar.cs.xunit.reportsPaths</code> is not actually required, if you omit it the report will be added as <code>TestResults.xml</code> and picked up automagically, the resulting XML report paths are the same as the above. <code>LogFilePath</code> is then also not needed for the dotnet test logger argument (is that an arguments, argument? LOL)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">./tools/dotnet-sonarscanner.exe begin `</span><br><span class="line">    -d:sonar.login=admin `</span><br><span class="line">    -d:sonar.password=admin `</span><br><span class="line">    -d:sonar.host.url=http://localhost:9000 `</span><br><span class="line">    -k:VulnusCloud2 `</span><br><span class="line">    -d:sonar.cs.opencover.reportsPaths=&#x27;UnitTests\TestResults\**\coverage.opencover.xml&#x27;</span><br><span class="line"></span><br><span class="line">dotnet test VulnusCloud.sln `</span><br><span class="line">    --settings &#x27;./UnitTests/.runsettings&#x27; `</span><br><span class="line">    --logger xunit `</span><br><span class="line">    --framework netcoreapp2.2</span><br><span class="line"></span><br><span class="line">./tools/dotnet-sonarscanner.exe end `</span><br><span class="line">    -d:sonar.login=admin `</span><br><span class="line">    -d:sonar.password=admin</span><br></pre></td></tr></table></figure><h3 id="File-Level-Exclusions"><a href="#File-Level-Exclusions" class="headerlink" title="File Level Exclusions"></a>File Level Exclusions</h3><ol><li>We need to install <a href="https://www.nuget.org/packages/coverlet.msbuild/2.9.0">coverlet.msbuild</a> for this to work</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\dev\sonardemo\UnitTests</span><br><span class="line">dotnet add package coverlet.msbuild --version 2.9.0</span><br></pre></td></tr></table></figure><ol start="2"><li>Then add annotation <code>[ExcludeFromCodeCoverage] //Justification I do what I want</code> with valid justification. I’ve seen <code>//NOSONAR</code> comments in some code bases but couldnt get it to work, maybe oneday I’ll figure it out and add it here.</li></ol><p>ExcludeFromCodeCoverage examples</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Business</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ExcludeFromCodeCoverage</span>] <span class="comment">// class level</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OssReportService</span> : <span class="title">IOssReportService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IReportRepository _reportRepository;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    [<span class="meta">ExcludeFromCodeCoverage</span>] <span class="comment">// method level</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">ProcessOssRecords</span>(<span class="params">DateTime dateTimeOfMethodCall</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>We can then see the coverage value increases:</p><p><img src="/d/sonarqube-with-opencover-xunit-reports/coverage-change.png" alt="Coverage goes up"></p><p>Additionally the file level exclusions no longer have the red line on the left:</p><p><img src="/d/sonarqube-with-opencover-xunit-reports/file-level-exclusion.png" alt="File level exclusion"></p><p>Note that if you are using <code>.runsettings</code> you will also need to add the config <code>ExcludeByAttribute</code>, example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;RunSettings&gt;</span><br><span class="line">  &lt;DataCollectionRunSettings&gt;</span><br><span class="line">    &lt;DataCollectors&gt;</span><br><span class="line">      &lt;DataCollector friendlyName=&quot;XPlat code coverage&quot;&gt;</span><br><span class="line">        &lt;Configuration&gt;</span><br><span class="line">          &lt;Format&gt;opencover&lt;/Format&gt;</span><br><span class="line">          &lt;ExcludeByAttribute&gt;ExcludeFromCodeCoverageAttribute&lt;/ExcludeByAttribute&gt;</span><br><span class="line">        &lt;/Configuration&gt;</span><br><span class="line">      &lt;/DataCollector&gt;</span><br><span class="line">    &lt;/DataCollectors&gt;</span><br><span class="line">  &lt;/DataCollectionRunSettings&gt;</span><br><span class="line">&lt;/RunSettings&gt;</span><br></pre></td></tr></table></figure><h3 id="Parameter-Level-Exclusions"><a href="#Parameter-Level-Exclusions" class="headerlink" title="Parameter Level Exclusions"></a>Parameter Level Exclusions</h3><p>See <a href="https://docs.sonarsource.com/sonarqube/latest/project-administration/analysis-scope/">Analysis scope</a> to understand more about pattern matching used below.</p><p><strong>sonar.exclusions</strong></p><p>Configure the files that should be completely ignored by the analysis, so this is things like bad code and code smells.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-d:sonar.exclusions=&quot;**/Startup.cs,**/Program.cs,**/IoC/**,**/Dtos/**,**/Constants/**,**/Models/*&quot;</span><br></pre></td></tr></table></figure><p><strong>sonar.coverage.exclusions</strong></p><p>Configure the files that should be ignored by code coverage calculations, so this is just for test coverage.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-d:sonar.coverage.exclusions=&quot;**/SomeCrappyServiceThatIProbablyWontFixLater.cs,**/FooService/*&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> sonarqube </tag>
            
            <tag> static code analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi - Create a system service</title>
      <link href="/2020/10/raspberry-create-a-service/"/>
      <url>/2020/10/raspberry-create-a-service/</url>
      
        <content type="html"><![CDATA[<p>I needed a way of creating a system service to automagically start a <code>k3s agent</code> when the node booted up.</p><ol><li>Create a <code>.service</code> file and a <code>.py</code> file for the python script with the following content.</li></ol><p><strong>startk3sagent.service</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano startk3sagent.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Service to start K3S Agent as part of cluster</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/python3 -u startk3sagent.py</span><br><span class="line">WorkingDirectory=/home/pi/k3sscripts</span><br><span class="line">StandardOutput=inherit</span><br><span class="line">StandardError=inherit</span><br><span class="line">Restart=always</span><br><span class="line">User=pi</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>startk3sagent.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir k3sscripts</span><br><span class="line">cd k3sscripts</span><br><span class="line">sudo nano startk3sagent.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">K3S_URL=&quot;https://192.168.1.79:6443&quot;</span><br><span class="line">K3S_TOKEN=&quot;K10604bc55a643203542d97aafd91b0b0c2dc4233d46a1dc3a20a8f4ccf7d16fb50::server:09149feb4ee470a2eff3d3d1e4a83c43&quot;</span><br><span class="line"></span><br><span class="line">COMMAND = &quot;sudo k3s agent --server &quot; + K3S_URL + &quot; --token &quot; + K3S_TOKEN</span><br><span class="line"></span><br><span class="line">os.system(COMMAND)</span><br></pre></td></tr></table></figure><ol start="2"><li>Copy the file and test it works</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp startk3sagent.service /etc/systemd/system/startk3sagent.service     ~ copy file</span><br><span class="line">sudo systemctl start startk3sagent.service                                  ~ start service</span><br><span class="line">sudo systemctl stop startk3sagent.service                                   ~ stop service</span><br></pre></td></tr></table></figure><ol start="3"><li>Install as a service</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable startk3sagent.service</span><br><span class="line"></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/startk3sagent.service → /etc/systemd/system/startk3sagent.service.</span><br></pre></td></tr></table></figure><ol start="4"><li>Check what services are running</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service --status-all</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.raspberrypi.org/documentation/linux/usage/systemd.md">https://www.raspberrypi.org/documentation/linux/usage/systemd.md</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Specflow</title>
      <link href="/2020/10/specflow/"/>
      <url>/2020/10/specflow/</url>
      
        <content type="html"><![CDATA[<h3 id="Whats-Specflow"><a href="#Whats-Specflow" class="headerlink" title="Whats Specflow?"></a>Whats Specflow?</h3><p>Its a library that allows for <code>Behavior Driven Development in .NET.</code> (BDD) using <a href="https://cucumber.io/docs/gherkin/reference/">Gherkin</a> Syntax (Given-When-Then).</p><blockquote><p>“SpecFlow helps teams bind automation to feature files and share the resulting examples as Living Documentation across the team and stakeholders. - specflow.org”</p></blockquote><p><strong>PRO</strong> - using <a href="https://cucumber.io/docs/gherkin/reference/">Gherkin</a> and <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">Specflow</a> allows the entire team to contribute towards the test requirements, your Product Owner or Designer may not be technical but they do understand the domain so dont discount their input.</p><p><strong>CON</strong> - <a href="https://cucumber.io/docs/gherkin/reference/">Gherkin</a> and <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">Specflow</a> add additional complexity, if its just the developer writing the tests then its probably not going to add much value.</p><p>SpecFlow seems pretty focused on integration testing - <a href="/2018/05/unit-tests-overview/">Code that invokes a unit of work that crosses project boundaries, uses actual external dependencies, and/or validates many different aspects about the code under test</a>.</p><p>As Im using <code>Visual Studio 2019</code> I installed the extension <a href="https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlowTeam.SpecFlowForVisualStudio">SpecFlow for Visual Studio 2019</a>.</p><h3 id="Whats-Gherkin"><a href="#Whats-Gherkin" class="headerlink" title="Whats Gherkin?"></a>Whats Gherkin?</h3><p>Its the Syntax (Given-When-Then) which are keywords, the example below is from the template <code>SpecFlow Project</code></p><ul><li><a href="https://github.com/carlpaton/SpecFlowDemo/commit/ab0ed6c8994c006f028d4c30bdaacad763452aba#diff-063b2406327895ad6a12387f95c4ed21">Features/Calculator.feature (commit ab0ed6c)</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Feature: Calculator</span><br><span class="line">In order to avoid silly mistakes</span><br><span class="line">As a math idiot</span><br><span class="line">I *want* to be told the **sum** of ***two*** numbers</span><br><span class="line"></span><br><span class="line">Scenario: Add two numbers</span><br><span class="line">Given the first number is 50</span><br><span class="line">And the second number is 70</span><br><span class="line">When the two numbers are added</span><br><span class="line">Then the result should be 120</span><br></pre></td></tr></table></figure><p>Specflow then knows how to translate the above into steps simliar to the classic <code>tripple A</code> testing pattern. </p><p>All of the below will have <code>using TechTalk.SpecFlow;</code> this resolves the annotations <code>Given When Then</code> above the methods.</p><p>If you place your cursor on a line in the <code>.feature</code> and press F12 (Go to definition) the IDE should navigate to the correct place in the step as shown in <code>CalculatorStepDefinitions.cs</code> below.</p><ul><li><a href="https://github.com/carlpaton/SpecFlowDemo/commit/ab0ed6c8994c006f028d4c30bdaacad763452aba#diff-cbdeb46302046153db8b81354704f3e7">Steps/CalculatorStepDefinitions.cs (commit ab0ed6c)</a></li></ul><h4 id="Arrange"><a href="#Arrange" class="headerlink" title="Arrange"></a>Arrange</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Given the first number is 50</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Given(<span class="string">&quot;the first number is (.*)&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GivenTheFirstNumberIs</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement arrange (precondition) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Additional <code>Arrange</code> steps are added with the keyword <code>And</code>:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// And the second number is 70</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Given(<span class="string">&quot;the second number is (.*)&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GivenTheSecondNumberIs</span>(<span class="params"><span class="built_in">int</span> number</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement arrange (precondition) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Act"><a href="#Act" class="headerlink" title="Act"></a>Act</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When the two numbers are added</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">When(<span class="string">&quot;the two numbers are added&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WhenTheTwoNumbersAreAdded</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement act (action) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h4><p>The assertion can be done with any <a href="/2018/09/unit-testing-frameworks/">testing framework</a> or the <a href="https://specflow.org/plus/">SpecFlow+ Runner</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Then the result should be 120</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">Then(<span class="string">&quot;the result should be (.*)&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ThenTheResultShouldBe</span>(<span class="params"><span class="built_in">int</span> result</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> implement assert (verification) logic</span></span><br><span class="line"></span><br><span class="line">    _scenarioContext.Pending();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sweet-how-do-I-set-things-up"><a href="#Sweet-how-do-I-set-things-up" class="headerlink" title="Sweet how do I set things up?"></a>Sweet how do I set things up?</h3><p>The flow is simply and there are awesome getting started guides like <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">Getting Started With An Example</a> and <a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-A-New-Project.html">Getting Started With A New Project</a>.</p><p>A summary of the core steps are with a new project are:</p><ul><li>Create new project from template <code>SpecFlow Project</code><ul><li>This creates <a href="https://github.com/carlpaton/SpecFlowDemo/blob/master/Features/Calculator.feature">/Features/Calculator.feature</a></li><li>It also create <a href="https://github.com/carlpaton/SpecFlowDemo/blob/master/Steps/CalculatorStepDefinitions.cs">/Steps/CalculatorStepDefinitions.cs</a></li></ul></li><li>Create the <code>Example</code> Project, this is the code you want to test, following their example its a <code>class library</code>. <strong>EACH LINE</strong> in the <code>Scenario</code> needs to be satisfied with c# code:<ul><li> <code>public void GivenTheFirstNumberIs(int number)</code>, this sets (arrange) the state <code>FirstNumber</code> </li><li> <code>public void GivenTheSecondNumberIs(int number)</code> this sets (arrange) the state for <code>SecondNumber</code></li><li> <code>public void WhenTheTwoNumbersAreAdded()</code> this calls some behaviour (act) : <code>_calculator.Add();</code></li><li> <code>public void ThenTheResultShouldBe(int expectedResult)</code> asserts the result</li></ul></li></ul><h3 id="Scenario-Context"><a href="#Scenario-Context" class="headerlink" title="Scenario Context"></a>Scenario Context</h3><p><a href="https://docs.specflow.org/projects/specflow/en/latest/Bindings/ScenarioContext.html">See ScenarioContext</a></p><p>The boilerplate code injected <code>ScenarioContext _scenarioContext;</code> into the constructor in <a href="https://github.com/carlpaton/SpecFlowDemo/blob/master/IntegrationTests/Steps/CalculatorStepDefinitions.cs">CalculatorStepDefinitions.cs</a> </p><blockquote><p>“ScenarioContext helps you store values in a dictionary between steps. This helps you to organize your step definitions better than using private variables in step definition classes. -docs.specflow.org”</p></blockquote><p>This means we call things like</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_scenarioContext.Add   ~ add new key/value</span><br><span class="line">_scenarioContext.Get   ~ get value by key</span><br><span class="line">_scenarioContext.Set   ~ update value by key</span><br></pre></td></tr></table></figure><p>They also have something called <a href="https://docs.specflow.org/projects/specflow/en/latest/Bindings/Context-Injection.html">Context-Injection</a></p><blockquote><p>“This feature allows you to group the shared state in context classes, and inject them into every binding class that needs access to that shared state. -docs.specflow.org”</p></blockquote><p>To use context injection:</p><ol><li>Create your POCOs (simple .NET classes) representing the shared data.</li><li>Define them as constructor parameters in every binding class that requires them.</li><li>Save the constructor argument to instance fields, so you can use them in the step definitions.</li></ol><p>This means <code>CalculatorStepDefinitions</code> could be changed from creating its own <code>new Calculator();</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ScenarioContext _scenarioContext;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Calculator _calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> _result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatorStepDefinitions</span>(<span class="params">ScenarioContext scenarioContext</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _scenarioContext = scenarioContext;</span><br><span class="line">    _calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To automagically injecting an instance based on the default constructor</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Calculator _calculator;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> _result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatorStepDefinitions</span>(<span class="params">Calculator calculator</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _calculator = calculator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feature-Context"><a href="#Feature-Context" class="headerlink" title="Feature Context"></a>Feature Context</h3><p><a href="https://docs.specflow.org/projects/specflow/en/latest/Bindings/FeatureContext.html">See FeatureContext</a></p><blockquote><p>“FeatureContext persists for the duration of the execution of an entire feature, whereas ScenarioContext only persists for the duration of a scenario. -docs.specflow.org”</p></blockquote><p>These are useful hooks as you can have annotations like <code>[BeforeFeature]</code> and <code>[AfterFeature]</code>.<br>Note that hooks also exist for <code>Scenario Context</code>: <code>[BeforeScenario]</code> and <code>[AfterScenario]</code>.</p><p>You can use either to rebind/override <code>IKernel</code> with your own mock implementations.</p><p>Example from docs.specflow.or:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Binding</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hooks</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BeforeFeature</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BeforeFeature</span>(<span class="params">FeatureContext featureContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Starting &quot;</span> + featureContext.FeatureInfo.Title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AfterFeature</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AfterFeature</span>(<span class="params">FeatureContext featureContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Finished &quot;</span> + featureContext.FeatureInfo.Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/SpecFlowDemo">https://github.com/carlpaton/SpecFlowDemo</a></li><li><a href="https://specflow.org/">https://specflow.org/</a></li><li><a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html">https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-An-Example.html</a></li><li><a href="https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-A-New-Project.html">https://docs.specflow.org/projects/specflow/en/latest/Getting-Started/Getting-Started-With-A-New-Project.html</a></li><li><a href="https://cucumber.io/docs/gherkin/reference/">https://cucumber.io/docs/gherkin/reference/</a></li><li><a href="https://docs.specflow.org/projects/specflow/en/latest/Gherkin/Gherkin-Reference.html">https://docs.specflow.org/projects/specflow/en/latest/Gherkin/Gherkin-Reference.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster - Kubernetes</title>
      <link href="/2020/09/raspberry-pi-cluster-kubernetes/"/>
      <url>/2020/09/raspberry-pi-cluster-kubernetes/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Sweet so K8’s is <code>Kubernetes</code> right, so whats K3’s? Simple answer - Its lightweight <code>Kubernetes</code> for ARM processors which run on Raspberry Pi’s &lt;3 I was inspired by <a href="https://www.youtube.com/playlist?list=PL2_OBreMn7Frk57NLmLheAaSSpJLLL90G">Jeff Geerling’s Turing Pi Cluster</a> videos to try do more with my Pi 4 boards! </p><p>Kubernetes comes in many distributions and flavours as show by the <a href="https://landscape.cncf.io/">CNCF Cloud Native Landscape (the group that maintains kubernetes)</a>. I have chosen to focus on <a href="https://rancher.com/docs/k3s/latest/en/">K3S by Rancher Labs</a> which has an extremely light footprint thanks to the amazing work by <a href="https://github.com/ibuildthecloud">Darren Shepherd</a> (Chief Architect at Rancher Labs).</p><blockquote><p>“We wanted an installation of Kubernetes that was half the size in terms of memory footprint. Kubernetes is a 10-letter word stylized as K8s. So something half as big as Kubernetes would be a 5-letter word stylized as K3s. There is no long form of K3s and no official pronunciation. rancher.com”</p></blockquote><h3 id="K3S-Kubernetes-ecosystem"><a href="#K3S-Kubernetes-ecosystem" class="headerlink" title="K3S Kubernetes ecosystem"></a>K3S Kubernetes ecosystem</h3><p>Kubernetes has the following common terms:</p><ul><li><strong>K3S Server</strong> </li><li>-The server node that handles the <code>kubectl</code> commands</li><li>-There can be several server nodes. </li><li>-Also known as <code>master</code> </li><li>-Runs the <code>k3s server</code></li><li><strong>K3S Agent</strong> </li><li>-The worker node, there can be several worker nodes.</li><li>-Runs the <code>k3s agent</code></li><li><strong>Container</strong> </li><li>-This is a running <code>Docker Image</code> like <a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">carlpaton/nginx-pi-demo</a></li><li><strong>Pods</strong> </li><li>-This is the <code>Kubernetes ecosystem</code> running on a node which is running containers. </li><li>-Note the containers dont necessarily need to be contributing to a common goal to be considered part of the pod.</li><li><strong>Node</strong> </li><li>-This is the machine that runs and instance of <code>Kubernetes</code>, this can be a Virtual Machine, PC, Laptop or in my case a Raspberry Pi.</li><li><strong>Cluster</strong> </li><li>-This is several <code>Nodes</code> connected to gether on the same network.</li></ul><p><img src="/d/raspberry-pi-cluster-kubernetes/overview-of-kubernetes-k3s.jpg" alt="Raspberry Pi Cluster"></p><ul><li><a href="https://rancher.com/docs/k3s/latest/en/architecture/">https://rancher.com/docs/k3s/latest/en/architecture/</a></li></ul><h3 id="Setup-Hardware-and-OS"><a href="#Setup-Hardware-and-OS" class="headerlink" title="Setup Hardware and OS"></a>Setup Hardware and OS</h3><p>I used the same <a href="/2019/10/raspberry-pi-cluster-setup-os/">OS Steps (For Cluster)</a> steps and used the image <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">2020-08-20-raspios-buster-armhf-lite</a>. </p><p>Then, this cluster has two nodes:</p><ul><li><code>node1</code> (server node) ~ runs the <code>k3s server</code></li><li><code>node3</code> (worker node) ~ runs the <code>k3s agent</code></li></ul><h3 id="Setup-Passwordless-SSH-Access"><a href="#Setup-Passwordless-SSH-Access" class="headerlink" title="Setup Passwordless SSH Access"></a>Setup Passwordless SSH Access</h3><p>See the <code>No passphrase</code> section on this <a href="/2019/10/passwordless-ssh-access/">passwordless SSH access</a> post.</p><h3 id="Setup-K3s"><a href="#Setup-K3s" class="headerlink" title="Setup K3s"></a>Setup K3s</h3><p>This can either be done manually (on each node) or with a Playbook.</p><h4 id="Setup-K3s-Manual"><a href="#Setup-K3s-Manual" class="headerlink" title="Setup K3s (Manual)"></a>Setup K3s (Manual)</h4><p>Enable <code>container features</code> in the kernel:</p><p><strong>node1</strong> and <strong>node3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">cd ../../</span><br><span class="line">cd boot</span><br><span class="line">nano cmdline.txt</span><br></pre></td></tr></table></figure><p>Then add <code>cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory</code> to the end, then reboot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>Using a utility script from Rancher Labs run the followng <code>curl</code> command:</p><p><strong>node1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644         ~ install     </span><br><span class="line">sudo systemctl status k3s                                                  ~ confirm server is running</span><br><span class="line">kubectl get nodes                                                          ~ check nodes</span><br></pre></td></tr></table></figure><p>You will then see <code>[INFO]  systemd: Starting k3s</code>. To get the join key:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/lib/rancher/k3s/server/node-token</span><br><span class="line"></span><br><span class="line">K10604bc55a643203542d97aafd91b0b0c2dc4233d46a1dc3a20a8f4ccf7d16fb50::server:09149feb4ee470a2eff3d3d1e4a83c43</span><br></pre></td></tr></table></figure><p><strong>node3</strong></p><p>Im not sure why the script below doesnt start the <code>worker</code> K3S agent but it does install and configure it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export K3S_URL=&quot;https://192.168.1.79:6443&quot;</span><br><span class="line">export K3S_TOKEN=&quot;K10604bc55a643203542d97aafd91b0b0c2dc4233d46a1dc3a20a8f4ccf7d16fb50::server:09149feb4ee470a2eff3d3d1e4a83c43&quot;</span><br><span class="line">curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644</span><br></pre></td></tr></table></figure><p>You will then see <code>[INFO]  systemd: Starting k3s-agent</code></p><p>I had to then manually start the agent:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo k3s agent --server $&#123;K3S_URL&#125; --token $&#123;K3S_TOKEN&#125;</span><br></pre></td></tr></table></figure><p>The problem with this is when the SSH session is closed the agent is terminated too. I fixed this by <a href="/2020/10/raspberry-create-a-service/">creating a system service</a>.</p><p><strong>node1</strong></p><p>After that all the nodes started up and made a cluster automagically &lt;3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node -o wide</span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl version</span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><h4 id="Setup-K3s-Playbook"><a href="#Setup-K3s-Playbook" class="headerlink" title="Setup K3s (Playbook)"></a>Setup K3s (Playbook)</h4><p>THIS DID NOT WORK FOR ME :( #sad</p><p>I tried to followed Jeff’s advice and use <a href="https://www.youtube.com/watch?v=goclfp6a2IQ">ansible</a> to manage all of the Raspberry Pi’s with this <a href="https://github.com/rancher/k3s-ansible">ansible playbook from Rancher Labs</a>.</p><p><strong>node1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git ansible</span><br></pre></td></tr></table></figure><p>Clone the playbook from Rancher labs and copy the <code>inventory/sample</code> folder to the name of your cluster. I called mine <code>carl-cluster</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rancher/k3s-ansible</span><br><span class="line"></span><br><span class="line">cd k3s-ansible</span><br><span class="line">cp -R inventory/sample inventory/carl-cluster</span><br></pre></td></tr></table></figure><p>Set the hosts, these are your Raspberry Pi’s. You can use the IP or DNS.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd inventory/carl-cluster</span><br><span class="line">nano hosts.ini</span><br></pre></td></tr></table></figure><p>I used the following config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[master]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line">[node]</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line">[k3s_cluster:children]</span><br><span class="line">master</span><br><span class="line">node</span><br></pre></td></tr></table></figure><p>Set the <code>pi</code> user in <code>group_vars</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd group_vars</span><br><span class="line">nano all.yml</span><br><span class="line"></span><br><span class="line">ansible_user: debian    ~ default value</span><br><span class="line">ansible_user: pi        ~ updated value</span><br></pre></td></tr></table></figure><p>Then run this command to install your cluster!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../../../</span><br><span class="line">ansible-playbook site.yml -i inventory/carl-cluster/hosts.ini</span><br></pre></td></tr></table></figure><p>This was as far as I got with the playbook, running on <code>node1</code> complained about not being able to see <code>node1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WIP - ACTUAL ERROR HERE</span><br></pre></td></tr></table></figure><h3 id="Check-whats-running"><a href="#Check-whats-running" class="headerlink" title="Check whats running"></a>Check whats running</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br><span class="line">kubectl get pods -n monitoring</span><br></pre></td></tr></table></figure><h3 id="Cluster-Monitoring"><a href="#Cluster-Monitoring" class="headerlink" title="Cluster Monitoring"></a>Cluster Monitoring</h3><p>This <code>Cluster Monitoring</code> tool was built by Carlos Eduardo and he made it work for ARM based clusters.</p><p><strong>Required software install</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update                                ~ update apt cache</span><br><span class="line">apt-get install -y build-essential golang     ~ make utility and go language</span><br></pre></td></tr></table></figure><p><strong>Switch to root and clone</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo su                                                       ~ switch to root user</span><br><span class="line">cd ~                                                          ~ go to home dir</span><br><span class="line">pwd                                                           ~ confirm dir we are in</span><br><span class="line">git clone https://github.com/carlosedp/cluster-monitoring     ~ clone </span><br></pre></td></tr></table></figure><p><strong>Setup</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cluster-monitoring</span><br><span class="line">nano vars.jsonnet</span><br></pre></td></tr></table></figure><p>Then update the following for K3S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#x27;armExporter&#x27;,                         ~ this will give you CPU temp</span><br><span class="line">    enabled: true,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#x27;traefikExporter&#x27;,</span><br><span class="line">    enabled: true,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k3s: &#123;</span><br><span class="line">    enabled: true,</span><br><span class="line">    master_ip: [&#x27;192.168.1.79&#x27;],                  ~ this was my master node</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suffixDomain: &#x27;192.168.1.185.nip.io&#x27;,             ~ this was my worker node</span><br></pre></td></tr></table></figure><p>Finally build the mainfest for your cluster</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make vendor</span><br><span class="line">make                                              ~ generate YML manifests</span><br><span class="line">kubectl apply -f manifests/setup/</span><br><span class="line">kubectl apply -f manifests/</span><br></pre></td></tr></table></figure><p>Now Kuberbettes will take all these things created though these manifests and start scheduling them on nodes. Some STATUS will be <code>ContainerCreating</code> as its pulling down docker images ect.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get ingress -n monitoring          ~ will give the host name</span><br></pre></td></tr></table></figure><ul><li><a href="http://grafana.192.168.1.185.nip.io/">http://grafana.192.168.1.185.nip.io/</a>              ~ admin admin</li><li><a href="http://prometheus.192.168.1.185.nip.io/">http://prometheus.192.168.1.185.nip.io/</a></li><li><a href="http://alertmanager.192.168.1.185.nip.io/">http://alertmanager.192.168.1.185.nip.io/</a></li></ul><p><strong>Get logs in pods, containers</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl logs -f -n monitoring prometheus-k8s-0</span><br><span class="line">kubectl logs -f -n monitoring prometheus-k8s-0 -c prometheus-config-reloader    ~ -c for container</span><br><span class="line">CTRL C</span><br></pre></td></tr></table></figure><p><strong>unistall</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f manifests/setup</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlosedp/cluster-monitoring#quickstart-for-k3s">https://github.com/carlosedp/cluster-monitoring#quickstart-for-k3s</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://k3s.io/">https://k3s.io/</a></li><li><a href="https://rancher.com/docs/k3s/latest/en/">https://rancher.com/docs/k3s/latest/en/</a></li><li><a href="https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi/">https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> kubernetes </tag>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Pi Demo</title>
      <link href="/2020/09/nginx-pi-demo/"/>
      <url>/2020/09/nginx-pi-demo/</url>
      
        <content type="html"><![CDATA[<p>This is <a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">carlpaton/nginx-pi-demo:latest</a> and is a docker image used with my post on <a href="/2020/09/raspberry-pi-cluster-swarm/">Raspberry Pi Cluster Swarm</a> to simply show which node responded to the request.</p><p><img src="/d/nginx-pi-demo/nginx-pi-demo.jpg" alt="Nginx Pi Demo"></p><p>All of the below was based on the amazing work at <a href="https://docs.nginx.com/nginx/deployment-guides/setting-up-nginx-demo-environment/">docs.nginx.com</a> and <a href="https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/">docker.com</a>. I created this image as follows on one of my Raspberry PI’s to ensure it works for ARM.</p><ol><li><p>created <a href="https://github.com/carlpaton/nginx-pi-demo/blob/master/default.conf">default.conf</a>, <a href="https://github.com/carlpaton/nginx-pi-demo/blob/master/index.html">index.html</a> and <a href="https://github.com/carlpaton/nginx-pi-demo/blob/master/Dockerfile">Dockerfile</a></p></li><li><p>build the image</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t webserver .</span><br></pre></td></tr></table></figure><ol start="3"><li>test the image</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -d -p 100:80 --name web webserver</span><br></pre></td></tr></table></figure><ol start="4"><li>login to docker</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><ol start="5"><li>tag the image </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag webserver carlpaton/nginx-pi-demo</span><br></pre></td></tr></table></figure><ol start="6"><li>ensure the tagged image <code>carlpaton/nginx-pi-demo</code> exists</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ol start="7"><li>push the image</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push carlpaton/nginx-pi-demo</span><br></pre></td></tr></table></figure><ol start="8"><li>Cleanup</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker kill web</span><br><span class="line">docker rmi webserver</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.nginx.com/nginx/deployment-guides/setting-up-nginx-demo-environment/">https://docs.nginx.com/nginx/deployment-guides/setting-up-nginx-demo-environment/</a></li><li><a href="https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/">https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/</a></li><li><a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">https://hub.docker.com/r/carlpaton/nginx-pi-demo</a></li><li><a href="https://github.com/carlpaton/nginx-pi-demo">https://github.com/carlpaton/nginx-pi-demo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster - Docker Swarm</title>
      <link href="/2020/09/raspberry-pi-cluster-swarm/"/>
      <url>/2020/09/raspberry-pi-cluster-swarm/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/raspberry-pi-cluster-swarm/docker-swarm-lol.jpg" alt="Docker Swarm LOL"></p><p>Following on from the post <a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a> which created a cluster of PI’s and used parallel computing to execute and share the workload using Python … I figured it was time to do the same thing using Docker Swarm.</p><p>Docker Swarm is not dead although its long term future is unknown. I’d take <a href="https://nigelpoulton.com/blog/f/swarm-vs-kubernetes-2020-update">Nigel Poulton’s</a> word on this as as he is a domain expert. I figured knowing some Swarm will probably help at some point but DevOps are probably better off focusing more attention on kubernetes as its future is super bright!</p><p>On that note… Swarm is simple to setup and has a shallow learning curve. Not all companys need <a href="/2020/09/raspberry-pi-cluster-kubernetes/">complex container orchestration tools like kubernetes</a> that can automatically replicate to nodes in the cluster under load. With Swarm the replication is done manually with commands like <code>docker service scale</code>.</p><p>The cluster is made up of 2 or more physical Raspberry Pi 4’s and Docker Swarm has the following common terms:</p><ul><li><strong>Node</strong></li><li><ul><li>This is the machine that runs and instance of the <a href="https://docs.docker.com/engine/">Docker Engine</a>, this can be a Virtual Machine, PC, Laptop or in my case a Raspberry Pi.</li></ul></li><li><strong>Swarm</strong> </li><li><ul><li>A cluster of nodes running the <a href="https://docs.docker.com/engine/">Docker Engine</a>.</li></ul></li><li><strong>Manager Node</strong> </li><li><ul><li>Manages the worker nodes schedules tasks for them to run. </li></ul></li><li><ul><li>Its also responsable for the cluster state. </li></ul></li><li><ul><li>Note that <code>Manager Nodes</code> can also run services.</li></ul></li><li><ul><li>A cluster can have several <code>Manager Nodes</code>. </li></ul></li><li><strong>Worker Node</strong> </li><li><ul><li>Instances of the <a href="https://docs.docker.com/engine/">Docker Engine</a> with the responsability of running your application in containers.</li></ul></li><li><strong>Services</strong> </li><li><ul><li>This is the running container that was created from a Docker Image. </li></ul></li><li><ul><li>It can be anything like <a href="https://hub.docker.com/_/nginx">Nginx</a> (for web) or <a href="https://hub.docker.com/_/mysql">MySQL</a> (for the persistant storage)</li></ul></li><li><strong>Task</strong> </li><li><ul><li>A service thats scheduled to run on a node.</li></ul></li></ul><p><img src="/d/raspberry-pi-cluster-swarm/overview-of-docker-swarm.jpg" alt="Overview of Docker Swarm"></p><blockquote><p>“Docker Swarm is an alternative, Docker-native Container Orchestration Engine that coordinates container placement and management among multiple Docker Engine hosts. Docker Swarm allows you to communicate directly with swarm instead of communicating with each Docker Engine individually. Docker Swarm architecturally is comprised of two types of nodes called Managers and Workers. -rancher.com”</p></blockquote><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ol><li>Follow the <a href="/2019/10/raspberry-pi-cluster-setup-os/">OS Steps (For Cluster)</a>, for <code>Docker Swarm</code> the nodes were:</li></ol><ul><li><code>node1</code> (manager node)</li><li><code>node3</code> (worker node)</li></ul><ol start="2"><li>Install <a href="https://docs.docker.com/get-docker/">Docker CE</a> on all nodes using the <code>pi</code> user. I used <a href="/2018/04/putty/">Putty to SSH</a> to the nodes as I did it from a Windows Machine.</li></ol><p><strong>node1</strong> and <strong>node3</strong></p><p>If you are not on a Windows machine cannot connect to <code>node1</code> then run <code>sudo nmap -sn 192.168.1.0/24</code> to inspect your network, the subnet mask <code>0/24</code> and actual range <code>192.168.1.x</code> will differ depending on your defined <a href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/dhcp/dhcp-top">DHCP scope</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">curl -sSL https://get.docker.com | sh                   ~ execute convenience script from Docker (Raspbian is not yet officially supported)</span><br><span class="line">sudo usermod -aG docker pi                              ~ permissions</span><br><span class="line">groups pi                                               ~ check `docker` has been added for the `pi` user</span><br><span class="line">                                                        ~ you will need to exit and login again for the above to take affect</span><br><span class="line">docker run hello-world                                  ~ just make sure it works :D</span><br></pre></td></tr></table></figure><p>If you want to see what the <code>convenience script</code> from Docker is doing you can grab it and then edit it with nano, I dont particularly care and trust the shell script as its from Docker themselves. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL get.docker.com -o get-docker.sh</span><br><span class="line">nano get-docker.sh</span><br></pre></td></tr></table></figure><h3 id="Setup-Manager"><a href="#Setup-Manager" class="headerlink" title="Setup Manager"></a>Setup Manager</h3><p><strong>node1</strong></p><p>Get the IP address and run <code>swarm init</code> to create a <code>manager</code> node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig                                               ~ 192.168.1.79 from `wlan0`</span><br><span class="line">sudo docker swarm init --advertise-addr 192.168.1.79   ~ this will output the command needed for workers to join</span><br></pre></td></tr></table></figure><h3 id="Setup-Worker"><a href="#Setup-Worker" class="headerlink" title="Setup Worker"></a>Setup Worker</h3><p>The token below comes from the <code>swarm init</code> command above.</p><p><strong>node3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node3</span><br><span class="line">docker swarm join --token SWMTKN-1-0qg11jc0dpjdrf9tv7f504r2jhyet95trcbh1o5yz889fow8k6-exwpzo10leqiyr6k65z0iyelq 192.168.1.79:2377</span><br><span class="line">exit                                                  ~ falls back to `node1`</span><br></pre></td></tr></table></figure><p><strong>node1</strong></p><p>Now running <code>sudo docker node ls</code> shows us our swarm :D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pi@node1:~ $ sudo docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">k86pcxsvs4qvr2qt3ovn90x5w *   node1               Ready               Active              Leader              19.03.13</span><br><span class="line">8i5q2rtb555tpqquc8a0ujdan     node3               Ready               Active                                  19.03.13</span><br></pre></td></tr></table></figure><h3 id="First-Service"><a href="#First-Service" class="headerlink" title="First Service"></a>First Service</h3><p>This will install <a href="https://github.com/dockersamples/docker-swarm-visualizer">docker-swarm-visualizer</a> a tool to visually see the cluster! <a href="https://twitter.com/alexellisuk">Alex Ellis</a> has pushed an image to the Docker Hub as <code>alexellis2/visualizer-arm:latest</code> that works on <a href="https://github.com/dockersamples/docker-swarm-visualizer#running-on-arm">ARM (Raspberry Pi)</a>.</p><p><strong>node1</strong></p><p>This will take a bit of time to complete as it needs to download the depednancy layers.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker service create --name viz --publish 8080:8080/tcp --constraint node.role==manager --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock alexellis2/visualizer-arm:latest</span><br></pre></td></tr></table></figure><p>You can then check the service is running with <code>sudo docker service ls</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@node1:~ $ sudo docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                              PORTS</span><br><span class="line">nswh5q71ho6f        viz                 replicated          1/1                 alexellis2/visualizer-arm:latest   *:8080-&gt;8080/tcp</span><br></pre></td></tr></table></figure><p>The UI is then avaible at - <a href="http://node1:8080/">http://node1:8080/</a></p><p><img src="/d/raspberry-pi-cluster-swarm/alexellis2-visualizer.jpg" alt="alexellis2/visualizer-arm:latest"></p><h3 id="Nginx-Services"><a href="#Nginx-Services" class="headerlink" title="Nginx Services"></a>Nginx Services</h3><p>The examples below use the image <a href="https://hub.docker.com/r/carlpaton/nginx-pi-demo">carlpaton/nginx-pi-demo</a> to display some information about the host node, this is useful as we can then see the <code>Server name</code> and <code>Server address</code> changes. Details about this image and how I created it can be found at <a href="/2020/09/nginx-pi-demo/">nginx-pi-demo</a>.</p><p>When you create a service you can initialze it with <code>--replicas n</code> where n is the amount of running instance you want. The below will create 2 instance of <code>nginx-2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 2 --name nginx-2 -p 8081:80 carlpaton/nginx-pi-demo</span><br><span class="line">docker service inspect --pretty nginx-2                                  ~ inspect the service, --pretty formats the output, default is json</span><br></pre></td></tr></table></figure><p><code>nginx-2</code> is then avaible at - <a href="http://node1:8081/">http://node1:8081/</a>. If you open one instance and a second in incognio you will see for the same DNS <code>node1:8081</code> the <code>Server name</code> and <code>Server address</code> changes, this means the two requests were processed by different containers (not necessarily nodes but if you use this information along with what you see in visualiser you can prove they are on different nodes). </p><p><img src="/d/raspberry-pi-cluster-swarm/nginx-pi-demo.jpg" alt="nginx-pi-demo"></p><p>To manually scale create the server <code>nginx-manual</code> below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name nginx-manual -p 8082:80 carlpaton/nginx-pi-demo    ~ create 1 instance   </span><br><span class="line">docker service ps nginx-manual                                                  ~ check where the processes `nginx-manual` are running</span><br></pre></td></tr></table></figure><p><code>nginx-manual</code> is then avaible at - <a href="http://node1:8082/">http://node1:8082/</a>. Once its up, scale it out by <code>5</code>. Note that this <code>5</code> will be the new total service count.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx-manual=5</span><br></pre></td></tr></table></figure><p>If you want to scale down just run the same command but with a lower value like 2, the new service count for <code>nginx-manual</code> will then be 2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale nginx-manual=2</span><br></pre></td></tr></table></figure><p>If you now look at the <a href="http://node1:8080/">visualizer tool</a> you can see Docker Swarm is auto load balancing between the nodes :D</p><p><img src="/d/raspberry-pi-cluster-swarm/visualizer-load-balancing.jpg" alt="Load Balancing"></p><h3 id="Delete-a-service"><a href="#Delete-a-service" class="headerlink" title="Delete a service"></a>Delete a service</h3><p>To delete a service run <code>rm</code>, the below will create a dummy server <code>nginx-delete</code> and then delete it. <strong>WARNING!</strong> <code>rm</code> will trash the service without confirming. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name nginx-delete -p 8083:80 carlpaton/nginx-pi-demo</span><br><span class="line">docker service rm nginx-delete</span><br></pre></td></tr></table></figure><h3 id="Leave-the-swarm-and-join-again"><a href="#Leave-the-swarm-and-join-again" class="headerlink" title="Leave the swarm and join again"></a>Leave the swarm and join again</h3><p>From a worker run the <code>swarm leave</code> to leave the swarm.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node3</span><br><span class="line">docker swarm leave</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>After leaving the swarm the manager <code>node1</code> moves the load for you.</p><p><img src="/d/raspberry-pi-cluster-swarm/visualizer-swarm-leave.jpg" alt="After Delete"></p><p>If you want to add the node back you need to first delete node completely from the manager.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">docker node rm node3                        ~ run from manager</span><br><span class="line">docker node rm 8i5q2rtb555tpqquc8a0ujdan    ~ if node3 name is ambiguous use the id from `sudo docker node ls`</span><br></pre></td></tr></table></figure><p>Add the node back as a worker using the <code>swarm join</code> command (see the start of this post).</p><p>Even if you restart the service the nodes will not auto load balance (this is by design to avoid disruption). Swarm will add new services to nodes doing the least amount of work, so the idea is they will eventually balance out.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker service update nginx-manual                                                        ~ this restarts the service but will not load balance</span><br><span class="line">docker service create --replicas 2 --name nginx-foo -p 8084:80 carlpaton/nginx-pi-demo    ~ add `nginx-foo`</span><br></pre></td></tr></table></figure><p><img src="/d/raspberry-pi-cluster-swarm/visualizer-after-adding-nginx-foo.jpg" alt="After adding nginx-foo"></p><ul><li><a href="https://docs.docker.com/engine/swarm/manage-nodes/">https://docs.docker.com/engine/swarm/manage-nodes/</a></li></ul><h3 id="Rolling-Update"><a href="#Rolling-Update" class="headerlink" title="Rolling Update"></a>Rolling Update</h3><p>You can upgrade versions of the running image by including <code>--update-delay 10s</code> when creating it. Then run <code>docker service update [SERVICE NAME]</code></p><ul><li><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/">https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/</a></li></ul><h3 id="Shut-Things-Down"><a href="#Shut-Things-Down" class="headerlink" title="Shut Things Down"></a>Shut Things Down</h3><p>To shut down the nodes ssh to each and such them down, you need to do the workers first and then the managers.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -h now</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://nigelpoulton.com/blog/f/swarm-vs-kubernetes-2020-update">https://nigelpoulton.com/blog/f/swarm-vs-kubernetes-2020-update</a></li><li><a href="https://docs.docker.com/engine/swarm/key-concepts/">https://docs.docker.com/engine/swarm/key-concepts/</a></li><li><a href="https://rancher.com/learning-paths/docker-swarm-vs-kubernetes/">https://rancher.com/learning-paths/docker-swarm-vs-kubernetes/</a></li><li><a href="https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script">https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script</a></li><li><a href="https://howchoo.com/g/nmrlzmq1ymn/how-to-install-docker-on-your-raspberry-pi">https://howchoo.com/g/nmrlzmq1ymn/how-to-install-docker-on-your-raspberry-pi</a></li><li><a href="https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm">https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm</a></li><li><a href="https://github.com/dockersamples/docker-swarm-visualizer">https://github.com/dockersamples/docker-swarm-visualizer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Percentage For Data Set</title>
      <link href="/2020/09/percentage-for-data-set/"/>
      <url>/2020/09/percentage-for-data-set/</url>
      
        <content type="html"><![CDATA[<p>While seeding a database with data for a <a href="/2020/09/rosetta-code-sql-datafix/">DataFix Rosetta Code</a> post I thought it would be helpful to be able to determine the percentage (or get as close to it as possible) for a set of data.</p><p>Typically this would be in a <code>WHILE</code> loop, for all the examples below the upper bound loop until would have been 1000.</p><p>Example use case: for half the data set a date field:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">--- run an update to set the date field for 50% of the data</span></span><br><span class="line">    <span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="Quarters"><a href="#Quarters" class="headerlink" title="Quarters"></a>Quarters</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---- QUARTERS</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">4</span> <span class="operator">&gt;</span> <span class="number">2</span>)         <span class="number">250</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)         <span class="number">500</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">4</span> <span class="operator">&lt;</span> <span class="number">3</span>)         <span class="number">751</span></span><br></pre></td></tr></table></figure><h3 id="Thirds"><a href="#Thirds" class="headerlink" title="Thirds"></a>Thirds</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---- THIRDS</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">3</span> <span class="operator">=</span> <span class="number">0</span>)         <span class="number">333</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">3</span> <span class="operator">&lt;</span> <span class="number">2</span>)         <span class="number">667</span></span><br></pre></td></tr></table></figure><h3 id="Tens"><a href="#Tens" class="headerlink" title="Tens"></a>Tens</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---- TENS</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">=</span> <span class="number">0</span>)        <span class="number">100</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">2</span>)        <span class="number">201</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">3</span>)        <span class="number">301</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">&lt;</span> <span class="number">2</span>)         <span class="number">401</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)         <span class="number">500</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">&lt;</span> <span class="number">3</span>)         <span class="number">601</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">7</span>)        <span class="number">701</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">&lt;</span> <span class="number">4</span>)         <span class="number">801</span></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">10</span> <span class="operator">&lt;</span> <span class="number">9</span>)        <span class="number">901</span></span><br><span class="line"><span class="operator">*</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><h3 id="Having-a-hoon"><a href="#Having-a-hoon" class="headerlink" title="Having a hoon"></a>Having a hoon</h3><p>I used the script below to figure out the values above.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Hoon</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@Counter</span> <span class="operator">&lt;=</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@Counter</span><span class="operator">+</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">IF (<span class="variable">@Counter</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@Hoon</span><span class="operator">+</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;----------------------&#x27;</span></span><br><span class="line">PRINT(<span class="string">&#x27; @Hoon = &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">1000</span>), <span class="variable">@Hoon</span>))</span><br><span class="line">PRINT <span class="string">&#x27;----------------------&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/while-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/while-transact-sql?view=sql-server-ver15</a></li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/modulo-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/modulo-transact-sql?view=sql-server-ver15</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> life-hacks </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Datafix</title>
      <link href="/2020/09/rosetta-code-sql-datafix/"/>
      <url>/2020/09/rosetta-code-sql-datafix/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>Consider the following relational database: <code>FooDatabase</code></p><p><img src="/d/rosetta-code-sql-datafix/dbo.foodatabase.png" alt="dbo.FooDatabase"></p><p>In the context of this database a <code>tenant</code> can only be one of <code>App One</code>, <code>App Two</code> or <code>User</code>. Each <code>User</code> has their own unique GUID and the applications have the following GUIDs:</p><table><thead><tr><th>Application Name</th><th>GUID</th></tr></thead><tbody><tr><td>App One</td><td>3ba2e2e8-f093-41d8-8daf-64d5385604ac</td></tr><tr><td>App Two</td><td>efec5b17-47fc-4d79-ae74-6e8b023023d5</td></tr></tbody></table><p>13 333 records in <code>dbo.item_line</code> have been persisted incorrectly. The column <code>dbo.item_line.tenant_id</code> has been populated with the GUID for <code>App One</code> for the period <code>01 Jan 2018</code> to <code>31 Dec 2018</code> when it should have been populated with the GUID for the <code>User</code> tenant. This date is stored in <code>dbo.item_line.created_date_uct</code>.</p><p>Thankfully <code>dbo.item_line.created_by_user_id</code> is a mandatory field and will contain valid user GUIDs. Note that not all users will exist in <code>dbo.tenant</code>.</p><p>The cleanup must be idempotent, this means it can be run multiple times without changing the result beyond the initial story/task.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Cleanup the data using a SQL script in a safe manner.</p><ul><li>Identify all records in <code>dbo.item_line</code> that need to be updated, print the count.</li><li>Create records in <code>dbo.tenant</code> that dont exist when linking to <code>dbo.item_line.created_by_user_id</code>, print this count too.</li><li>Update <code>dbo.item_line.tenant_id</code> to be the newly created <code>dbo.tenant.id</code> when it did not exist, else update to be <code>dbo.item_line.created_by_user_id</code>. Print the total count of updates. This should match the first count printed.</li></ul><p>Using the supplied data the prints and counts should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total dbo.item_line to be updated : 13333</span><br><span class="line">total new dbo.tenant records : 12983</span><br><span class="line">actual updates to dbo.item_line : 13333</span><br></pre></td></tr></table></figure><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Spin up a MS SQL Instance, you can then connect to it from Microsoft SQL Server Management Studio on <code>localhost,1500</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=rosetta-df -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=Password123&quot; -p 1500:1433 -d mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/tree/master/mssql/Rosetta%20Code/SQL%20Data%20Fix">Run these SQL scripts in the following order</a>:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">001 CREATE DATABASE.sql</span><br><span class="line">002 CREATE TABLES.sql</span><br><span class="line">003 SEED dbo.tenant.sql</span><br><span class="line">004 SEED dbo.line_item.sql</span><br><span class="line">005 SEED dbo.tenant.sql</span><br></pre></td></tr></table></figure><p>This should get the data into a state that matches the counts above.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h4 id="Set-Operations"><a href="#Set-Operations" class="headerlink" title="Set Operations"></a>Set Operations</h4><p>TLDR; A set is an exactly defined collection of objects, this can be accomplished by selecting into a #temptable.</p><details>  <summary>What are set operations?</summary>SQL set operations are a set of operations that allow you to combine or compare the results of two or more SELECT statements into a single result set. The four main SQL set operations are:<p>UNION: The UNION operator combines the result sets of two or more SELECT statements into a single result set, eliminating any duplicates. For example, if you have two tables with the same structure and you want to combine their contents into a single table, you can use the UNION operator.</p><p>UNION ALL: The UNION ALL operator is similar to UNION, but it does not eliminate duplicates. It combines all rows from the result sets of two or more SELECT statements into a single result set.</p><p>INTERSECT: The INTERSECT operator returns the common rows between two or more SELECT statements. It returns only the rows that appear in all of the SELECT statements.</p><p>EXCEPT: The EXCEPT operator returns the rows that appear in the first SELECT statement but not in the second SELECT statement. It essentially subtracts the result set of the second SELECT statement from the result set of the first SELECT statement.</p><p>These set operations are useful for performing complex queries that involve combining or comparing data from multiple tables or views.  </p></details><h4 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h4><p>TLDR; Use a STATIC cursor to iterate over the data.</p><details>  <summary>What is a Cursor?</summary>In SQL, a cursor is a database object that allows you to retrieve and manipulate a set of rows returned by a SELECT statement. A cursor is like a pointer to a specific row in the result set, which you can use to navigate through the rows one at a time and perform operations on each row.<p>To use a cursor in SQL, you first declare it and define the SELECT statement that it will be based on. Then you open the cursor, which causes the database to execute the SELECT statement and retrieve the result set. You can then use FETCH statements to retrieve individual rows from the result set, and use UPDATE, DELETE, or other SQL statements to modify the data.</p><p>Cursors can be useful in situations where you need to iterate through a result set and perform operations on each row individually. For example, you might use a cursor to process each row of a table one at a time, performing calculations or updates on the data as you go. Cursors can also be used in stored procedures, triggers, and other database objects to perform more complex operations on data. However, it’s important to use cursors judiciously, since they can be less efficient and slower than set-based operations in SQL. </p></details><h4 id="WITH-common-table-expression"><a href="#WITH-common-table-expression" class="headerlink" title="WITH common_table_expression"></a>WITH common_table_expression</h4><p>TLDR; Specifies a temporary named result set, known as a common table expression (CTE).</p><details>  <summary>What is a common_table_expression?</summary>A common table expression (CTE) in SQL is a named temporary result set that can be referenced within a SELECT, INSERT, UPDATE, or DELETE statement. A CTE is defined using a WITH clause, which includes a SELECT statement that defines the result set for the CTE.<p>A CTE is similar to a subquery or derived table, but it has some distinct advantages. For example, a CTE can be referenced multiple times within the same query, making it easier to write complex queries that would otherwise require multiple subqueries or derived tables. Additionally, a CTE can improve query performance by allowing the database to reuse the result set for multiple parts of the query.</p><p>Here is an example of a simple CTE:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> my_cte <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> column1, column2</span><br><span class="line">    <span class="keyword">FROM</span> my_table</span><br><span class="line">    <span class="keyword">WHERE</span> column3 <span class="operator">=</span> <span class="string">&#x27;some_value&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> my_cte</span><br><span class="line"><span class="keyword">WHERE</span> column2 <span class="operator">&gt;</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>In this example, the CTE is defined using a SELECT statement that retrieves data from the my_table table. The result set for the CTE includes only the rows where column3 is equal to ‘some_value’. The SELECT statement that references the CTE then filters the result set further to include only the rows where column2 is greater than 100.</p><p>CTEs are a powerful feature of SQL that can simplify complex queries and improve performance. They are widely supported by most modern relational database systems, including SQL Server, MySQL, Oracle, and PostgreSQL.</p></details><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?redirectedfrom=MSDN&amp;view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?redirectedfrom=MSDN&amp;view=sql-server-ver15</a></li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15</a></li><li><a href="https://www.sqlshack.com/understanding-the-interaction-between-set-theory-and-set-operators-in-sql-server/">https://www.sqlshack.com/understanding-the-interaction-between-set-theory-and-set-operators-in-sql-server/</a></li><li><a href="https://sqlblog.org/2012/01/26/bad-habits-to-kick-thinking-a-while-loop-isnt-a-cursor">https://sqlblog.org/2012/01/26/bad-habits-to-kick-thinking-a-while-loop-isnt-a-cursor</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> rosetta code </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Performance</title>
      <link href="/2020/09/mysql-performance/"/>
      <url>/2020/09/mysql-performance/</url>
      
        <content type="html"><![CDATA[<p>Over time applications that persist data to a store will have performance degradation as queries that used to return in milliseconds may now take seconds or even minutes to return. This is normal as the application grows and it actually gets used.</p><p><a href="https://dev.mysql.com/downloads/installer/">MySQL Community edition</a> and <a href="https://www.mysql.com/products/workbench/">MySQL Workbench</a> come with all the tools (for free) needed to speed things up, you just need to know where to look and its not actually that hard.</p><h3 id="Where-Clause"><a href="#Where-Clause" class="headerlink" title="Where Clause"></a>Where Clause</h3><p>Assuming your SQL commands have a <a href="https://www.mysqltutorial.org/mysql-where/">where clause</a> they can be optimized to use an index, this is just a sorted list the database engine will query first when fetching your data.</p><p>The <code>WHERE</code> clause tells the engine you only want a subset of the data. Without a <code>WHERE</code> and the subsequent operators like <code>AND</code>, <code>OR</code> ect, you will always request all of the data.</p><h3 id="Large-Tables"><a href="#Large-Tables" class="headerlink" title="Large Tables"></a>Large Tables</h3><p>A school boy mistake would be to simply add indexes to all tables and columns, although the engine will ignore an index if it decides its not needed, the index will need to be maintained and updated over time. It will become fragmented.</p><p>Following YAGNI <a href="https://ardalis.com/beyond-good-enough-is-waste/">(You aren’t gonna need it)</a> seems to work pretty well for me as I would rather speed up SQL Commands when they start becoming a problem.</p><p>The statment below can help you identify tables to focus on, <code>count_rows</code> and <code>index_fragmented</code> are good starting points.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(table_schema, <span class="string">&#x27;.&#x27;</span>, table_name) <span class="keyword">as</span> table_schema,</span><br><span class="line"> CONCAT(table_rows) count_rows,</span><br><span class="line"> CONCAT(ROUND(data_length <span class="operator">/</span> ( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">2</span>), <span class="string">&#x27;G&#x27;</span>) data_size,</span><br><span class="line"> CONCAT(ROUND(index_length <span class="operator">/</span> ( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">2</span>), <span class="string">&#x27;G&#x27;</span>) index_length,</span><br><span class="line"> CONCAT(ROUND(( data_length <span class="operator">+</span> index_length ) <span class="operator">/</span> ( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">2</span>), <span class="string">&#x27;G&#x27;</span>) total_size,</span><br><span class="line"> ROUND(index_length <span class="operator">/</span> data_length, <span class="number">2</span>) index_fragmented</span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> data_length <span class="operator">+</span> index_length <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">50</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc%20examples/identify-large-tables.sql">identify-large-tables.sql</a></li></ul><h3 id="Slow-Query-Log"><a href="#Slow-Query-Log" class="headerlink" title="Slow Query Log"></a>Slow Query Log</h3><p>The engine will not log these by default for performance reasons, you need to switch this on. You can find all system variables with <code>SHOW VARIABLES</code>. The statement below filters only variables realted to slow queries.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">where</span> variable_name </span><br><span class="line"><span class="keyword">in</span> (<span class="string">&#x27;slow_query_log&#x27;</span>, <span class="string">&#x27;log_output&#x27;</span>, <span class="string">&#x27;long_query_time&#x27;</span>, <span class="string">&#x27;slow_query_log_file&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The defaults for these will be</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_output                  ~ FILE</span><br><span class="line">long_query_time             ~ 10.000000</span><br><span class="line">slow_query_log            ~ OFF</span><br><span class="line">slow_query_log_file         ~ /var/lib/mysql/MACHINENAME-slow.log</span><br></pre></td></tr></table></figure><p>You can also do things like <code>SHOW VARIABLES where variable_name like &#39;%query%&#39;;</code>.</p><p>Although you could query that file with something like <code>tail MACHINENAME-slow.log</code>, I like to use SQL to keep the logs as its easier to digest. If your database is runnnig in a container you can create an <a href="/2018/06/docker-interactive-container-session/">Interactive Container Session</a> and connect to its terminal.</p><p>If you using SQL to keep the logs, update as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> long_query_time <span class="operator">=</span> <span class="number">1</span>;                    </span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_output <span class="operator">=</span> <span class="string">&#x27;TABLE&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>long_query_time</strong></p><p>The <code>1</code> above means one second, you can however use milliseconds:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> long_query_time <span class="operator">=</span> <span class="number">0.1</span>;              <span class="operator">~</span> <span class="number">100</span>ms</span><br><span class="line"><span class="keyword">SET</span> long_query_time <span class="operator">=</span> <span class="number">0.5</span>;              <span class="operator">~</span> <span class="number">500</span>ms (half a <span class="keyword">second</span>)</span><br></pre></td></tr></table></figure><p>Then clear the logs table so you start fresh:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> mysql.slow_log</span><br></pre></td></tr></table></figure><p>Then test a long running query and check the results:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.slow_log;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CONVERT</span>(sql_text <span class="keyword">USING</span> utf8) <span class="keyword">as</span> command_text <span class="keyword">from</span> mysql.slow_log;</span><br></pre></td></tr></table></figure><p>Now run your application and let the engine log the slow queries for you.</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html">https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html</a></li></ul><h3 id="Execution-Plans"><a href="#Execution-Plans" class="headerlink" title="Execution Plans"></a>Execution Plans</h3><p>Pluck out a slow query from the above and run it in <code>MySQL Workbench</code>, to the right of the results scroll down and click <code>Execution Plan</code>. Things to look out for are <code>Full Table Scan</code> (This will be red) and <code>Thick lines</code> (shows heaps of rows/data coming back)</p><p><img src="/d/mysql-performance/sql-execution-plan-with-issues.png" alt="SQL Execution Plan With Issues"></p><p><strong>Full Table Scan</strong></p><p>You could fix this with an index, check which columns are in the <code>WHERE</code> statement or the columns you are using in your <code>JOINS</code></p><p><strong>Thick lines</strong></p><p>This is a bit harder, look at the amount of data being returned - do you need it? This can be fixed with simple things like swapping out <code>LEFT OUTER JOIN</code> with <code>INNER JOIN</code> as the inner returns only data where they intersect. This is not a silver bullet, your application may NEED all this data!</p><p>An index CAN however fix this for you so you will need to experiment and possibly re-write some of the queries.</p><ul><li><a href="https://dev.mysql.com/doc/workbench/en/wb-tutorial-visual-explain-dbt3.html">https://dev.mysql.com/doc/workbench/en/wb-tutorial-visual-explain-dbt3.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/execution-plan-information.html">https://dev.mysql.com/doc/refman/8.0/en/execution-plan-information.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/explain.html">https://dev.mysql.com/doc/refman/8.0/en/explain.html</a></li><li><a href="https://dev.mysql.com/doc/workbench/en/wb-performance.html">https://dev.mysql.com/doc/workbench/en/wb-performance.html</a></li></ul><h3 id="Create-Index"><a href="#Create-Index" class="headerlink" title="Create Index"></a>Create Index</h3><p>This can be as simple as <code>CREATE INDEX [your index name] ON [your table name] ([your column name])</code>. Its best to find a naming convention and stick to it, the examples below are prefixed with <code>idx_</code> for index and then the column name.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_id</span><br><span class="line">ON risk (id);</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_risk_id</span><br><span class="line">ON risk_line (risk_id);</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_risk_line_id</span><br><span class="line">ON re_eval (risk_line_id);</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_re_eval_id</span><br><span class="line">ON re_eval_verify (re_eval_id);</span><br></pre></td></tr></table></figure><p>After creating the index, run the query again and click the <code>Execution Plans</code> to confirm if your change helped. Instead of <code>SCAN</code> you should hopefully see <code>SEEK</code>, no more/or less red and thin lines showing less data.</p><p>You may still see <code>SCAN</code> like below but if the rows are low its probably fine.</p><p><img src="/d/mysql-performance/sql-execution-plan.png" alt="SQL Execution Plan"></p><p>If you make a mistake you can <code>DROP</code> the index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_risk_id <span class="keyword">ON</span> risk_line;</span><br></pre></td></tr></table></figure><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html">https://dev.mysql.com/doc/refman/8.0/en/create-index.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html">https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html</a></li></ul><h3 id="Other-logging"><a href="#Other-logging" class="headerlink" title="Other logging"></a>Other logging</h3><p>If the slow querys doesnt help you can enable verbose logging. Check the current settings with:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">where</span> variable_name </span><br><span class="line"><span class="keyword">in</span> (<span class="string">&#x27;general_log&#x27;</span>, <span class="string">&#x27;log_output&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The defaults for these will be</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">general_log            <span class="operator">~</span> OFF</span><br><span class="line">log_output             <span class="operator">~</span> FILE</span><br></pre></td></tr></table></figure><p>Then update them as:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> log_output <span class="operator">=</span> <span class="string">&#x27;table&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Then truncate the table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> mysql.general_log</span><br></pre></td></tr></table></figure><p>Run the application or some SQL commands and see what it logged:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.general_log;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CONVERT</span>(argument <span class="keyword">USING</span> utf8) <span class="keyword">as</span> command_text <span class="keyword">from</span> mysql.general_log;</span><br></pre></td></tr></table></figure><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/query-log.html">https://dev.mysql.com/doc/refman/8.0/en/query-log.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netify</title>
      <link href="/2020/09/netify/"/>
      <url>/2020/09/netify/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Debugging proxy that will allow you to intercept and mutate requests from a web page</p></blockquote><h3 id="Local-Response"><a href="#Local-Response" class="headerlink" title="Local Response"></a>Local Response</h3><p>Consider this simple page - <a href="https://carlpaton.github.io/d/netify/">https://carlpaton.github.io/d/netify/</a></p><p>The <code>SHOULD 200</code> button does a <code>GET</code> to <a href="https://carlpaton.github.io/d/netify/sample.json">https://carlpaton.github.io/d/netify/sample.json</a></p><p>The JSON response is then shown in the LOG, sweet.</p><p><img src="/d/netify/should-200.jpg" alt="SHOULD 200"></p><p>Now to intercept that request create a rule that matches</p><ul><li>Request filter: <a href="https://carlpaton.github.io/d/netify/sample.json">https://carlpaton.github.io/d/netify/sample.json</a></li><li>Set to HXR and GET</li></ul><p>Check Local Response and set:</p><ul><li>Status code: 200</li><li>Set headers: for this example they can be left blank as the page doesnt care</li><li>Body</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;foo&quot;: &quot;naa take this&quot; &#125;</span><br></pre></td></tr></table></figure><p><img src="/d/netify/settings.jpg" alt="Settings"></p><p>Click <code>Inactivate</code> to change the plugin to be <code>Listening</code>, now click <code>CLEAR LOG</code> and then <code>SHOULD 200</code>. The new intercepted response is now shown.</p><p><img src="/d/netify/intercept-should-200.jpg" alt="SHOULD 200"></p><p>This can be seen in the network tab:</p><p><img src="/d/netify/network-tab.jpg" alt="Network Tab"></p><h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><p>Some example headers you may needs to set if your request tells you off.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:                                 application/json; charset=utf-8</span><br><span class="line">Access-Control-Allow-Credentials:             true</span><br><span class="line">Access-Control-Allow-Origin:                  http://localhost:1234</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj">https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj</a></li><li><a href="https://www.json-generator.com/">https://www.json-generator.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> browser utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command and Query Responsibility Segregation (CQRS)</title>
      <link href="/2020/08/cqrs/"/>
      <url>/2020/08/cqrs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Use Case: When applications change frequently, you can updated the Queries &amp; Commands without affecting each other. When the Application is read heavy, you can then split the database into a Read (performance tuned for read) and Write (Fully normalized)</p></blockquote><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><blockquote><p>“The Command and Query Responsibility Segregation (CQRS) pattern separates read and update operations for a data store. Implementing CQRS in your application can maximize its performance, scalability, and security. The flexibility created by migrating to CQRS allows a system to better evolve over time and prevents update commands from causing merge conflicts at the domain level.”</p></blockquote><p>CQRS has 3 building blocks</p><table><thead><tr><th>Building block</th><th>Description</th></tr></thead><tbody><tr><td>Command / Query</td><td>All the data we need to execute the Query or Command. This is represented as an object instance.</td></tr><tr><td>Handler</td><td>Business logic to execute the Command or Query. This returns a response.</td></tr><tr><td>Response</td><td>Return data that we want to return encapsulated as an object.</td></tr></tbody></table><h3 id="MediatR"><a href="#MediatR" class="headerlink" title="MediatR"></a>MediatR</h3><p><strong>NOTE</strong> You dont NEED <code>MediatR</code> to implement CQRS, see the hand rolled example below. This is where I would start and only add <code>MediatR</code> if it solves a problem.</p><p>All of the examples below are from <a href="https://github.com/carlpaton/CQRSInDotnetCore">Jonathan Williams: CQRS using C# and MediatR</a> and use .Net 5 and C# 9 but the principle will carry to others. </p><p>Dependancy libraries</p><ul><li><a href="https://www.nuget.org/packages/MediatR/">MediatR 9.0.0</a></li><li><a href="https://www.nuget.org/packages/MediatR.Extensions.Microsoft.DependencyInjection/">MediatR.Extensions.Microsoft.DependencyInjection 9.0.0</a></li></ul><p>Jonathan keeps the code together in a static class for findability and describes this as a container for the building blocks. Type of <code>record</code> is recommended for <code>Query</code>, <code>Command</code> and <code>Responses</code> as they are immutable, these are DTO’s (data transfer objects) so we dont want them to change.</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>All the code below has been simplified for brevity, the full <a href="https://github.com/carlpaton/CQRSInDotnetCore">source is on github</a>. The <code>Repository</code> is just a data repository that returns a <code>List&lt;Todo&gt; Todos</code> where type <code>Todo</code> is a domain entity with properties <code>Id</code>, <code>Name</code> and <code>Complete</code>.</p><ol><li>In a <code>Command</code> folder create the static class <code>AddTodo</code></li><li>Add the record <code>Command</code>, class <code>Handler</code> and record <code>Response</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CQRSTest.Commands</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AddTodo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Command</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Command</span>(<span class="params"><span class="built_in">string</span> Name</span>) : IRequest&lt;<span class="built_in">int</span>&gt;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Handler</span> : <span class="title">IRequestHandler</span>&lt;<span class="title">Command</span>, <span class="title">int</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> Repository repository;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Handler</span>(<span class="params">Repository repository</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.repository = repository;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Response&gt; <span class="title">Handle</span>(<span class="params">Command request, CancellationToken cancellationToken</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> hardCodedId = <span class="number">42</span>; <span class="comment">// we dont have a real database for this demo</span></span><br><span class="line">                <span class="keyword">var</span> todo = <span class="keyword">new</span> Todo &#123; Id = hardCodedId, Name = request.Name &#125;;</span><br><span class="line">                repository.Todos.Add(todo);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> hardCodedId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Response (the code above just returned an int, I included this for completeness as the handler could return a complex type)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Response</span>(<span class="params"><span class="built_in">int</span> Id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>In a <code>Queries</code> folder create the static class <code>GetTodoById</code>.</li><li>Add the record <code>Query</code>, <code>Handler</code> and record <code>Response</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CQRSTest.Queries</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">GetTodoById</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Query</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Query</span>(<span class="params"><span class="built_in">int</span> Id</span>) : IRequest&lt;Response&gt;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Handler</span> : <span class="title">IRequestHandler</span>&lt;<span class="title">Query</span>, <span class="title">Response</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> Repository repository;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Handler</span>(<span class="params">Repository repository</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.repository = repository;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Response&gt; <span class="title">Handle</span>(<span class="params">Query request, CancellationToken cancellationToken</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> todo = repository.Todos.FirstOrDefault(x =&gt; x.Id == request.Id);</span><br><span class="line">                <span class="keyword">return</span> todo == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="keyword">new</span> Response &#123; Id = todo.Id, Name = todo.Name, Completed = todo.Completed &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Response</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Response</span> (<span class="params"><span class="built_in">int</span> Id, <span class="built_in">string</span> Name, <span class="built_in">bool</span> Completed</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>In the controller use constructor injection to inject <code>IMediator mediator</code>, then use <code>mediator.Send(requestObject)</code> to infer the relative <code>Command</code> or <code>Query</code>.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CQRSTest.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TodoController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IMediator mediator;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TodoController</span>(<span class="params">IMediator mediator</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="string">&quot;/&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetTodoById</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> query = <span class="keyword">new</span> GetTodoById.Query(id);</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> mediator.Send(query);</span><br><span class="line">            <span class="keyword">return</span> response == <span class="literal">null</span> ? NotFound() : Ok(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">AddTodo</span>(<span class="params">AddTodo.Command command</span>)</span> =&gt; Ok(<span class="keyword">await</span> mediator.Send(command));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>In the application startup pipeline add Mediator to the dependancy injection container using the extension method <code>AddMediatR</code>. Passing the assembly <code>Startup</code> tells mediator to use refection to include our classes above in the dependancy injection container (as they are in the same assembly as Startup). It will be looking for the <code>IRequestHandler</code> interface.</li></ol><p>The order is important, any <code>Repository</code> being used needs to be added to the container first as this will be resolved/injected into the handlers constructor.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;Repository&gt;();</span><br><span class="line">services.AddMediatR(<span class="keyword">typeof</span>(Startup).Assembly);</span><br></pre></td></tr></table></figure><p>Jonathan did a sweet video covering the code above.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/mdzEKGlH0_Q" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Hand-rolling"><a href="#Hand-rolling" class="headerlink" title="Hand rolling"></a>Hand rolling</h3><p>MediatR is great but I think its best to introduce a library when it solves a problem, you can just as easily hand roll CQRS into your application. Always group though by feature (what it actually does).</p><ol><li>Setup your folder structure, here my feature is “Files”</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src/MySweetApp/Commands/Files</span><br><span class="line">src/MySweetApp/Queries/Files</span><br></pre></td></tr></table></figure><p>The steps going forward are the same for Commands (ie: go do something, could be creating a resource) and Queries (ie: go fetch something), so I will just focus on a Command</p><ol start="2"><li>Create your class files in <code>src/MySweetApp/Commands/Files</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DeleteFileCommand.cs</span><br><span class="line">DeleteFileCommandHandler.cs</span><br><span class="line">IDeleteFileCommandHandler.cs</span><br></pre></td></tr></table></figure><ol start="3"><li>The command encapsulates the data of the request and can be extended with properties, here its just a simple file id. Its best only construct the object though its constructor, so the public <code>FileId</code> only has a get.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MySweetApp.Commands.Files</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DeleteFileCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DeleteFileCommand</span>(<span class="params">Guid fileId</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            FileId = fileId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Guid FileId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Define the interface, if you have many you could create an <code>Interfaces</code> folder, you can make <code>HandleAsync</code> more descriptive if you want, however the command should do only ONE thing and if you start adding more functionality you are not really thinking about <a href="/2018/05/single-responsibility-principle-srp/">Single Responsibility Principle (SRP)</a>.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MySweetApp.Commands.Files</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDeleteFileCommandHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Task <span class="title">HandleAsync</span>(<span class="params">DeleteFileCommand command</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Define the command itself</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MySweetApp.Commands.Files</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DeleteFileCommandHandler</span> : <span class="title">IDeleteFileCommandHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IFileRepository _fileRepository;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IRequestContext _requestContext;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IBlobRepository _blobRepository;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DeleteFileCommandHandler</span>(<span class="params">IFileRepository fileRepository, IRequestContext requestContext, IBlobRepository blobRepository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _fileRepository = fileRepository;</span><br><span class="line">            _requestContext = requestContext;</span><br><span class="line">            _blobRepository = blobRepository;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">HandleAsync</span>(<span class="params">DeleteFileCommand command</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// find the file in fileRepository based on </span></span><br><span class="line">            <span class="comment">//    command.FileId</span></span><br><span class="line">            <span class="comment">//    _requestContext.Identifier ~ this is something the application knows about the user/app making the request, normally a tenant UUID</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// delete </span></span><br><span class="line">            <span class="comment">//    in _blobRepository</span></span><br><span class="line">            <span class="comment">//    in _fileRepository ~ some systems set a soft delete flag</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>So then to consume inject <code>IDeleteFileCommandHandler</code> into your calling code, for me it was in the controller, create the <code>DeleteFileCommand</code> instance and call <code>HandleAsync</code>. This is then easily unit tested because you dont need to mock heaps of things.</p></li><li><p>You just need to wire up the DI resolution of DeleteFileCommandHandler to IDeleteFileCommandHandler, MediatR would have done that for you as a benifit. </p></li></ol><p>The <code>DeleteFileCommand</code> above returned <code>NoContent();</code> but you could have a <code>CreateFileCommand</code> where it has more properties and returns the created file object, this would be a public API model (DTO)</p><p>Tests to enforce naming see <a href="/2019/06/unit-testing-with-xunit/">Enforce command handler naming</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs">https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs</a></li><li><a href="https://microservices.io/patterns/data/cqrs.html">https://microservices.io/patterns/data/cqrs.html</a></li><li><a href="https://martinfowler.com/bliki/CQRS.html">https://martinfowler.com/bliki/CQRS.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Array</title>
      <link href="/2020/08/js-arrays/"/>
      <url>/2020/08/js-arrays/</url>
      
        <content type="html"><![CDATA[<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">JavaScript</a> Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.</p><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>Creates a new, shallow-copied Array instance from an array-like or iterable object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squares = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.grid div&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from</a></li></ul><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>Merge two arrays together.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> planets = [<span class="string">&#x27;Mars&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> items = [ <span class="string">&#x27;Pluto&#x27;</span>, <span class="string">&#x27;Uranus&#x27;</span>, <span class="string">&#x27;Saturn&#x27;</span>, <span class="string">&#x27;Earth&#x27;</span> ];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(planets.<span class="title function_">concat</span>(items));</span><br><span class="line"><span class="comment">// [&quot;Mars&quot;, &quot;Pluto&quot;, &quot;Uranus&quot;, &quot;Saturn&quot;, &quot;Earth&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat</a></li></ul><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>The <code>every()</code> method tests whether all elements in the array pass the test implemented by the provided function.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every</a></li></ul><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">    squares: Array(9).fill(null),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/reactjs-tic-tac-toe/blob/master/my-app/src/index.js">https://github.com/carlpaton/reactjs-tic-tac-toe/blob/master/my-app/src/index.js</a></li></ul><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>The inbuilt <code>forEach()</code> method executes a provided function once for each array element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"></span><br><span class="line">name.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello &#x27;</span> + name);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></li></ul><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>The <code>some()</code> method tests whether at least one element in the array passes the test implemented by the provided function.</p><p>So for the below if any of the the functions <code>functionA</code> or <code>functionB</code> return true then the result is true.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemArray.<span class="title function_">some</span>(functionA, functionB);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some</a></li></ul><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>Call <code>.slice()</code> to create a copy of the squares array to modify instead of modifying the existing array.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const squares = this.state.squares.slice();</span><br><span class="line">squares[i] = &#x27;X&#x27;;</span><br><span class="line">this.setState(&#123;squares: squares&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.w3schools.com/jsref/jsref_slice_array.asp">https://www.w3schools.com/jsref/jsref_slice_array.asp</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a></li></ul><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>Mutates an array by removing items/items in an array and replace them with new ones. Usage is <code>itemArray.splice(startIndex, deleteCount, [NEW ARRAY ITEMS])</code></p><p>Example to delete items</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> planets = [<span class="string">&#x27;Mars&#x27;</span>, <span class="string">&#x27;Saturn&#x27;</span>, <span class="string">&#x27;Pluto&#x27;</span>, <span class="string">&#x27;Earth&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(planets.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>)); <span class="comment">// this will delete &#x27;Pluto&#x27;</span></span><br><span class="line"><span class="comment">// [&quot;Mars&quot;, &quot;Saturn&quot;, &quot;Earth&quot;]</span></span><br></pre></td></tr></table></figure><p>Example to add items</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> planets = [<span class="string">&#x27;Mars&#x27;</span>, <span class="string">&#x27;Saturn&#x27;</span>, <span class="string">&#x27;Earth&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(planets.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Pluto&#x27;</span>, <span class="string">&#x27;Uranus&#x27;</span>)); <span class="comment">// 1 for the first index, and 0 as we dont want to delete anything</span></span><br><span class="line"><span class="comment">// [&quot;Mars&quot;, &quot;Pluto&quot;, &quot;Uranus&quot;, &quot;Saturn&quot;, &quot;Earth&quot;]</span></span><br></pre></td></tr></table></figure><p>Example to remove all after an index</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> planets = [<span class="string">&#x27;Mars&#x27;</span>, <span class="string">&#x27;Pluto&#x27;</span>, <span class="string">&#x27;Uranus&#x27;</span>, <span class="string">&#x27;Saturn&#x27;</span>, <span class="string">&#x27;Earth&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(planets.<span class="title function_">splice</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// [&quot;Pluto&quot;, &quot;Uranus&quot;, &quot;Saturn&quot;, &quot;Earth&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(planets);</span><br><span class="line"><span class="comment">// [&quot;Mars&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice</a></li></ul><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length">Array.prototype.length</a> property of an object which is an instance of type Array sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arr.length = &#x27;</span> + arr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// arr.length = 3</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Sourcing</title>
      <link href="/2020/08/event-sourcing/"/>
      <url>/2020/08/event-sourcing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><blockquote><p>“Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects.”</p></blockquote><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p>Most of us are familiar with a relational database, these can be used to store the sequence of events. The following example was adapted from <a href="https://eventflow.readthedocs.io/">https://eventflow.readthedocs.io/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* MS SQL */</span><br><span class="line">CREATE TABLE [dbo].[event_source](</span><br><span class="line">    [id] [bigint] IDENTITY(1,1) NOT NULL,</span><br><span class="line">    [entity_id] [int] NOT NULL,</span><br><span class="line">    [data] [nvarchar](max) NOT NULL,</span><br><span class="line">    [meta_data] [nvarchar](max) NOT NULL</span><br><span class="line"> CONSTRAINT [pk_event_source] PRIMARY KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">    [id] ASC</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>id; global id you can use to order the events</li><li>entity_id; links to a table of entities </li><li>data; serialized entity (JSON)</li><li>meta_data; tracking information such as <code>time stamp</code>, <code>action performed by</code> anything useful to track the event</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/7065045/using-an-rdbms-as-event-sourcing-storage">https://stackoverflow.com/questions/7065045/using-an-rdbms-as-event-sourcing-storage</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing">https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functional vs. Imperative Programming</title>
      <link href="/2020/08/functional-vs-imperative-programming/"/>
      <url>/2020/08/functional-vs-imperative-programming/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><p>Summary of use case without fancy words like <code>paradigm</code>, although there is some overlap as some languages support both the below is how I have been programming.</p><table><thead><tr><th>Characteristic</th><th>Imperative (Procedural)</th><th>Functional (Declarative)</th></tr></thead><tbody><tr><td>Langauge / Library</td><td>C#</td><td>React</td></tr><tr><td>State</td><td>State changes are    important.</td><td>State changes are non-existent.</td></tr><tr><td>Primary flow control</td><td>Loops, conditionals, and function (method) calls.</td><td>Function calls, including recursion.</td></tr><tr><td>Manipulation unit</td><td>Class instances (objects)</td><td>Functions as first-class objects and data collections.</td></tr></tbody></table><h3 id="Code-Examples"><a href="#Code-Examples" class="headerlink" title="Code Examples"></a>Code Examples</h3><p>Code example by <a href="https://codeburst.io/@ian.mundy">Ian Mundy</a></p><h4 id="Imperative-Procedural"><a href="#Imperative-Procedural" class="headerlink" title="Imperative (Procedural)"></a>Imperative (Procedural)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const container = document.getElementById(‘container’);</span><br><span class="line">const btn = document.createElement(‘button’);</span><br><span class="line">btn.className = ‘btn red’;</span><br><span class="line">btn.onclick = function(event) &#123;</span><br><span class="line"> if (this.classList.contains(‘red’)) &#123;</span><br><span class="line">   this.classList.remove(‘red’);</span><br><span class="line">   this.classList.add(‘blue’);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">   this.classList.remove(‘blue’);</span><br><span class="line">   this.classList.add(‘red’);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">container.appendChild(btn);</span><br></pre></td></tr></table></figure><h4 id="Functional-Declarative"><a href="#Functional-Declarative" class="headerlink" title="Functional (Declarative)"></a>Functional (Declarative)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Button extends React.Component&#123;</span><br><span class="line">  this.state = &#123; color: &#x27;red&#x27; &#125;</span><br><span class="line">  handleChange = () =&gt; &#123;</span><br><span class="line">    const color = this.state.color === &#x27;red&#x27; ? &#x27;blue&#x27; : &#x27;red&#x27;;</span><br><span class="line">    this.setState(&#123; color &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (&lt;div&gt;</span><br><span class="line">      &lt;button </span><br><span class="line">         className=`btn $&#123;this.state.color&#125;`</span><br><span class="line">         onClick=&#123;this.handleChange&#125;&gt;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2">https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Reference</title>
      <link href="/2020/08/reactjs-reference/"/>
      <url>/2020/08/reactjs-reference/</url>
      
        <content type="html"><![CDATA[<p>Mostly a place to dump react things that I cant find a home for :D</p><h2 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a>Icons</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; FaTimes &#125; from &#x27;react-icons/fa&#x27;</span><br><span class="line"></span><br><span class="line">&#123;/* &lt;FaTimes style=&#123;&#123;color:&#x27;red&#x27;, cursor:&#x27;pointer&#x27;&#125;&#125; /&gt; */&#125;</span><br></pre></td></tr></table></figure><h2 id="Context-or-Store"><a href="#Context-or-Store" class="headerlink" title="Context or Store"></a>Context or Store</h2><p>When you find yourself passing state all the time as props.</p><ul><li><a href="https://kentcdodds.com/blog/prop-drilling">https://kentcdodds.com/blog/prop-drilling</a></li></ul><p>When you dont really need a store. Yet.</p><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#usecontext">https://reactjs.org/docs/hooks-reference.html#usecontext</a></li></ul><h2 id="RTK-Query"><a href="#RTK-Query" class="headerlink" title="RTK Query"></a>RTK Query</h2><blockquote><p>“RTK Query is a powerful data fetching and caching tool. It is designed to simplify common cases for loading data in a web application, eliminating the need to hand-write data fetching &amp; caching logic yourself.”</p></blockquote><ul><li><a href="https://redux-toolkit.js.org/rtk-query/overview">https://redux-toolkit.js.org/rtk-query/overview</a></li></ul><h2 id="Dates"><a href="#Dates" class="headerlink" title="Dates"></a>Dates</h2><ul><li><a href="https://www.npmjs.com/package/date-fns">https://www.npmjs.com/package/date-fns</a></li><li><a href="https://www.npmjs.com/package/react-datepicker">https://www.npmjs.com/package/react-datepicker</a></li></ul><h2 id="SPA-Hello-World"><a href="#SPA-Hello-World" class="headerlink" title="SPA Hello World"></a>SPA Hello World</h2><p>Some pointers </p><ul><li>1 folder per component, css and test</li><li>folders with Captial letter</li></ul><h3 id="Brian-Holt-Complete-Intro-to-React"><a href="#Brian-Holt-Complete-Intro-to-React" class="headerlink" title="Brian Holt: Complete Intro to React"></a>Brian Holt: Complete Intro to React</h3><ul><li><a href="https://btholt.github.io/complete-intro-to-react-v7/">Brian Holt - complete-intro-to-react-v7</a></li><li><a href="https://btholt.github.io/complete-intro-to-react-v6/">Brian Holt - complete-intro-to-react-v6</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install -D prettier                                                                 # -D means it&#x27;s for development only.</span><br><span class="line">npm install -D eslint eslint-config-prettier</span><br><span class="line">npm install -D parcel@1.12.3</span><br><span class="line">npm install react@17.0.1 react-dom@17.0.1</span><br><span class="line">npm install -D @babel/core@7.12.16 @babel/preset-react@7.12.13</span><br><span class="line">npm install -D eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react</span><br><span class="line">npm install react-router-dom@5.2.0</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>Additional things I installed when adding typescript and changing to <code>.tsx</code> files</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install react-date-picker</span><br><span class="line">npm i -D typescript</span><br><span class="line">npm i -D @types/react</span><br><span class="line">npm i -D @types/react-dom</span><br></pre></td></tr></table></figure><h3 id="React-App"><a href="#React-App" class="headerlink" title="React App"></a>React App</h3><p><code>npx create-react-app</code> is the suggested method for creating new apps</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br><span class="line">yarn build                                                                              # Production</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i react-icons                                                                       #Icons</span><br><span class="line">npm i react-router-dom@5                                                                #Router</span><br><span class="line">npm install --save typescript @types/node @types/react @types/react-dom @types/jest     #If you didnt use `--typescript`, you will also then need to rename `.js` to `.tsx`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i redux react-redux @types/react-redux @types/redux redux-devtools-extension</span><br><span class="line">npm i redux-thunk @types/redux-thunk</span><br></pre></td></tr></table></figure><h3 id="UI-Material"><a href="#UI-Material" class="headerlink" title="UI Material"></a>UI Material</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @material-ui/core</span><br><span class="line">npm install @material-ui/data-grid</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/devias-io/material-kit-react">https://github.com/devias-io/material-kit-react</a></li><li><a href="https://material-ui.com/components/tables/#table">https://material-ui.com/components/tables/#table</a></li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>ES7 React/Redux/GraphQL/React-Native snippets</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rafce</span><br></pre></td></tr></table></figure><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></li></ul><h3 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h3><ul><li><a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8">https://www.youtube.com/watch?v=w7ejDZ8SWv8</a></li><li><a href="https://www.youtube.com/watch?v=jrKcJxF0lAU">https://www.youtube.com/watch?v=jrKcJxF0lAU</a></li></ul><h3 id="Learn-tsx-and-types"><a href="#Learn-tsx-and-types" class="headerlink" title="Learn.tsx and types"></a>Learn.tsx and types</h3><p>Here <code>Props</code> belongs to <code>Learn.tsx</code> and is destructured in the constructor.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: number;</span><br><span class="line">  name?: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Learn</span> = (<span class="params">&#123; title, name &#125;: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Hello &#123;title&#125; &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Learn</span>;</span><br></pre></td></tr></table></figure><p>Use as <code>&lt;Learn title=&#123;1&#125; name=&quot;Hoe&quot; /&gt;</code></p><p><code>interface</code> and <code>type</code> are the same thing, interfaces merge themself so the example below will have <code>name</code> and <code>email</code> in the <code>IStaff</code> interface where <code>Staff</code> wont compile so I think using <code>type</code> is safer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">IStaff</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IStaff</span> &#123;</span><br><span class="line">  <span class="attr">email</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Staff</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Staff</span> = &#123;</span><br><span class="line">  <span class="attr">email</span>: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://reactjs.org/">https://reactjs.org/</a></li><li><a href="https://codesandbox.io/dashboard/home">https://codesandbox.io/dashboard/home</a></li><li><a href="https://www.udemy.com/course/react-the-complete-guide-incl-redux/">https://www.udemy.com/course/react-the-complete-guide-incl-redux/</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsx.html">https://www.typescriptlang.org/docs/handbook/jsx.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JS Hooks</title>
      <link href="/2020/08/reactjs-hooks/"/>
      <url>/2020/08/reactjs-hooks/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="/2020/08/reactjs-use-state/">useState</a></li><li><a href="/2020/08/reactjs-use-effect/">useEffect</a></li><li><a href="/2020/08/reactjs-use-params/">useParams</a></li><li><a href="/2022/04/reactjs-use-context/">useContext - when you dont need a store(yet)</a></li><li>withRouter </li><li>useReducer (for doing Redux-like reducers)</li><li>useRefs (for when you need to have programmatic access to a DOM node)</li></ul><p>Also see <a href="/2022/04/reactjs-custom-hooks/">Custom Hook</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.freecodecamp.org/news/beginner-react-project-build-basic-forms-using-react-hooks/">https://www.freecodecamp.org/news/beginner-react-project-build-basic-forms-using-react-hooks/</a></li><li><a href="https://www.freecodecamp.org/news/react-typescript-how-to-set-up-types-on-hooks/">https://www.freecodecamp.org/news/react-typescript-how-to-set-up-types-on-hooks/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React useEffect</title>
      <link href="/2020/08/reactjs-use-effect/"/>
      <url>/2020/08/reactjs-use-effect/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://reactjs.org/docs/hooks-reference.html#useeffect">https://reactjs.org/docs/hooks-reference.html#useeffect</a></li></ul><p>The function passed to useEffect will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.</p><p>The default behavior for effects is to fire the effect after every completed render. You can however <code>conditionally</code> fire the effect by passing a second argument as an array of values. Example: <code>fireWhileImChanging</code> below</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something with prop values</span></span><br><span class="line">  &#125;,</span><br><span class="line">  [fireWhileImChanging],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><pre><code class="js">  useEffect(() =&gt; &#123;    const abortController = new AbortController();    fetch(      `$&#123;REACT_APP_API_URL&#125;/equipment`,      &#123;        signal: abortController.signal,        method: &quot;GET&quot;,        headers: &#123;          &#39;Accept&#39;: &#39;application/json, text/plain&#39;,          &#39;Content-Type&#39;: &#39;application/json;charset=UTF-8&#39;      &#125;    &#125;)    .then(response =&gt; response.json())    .then(json =&gt; &#123;      //console.log(JSON.stringify(json));      //setEquipment(json);    &#125;)    .catch(error =&gt; console.log(error));    return () =&gt; &#123;      abortController.abort();    &#125;;  &#125;,[setEquipment]);</code></pre><ul><li><a href="https://dev.to/pallymore/clean-up-async-requests-in-useeffect-hooks-90h">https://dev.to/pallymore/clean-up-async-requests-in-useeffect-hooks-90h</a></li><li><a href="https://dmitripavlutin.com/react-useeffect-explanation/">https://dmitripavlutin.com/react-useeffect-explanation/</a></li></ul><h2 id="YouTube-D"><a href="#YouTube-D" class="headerlink" title="YouTube :D"></a>YouTube :D</h2><ul><li>React Hooks Tutorial - 1 - Introduction</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/cF2lQ_gZeA8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li>React.js Hooks Crash Course</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/-MlNBTSg_Ww" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React useParams</title>
      <link href="/2020/08/reactjs-use-params/"/>
      <url>/2020/08/reactjs-use-params/</url>
      
        <content type="html"><![CDATA[<p>The useParams hook is how you get params from React Router.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Details</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Details</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React useState</title>
      <link href="/2020/08/reactjs-use-state/"/>
      <url>/2020/08/reactjs-use-state/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 27/03/2022</strong></p><p>Returns a stateful value, and a function to update it.</p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>Code example by <a href="https://github.com/btholt/citr-v6-project/blob/master/04-hooks/src/SearchParams.js">Brian Holt</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ANIMALS</span> = [<span class="string">&quot;bird&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;rabbit&quot;</span>, <span class="string">&quot;reptile&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SearchParams</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [animal, updateAnimal] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [location, updateLocation] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [breed, updateBreed] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> breeds = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;search-params&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;location&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Location</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id</span>=<span class="string">&quot;location&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;location&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;Location&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> updateLocation(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Animal</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id</span>=<span class="string">&quot;animal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;animal&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> updateAnimal(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">            onBlur=&#123;(e) =&gt; updateAnimal(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;ANIMALS.map((animal) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;animal&#125;</span> <span class="attr">value</span>=<span class="string">&#123;animal&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;animal&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;breed&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Breed</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">disabled</span>=<span class="string">&#123;!breeds.length&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">id</span>=<span class="string">&quot;breed&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;breed&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> updateBreed(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">            onBlur=&#123;(e) =&gt; updateBreed(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;breeds.map((breed) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;breed&#125;</span> <span class="attr">value</span>=<span class="string">&#123;breed&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;breed&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SearchParams</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="React-FC"><a href="#React-FC" class="headerlink" title="React.FC"></a>React.FC</h2><p>Code example by <a href="https://www.freecodecamp.org/news/author/ibrahima92/">Ibrahima Ndaw</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">App</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> [counter, setCounter] = <span class="title class_">React</span>.<span class="property">useState</span>&lt;number&gt;(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Result: &#123; counter &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter - 1)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#usestate">https://reactjs.org/docs/hooks-reference.html#usestate</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tslint</title>
      <link href="/2020/08/tslint/"/>
      <url>/2020/08/tslint/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TSLint - An extensible linter for the TypeScript language.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const log = &#123;</span><br><span class="line">    &#x27;foo&#x27;: props.foo,</span><br><span class="line">    &#x27;bar&#x27;: props.bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// tslint:disable-next-line: no-console</span><br><span class="line">console.log(&#x27;XXX log=&#x27;, log);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://palantir.github.io/tslint/">https://palantir.github.io/tslint/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperfixation</title>
      <link href="/2020/07/hyperfixation/"/>
      <url>/2020/07/hyperfixation/</url>
      
        <content type="html"><![CDATA[<p>By trade I solve business problems with code, this often entails hours of snorkeling though <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace?view=netcore-3.1">stack traces</a> and code I’m trying to understand. Not to mention several google tabs open all about the current <a href="https://docs.microsoft.com/en-us/dotnet/api/system.exception?view=netcore-3.1">exception</a> I just cannot wrap my head around.</p><p>Recently I was tasked with a simple case to update the spelling of an area called <a href="/2020/07/whanganui/">Whanganui</a>, seems simple enough right? <code>CTRL F</code> find the mistake, update it <code>CRTL S</code> … boom ship it, case closed. Well its not always that simple…</p><h3 id="Problem-Domain"><a href="#Problem-Domain" class="headerlink" title="Problem Domain"></a>Problem Domain</h3><p>All company’s have some kind of <a href="https://en.wikipedia.org/wiki/Legacy_code">legacy system or code base</a>, if they don’t they are a start-up and the code is perfect right? Follows <a href="/2018/04/solid-object-oriented-design/">SOLID</a>, has <a href="/tags/software-testing/">unit tests</a> for days… Sure :)</p><p>The problem I faced was a mixture of <a href="/2018/07/database-normalization/">database de-normalization</a>, years of legacy code, business rules by business unit (or vertical) and to be honest a lack of understanding of all the processes that these business units run daily. Big company’s have many working parts, this is how they make money. This is how they can pay their bills.</p><p>So sweet, I found tables to change. There were 3 with the area data and 2 with the business unit specific data. I figured out the <a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver15">SQL Statements</a>, had them reviewed and began testing. (In the end there were more tables I changed)</p><p>This was where I made my first mistake, I <a href="https://totallyadd.com/blog/hyperfixation-and-adhd/">hyper fixated</a> on only my business unit’s logic, the code caching mechanisms and the exceptions I managed to get the code base to throw while testing. This is exciting stuff for me, if I break code I generally get a better understanding of it. I eventually got the branch to behave in manner that I deemed ready for test, so we tested and shipped the case.</p><p>Well then all hell broke loose with exceptions for days in <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/classes">classes</a> that I knew I had tested. Man it was frustrating but we had to roll the change back as it was impacting some production traffic. Thankfully my employer has a <a href="https://www.theceomagazine.com/business/management-leadership/foster-no-blame-culture/">zero blame culture</a>, we did our post <code>system bork</code> ritual’s to understand why things got unhappy and learn from it so we can do better next time.</p><h3 id="The-Known"><a href="#The-Known" class="headerlink" title="The Known"></a>The Known</h3><p>I realized that my hyper fixation on the <code>KNOWN</code> was not the correct approach for this problem, we needed extend our focus to the unknown. Sounds weird right? The unknown is, well unknown… it is however reasonable to assume code will break if you give it something weird. It expects <code>Int 32</code> but you give it something random like a lizard.</p><p>In World War 2, Abraham Wald was smart enough not to focus on the known but to use the <code>KNOWN</code> to figure out the <code>UN-KNOWN</code>, the Navy was trying to figure out how to keep their planes in the air after being shot. It was a war, people shot at planes. They looked at planes that had been shot and determined that these areas needed to be beefed up with armor.   </p><blockquote><p>According to him, the statisticians were looking at the planes that came back, meaning that the damage was not critical. Wald pointed out that they should do the exact opposite of what the Navy was planning to do. According to him, they should understand that the undamaged areas on the diagram were the reason that the aircraft was able to make it back. - boredpanda.com</p></blockquote><p><img src="/d/hyperfixation/abraham-wald-plane-bullet-holes.png" alt="Abraham Wald Survival Bias- boredpanda.com"></p><p>In the same way, I needed to focus my changes not only in the database but also in the code base to ethically hack the code to rather log a WARNING than throw exceptions when the database data is processed and it received something <code>UNKNOWN</code>. This is beefing up the important parts which is the same as the aeroplane engines, cockpit ect which do not have any bullet holes in the picture above but also understanding that the areas that got shot can still function.</p><p>When working though this case I was reminded of a quote from one of my favorite <a href="https://www.pluralsight.com/authors/steve-smith">pluralsight</a> authors - <a href="https://www.linkedin.com/in/stevenandrewsmith/">Steve Smith</a></p><blockquote><p>As software developers, we fail in two ways: we build the thing wrong, or we build the wrong things.</p></blockquote><p><img src="/d/hyperfixation/steve-smith-quote.jpg" alt="Steve Smith Quote"></p><p>Not only did I build the thing wrong, I hyper focused on only one area of the business and its <code>Survival Bias</code>. In the end we shipped the case and there was no <code>BORK</code> in production but its only because I started to focus on the <code>UNKNOWN</code> and stopped hyper fixating on the <code>KNOWN</code>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.linkedin.com/posts/carl-paton_excellent-example-of-focusing-on-the-right-activity-6691772515146190848-Ap6q">https://www.linkedin.com/posts/carl-paton_excellent-example-of-focusing-on-the-right-activity-6691772515146190848-Ap6q</a></li><li><a href="https://en.wikipedia.org/wiki/Abraham_Wald">https://en.wikipedia.org/wiki/Abraham_Wald</a></li><li><a href="https://medium.com/@penguinpress/an-excerpt-from-how-not-to-be-wrong-by-jordan-ellenberg-664e708cfc3d">https://medium.com/@penguinpress/an-excerpt-from-how-not-to-be-wrong-by-jordan-ellenberg-664e708cfc3d</a></li><li><a href="https://www.boredpanda.com/world-war-2-aircraft-survivorship-bias-abraham-wald/?utm_source=google&amp;utm_medium=organic&amp;utm_campaign=organic">https://www.boredpanda.com/world-war-2-aircraft-survivorship-bias-abraham-wald/?utm_source=google&amp;utm_medium=organic&amp;utm_campaign=organic</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microservice Architecture</title>
      <link href="/2020/07/microservice-architecture/"/>
      <url>/2020/07/microservice-architecture/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 15/09/2023</strong></p><blockquote><p>As the name implies, a microservices architecture is an approach to building a server application as a set of small services. That means a microservices architecture is mainly oriented to the back-end, although the approach is also being used for the front end. Each service runs in its own process and communicates with other processes using protocols such as HTTP/HTTPS, WebSockets, or AMQP.</p></blockquote><h1 id="DDD-Oriented-Microservice"><a href="#DDD-Oriented-Microservice" class="headerlink" title="DDD Oriented Microservice"></a>DDD Oriented Microservice</h1><p>A layered design is implemented in the <a href="https://github.com/dotnet-architecture/eShopOnContainers/tree/dev/src/Services/Ordering">eShopOnContainers</a> application.</p><p>Simply drawn the structure could be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Ordering.API (application layer)</span><br><span class="line">└─── Authorization</span><br><span class="line">└─── Commands</span><br><span class="line">│    └───  Feature1</span><br><span class="line">│       │      |   ...</span><br><span class="line">│    └───  Feature2</span><br><span class="line">│       │      |   ...</span><br><span class="line">└─── Common</span><br><span class="line">└─── Contexts</span><br><span class="line">└─── Clients (remote network access)</span><br><span class="line">│    └───  FooService</span><br><span class="line">│       │      |   ... (implementation, dto)</span><br><span class="line">└─── Exceptions (application exceptions)</span><br><span class="line">└─── Extensions</span><br><span class="line">└─── Middleware</span><br><span class="line">└─── ModelBinders</span><br><span class="line">└─── Swagger</span><br><span class="line">└─── Services (application logic / algorithms)</span><br><span class="line">└─── Mappers</span><br><span class="line">└─── Queries</span><br><span class="line">│    └───  Feature1</span><br><span class="line">│       │      |   ...</span><br><span class="line">│    └───  Feature2</span><br><span class="line">│       │      |   ...</span><br><span class="line">└─── Validators</span><br><span class="line">└─── Controllers</span><br><span class="line">└─── Models (controller/view models)</span><br><span class="line">Ordering.Domain</span><br><span class="line">└─── Common</span><br><span class="line">└─── Exceptions (domain exceptions)</span><br><span class="line">└─── Interfaces</span><br><span class="line">└─── Models</span><br><span class="line">│       │  Constants</span><br><span class="line">Ordering.Infrastructure</span><br><span class="line">└───Entity Configurations (if using EF)</span><br><span class="line">└───Repositories</span><br></pre></td></tr></table></figure><p>Visually this is:</p><p><img src="/d/microservice-architecture/domain-driven-design-microservice.png" alt="DDD Oriented Microservice"></p><p>See <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice</a></p><h2 id="Application-Layer"><a href="#Application-Layer" class="headerlink" title="Application Layer"></a>Application Layer</h2><p><img src="/d/microservice-architecture/application-layer.png" alt="Application Layer"></p><blockquote><p><strong>Application Layer</strong>: Defines the jobs the software is supposed to do and directs the expressive domain objects to work out problems. The tasks this layer is responsible for are meaningful to the business or necessary for interaction with the application layers of other systems. This layer is kept thin. It does not contain business rules or knowledge, but only coordinates tasks and delegates work to collaborations of domain objects in the next layer down. It does not have state reflecting the business situation, but it can have state that reflects the progress of a task for the user or the program. - Eric Evans</p></blockquote><h2 id="Domain-model"><a href="#Domain-model" class="headerlink" title="Domain model"></a>Domain model</h2><p><img src="/d/microservice-architecture/domain-layer.png" alt="Domain Layer"></p><blockquote><p><strong>Domain Model Layer</strong>: Responsible for representing concepts of the business, information about the business situation, and business rules. State that reflects the business situation is controlled and used here, even though the technical details of storing it are delegated to the infrastructure. This layer is the heart of business software. - Eric Evans</p></blockquote><h2 id="Infrastructure-Layer"><a href="#Infrastructure-Layer" class="headerlink" title="Infrastructure Layer"></a>Infrastructure Layer</h2><p><img src="/d/microservice-architecture/infrastructure-layer.png" alt="Infrastructure Layer"></p><blockquote><p><strong>The infrastructure layer</strong> is how the data that is initially held in domain entities (in memory) is persisted in databases or another persistent store. An example is using Entity Framework Core code to implement the Repository pattern classes that use a DBContext to persist data in a relational database. - docs.microsoft.com</p></blockquote><p>Tests to enforce see <a href="/2019/06/unit-testing-with-xunit/">Enforce microservice architecture</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/</a></li><li><a href="https://www.freecodecamp.org/news/monolith-vs-microservices-which-architecture-is-right-for-your-team-bb840319d531/">https://www.freecodecamp.org/news/monolith-vs-microservices-which-architecture-is-right-for-your-team-bb840319d531/</a></li><li><a href="https://www.freecodecamp.org/news/our-journey-into-the-world-of-microservices-and-what-we-learned-from-it-d255b9a2a654/">https://www.freecodecamp.org/news/our-journey-into-the-world-of-microservices-and-what-we-learned-from-it-d255b9a2a654/</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/microservices-architecture">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/microservices-architecture</a></li><li><a href="https://eng.uber.com/microservice-architecture/">https://eng.uber.com/microservice-architecture/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> architecture </tag>
            
            <tag> ddd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Whanganui</title>
      <link href="/2020/07/whanganui/"/>
      <url>/2020/07/whanganui/</url>
      
        <content type="html"><![CDATA[<p>Only in Aotearoa, New Zealand is <code>Whanganui == Wanganui </code> and <code>Whanganui != Wanganui</code> but only in region <code>Manawatu / Whanganui</code>, district <code>Whanganui </code> and suburb <code>Whanganui East</code>. (On the North Island)</p><p>This is not to be confused with <code>Little Wanganui</code> on the South Island which is region <code>West Coast</code> and district <code>Buller</code>. There its spelt without the h - so I guess no <code>PH</code> (pounced F-HAH) </p><p>#iLoveNewZealand</p><p>WAT.</p><p><img src="/d/whanganui/whanganui.png" alt="Wanganui != Whanganui"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Whanganui">https://en.wikipedia.org/wiki/Whanganui</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biltong</title>
      <link href="/2020/07/biltong/"/>
      <url>/2020/07/biltong/</url>
      
        <content type="html"><![CDATA[<p>A place holder for my biltong maker &amp; recipe.</p><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><ul><li><a href="https://www.jaycar.co.nz/120mm-240v-standard-fan/p/YX2514">https://www.jaycar.co.nz/120mm-240v-standard-fan/p/YX2514</a></li><li><a href="https://www.mitre10.co.nz/shop/electrical-hardware/electrical-outlets-fittings/light-fittings/c/RF5378">https://www.mitre10.co.nz/shop/electrical-hardware/electrical-outlets-fittings/light-fittings/c/RF5378</a></li><li><a href="https://www.tradedepot.co.nz/outlet-vent-with-insect-screen-150mm-width#loaded">https://www.tradedepot.co.nz/outlet-vent-with-insect-screen-150mm-width#loaded</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Yield</title>
      <link href="/2020/07/c-sharp-yield/"/>
      <url>/2020/07/c-sharp-yield/</url>
      
        <content type="html"><![CDATA[<h3 id="Deferred-Execution"><a href="#Deferred-Execution" class="headerlink" title="Deferred Execution"></a>Deferred Execution</h3><p><em>From docs.microsoft.com</em></p><p>Deferred execution means that the evaluation of an expression is delayed until its <em>realized</em> value is actually required. Deferred execution can greatly improve performance when you have to manipulate large data collections, especially in programs that contain a series of chained queries or manipulations. In the best case, deferred execution enables only a single iteration through the source collection.</p><p>The LINQ technologies make extensive use of deferred execution in both the members of core <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq">System.Linq</a> classes and in the extension methods in the various LINQ namespaces, such as <a href="https://docs.microsoft.com/en-us/dotnet/api/system.xml.linq.extensions">System.Xml.Linq.Extensions</a>.</p><p>Deferred execution is supported directly in the C# language by the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield">yield</a> keyword (in the form of the <code>yield-return</code> statement) when used within an iterator block. Such an iterator must return a collection of type <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator">IEnumerator</a> or <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerator-1">IEnumerator</a> (or a derived type).</p><h3 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h3><p>Not sure about real world application but this is a <a href="https://stackoverflow.com/questions/44798975/trouble-understanding-yield-in-c-sharp?noredirect=1&lq=1">code example based on a post from stack overflow</a>.</p><ul><li><a href="https://github.com/carlpaton/Boilerplate/blob/master/Random/Yield/YieldDemo.cs">https://github.com/carlpaton/Boilerplate/blob/master/Random/Yield/YieldDemo.cs</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class YieldDemo</span><br><span class="line">&#123;</span><br><span class="line">    public YieldDemo() </span><br><span class="line">    &#123;</span><br><span class="line">        var doTheYieldThing = new DoTheYieldThing();</span><br><span class="line"></span><br><span class="line">        var infiniteOnes = doTheYieldThing.InfiniteOnes();</span><br><span class="line"></span><br><span class="line">        var counter = 1;</span><br><span class="line">        foreach (var one in infiniteOnes.Take(10))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;one=&#123;0&#125;, counter=&#123;1&#125;&quot;, one, counter);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(&quot;----------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        foreach (var one in infiniteOnes.Take(10))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;one=&#123;0&#125;, counter=&#123;1&#125;&quot;, one, counter);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DoTheYieldThing </span><br><span class="line">&#123;</span><br><span class="line">    public IEnumerable&lt;int&gt; InfiniteOnes()</span><br><span class="line">    &#123;</span><br><span class="line">        while (true)</span><br><span class="line">            yield return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This results in</p><p><img src="/d/c-sharp-yield/yield.jpg" alt="Yield"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/44798975/trouble-understanding-yield-in-c-sharp?noredirect=1&amp;lq=1">https://stackoverflow.com/questions/44798975/trouble-understanding-yield-in-c-sharp?noredirect=1&amp;lq=1</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABC Problem</title>
      <link href="/2020/07/rosetta-code-abc-problem/"/>
      <url>/2020/07/rosetta-code-abc-problem/</url>
      
        <content type="html"><![CDATA[<p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>You are given a collection of ABC blocks (maybe like the ones you had when you were a kid).</p><p>There are twenty blocks with two letters on each block.</p><p>A complete alphabet is guaranteed amongst all sides of the blocks.</p><p>The sample collection of blocks:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(B O)</span><br><span class="line">(X K)</span><br><span class="line">(D Q)</span><br><span class="line">(C P)</span><br><span class="line">(N A)</span><br><span class="line">(G T)</span><br><span class="line">(R E)</span><br><span class="line">(T G)</span><br><span class="line">(Q D)</span><br><span class="line">(F S)</span><br><span class="line">(J W)</span><br><span class="line">(H U)</span><br><span class="line">(V I)</span><br><span class="line">(A N)</span><br><span class="line">(O B)</span><br><span class="line">(E R)</span><br><span class="line">(F S)</span><br><span class="line">(L Y)</span><br><span class="line">(P C)</span><br><span class="line">(Z M)</span><br></pre></td></tr></table></figure><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Write a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.</p><p>The rules are simple:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; can_make_word(&quot;A&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;BARK&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;BOOK&quot;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;TREAT&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;COMMON&quot;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;SQUAD&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; can_make_word(&quot;CONFUSE&quot;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>The word <code>BARK</code> was made up using blocks as follows:</p><p><img src="/d/rosetta-code-abc-problem/blocks-example.jpg" alt="BARK"></p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>For the possible solutions blow, each time I ran the <a href="https://github.com/carlpaton/Boilerplate/blob/master/Rosetta%20Code/ABC_Problem/ABCProblem/Program.cs">console application</a> I got a different result in terms of elapsed time. I guess an average of a few runs would be the best to have an unbiased result but the below paints a pretty clear picture (for me anyway) that the action deligate is the fastest.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ForeachLoop:    00:00:00.0056731</span><br><span class="line">ActionDelegate: 00:00:00.0015526  &lt; fastest run and solution</span><br><span class="line">Regex:          00:00:00.0122734</span><br><span class="line"></span><br><span class="line">ForeachLoop:    00:00:00.0077697</span><br><span class="line">ActionDelegate: 00:00:00.0016330</span><br><span class="line">Regex:          00:00:00.0170153</span><br><span class="line"></span><br><span class="line">ForeachLoop:    00:00:00.0080737</span><br><span class="line">ActionDelegate: 00:00:00.0015944</span><br><span class="line">Regex:          00:00:00.0170100</span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>Using a normal <code>foreach</code> loop</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MakeWord</span>(<span class="params"><span class="built_in">string</span> word, List&lt;<span class="built_in">string</span>&gt; blocks</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> blocksLeft = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(blocks);</span><br><span class="line">    <span class="keyword">var</span> stringComparison = StringComparison.CurrentCultureIgnoreCase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> letter <span class="keyword">in</span> word)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!blocksLeft.Any(b =&gt; b.Contains(letter, stringComparison)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        blocksLeft.Remove(blocksLeft.First(b =&gt; b.Contains(letter, stringComparison)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p>Trying to make things faster with an <code>Action</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MakeWord2</span>(<span class="params"><span class="built_in">string</span> word, List&lt;<span class="built_in">string</span>&gt; blocks</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> letters = word.ToList();</span><br><span class="line">    <span class="keyword">var</span> blocksLeft = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(blocks);</span><br><span class="line">    <span class="keyword">var</span> stringComparison = StringComparison.CurrentCultureIgnoreCase;</span><br><span class="line"></span><br><span class="line">    letters.ForEach(letter =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!blocksLeft.Any(b =&gt; b.Contains(letter, stringComparison)))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        blocksLeft.Remove(blocksLeft.First(b =&gt; b.Contains(letter, stringComparison)));</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blocksLeft.Count() + letters.Count() == blocks.Count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.foreach?view=netcore-3.1">https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.foreach?view=netcore-3.1</a></li></ul><h3 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h3><p>Implementation from <a href="http://rosettacode.org/wiki/ABC_Problem#Regex">http://rosettacode.org/wiki/ABC_Problem#Regex</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MakeWord3</span>(<span class="params"><span class="built_in">string</span> word, <span class="built_in">string</span> blocks</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; word.Length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> length = blocks.Length;</span><br><span class="line">        <span class="keyword">var</span> rgx = <span class="keyword">new</span> Regex(<span class="string">&quot;([a-z]&quot;</span> + word[i] + <span class="string">&quot;|&quot;</span> + word[i] + <span class="string">&quot;[a-z])&quot;</span>, RegexOptions.IgnoreCase);</span><br><span class="line">        blocks = rgx.Replace(blocks, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (blocks.Length == length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/Boilerplate/tree/master/Rosetta%20Code/ABC_Problem">https://github.com/carlpaton/Boilerplate/tree/master/Rosetta%20Code/ABC_Problem</a></li><li><a href="http://rosettacode.org/wiki/ABC_Problem">http://rosettacode.org/wiki/ABC_Problem</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rosetta Code</title>
      <link href="/2020/07/rosetta-code/"/>
      <url>/2020/07/rosetta-code/</url>
      
        <content type="html"><![CDATA[<ul><li>See All <a href="/tags/rosetta-code/">Rosetta Code</a> posts here.</li></ul><p>I was inspired by <a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a> a project by <a href="http://rosettacode.org/wiki/User:Short_Circuit">Mike Mol</a> to document problems and their solutions as I understand them for problems I encouter in my career as a Software Developer. </p><p>There are always several ways to do things in an unopinionated but still programmatic manner. I would rather know how to solve the same problem in several ways and then compare for the best fit in terms of performance and copy style with the current code base.</p><p>Although <code>Rosetta Code</code> is aimed at solving the problem once in different langauges (flip how cool is that!) its still the same thing, I just focus on a few langauges :) </p><blockquote><p>Rosetta Code is a programming chrestomathy site. The idea is to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another.</p></blockquote><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>Template to copy and paste for (hopefully) future rosetta code posts :)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">### Story</span><br><span class="line">foo</span><br><span class="line"></span><br><span class="line">### Task</span><br><span class="line">bar</span><br><span class="line"></span><br><span class="line">### Solutions</span><br><span class="line">baz</span><br><span class="line"></span><br><span class="line">### References</span><br><span class="line">bat</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Collections of Entities</title>
      <link href="/2020/05/c-sharp-collections-of-entities/"/>
      <url>/2020/05/c-sharp-collections-of-entities/</url>
      
        <content type="html"><![CDATA[<p>Collections are a <strong>list</strong> or a <strong>container</strong> which can hold entities. Each have different use cases.</p><h2 id="Interface-Collections-That-Support-Iteration"><a href="#Interface-Collections-That-Support-Iteration" class="headerlink" title="Interface Collections That Support Iteration"></a>Interface Collections That Support Iteration</h2><h3 id="IEnumerable"><a href="#IEnumerable" class="headerlink" title="IEnumerable"></a>IEnumerable</h3><p>This is the most basic type of container. Exposes an enumerator, which supports a <strong>simple iteration</strong> over a <strong>non-generic collection</strong>. You cannot add, delete or update and there are no count methods, to get a count you would need to iterate over all entities.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="keyword">public</span> System.Collections.<span class="function">IEnumerator <span class="title">GetEnumerator</span> ()</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable">https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable</a></li></ul><h3 id="ICollection"><a href="#ICollection" class="headerlink" title="ICollection"></a>ICollection</h3><p>Extends <code>IEnumerable</code> and defines size, enumerators, and synchronization methods for all <strong>non-generic collections</strong>. Has functionality to add, remove, update entities in the container and <strong>get the count</strong>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Properties</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Count &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsSynchronized &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> SyncRoot &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyTo</span> (<span class="params">Array array, <span class="built_in">int</span> index</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection">https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection</a></li></ul><h3 id="IList"><a href="#IList" class="headerlink" title="IList"></a>IList</h3><p>Extends <code>IEnumerable</code> and represents a non-generic collection of objects that can be individually <strong>accessed by index</strong>, it supports the same functionality to add, remove, update entities in the container.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Properties</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsFixedSize &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsReadOnly &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span> ()</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">IndexOf</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span> (<span class="params"><span class="built_in">int</span> index, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span> (<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveAt</span> (<span class="params"><span class="built_in">int</span> index</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ilist">https://docs.microsoft.com/en-us/dotnet/api/system.collections.ilist</a></li></ul><h2 id="Other-Interface-Collections"><a href="#Other-Interface-Collections" class="headerlink" title="Other Interface Collections"></a>Other Interface Collections</h2><h3 id="IReadOnlyCollection"><a href="#IReadOnlyCollection" class="headerlink" title="IReadOnlyCollection"></a>IReadOnlyCollection</h3><p>Represents a strongly-typed, read-only collection of elements.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1">https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1</a></li></ul><h3 id="IReadOnlyList"><a href="#IReadOnlyList" class="headerlink" title="IReadOnlyList"></a>IReadOnlyList</h3><p>Represents a read-only collection of elements that can be accessed by index.</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1">https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Copy Constructors</title>
      <link href="/2020/05/copy-constructors/"/>
      <url>/2020/05/copy-constructors/</url>
      
        <content type="html"><![CDATA[<p>This can be used to clone an object however this is a <code>C++</code> term, this allows you to specify an object to create the data from, it would not be very <strong>idiomatic</strong> for a <code>C#</code> developer so I don’t feel its the best approach for me as a .Net Developer. </p><p>Would require each custom type to have a copy constructor to allow traversing of the tree so the copy is done recursively. If you want to <strong>clone</strong> rather look at the suggestions under the creational <a href="/2020/05/prototype-pattern/">Prototype Pattern</a>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Example classes <code>Person</code> and <code>Address</code> which have copy constructors: </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params">Person other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = other.FirstName;</span><br><span class="line">        Address = <span class="keyword">new</span> Address(other.Address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params">Address other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StreetName = other.StreetName;</span><br><span class="line">        HouseNumber = other.HouseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will work as strings are immutable.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carl = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Person(carl)</span><br><span class="line">&#123;</span><br><span class="line">    FirstName = <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">john.Address.HouseNumber = <span class="number">123</span>;</span><br><span class="line">john.Address.StreetName = <span class="string">&quot;Foo Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(john);</span><br></pre></td></tr></table></figure><p>Output would be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John, Address: StreetName: Foo Street, HouseNumber: 123</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[PrototypePattern/CopyConstructorDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/CopyConstructorDemo.cs)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Explicit Deep Copy Interface</title>
      <link href="/2020/05/explicit-deep-copy-interface/"/>
      <url>/2020/05/explicit-deep-copy-interface/</url>
      
        <content type="html"><![CDATA[<p>This can be used to clone an object. We can create our own interface <code>IProtoType&lt;T&gt;</code> and specify a method of <code>DeepCopy</code> which will remove the ambiguity we got from trying <a href="/2020/05/icloneable/">ICloneable</a> but its would still mean traversing the object tree manually so the copy is done <strong>recursively</strong>. </p><p>If you want to <strong>clone</strong> rather look at the suggestions under the creational <a href="/2020/05/prototype-pattern/">Prototype Pattern</a>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Example classes <code>Person</code> and <code>Address</code> which implement <code>IPrototype</code> - the nice thing now with <code>IPrototype</code> is the API would return the given type so no casting is needed.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPrototype</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">DeepCopy</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The implementation would be</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">IPrototype</span>&lt;<span class="title">Person</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">DeepCopy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(FirstName, Address.DeepCopy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span> : <span class="title">IPrototype</span>&lt;<span class="title">Address</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">DeepCopy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Address(StreetName, HouseNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example usage:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carl = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"><span class="keyword">var</span> john = carl.DeepCopy();</span><br><span class="line">john.FirstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">john.Address.HouseNumber = <span class="number">456</span>;</span><br><span class="line">john.Address.StreetName = <span class="string">&quot;Hoe Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(john);</span><br></pre></td></tr></table></figure><p>Output would be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John, Address: StreetName: Hoe Street, HouseNumber: 456</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[PrototypePattern/ICloneableDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.string">https://docs.microsoft.com/en-us/dotnet/api/system.string</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICloneable</title>
      <link href="/2020/05/icloneable/"/>
      <url>/2020/05/icloneable/</url>
      
        <content type="html"><![CDATA[<p>Creates a new object that is a copy of the current instance.</p><h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>Inheriting from and implementing this interface will provide a <code>Clone</code> method however the return type is <code>object</code> so would need to cast the result. This is not really ideal and could confuse the consumer. If you want to clone rather look at the suggestions under the creational <a href="/2020/05/prototype-pattern/">Prototype Pattern</a>. </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Example classes <code>Person</code> and <code>Address</code> which implement <code>ICloneable</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(FirstName, (Address)Address.Clone());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Address(StreetName, HouseNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will work as strings are immutable.</p><blockquote><p>A string is a sequential collection of characters that is used to represent text. A <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1">String</a> object is a sequential collection of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char?view=netcore-3.1">System.Char</a> objects that represent a string; a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char?view=netcore-3.1">System.Char</a> object corresponds to a UTF-16 code unit. The value of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1">String</a> object is the content of the sequential collection of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char?view=netcore-3.1">System.Char</a> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1#Immutability">Immutability and the StringBuilder class</a> section later in this topic. The maximum size of a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netcore-3.1">String</a> object in memory is 2GB, or about 1 billion characters. - microsoft.com</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Although this will work its a shallow copy</span></span><br><span class="line"><span class="keyword">var</span> carl2 = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"><span class="keyword">var</span> john2 = (Person)carl2.Clone();</span><br><span class="line"></span><br><span class="line">john2.FirstName = <span class="string">&quot;John Two&quot;</span>;</span><br><span class="line">john2.Address.HouseNumber = <span class="number">111</span>;</span><br><span class="line">john2.Address.StreetName = <span class="string">&quot;Foo Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(carl2);</span><br><span class="line">Console.WriteLine(john2);</span><br></pre></td></tr></table></figure><p>Output would be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John Two, Address: StreetName: Foo Street, HouseNumber: 111</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[PrototypePattern/ICloneableDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.string">https://docs.microsoft.com/en-us/dotnet/api/system.string</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable.clone</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prototype Pattern</title>
      <link href="/2020/05/prototype-pattern/"/>
      <url>/2020/05/prototype-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>This design pattern is all about object copying, the use case would be when its easier to <strong>copy</strong> (<strong>clone</strong>) an existing object than to fully initialize a new one. Note that the existing object could be partially or fully constructed. </p><p>These would be <strong>complicated objects</strong>, perhaps constructed with a <a href="/2020/04/builder-pattern/">builder</a> and you now wish to make simple changes to it for your use case.  </p><p>A <strong>Deep Copy</strong> is what is required for the Prototype Pattern.</p><table><thead><tr><th>Copy</th><th>Description</th></tr></thead><tbody><tr><td>Shallow</td><td>A shallow copy is a copy of the object and its references. This means after you make the copy changes to <code>this</code> object also makes changes to the <code>other</code> object.</td></tr><tr><td>Deep</td><td>A deep copy is not just a copy of the object but a copy of all its <a href="/2018/06/value-type-vs-reference-type/">references (on the heap)</a> by making new objects which replicates the state of those references. This would need to be done <strong>recursively</strong> so you would need to make a complete copy of the object. This means the change in <code>this</code> object does not affect the <code>other</code> object.</td></tr></tbody></table><p><strong>Caveats</strong></p><ul><li>When deep copying an entity, if it has a database auto assigned ID you may want to reset this as should the copied entity change and then be persisted you may update persisted data by mistake.</li></ul><h3 id="ICloneable"><a href="#ICloneable" class="headerlink" title="ICloneable"></a>ICloneable</h3><p><a href="/2020/05/icloneable/">Don’t use ICloneable</a> for the Prototype Pattern as it will create a shallow copy.</p><ul><li>[PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/ICloneableDemo.cs)</li></ul><h3 id="Copy-Constructors"><a href="#Copy-Constructors" class="headerlink" title="Copy Constructors"></a>Copy Constructors</h3><p>Don’t use <a href="/2020/05/copy-constructors/">Copy Constructors</a> as this would not be <strong>idiomatic</strong> for a <code>C#</code> developer and requires each custom type to have a copy constructor to allow traversing of the tree.</p><ul><li>[PatternsAndPrinciples/PrototypePattern/CopyConstructorDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/CopyConstructorDemo.cs)</li></ul><h3 id="Explicit-Deep-Copy-Interface"><a href="#Explicit-Deep-Copy-Interface" class="headerlink" title="Explicit Deep Copy Interface"></a>Explicit Deep Copy Interface</h3><p>You could create your own <a href="/2020/05/explicit-deep-copy-interface/">Explicit Deep Copy Interface</a> like <code>IProtoType&lt;T&gt;</code> however this would require manual object traversing and having each dependent object in the tree implement <code>IProtoType&lt;T&gt;</code>.</p><ul><li>[PatternsAndPrinciples/PrototypePattern/IProtoTypeDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/IProtoTypeDemo.cs)</li></ul><h3 id="Copy-Through-Serialization-Binary"><a href="#Copy-Through-Serialization-Binary" class="headerlink" title="Copy Through Serialization (Binary)"></a>Copy Through Serialization (Binary)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/BinarySerializationDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/BinarySerializationDemo.cs)</li></ul><p><a href="/2017/12/serialization/">Serialization</a> will be slower but will traverse the entire object tree. As we will not be persisting the serialized object to storage it can simply be kept in a <code>MemoryStream</code>.</p><p>Using a <code>BinaryFormatter</code> makes the most sense as we don’t need human readable data (<a href="/tags/xml/">XML</a>, <a href="/tags/json/">JSON</a>).</p><p>Create the extension method:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            formatter.Serialize(stream, self);</span><br><span class="line">            stream.Seek(<span class="number">0</span>, SeekOrigin.Begin); <span class="comment">// Rewind the stream with offset of 0 from the begining</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">object</span> copy = formatter.Deserialize(stream);</span><br><span class="line">            stream.Close();</span><br><span class="line">            <span class="keyword">return</span> (T)copy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create some classes to hold the state to be copied, <strong>caveat</strong> is the classes need to have the <code>[Serializable]</code> attribute / annotation. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> firstName, Address address</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        Address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(FirstName)&#125;</span>: <span class="subst">&#123;FirstName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(Address)&#125;</span>: <span class="subst">&#123;Address&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StreetName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HouseNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span>(<span class="params"><span class="built_in">string</span> streetName, <span class="built_in">int</span> houseNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StreetName = streetName;</span><br><span class="line">        HouseNumber = houseNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(StreetName)&#125;</span>: <span class="subst">&#123;StreetName&#125;</span>, <span class="subst">&#123;<span class="keyword">nameof</span>(HouseNumber)&#125;</span>: <span class="subst">&#123;HouseNumber&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instantiate and copy</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carl = <span class="keyword">new</span> Person(<span class="string">&quot;Carl&quot;</span>, <span class="keyword">new</span> Address(<span class="string">&quot;Sale Street&quot;</span>, <span class="number">66</span>));</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Initial Object:&quot;</span>);</span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> john = carl.DeepCopy();</span><br><span class="line">john.FirstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">john.Address.HouseNumber = <span class="number">789</span>;</span><br><span class="line">john.Address.StreetName = <span class="string">&quot;Foo Street&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Initial Object &amp; Copy:&quot;</span>);</span><br><span class="line">Console.WriteLine(carl);</span><br><span class="line">Console.WriteLine(john);</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstName: Carl, Address: StreetName: Sale Street, HouseNumber: 66</span><br><span class="line">FirstName: John, Address: StreetName: Foo Street, HouseNumber: 789</span><br></pre></td></tr></table></figure><h3 id="Copy-Through-Serialization-XML"><a href="#Copy-Through-Serialization-XML" class="headerlink" title="Copy Through Serialization (XML)"></a>Copy Through Serialization (XML)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/XmlSerializationDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/XmlSerializationDemo.cs)</li></ul><p>The classes you wish to serialize may not be open for modification, so you could use <code>XMlSerializer</code> if you cannot add the annotation. <strong>Caveat</strong> would however be that the classes need a <strong>parameterless</strong> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors">constructor</a>.</p><p>The extension method would then look like this</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">            xmlSerializer.Serialize(stream, self);</span><br><span class="line">            stream.Position = <span class="number">0</span>; <span class="comment">// same as `stream.Seek(0, SeekOrigin.Begin);`</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (T) xmlSerializer.Deserialize(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Copy-Through-Serialization-System-Text-Json"><a href="#Copy-Through-Serialization-System-Text-Json" class="headerlink" title="Copy Through Serialization (System.Text.Json)"></a>Copy Through Serialization (System.Text.Json)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo.cs)</li><li><a href="https://www.nuget.org/packages/System.Text.Json/">https://www.nuget.org/packages/System.Text.Json/</a></li></ul><p>Some <strong>Caveats</strong> still exist:</p><ul><li><strong>Parameterless</strong> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors">constructor</a> is needed</li><li>This serializer doesn’t work with fields but needs properties instead.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    ...    </span><br></pre></td></tr></table></figure><p>The extension method would look like this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> json = JsonSerializer.Serialize(self);</span><br><span class="line">            <span class="keyword">return</span> JsonSerializer.Deserialize&lt;T&gt;(json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Copy-Through-Serialization-Newtonsoft-Json"><a href="#Copy-Through-Serialization-Newtonsoft-Json" class="headerlink" title="Copy Through Serialization (Newtonsoft.Json)"></a>Copy Through Serialization (Newtonsoft.Json)</h3><ul><li>[PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo2.cs](<a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net">https://github.com/carlpaton/Boilerplate/blob/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern/JsonSerializationDemo2.cs)</li><li><a href="https://www.nuget.org/packages/Newtonsoft.Json/">https://www.nuget.org/packages/Newtonsoft.Json/</a></li></ul><p>No additional changes are needed to the class that I could see. The extension method would look like this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T self</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> json = JsonConvert.SerializeObject(self);</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=netcore-3.1">https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=netcore-3.1</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=netcore-3.1">https://docs.microsoft.com/en-us/dotnet/api/system.icloneable?view=netcore-3.1</a></li><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/PrototypePattern]">https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/PrototypePattern]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net">https://github.com/carlpaton/Boilerplate/tree/master/.Net</a> Core Console Application/PatternsAndPrinciples/PrototypePattern)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> serialization </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open Source</title>
      <link href="/2020/05/open-source/"/>
      <url>/2020/05/open-source/</url>
      
        <content type="html"><![CDATA[<p>These are some of my open source projects, some are more useful than others, some have end runs and code smells but its all about refactoring to a better design &lt;3 </p><table><thead><tr><th>Name</th><th>Description</th><th>Link</th></tr></thead><tbody><tr><td>CarlPaton.Common</td><td>Common DateTime, Encoding, Http &amp; Authorization and Serialization services for applications written in .Net Core, SDK 2.2.104</td><td><a href="https://www.nuget.org/packages/CarlPaton.Common/">https://www.nuget.org/packages/CarlPaton.Common/</a></td></tr><tr><td>Vulnus Cloud</td><td>This application allows you to identify open source dependencies and determine if there are any known, publicly disclosed, vulnerabilities on packages used by your application.</td><td><a href="https://github.com/carlpaton/VulnusCloud">https://github.com/carlpaton/VulnusCloud</a></td></tr><tr><td>Aws Administrator</td><td>AWS infrastructure administration tool. AWS SDK works pretty well however the UI never got much love as Trade Me decided to use Google Cloud (GCP).</td><td><a href="https://github.com/carlpaton/AwsAdministrator">https://github.com/carlpaton/AwsAdministrator</a></td></tr><tr><td>Redis Administrator</td><td>Application to help admin a Redis instance.</td><td><a href="https://github.com/carlpaton/RedisAdministrator">https://github.com/carlpaton/RedisAdministrator</a></td></tr><tr><td>Fibonacci Board</td><td>Fibonacci sequence for story sizing.</td><td><a href="https://carlpaton.github.io/prx/">https://carlpaton.github.io/prx/</a></td></tr></tbody></table><p>There are a few more that I have pushed to <a href="https://github.com/carlpaton">https://github.com/carlpaton</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
            <tag> open source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi LED Control</title>
      <link href="/2020/05/pi-led-control/"/>
      <url>/2020/05/pi-led-control/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/pi-led-control/calculations.png" alt="Resister calculations: 4.7k is fine"></p><p><em><strong>Updated 30/03/2021</strong></em></p><p>A <a href="https://en.wikipedia.org/wiki/Light-emitting_diode">light-emitting diode</a> (LED) typically has a forward voltage of between 1.8 and 3.3 volts. The simplest way to drive an LED is through a series resistor where energy is dissipated in the resistor as heat.</p><p>A LED has a voltage drop specified at the intended operating current. <a href="https://en.wikipedia.org/wiki/Ohm's_law">Ohm’s law</a> and <a href="https://en.wikipedia.org/wiki/Kirchhoff's_circuit_laws">Kirchhoff’s circuit laws</a> are used to calculate the appropriate resistor value, by subtracting the LED voltage drop from the supply voltage and dividing by the desired operating current.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ohms law: V/I = R</span><br></pre></td></tr></table></figure><h3 id="Circuit-and-components"><a href="#Circuit-and-components" class="headerlink" title="Circuit and components"></a>Circuit and components</h3><table><thead><tr><th>Current</th><th>Volt Drop</th></tr></thead><tbody><tr><td>Same in each part of the circuit</td><td>Voltage drop is the decrease of electrical potential along the path of a current flowing in an electrical circuit.</td></tr></tbody></table><p>General forward voltage drop of LED by colour is as follows:</p><ul><li>2 volts: Red, Lyme Green, Yellow, Amber &amp; Orange</li><li>3 volts: Blue, White &amp; Bright Green</li></ul><p>This was based on the work from <a href="https://www.youtube.com/channel/UCOIcO8Lsk1MERedhOnew73A">Youtuber BurgZerg Arcade</a></p><p>Ohm’s Law Explained Simply:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/0x9Vb6F5FKw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h3><p>Functional code for this is at <a href="https://github.com/carlpaton/SweetPi/blob/main/src/SweetPi.Api/Controllers/LedController.cs">LedController.cs</a> -&gt; <a href="https://github.com/carlpaton/SweetPi/blob/main/src/SweetPi.Application/Services/LedService.cs">LedService.cs</a> -&gt; <a href="https://github.com/carlpaton/SweetPi/blob/main/src/SweetPi.Infrastructure/Repositories/GpioControllerRepository.cs">GpioControllerRepository.cs</a> which can be summarised as:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pin = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> controller = <span class="keyword">new</span> GpioController();</span><br><span class="line"></span><br><span class="line">controller.OpenPin(pin, PinMode.Output);</span><br><span class="line"></span><br><span class="line">controller.Write(pin, PinValue.High);</span><br><span class="line">controller.Write(pin, PinValue.Low);</span><br></pre></td></tr></table></figure><p><img src="/d/pi-led-control/led-circuit.jpg" alt="This was the quick prototype I used with this C# code"></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM) </span><br><span class="line">GPIO.setup(<span class="number">18</span>, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># At 10Hz the LED will flicker</span></span><br><span class="line">pwm = GPIO.PWM(<span class="number">18</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Frequency is now 50 Hz - LED stops flickering</span></span><br><span class="line">pwm.ChangeFrequency(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5%&quot;</span>)</span><br><span class="line">pwm.ChangeDutyCycle(<span class="number">5</span>)   <span class="comment"># Duty cycle is now 5%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sleeper between duty ramp up</span></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">pwm.ChangeDutyCycle(<span class="number">100</span>) <span class="comment"># Duty cycle is now 100%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean up</span></span><br><span class="line">pwm.stop()</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.petervis.com/electronics/led/led-resistor-calculator.html">https://www.petervis.com/electronics/led/led-resistor-calculator.html</a></li><li><a href="https://www.petervis.com/electronics/Standard_Resistor_Values/Standard_Resistor_Values.html">https://www.petervis.com/electronics/Standard_Resistor_Values/Standard_Resistor_Values.html</a></li><li><a href="https://www.petervis.com/electronics/Standard_Resistor_Values/Resistor_Colour_Code.html">https://www.petervis.com/electronics/Standard_Resistor_Values/Resistor_Colour_Code.html</a></li><li><a href="https://en.wikipedia.org/wiki/LED_circuit">https://en.wikipedia.org/wiki/LED_circuit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> iot </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Servo Control</title>
      <link href="/2020/05/pi-servo-control/"/>
      <url>/2020/05/pi-servo-control/</url>
      
        <content type="html"><![CDATA[<p>A servo allows precise control of the angular position of its shaft. Standard servos accept 4.6 to 6 volts.</p><table><thead><tr><th>Colour</th><th>Description</th></tr></thead><tbody><tr><td>Yellow/White</td><td>Control signal</td></tr><tr><td>Red</td><td>Positive power lead</td></tr><tr><td>Black/Brown</td><td>Negative power lead</td></tr></tbody></table><h4 id="Control-signal"><a href="#Control-signal" class="headerlink" title="Control signal"></a>Control signal</h4><p>This needs to be a <code>pulse width modulation (PWM)</code> square wave. The square wave needs to be 50 herts (so a pulse of every 0.2 seconds) The angle of the servo is controlled by the length of the positive pulse (duty cycle) The longer the pulse/period of the wave/duty cycle the larger the angle the servo will turn to and try hold itself at.</p><p>These values vary by servo but for the small cheap SG-90’s the degrees can be calculated as:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2% duty cycle = 0 degrees</span><br><span class="line">12% duty cycle = 180 degrees</span><br></pre></td></tr></table></figure><p><img src="/d/pi-servo-control/servo-duty.jpg" alt="Servo Duty"></p><p>Translating this to python code using the RPi.GPIO library</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set GPIO numbering mode</span></span><br><span class="line">GPIO.setmode(GPIO.BOARD)</span><br><span class="line"><span class="comment"># There is another mode called `GPIO.BCM` for BCM pin numbering, not sure what this is?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set pin 11 as an output, and set servo1 as pin 11 as PWM</span></span><br><span class="line">GPIO.setup(<span class="number">11</span>,GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note 11 is the pi&#x27;s pin, 50Hz pulse (analog servo), 300 would be for digital</span></span><br><span class="line">servo = GPIO.PWM(<span class="number">11</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start PWM running, but with value of 0 (pulse off)</span></span><br><span class="line">servo.start(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># duty is a percentage from 0 to 100 which allows for decimals like 3.33</span></span><br><span class="line"><span class="comment"># 2% = 0 degrees</span></span><br><span class="line"><span class="comment"># 7% = 90 degrees</span></span><br><span class="line"><span class="comment"># 12% = 180 degrees</span></span><br><span class="line"><span class="comment"># setting it then back to 0 stops the servo from jittering, just set `time.sleep(0.5)` before so you give the servo time to move to the position</span></span><br><span class="line">duty = <span class="number">2</span></span><br><span class="line">servo.ChangeDutyCycle(duty)</span><br><span class="line">servo.ChangeDutyCycle(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean up</span></span><br><span class="line">servo.stop()</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/">https://sourceforge.net/p/raspberry-gpio-python/wiki/PWM/</a></li><li><a href="https://www.servocity.com/how-does-a-servo-work">https://www.servocity.com/how-does-a-servo-work</a></li><li><a href="http://www.robotplatform.com/knowledge/servo/servo_control_tutorial.html">http://www.robotplatform.com/knowledge/servo/servo_control_tutorial.html</a></li><li><a href="http://webhome.csc.uvic.ca/~mcheng/samples/qu/SENG466_Home/Phase_1/Entries/2010/2/1_Servo_Motor.html">http://webhome.csc.uvic.ca/~mcheng/samples/qu/SENG466_Home/Phase_1/Entries/2010/2/1_Servo_Motor.html</a></li><li><a href="https://www.youtube.com/watch?v=xHDT4CwjUQE">https://www.youtube.com/watch?v=xHDT4CwjUQE</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Switch Control</title>
      <link href="/2020/05/pi-switch-control/"/>
      <url>/2020/05/pi-switch-control/</url>
      
        <content type="html"><![CDATA[<p>Determine if switches are on (high) or off (low)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">GPIO.setwarnings(<span class="literal">False</span>) <span class="comment"># Ignore warning for now</span></span><br><span class="line">GPIO.setmode(GPIO.BOARD) <span class="comment"># Use physical pin numbering</span></span><br><span class="line"></span><br><span class="line">GPIO.setup(<span class="number">10</span>, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) <span class="comment"># Set pin 10 to be an input pin and set initial value to be pulled low (off)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Waiting for button push&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># Run forever</span></span><br><span class="line">    <span class="keyword">if</span> GPIO.<span class="built_in">input</span>(<span class="number">10</span>) == GPIO.HIGH:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button was pushed!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://raspberrypihq.com/use-a-push-button-with-raspberry-pi-gpio/">https://raspberrypihq.com/use-a-push-button-with-raspberry-pi-gpio/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Useless Box</title>
      <link href="/2020/05/pi-useless-box/"/>
      <url>/2020/05/pi-useless-box/</url>
      
        <content type="html"><![CDATA[<p>Python code for the below is on <a href="https://github.com/carlpaton/python-hoon/tree/master/useless-box">github</a> with details on the <a href="/2020/05/pi-servo-control/">servo</a> and <a href="/2020/05/pi-switch-control/">switch</a> control here.</p><h3 id="Pin-Out"><a href="#Pin-Out" class="headerlink" title="Pin Out"></a>Pin Out</h3><p><img src="/d/pi-useless-box/useless-box-pinout.jpg" alt="Pinout"></p><h3 id="What-is-a-useless-box"><a href="#What-is-a-useless-box" class="headerlink" title="What is a useless box?"></a>What is a useless box?</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/aqAUmgE3WyM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Then there are the advanced ones!</p><ul><li><a href="https://www.youtube.com/watch?v=Nqk_nWAjBus">https://www.youtube.com/watch?v=Nqk_nWAjBus</a></li></ul><h3 id="Inside-the-Useless-Machine"><a href="#Inside-the-Useless-Machine" class="headerlink" title="Inside the Useless Machine"></a>Inside the Useless Machine</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/PRn1Uzp54uw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi4 Hardware</title>
      <link href="/2020/05/pi4-hardware/"/>
      <url>/2020/05/pi4-hardware/</url>
      
        <content type="html"><![CDATA[<p>I got tired of having to google each time I needed to find or understand Pi Hardware.</p><h3 id="Heatsinks"><a href="#Heatsinks" class="headerlink" title="Heatsinks"></a>Heatsinks</h3><p>These go over the CPU, DDR-4 Memory and USB controller. I couldn’t find a Pi4 set here in NZ so modified this one from <a href="https://www.geeker.co.nz/raspberry-pi/board/raspberry-pi-heat-sink.html">geeker.co.nz</a></p><p><img src="/d/p4-hardware/heat-sink.jpg" alt="Heatsinks"></p><ul><li><a href="https://www.geeker.co.nz/raspberry-pi/board/raspberry-pi-heat-sink.html">https://www.geeker.co.nz/raspberry-pi/board/raspberry-pi-heat-sink.html</a></li><li><a href="https://www.youtube.com/watch?v=E-4GaAz7XNM">https://www.youtube.com/watch?v=E-4GaAz7XNM</a></li></ul><h3 id="Cluster-Stack"><a href="#Cluster-Stack" class="headerlink" title="Cluster Stack"></a>Cluster Stack</h3><ul><li><a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a></li></ul><p><img src="/d/p4-hardware/cluster-stack.jpg" alt="Cluster Stack"></p>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Examples</title>
      <link href="/2020/04/jquery-examples/"/>
      <url>/2020/04/jquery-examples/</url>
      
        <content type="html"><![CDATA[<h3 id="attr"><a href="#attr" class="headerlink" title=".attr"></a>.attr</h3><p>The <code>data-</code> attribute can hold any data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data-square</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    @Html.DisplayFor(m =&gt; Model.Square1)</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>To read this data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.item&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> squareNumber = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-square&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="ajax"><a href="#ajax" class="headerlink" title=".ajax"></a>.ajax</h3><ul><li><a href="/2017/08/loader-client-side/">Sweet loader when .ajax fires</a></li></ul><p>Type needs to match the <a href="/2018/06/http-verbs/">Http Verb, the POST</a> below is intended to <code>create/insert</code> and can be used with these <a href="/2020/04/web-api-controller-example/">example api controller methods</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.item&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;/api/apigame&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="title class_">Id</span>: <span class="string">&quot;1&quot;</span>, <span class="title class_">Player</span>: <span class="string">&quot;O&quot;</span> &#125;),</span><br><span class="line">            <span class="attr">success</span>: success,</span><br><span class="line">            <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr, error, status</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error, status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="datepicker"><a href="#datepicker" class="headerlink" title=".datepicker"></a>.datepicker</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;input[type=datetime]&#x27;</span>).<span class="title function_">datepicker</span>(&#123;</span><br><span class="line">        <span class="attr">dateFormat</span>: <span class="string">&quot;dd/mm/yy&quot;</span>,</span><br><span class="line">        <span class="attr">changeMonth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">changeYear</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">yearRange</span>: <span class="string">&quot;-10:+10&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="append"><a href="#append" class="headerlink" title=".append"></a>.append</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heading = <span class="string">&quot;&lt;div class=&#x27;chart-wrapper__item-heading&#x27;&gt;&quot;</span> + json.<span class="property">chartModelsWithMany</span>[i].<span class="property">Heading</span> + <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chart = <span class="string">&quot;&lt;div id=&#x27;&quot;</span> + json.<span class="property">chartModelsWithMany</span>[i].<span class="property">renderAt</span> + <span class="string">&quot;&#x27;&gt;loading ...&lt;/div&gt;&quot;</span>;</span><br><span class="line">$(<span class="string">&quot;#chartVerticalBars&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;div class=&#x27;chart-wrapper__item&#x27;&gt;&quot;</span> + heading + chart + <span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="dialog"><a href="#dialog" class="headerlink" title=".dialog"></a>.dialog</h3><p>Some sweet HTML and CSS hacks</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ui-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1032</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">style</span>=<span class="string">&quot;z-index: 1050!important;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;SWEET HEADING&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;height:100%;padding-top:220px;color: #76b729;&quot;</span>&gt;</span></span><br><span class="line">        LOADING...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;someCode&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>The Javascript to trigger, includes close hacks</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.dialog&quot;</span>).<span class="title function_">dialog</span>(&#123;</span><br><span class="line">        <span class="attr">autoOpen</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">550</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">900</span>,</span><br><span class="line">        <span class="attr">draggable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">resizable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">dialogClass</span>: <span class="string">&#x27;sweet-dialog&#x27;</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="variable language_">this</span>).<span class="title function_">scrollTop</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">buttons</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&quot;DOWNLOAD PDF&quot;</span>,</span><br><span class="line">                <span class="attr">click</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;/Controller/Action/?code=&quot;</span> + $(<span class="string">&quot;#someCode&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&quot;CLOSE&quot;</span>,</span><br><span class="line">                <span class="attr">click</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="title class_">CloseDialog</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.ui-dialog-titlebar-close&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">CloseDialog</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CloseDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.dialog&quot;</span>).<span class="title function_">dialog</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="load"><a href="#load" class="headerlink" title=".load"></a>.load</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#fooDiv&#x27;</span>).<span class="title function_">load</span>(<span class="string">&quot;/Controller/Action/?id=42&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://api.jquery.com/jquery.ajax/">https://api.jquery.com/jquery.ajax/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API Controller Example</title>
      <link href="/2020/04/web-api-controller-example/"/>
      <url>/2020/04/web-api-controller-example/</url>
      
        <content type="html"><![CDATA[<p>These are example controller methods by <a href="/2018/06/http-verbs/">http verb</a>. These can also be async but the context method must return <code>async Task</code>. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Synchronous </span></span><br><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult&lt;ApiGameMoveModel&gt; <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> model = _context.Select(id);</span><br><span class="line">    <span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asynchronous</span></span><br><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt;&lt;ApiGameMoveModel&gt; Get(<span class="built_in">int</span> id)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> model = <span class="keyword">await</span> _context.Select(id);</span><br><span class="line">    <span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Synchronous-methods"><a href="#Synchronous-methods" class="headerlink" title="Synchronous methods"></a>Synchronous methods</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> GameUI.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameUI.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiGameController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> DummyContext _context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiGameController</span>(<span class="params">DummyContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET: api/ApiGame</span></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="keyword">public</span> ActionResult&lt;IEnumerable&lt;ApiGameMoveModel&gt;&gt; Get()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to select a list</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ if none exist `return NotFound();`</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="keyword">new</span> List&lt;ApiGameMoveModel&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> ApiGameMoveModel() &#123; Id = <span class="number">42</span>, Player = <span class="string">&quot;player in list that was selected&quot;</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> ApiGameMoveModel() &#123; Id = <span class="number">43</span>, Player = <span class="string">&quot;player in list that was selected&quot;</span> &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET: api/ApiGame/5</span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;ApiGameMoveModel&gt; <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to select on `id`</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ check id exists, if it doesnt `return NotFound();`</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiGameMoveModel() &#123; Id = id, Player = <span class="string">$&quot;player that was selected on <span class="subst">&#123;id&#125;</span>&quot;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PUT: api/ApiGame/5</span></span><br><span class="line">        [<span class="meta">HttpPut(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Put</span>(<span class="params"><span class="built_in">int</span> id, ApiGameMoveModel apiGameMoveModel</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (id != apiGameMoveModel.Id)</span><br><span class="line">                <span class="keyword">return</span> BadRequest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ check id exists, if it doesnt `return NotFound();`</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ use db context to update</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> NoContent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// POST: api/ApiGame</span></span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Post</span>(<span class="params">ApiGameMoveModel apiGameMoveModel</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to update</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">new</span> ApiGameMoveModel</span><br><span class="line">            &#123;</span><br><span class="line">                Id = <span class="number">42</span>,</span><br><span class="line">                Player = <span class="string">&quot;player that was updated&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DELETE: api/ApiGame/5</span></span><br><span class="line">        [<span class="meta">HttpDelete(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;ApiGameMoveModel&gt; <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO ~ use db context to select on `id`</span></span><br><span class="line">            <span class="comment">// if not found, return NotFound();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO ~ use db context to do the delete</span></span><br><span class="line">               </span><br><span class="line">            <span class="comment">// TODO ~ return the model selected by `id`</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiGameMoveModel()&#123; Id = id, Player = <span class="string">&quot;player that was deleted&quot;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Custom Exception</title>
      <link href="/2020/04/c-sharp-custom-exception/"/>
      <url>/2020/04/c-sharp-custom-exception/</url>
      
        <content type="html"><![CDATA[<p>Create custom exceptions which are then added to existing try catch blocks (above the general exception as they are processed top down.)</p><h3 id="Custom-Exception"><a href="#Custom-Exception" class="headerlink" title="Custom Exception"></a>Custom Exception</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Business.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CoordinateNotFoundException</span> : <span class="title">Exception</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoordinateNotFoundException</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoordinateNotFoundException</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CoordinateNotFoundException</span>(<span class="params"><span class="built_in">string</span> message, Exception inner</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">message, inner</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Consumption"><a href="#Consumption" class="headerlink" title="Consumption"></a>Consumption</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ThrowCoordinateNotFoundException</span>(<span class="params"><span class="built_in">string</span> messagePart</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CoordinateNotFoundException(<span class="string">$&quot;CoordinatePartsModel <span class="subst">&#123;messagePart&#125;</span> is required.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do the bad thing</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (CoordinateNotFoundException exc)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// handle CoordinateNotFoundException</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Handle all other general exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/VulnusCloud/blob/master/Business/Exceptions/CoordinateNotFoundException.cs">https://github.com/carlpaton/VulnusCloud/blob/master/Business/Exceptions/CoordinateNotFoundException.cs</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Builder Pattern</title>
      <link href="/2020/04/builder-pattern/"/>
      <url>/2020/04/builder-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Use Case: Unit test object creation, any time object construction is complicated.</p></blockquote><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>When piecewise object construction is complicated, provide and API for doing it in a brief and clearly expressed manner. </p><p>*A piecewise function is a function built from pieces of different functions over different intervals. *</p><h3 id="Example-FooBuilder"><a href="#Example-FooBuilder" class="headerlink" title="Example FooBuilder"></a>Example FooBuilder</h3><p><code>FooBuilder</code> is used to construct the entity <code>Foo</code>, its state can be set if needs be with the methods <code>WithId()</code> and <code>WithContactPerson()</code>, this fluent API can be chained. Finally the <code>Create()</code> method returns an instance of <code>Foo</code> with the internal state set.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FooApp.Core.Builders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooBuilder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Guid _id;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _contactPerson;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FooBuilder</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            _id = Guid.NewGuid();</span><br><span class="line">            _contactPerson = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FooBuilder <span class="title">WithId</span>(<span class="params">Guid id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FooBuilder <span class="title">WithContactPerson</span>(<span class="params"><span class="built_in">string</span> contactPerson</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _contactPerson = contactPerson;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Foo <span class="title">Create</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Foo()</span><br><span class="line">            &#123;</span><br><span class="line">                Id = _id,</span><br><span class="line">                ContactPerson = _contactPerson</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-Use-Case-Of-FooBuilder"><a href="#Example-Use-Case-Of-FooBuilder" class="headerlink" title="Example Use Case Of FooBuilder"></a>Example Use Case Of FooBuilder</h4><p>In a test this could be used as follows with the assumption <code>fooRepository</code> -&gt; <code>SelectList</code> returns a collection of type <code>Foo</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> FooBuilder();</span><br><span class="line"></span><br><span class="line">fooRepositoryMock.Setup(x =&gt; x.SelectList())</span><br><span class="line">    .Returns(<span class="keyword">new</span> List&lt;Foo&gt;() &#123;</span><br><span class="line">        foo.WithContactPerson(<span class="string">&quot;Bizz Bat&quot;</span>).Create(),</span><br><span class="line">        foo.WithId(<span class="string">&quot;26ac6c17-0172-4d86-802c-d5b839f6215f&quot;</span>).WithContactPerson(<span class="string">&quot;Hoe Bar&quot;</span>).Create()</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Example-HTML-Builder"><a href="#Example-HTML-Builder" class="headerlink" title="Example HTML Builder"></a>Example HTML Builder</h3><p>Code example below from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a></p><h4 id="Life-without-Builder"><a href="#Life-without-Builder" class="headerlink" title="Life without Builder"></a>Life without Builder</h4><p>Manually create some HTML, this will work but its not great.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">var</span> words = <span class="keyword">new</span>[] &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">sb.Append(<span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> word <span class="keyword">in</span> words)</span><br><span class="line">&#123;</span><br><span class="line">sb.AppendFormat(<span class="string">&quot;&lt;li&gt;&#123;0&#125;&lt;/li&gt;&quot;</span>, word);</span><br><span class="line">&#125;</span><br><span class="line">sb.Append(<span class="string">&quot;&lt;/ul&gt;&quot;</span>);</span><br><span class="line">WriteLine(sb);</span><br></pre></td></tr></table></figure><h4 id="Life-With-A-Builder"><a href="#Life-With-A-Builder" class="headerlink" title="Life With A Builder"></a>Life With A Builder</h4><p>Here the constructor for  <a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern/HtmlBuilder.cs">HtmlBuilder</a> takes a <code>rootName</code> and the <code>AddChild</code> method takes <code>childName</code> and <code>childText</code> parameters. This is then <a href="/2018/03/pillars-of-object-oriented-programming-oop/">encapsulating</a> the creation and use of <a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern/HtmlElement.cs">HtmlElement</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ordinary non-fluent builder</span></span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> HtmlBuilder(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">builder.AddChild(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">builder.AddChild(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">WriteLine(builder.ToString());</span><br></pre></td></tr></table></figure><p>The method <code>AddChildFluent</code> returns a <a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern/HtmlBuilder.cs">HtmlBuilder</a> to allow you to chain methods together. This works by returning a reference to the original object. This is called a <strong>fluent</strong> interface.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> HtmlBuilder(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">builder</span><br><span class="line">    .AddChildFluent(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    .AddChildFluent(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">WriteLine(builder);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li><a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/BuilderPattern">PatternsAndPrinciples/BuilderPattern</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Delegates</title>
      <link href="/2020/04/c-sharp-delegates/"/>
      <url>/2020/04/c-sharp-delegates/</url>
      
        <content type="html"><![CDATA[<p>A <strong>delegate</strong> is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type. You can invoke (or call) the method through the delegate instance. </p><p>Delegate types are <code>delegate</code>, <code>Action</code> and <code>Func</code>.</p><h3 id="Multicast-Delegate"><a href="#Multicast-Delegate" class="headerlink" title="Multicast Delegate"></a>Multicast Delegate</h3><p>All C# delegates have <strong>multicast capability</strong>, this means a single delegate instance can reference more than one target method. You can add or remove target methods using operators <code>+=</code> or <code>-=</code>. Target methods are called in the order they were added to the delegate instance.</p><ol><li>Create the delegate</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NumbersDelegate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create methods the delegate will call, the need to have the same return type and parameters signature.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;AddNumbers: &quot;</span> + (a + b))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MultiplyNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MultiplyNumbers: &quot;</span> + (a * b))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SubtractNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SubtractNumbers: &quot;</span> + (a - b))</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the delegate with one method <code>AddNumbers</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delegate with initial target `AddNumbers`</span></span><br><span class="line">NumbersDelegate numbersDelegate = foo.AddNumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke delegate, this will call `AddNumbers`</span></span><br><span class="line">numbersDelegate(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>Multicast the delegate to have more than one target</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbersDelegate += foo.MultiplyNumbers;</span><br><span class="line">numbersDelegate += foo.SubtractNumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke delegate, this will call `AddNumbers`, then `MultiplyNumbers` and finally `SubtractNumbers`</span></span><br><span class="line">numbersDelegate(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>You can also remove targets from the delegate</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbersDelegate -= foo.MultiplyNumbers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke delegate, this will call `AddNumbers`, then `SubtractNumbers` as it no longer points to `MultiplyNumbers`</span></span><br><span class="line">numbersDelegate(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="Delegate-As-A-Parameter"><a href="#Delegate-As-A-Parameter" class="headerlink" title="Delegate As A Parameter"></a>Delegate As A Parameter</h3><p>This was used in my <a href="/2017/11/windows-event-logs/">windows event logger</a> application.</p><ol><li>Create the delegate representing a method</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">EventLogReaderDelegate</span>(<span class="params">EventRecord <span class="keyword">record</span></span>)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the methods the delegate will point to</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Count</span>(<span class="params">EventRecord <span class="keyword">record</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// count logic that does something with `record`</span></span><br><span class="line"><span class="comment">// my app didnt actually do anything with `record` but there is a SO link below for an example that did, the principle is pretty much the same though.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Append</span>(<span class="params">EventRecord <span class="keyword">record</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// append logic that does something with `record`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a method that accepts the delegate as a parameter</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessReader</span>(<span class="params">EventLogReader reader, EventLogReaderDelegate <span class="built_in">delegate</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    EventRecord <span class="keyword">record</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="keyword">record</span> = reader.ReadEvent()) != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">record</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">delegate</span>(<span class="keyword">record</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">reader.Seek(<span class="keyword">new</span> SeekOrigin(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Call <code>ProcessReader</code> and pass it the delegates as parameters</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;EventLogModel&gt; <span class="title">Go</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> EventLogReader(_filePath, PathType.FilePath))</span><br><span class="line">&#123;</span><br><span class="line">ProcessReader(reader, Count); </span><br><span class="line">ProcessReader(reader, Append);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar example from SO: <a href="https://stackoverflow.com/questions/2019402/when-why-to-use-delegates">https://stackoverflow.com/questions/2019402/when-why-to-use-delegates</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/</a></li><li><a href="https://www.tutorialspoint.com/csharp/csharp_delegates.htm">https://www.tutorialspoint.com/csharp/csharp_delegates.htm</a></li><li><a href="https://www.tutorialsteacher.com/csharp/csharp-delegates">https://www.tutorialsteacher.com/csharp/csharp-delegates</a></li><li><a href="https://www.pluralsight.com/guides/how-why-to-use-delegates-csharp">https://www.pluralsight.com/guides/how-why-to-use-delegates-csharp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Domain Driven Design (DDD)</title>
      <link href="/2020/04/domain-driven-design/"/>
      <url>/2020/04/domain-driven-design/</url>
      
        <content type="html"><![CDATA[<p>An attempt to try understand what Domain Driven Design (DDD) is and how I can apply its practice and principles. Eric Evans defines a navigation map for DDD reference:</p><p><img src="/d/domain-driven-design/eric-evans-navigation-map.jpg" alt="Eric Evans - DDD Navigation Map"></p><h3 id="General-Terms"><a href="#General-Terms" class="headerlink" title="General Terms"></a>General Terms</h3><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Problem Domain</td><td>The specific problem the software you’re working on is trying to solve.</td></tr><tr><td>Core Domain</td><td>The key differentiator for the customer’s business – something they must do well and cannot outsource.</td></tr><tr><td>Ubiquitous Language</td><td><a href="/2017/04/ubiquitous-language-ul/">Common language used by domain experts and developers</a>.</td></tr><tr><td>Sub Domain</td><td>Divide each problem of the application into a sub-domain, Examples: Sales, Accounting &amp; Marketing are separate concerns. These are separate applications or features your software must support or interact with.</td></tr><tr><td>Bounded Context</td><td>A description of a boundary (typically a subsystem, or the work of a particular team) within which a particular model is defined and applicable.  Its ok for the same entity to have a different meaning per context in the same domain. Example: <code>Customer</code> - for a <code>Sales Bounded Context</code> this could be a <code>Lead</code>. For the <code>Bookings Bounded Context</code> this could be a <code>Passenger</code>.</td></tr><tr><td>Context Maps</td><td>Used to visualize/demonstrate where the boundaries between contexts lie. This is the The process of identifying bounded contexts and their relationships to one another.</td></tr><tr><td>Shared Kernel</td><td>Part of the model that is shared by two or more teams, who agree not to change it without collaboration</td></tr></tbody></table><h3 id="Code-Classes-Models-and-Objects"><a href="#Code-Classes-Models-and-Objects" class="headerlink" title="Code Classes, Models and Objects"></a>Code Classes, Models and Objects</h3><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Anemic Domain Model</td><td>Model with classes focused on state management, good for Create, read, update and delete (CRUD)</td></tr><tr><td>Rich Domain Model</td><td>Model with logic focused on behavior, not just state, this is preferred for DDD.</td></tr><tr><td>Entity</td><td>A mutable class (liable to change) with an identity that is not tied to its property values which is used for tracking and persistence.</td></tr><tr><td>Immutable</td><td>Type whos state cannot be changed once the object is instantiated (think private setters that you can only access in the constructor)</td></tr><tr><td>Value Object</td><td>An immutable class which identity is defined by the combination of its values.</td></tr><tr><td>Domain Services</td><td>A place in the model to hold behavior that doesn’t belong elsewhere in the domain.</td></tr><tr><td>Side Effects</td><td>State change of the application or interaction with infrastructure in the outside world.</td></tr></tbody></table><h3 id="Aggregates"><a href="#Aggregates" class="headerlink" title="Aggregates"></a>Aggregates</h3><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Aggregate</td><td>A transactional graph of objects</td></tr><tr><td>Aggregate Root</td><td>The entry point of an aggregate which ensures the integrity of the entire graph</td></tr><tr><td>Invariant</td><td>A condition that should always be true for the system to be in a consistent state</td></tr><tr><td>Persistence Ignorant Classes</td><td>Classes that have no knowledge about how they are persisted</td></tr></tbody></table><h3 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h3><blockquote><p>A repository represents all objects of a certain type as a conceptual set…like a collection with more elaborate querying capability. —Eric Evans</p></blockquote><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Repository</td><td>A class that encapsulates the data persistence for an aggregate root</td></tr><tr><td>ACID</td><td>Atomic, Consistent, Isolated, and Durable</td></tr></tbody></table><h3 id="Domain-Events"><a href="#Domain-Events" class="headerlink" title="Domain Events"></a>Domain Events</h3><p>Decoupling the Domain Model’s Communications.</p><blockquote><p>Use a Domain Event to capture an occurrence of something that happened in the domain. —<br>Vaughn Vernon</p></blockquote><p>Example events:</p><ul><li>User Authenticated </li><li>Appointment Confirmed</li><li>Payment Received</li></ul><p>Designing Domain Events:</p><ul><li>Each event is its own class</li><li>Include when the event took place</li><li>Capture event-specific details</li><li>Event fields are initialized in constructor</li><li>No behavior or side effects</li></ul><h3 id="Anti-Corruption-Layers"><a href="#Anti-Corruption-Layers" class="headerlink" title="Anti-Corruption Layers"></a>Anti-Corruption Layers</h3><p>Translate between foreign systems’ models &amp; our own using design patterns</p><ul><li>Facade</li><li>Adapter</li><li>custom translation classes or services</li></ul><p>The structure of an Anti-Corruption Layer:</p><p><img src="/d/domain-driven-design/anti-corruption-layers-domain-driven-design.png" alt="Source: Evans, Domain-Driven Design, p. 367"></p><table><thead><tr><th>Term</th><th>Description</th></tr></thead><tbody><tr><td>Domain Event</td><td>A class that captures the occurrence of an event in a domain object</td></tr><tr><td>Hollywood Principle</td><td>“Don’t call us, we’ll call you”</td></tr><tr><td>Inversion of Control (IOC)</td><td>A pattern for loosely coupling a dependent object with an object it will need at runtime</td></tr><tr><td>Anti-Corruption Layer</td><td>Functionality that insulates a bounded context and handles interaction with foreign systems or contexts</td></tr></tbody></table><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.pluralsight.com/courses/domain-driven-design-fundamentals">https://www.pluralsight.com/courses/domain-driven-design-fundamentals</a></li><li><a href="https://dddcommunity.org/">https://dddcommunity.org/</a></li><li><a href="https://www.infoq.com/domain-driven-design/">https://www.infoq.com/domain-driven-design/</a></li></ul><h3 id="Advocates-of-the-practice"><a href="#Advocates-of-the-practice" class="headerlink" title="Advocates of the practice"></a>Advocates of the practice</h3><ul><li>Eric Evans<ul><li><a href="https://domainlanguage.com/ddd/">https://domainlanguage.com/ddd/</a></li><li><a href="https://domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf">https://domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf</a></li></ul></li><li>Vaughn Vernon<ul><li><a href="https://vaughnvernon.co/">https://vaughnvernon.co/</a></li><li><a href="https://github.com/VaughnVernon/IDDD_Samples_NET">https://github.com/VaughnVernon/IDDD_Samples_NET</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ddd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microwave maize bread</title>
      <link href="/2020/04/microwave-maize-bread/"/>
      <url>/2020/04/microwave-maize-bread/</url>
      
        <content type="html"><![CDATA[<p>Baking bread has never been this easy. Within less than 30 minutes you can have a freshly baked maize bread.</p><p><strong>Preparation time :</strong> 5 minutes <strong>Cooking time :</strong> 12-15 minutes <strong>Servings :</strong> 6</p><h3 id="Ingredients"><a href="#Ingredients" class="headerlink" title="Ingredients"></a>Ingredients</h3><ul><li>4 eggs</li><li>125 ml milk</li><li>125 ml sugar</li><li>pinch salt</li><li>250 ml maize meal</li><li>30 ml cake flour</li><li>7 ml baking powder</li><li>1 can, cream-style</li><li>sweet corn</li><li>1 can, whole-kernel</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Grease a 28 cm silicone loaf tin with nonstick spray.</p><ol><li>Whisk the eggs, milk, sugar and salt.</li><li>Sift together the dry ingredients and mix with the egg mixture. Add the sweet corn and oil and mix well.</li><li>Turn the batter into the tin and sprinkle with paprika.</li><li>Put the tin on an upturned saucer and microwave for 12-15 minutes or until done.</li><li>Cool in the tin for 10 minutes before turning out on a wire rack.</li><li>Serve hot or cold with butter and cheese.</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://m.food24.com/Recipes-and-Menus/South-African-Recipes/microwave-maize-bread-20181029-2">https://m.food24.com/Recipes-and-Menus/South-African-Recipes/microwave-maize-bread-20181029-2</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> food </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remote Collaboration</title>
      <link href="/2020/03/remote-collaboration/"/>
      <url>/2020/03/remote-collaboration/</url>
      
        <content type="html"><![CDATA[<p>The world can remotely collaborate over the internet using amazing and often free tools. With the rise of Covid-19 we are using these tools more frequently in the Information Technology sector. </p><h3 id="Meeting-Tools"><a href="#Meeting-Tools" class="headerlink" title="Meeting Tools"></a>Meeting Tools</h3><p><em>Jamboard</em> is virtual sticky notes!</p><ul><li><a href="https://jamboard.google.com/">https://jamboard.google.com/</a></li></ul><p><em>Slido</em> is useful to bring up all company questions, vote for them to be discussed on an open forum.</p><ul><li><a href="https://www.sli.do/use-cases">https://www.sli.do/use-cases</a></li></ul><h3 id="Virtual-white-boards"><a href="#Virtual-white-boards" class="headerlink" title="Virtual white boards"></a>Virtual white boards</h3><p><em>Miro</em> is a collaborative online whiteboard platform designed for remote and distributed teams.</p><ul><li><a href="https://miro.com/">https://miro.com/</a></li></ul><p><em>AWW APP</em> is a virtual white board</p><ul><li><a href="https://awwapp.com/">https://awwapp.com/</a></li></ul><h3 id="Instant-Messaging"><a href="#Instant-Messaging" class="headerlink" title="Instant Messaging"></a>Instant Messaging</h3><p>Virtual meetings with Hangouts (previously known as G-Talk), this can also be used to stream meetings with only the exec creating the stream and the rest of the company <code>tuning </code> into the stream.</p><ul><li><a href="https://meet.google.com/">https://meet.google.com/</a></li></ul><p><em>Slack</em> is a collaboration hub that can replace email to help you and your team work together seamlessly.</p><ul><li><a href="https://slack.com/intl/en-nz/help/articles/115004071768-What-is-Slack-">https://slack.com/intl/en-nz/help/articles/115004071768-What-is-Slack-</a></li></ul><p><em>Skype for business</em> is a communication tool built for businesses to connect anywhere, anytime.</p><ul><li><a href="https://www.skype.com/en/business/">https://www.skype.com/en/business/</a></li></ul><h3 id="Manage-Workflows"><a href="#Manage-Workflows" class="headerlink" title="Manage Workflows"></a>Manage Workflows</h3><p><em>Redmine</em> is a flexible project management web application.</p><ul><li><a href="https://www.redmine.org/">https://www.redmine.org/</a></li></ul><p><em>Jira</em> has evolved into a powerful work management tool for all kinds of use cases</p><ul><li><a href="https://www.atlassian.com/software/jira/guides/use-cases/what-is-jira-used-for">https://www.atlassian.com/software/jira/guides/use-cases/what-is-jira-used-for</a></li></ul><p><em>Trello</em> lets you work more collaboratively and get more done.</p><ul><li><a href="https://trello.com/">https://trello.com/</a></li></ul><h3 id="Single-Sign-On"><a href="#Single-Sign-On" class="headerlink" title="Single Sign On"></a>Single Sign On</h3><p>The World Has Changed. Agility is Now Required. <em>Okta</em> is Modern Single Sign On (SSO).</p><ul><li><a href="https://www.okta.com/products/single-sign-on/">https://www.okta.com/products/single-sign-on/</a></li></ul><p>Other big names like <a href="https://www.facebook.com/workplace/resources/tech/authentication/sso">Facebook</a> and <a href="https://support.google.com/a/answer/60224?hl=en">Google</a> offer similar services for you to allow your staff to authenticate to things they need to power your business.</p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Status Badges</title>
      <link href="/2020/03/status-badges/"/>
      <url>/2020/03/status-badges/</url>
      
        <content type="html"><![CDATA[<p>Status badges live at the top of repository <code>README.md</code> files providing information about builds, version ect</p><p><img src="/d/travis-ci/travis-ci.jpg" alt="travis ci"></p><p>Individual CI/CD providers often provide build status badges directly such as <a href="/2018/06/travis-ci/">Travis CI</a></p><p>Shields IO</p><p>I couldnt see how to do this for docker so used <a href="https://shields.io/">shields.io</a>, which can do lots of badge types, including Docker Hub pulls, and build status for lots of popular CI/CD providers. </p><p>For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Docker Cloud Automated build](https://img.shields.io/docker/cloud/automated/carlpaton/vulnuscloud?logoColor=brightgreen)](https://hub.docker.com/r/carlpaton/vulnuscloud)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlpaton/VulnusCloud">This then displays here. Sweet.</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/51515021/how-do-i-show-docker-pulls-as-an-image-in-my-github-readme-file">https://stackoverflow.com/questions/51515021/how-do-i-show-docker-pulls-as-an-image-in-my-github-readme-file</a></li><li><a href="https://circleci.com/blog/status-badges/">https://circleci.com/blog/status-badges/</a></li><li><a href="https://shields.io/category/build">https://shields.io/category/build</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DI in .Net Core</title>
      <link href="/2020/02/di-in-net-core/"/>
      <url>/2020/02/di-in-net-core/</url>
      
        <content type="html"><![CDATA[<h3 id="Transient"><a href="#Transient" class="headerlink" title="Transient"></a>Transient</h3><p><strong>Transient</strong> objects are always different; a new instance is provided to every controller and every service.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IOssIndexRepository, OssIndexRepository&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// with parameters</span></span><br><span class="line"><span class="keyword">var</span> projectRepository = <span class="keyword">new</span> ProjectRepository(connectionString);</span><br><span class="line">services.AddTransient&lt;IProjectRepository&gt;(s =&gt; projectRepository);</span><br></pre></td></tr></table></figure><h3 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h3><p><strong>Scoped</strong> objects are the same within a request, but different across different requests.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;IOperationScoped, Operation&gt;();</span><br></pre></td></tr></table></figure><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p><strong>Singleton</strong> objects are the same for every object and every request.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ossIndexRepository = <span class="keyword">new</span> OssIndexRepository(connectionString);</span><br><span class="line">services.AddSingleton&lt;IOssIndexRepository&gt;(ossIndexRepository);</span><br></pre></td></tr></table></figure><h3 id="AddOptions"><a href="#AddOptions" class="headerlink" title="AddOptions"></a>AddOptions</h3><p>If you need to resolve a dependency inside <code>ConfigureServices</code> you may be tempted to to call <code>BuildServiceProvider</code>, although this will work you will then create an additional copy of singleton service which is bad.</p><p>I’ve run into this kind of issue when I needed to inject a <code>Scoped</code> dependancy into another dependancy which was a <code>Singleton</code> dependancy.</p><p><strong>Example of the wrong way to do it</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddTransient(IMyScopedService, MyScopedService);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> serviceProvider = services.BuildServiceProvider())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> myScopedService = serviceProvider.GetRequiredService&lt;IMyScopedService&gt;();</span><br><span class="line">        services.AddSweetSingleton(options =&gt; </span><br><span class="line">        &#123;</span><br><span class="line">            options.SomethingFromScopedService = myScopedService.SomethingHelpfulFromScopedService();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Microsoft suggest to avoid calls to <code>BuildServiceProvider</code> in <code>ConfigureServices</code>!</p><p>The best way to do this is to create an <code>Options</code> object </p><p><strong>Example of the correct way</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddTransient(IMyScopedService, MyScopedService);</span><br><span class="line">    services.AddTransient(IMySingletonService, MySingletonService);</span><br><span class="line"></span><br><span class="line">    services</span><br><span class="line">        .AddOptions&lt;MySingletonServiceOptions&gt;()</span><br><span class="line">        .Configure&lt;IMyScopedService&gt;((options, service) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.SomethingFromScopedService = service.SomethingHelpfulFromScopedService();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0#recommendations">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0#recommendations</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options</a></li><li><a href="https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/">https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
            <tag> patterns principles </tag>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Execution Plans</title>
      <link href="/2020/02/sql-execution-plans/"/>
      <url>/2020/02/sql-execution-plans/</url>
      
        <content type="html"><![CDATA[<p>An execution plan, simply put, is the result of the SQL query optimizer’s attempt to calculate the most efficient way to execute your query. Simply put this turns your <code>Here’s what I want</code> into SQL’s <code>Here’s the best way to get it</code></p><p>You can use <strong>Microsoft SQL Server Management Studio</strong> to see execution plans, this can be done from the tool bar in 3 ways.</p><blockquote><p>To see this tool bar right click your tool bar area and select <code>SQL Editor</code>, you need to have a SQL statement ready and executed for these options to be visible.</p></blockquote><p><img src="/d/sql-execution-plans/ssms-tool-bar.jpg" alt="SSMS Tool Bar"></p><h3 id="Estimated-Execution-Plan"><a href="#Estimated-Execution-Plan" class="headerlink" title="Estimated Execution Plan"></a>Estimated Execution Plan</h3><p>This is a representative view based on the query optimizer - it doesn’t actually run the results of the query.  Execution plan can identify possible missing indexes.</p><p><img src="/d/sql-execution-plans/ssms-suggested-index.jpg" alt="Suggested Index"></p><h3 id="Key-Things-To-Look-For"><a href="#Key-Things-To-Look-For" class="headerlink" title="Key Things To Look For"></a>Key Things To Look For</h3><ol><li>Reading many rows will show as a much thicker line<ol><li>Check things like <code>INNER JOIN</code> vs <code>LEFT OUTER JOIN</code></li><li>Check things like <code>UNION</code> vs <code>UNION ALL</code></li><li>Do you actually need all the columns you are selecting?</li></ol></li><li>High costs shown as a percentage, example 90%</li><li>Scan where we may expect a seek</li></ol><h3 id="Sargable"><a href="#Sargable" class="headerlink" title="Sargable"></a>Sargable</h3><blockquote><p>In relational databases, a condition (or predicate) in a query is said to be <strong>sargable</strong> if the DBMS engine can take advantage of an index to speed up the execution of the query. The term is derived from a contraction of Search ARGument ABLE.</p></blockquote><p>This means you don’t necessarily need a new index, you may need to tweak a query by questioning its <strong>sargability</strong>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Example querys where the cost in the plan are simliar however the first query cost relative to the batch may be significantly lower.</span></span><br><span class="line"></span><br><span class="line">Use MyInstance;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> dbo.myTable <span class="keyword">WITH</span> (NOLOCK) <span class="keyword">WHERE</span> some_date <span class="operator">&gt;</span> <span class="string">&#x27;28 July 1983&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- May result in a Scan, where a seek is more efficient</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> dbo.myTable <span class="keyword">WITH</span> (NOLOCK) <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(some_date) <span class="operator">&gt;</span> <span class="string">&#x27;1983&#x27;</span>; </span><br></pre></td></tr></table></figure><h3 id="Include-Actual-Execution-Plan"><a href="#Include-Actual-Execution-Plan" class="headerlink" title="Include Actual Execution Plan"></a>Include Actual Execution Plan</h3><p>This shows the plan on the back of actually executing your query.</p><h3 id="Include-Live-Query-Stats"><a href="#Include-Live-Query-Stats" class="headerlink" title="Include Live Query Stats"></a>Include Live Query Stats</h3><p>This shows the plan and stats while the query is executing.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.pass.org/PASSBlog/tabid/68281/ArtMID/99177/ArticleID/769/preview/true/Default.aspx">https://www.pass.org/PASSBlog/tabid/68281/ArtMID/99177/ArticleID/769/preview/true/Default.aspx</a></li><li><a href="https://www.sqlshack.com/how-to-use-sargable-expressions-in-t-sql-queries-performance-advantages-and-examples/">https://www.sqlshack.com/how-to-use-sargable-expressions-in-t-sql-queries-performance-advantages-and-examples/</a></li><li><a href="https://www.sentryone.com/plan-explorer">https://www.sentryone.com/plan-explorer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Order Of Execution</title>
      <link href="/2020/02/sql-order-of-execution/"/>
      <url>/2020/02/sql-order-of-execution/</url>
      
        <content type="html"><![CDATA[<p>I had an issue where I couldn’t use a column that was being evaluated with a modulus statement, the problem was the order of the execution.</p><p>Statement in question:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@lowerBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@upperBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> top <span class="number">100</span> user_id, (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="keyword">as</span> lastThreeDigits, email</span><br><span class="line"><span class="keyword">from</span> dbo.myUsers</span><br><span class="line"><span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%@github.com&#x27;</span></span><br><span class="line"><span class="keyword">and</span> lastThreeDigits <span class="operator">&gt;=</span> <span class="variable">@lowerBound</span></span><br><span class="line"><span class="keyword">and</span> lastThreeDigits <span class="operator">&lt;=</span> <span class="variable">@upperBound</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> email;</span><br></pre></td></tr></table></figure><p>This moans with invalid column name <code>lastThreeDigits</code> the reason for this is the order of execution in the SQL statement being:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">This isn&#x27;t always the order but it&#x27;s the normal one:</span><br><span class="line"></span><br><span class="line"> 1. FROM</span><br><span class="line"> 2. ON</span><br><span class="line"> 3. JOIN</span><br><span class="line"> 4. WHERE</span><br><span class="line"> 5. GROUP BY</span><br><span class="line"> 6. WITH CUBE or WITH ROLLUP</span><br><span class="line"> 7. HAVING</span><br><span class="line"> 8. SELECT</span><br><span class="line"> 9. DISTINCT</span><br><span class="line">10. ORDER BY</span><br><span class="line">11. TOP</span><br></pre></td></tr></table></figure><p>So the WHERE is before the SELECT (where I had the alias the column <code>lastThreeDigits</code>) so it doesn’t exist at the point the WHERE is executed.</p><p>The solution was to give SQL a little more work to do:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@lowerBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@upperBound</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> top <span class="number">100</span> user_id, (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="keyword">as</span> lastThreeDigits, email</span><br><span class="line"><span class="keyword">from</span> dbo.myUsers</span><br><span class="line"><span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%@github.com&#x27;</span></span><br><span class="line"><span class="keyword">and</span> (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="operator">&gt;=</span> <span class="variable">@lowerBound</span></span><br><span class="line"><span class="keyword">and</span> (user_id <span class="operator">%</span> <span class="number">1000</span>) <span class="operator">&lt;=</span> <span class="variable">@upperBound</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> email;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/@allegranzia/sql-select-statement-order-of-execution-ee9eef21510d">https://medium.com/@allegranzia/sql-select-statement-order-of-execution-ee9eef21510d</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sessions in .Net Core</title>
      <link href="/2020/02/sessions-in-net-core/"/>
      <url>/2020/02/sessions-in-net-core/</url>
      
        <content type="html"><![CDATA[<p>Sessions will not work out of the box, you need to do some setup:</p><ol><li><p>Add the nuget package <code>Microsoft.AspNetCore.Session</code></p></li><li><p>In <strong>Startup.cs</strong> add to <code>ConfigureServices</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddSession(options =&gt; &#123;</span><br><span class="line">    options.IdleTimeout = TimeSpan.FromMinutes(<span class="number">15</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>In <strong>Startup.cs</strong> add to <code>Configure</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseSession();</span><br></pre></td></tr></table></figure></li><li><p>Then in your controllers you can get and set values, would be best to have <code>ProjectName</code> set in a constants file.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpContext.Session.SetString(<span class="string">&quot;ProjectName&quot;</span>, project.ProjectName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> projectName = HttpContext.Session.GetString(<span class="string">&quot;ProjectName&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="Microsoft-AspNetCore-Http"><a href="#Microsoft-AspNetCore-Http" class="headerlink" title="Microsoft.AspNetCore.Http"></a>Microsoft.AspNetCore.Http</h3><p>These are the methods available for use in the controller (Version=2.2.0.0)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static byte[] Get(this ISession session, string key);</span><br><span class="line">public static int? GetInt32(this ISession session, string key);</span><br><span class="line">public static string GetString(this ISession session, string key);</span><br><span class="line">public static void SetInt32(this ISession session, string key, int value);</span><br><span class="line">public static void SetString(this ISession session, string key, string value);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-3.1">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-3.1</a></li><li><a href="https://www.c-sharpcorner.com/article/how-to-use-session-in-asp-net-core/">https://www.c-sharpcorner.com/article/how-to-use-session-in-asp-net-core/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluent Assertions</title>
      <link href="/2020/02/fluent-assertions/"/>
      <url>/2020/02/fluent-assertions/</url>
      
        <content type="html"><![CDATA[<p><code>FluentAssertions</code> provides extension methods for your asserts</p><h3 id="Basic-Assertions"><a href="#Basic-Assertions" class="headerlink" title="Basic Assertions"></a>Basic Assertions</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> theObject = <span class="literal">null</span>;</span><br><span class="line">theObject.Should().BeNull(<span class="string">&quot;because the value is null&quot;</span>);</span><br><span class="line">theObject.Should().NotBeNull();</span><br></pre></td></tr></table></figure><ul><li><a href="https://fluentassertions.com/basicassertions/">https://fluentassertions.com/basicassertions/</a></li></ul><h3 id="Equivalent-To"><a href="#Equivalent-To" class="headerlink" title="Equivalent To"></a>Equivalent To</h3><p><code>Should().BeEquivalentTo(...)</code> asserts that an object is equivalent to another object.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v5.9.0</span></span><br><span class="line">actual.Should().BeEquivalentTo(expectedModel);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v2.2.0</span></span><br><span class="line">objectA.ShouldBeEquivalentTo(objectB);</span><br></pre></td></tr></table></figure><h3 id="Awaiting-Exceptions"><a href="#Awaiting-Exceptions" class="headerlink" title="Awaiting Exceptions"></a>Awaiting Exceptions</h3><blockquote><p>“Invokes the specified action on a subject so that you can chain it with any of the assertions from FluentAssertions.Specialized.GenericAsyncFunctionAssertions`”</p></blockquote><pre><code class="c#">// Act// AssertclassUnderTest    .Awaiting(x =&gt; x.SomeMethod(someParameter))    .Should().Throw&lt;FooCustomExceptionException&gt;()    .And.StatusCode.Should().Be(StatusCodes.Status503ServiceUnavailable); // Microsoft.AspNetCore.Http</code></pre><ul><li><a href="https://fluentassertions.com/exceptions/">https://fluentassertions.com/exceptions/</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://fluentassertions.com/introduction">https://fluentassertions.com/introduction</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> software testing </tag>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adapter Pattern</title>
      <link href="/2020/02/adapter-pattern/"/>
      <url>/2020/02/adapter-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the “adaptee” with a class that supports the interface required by the client.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Adapter.aspx">http://www.blackwasp.co.uk/Adapter.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bridge Pattern</title>
      <link href="/2020/02/bridge-pattern/"/>
      <url>/2020/02/bridge-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Bridge.aspx">http://www.blackwasp.co.uk/Bridge.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chain of Responsibility Pattern</title>
      <link href="/2020/02/chain-of-responsibility-pattern/"/>
      <url>/2020/02/chain-of-responsibility-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.</p><p>Simply put, its a chain of hander objects to process a request or pass it to the next handler. This decouples requests from handlers.</p><h3 id="Example-Chain-Validate-object-in-multiple-steps"><a href="#Example-Chain-Validate-object-in-multiple-steps" class="headerlink" title="Example Chain : Validate object in multiple steps"></a>Example Chain : Validate object in multiple steps</h3><p>Often the simplest example using basic language features can explain a pattern, the following examples are based on <a href="https://www.youtube.com/watch?v=qI_v31n1ZTk">Code Radiance</a></p><ol><li>Create the <code>Request</code> object and the class you want to validate, here we will validate <code>Person</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Request</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span>()</span> =&gt; Messages = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; Messages &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create the handler interface</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Used to propagate the request to the next handler</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetNextHandler</span>(<span class="params">IHandler handler</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Process the request</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;request&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Process</span>(<span class="params">Request request</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a base handler for common functionality</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseHandler</span> : <span class="title">IHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> IHandler? _nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetNextHandler</span>(<span class="params">IHandler handler</span>)</span> =&gt; _nextHandler = handler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">Request request</span>)</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Create the handlers, this will type cast the <code>request.Data</code> as a <code>Person</code> object else <code>ArgumentException</code> is thrown</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MaxNameLengthHandler</span> : <span class="title">BaseHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">Request request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.Data <span class="keyword">is</span> Person person)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (person.Name.Length &gt; <span class="number">10</span>)</span><br><span class="line">                request.Messages.Add(<span class="string">&quot;Invalid Name Length&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_nextHandler != <span class="literal">null</span>)</span><br><span class="line">                _nextHandler.Process(request);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Request was not of type Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MaxAgeHandler</span> : <span class="title">BaseHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">Request request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.Data <span class="keyword">is</span> Person person)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (person.Age &gt; <span class="number">55</span>)</span><br><span class="line">                request.Messages.Add(<span class="string">&quot;Invalid Age&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_nextHandler != <span class="literal">null</span>)</span><br><span class="line">                _nextHandler.Process(request);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Request was not of type Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Now test the code. The call(s) to <code>SetNextHandler</code> are admittedly clunky, each handler will need to be setup manually like this. </li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot;Carl Brown Paton&quot;</span>,</span><br><span class="line">    Age = <span class="number">84</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> Request() &#123; Data = person &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxNameLengthHandler = <span class="keyword">new</span> MaxNameLengthHandler();</span><br><span class="line"><span class="keyword">var</span> maxAgeHandler = <span class="keyword">new</span> MaxAgeHandler();</span><br><span class="line"></span><br><span class="line">maxNameLengthHandler.SetNextHandler(maxAgeHandler);</span><br><span class="line">maxNameLengthHandler.Process(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> message <span class="keyword">in</span> request.Messages)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This should output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invalid Name Length</span><br><span class="line">Invalid Age</span><br></pre></td></tr></table></figure><h3 id="Example-Chain-Payment-method"><a href="#Example-Chain-Payment-method" class="headerlink" title="Example Chain : Payment method"></a>Example Chain : Payment method</h3><ul><li>WIP</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/ChainOfResponsibility.aspx">http://www.blackwasp.co.uk/ChainOfResponsibility.aspx</a></li><li><a href="https://www.youtube.com/watch?v=qI_v31n1ZTk">https://www.youtube.com/watch?v=qI_v31n1ZTk</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Pattern</title>
      <link href="/2020/02/command-pattern/"/>
      <url>/2020/02/command-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Use Case: GUI Commands, multi undo/redo, need to serialize sequence of actions/calls. There are many use cases!</p></blockquote><p>Code examples below from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a></p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The command pattern lets you build an object which represents an instruction to perform a particular action. This command contains all the information needed for the action to be taken.</p><h3 id="Command-Example"><a href="#Command-Example" class="headerlink" title="Command Example"></a>Command Example</h3><p>Run a batch of commands on a Bank Account, these commands could then be serialized and persisted to a data store.</p><ol><li>Create <code>BankAccount</code> with its methods access modifiers set to internal, this means they are accessible only within files in the same assembly.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> _balance;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> overdraftLimit = <span class="number">-500</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">int</span> balance = <span class="number">0</span></span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      _balance = balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Deposit</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    _balance += amount;</span><br><span class="line">    WriteLine(<span class="string">$&quot;Deposited $<span class="subst">&#123;amount&#125;</span>, balance is now <span class="subst">&#123;_balance&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">internal</span> <span class="built_in">bool</span> <span class="title">Withdraw</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (_balance - amount &gt;= overdraftLimit)</span><br><span class="line">    &#123;</span><br><span class="line">      _balance -= amount;</span><br><span class="line">      WriteLine(<span class="string">$&quot;Withdrew $<span class="subst">&#123;amount&#125;</span>, balance is now <span class="subst">&#123;_balance&#125;</span>&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(_balance)&#125;</span>: <span class="subst">&#123;_balance&#125;</span>&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create our command interface and its implementation.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Call</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankaccountCommand</span> : <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Action</span><br><span class="line">    &#123;</span><br><span class="line">        Deposit, Withdraw</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BankAccount _account;</span><br><span class="line">    <span class="keyword">private</span> Action _action;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _amount;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _succeeded;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank_accountCommand</span>(<span class="params">BankAccount account, Action action, <span class="built_in">int</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _account = account ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(paramName: <span class="keyword">nameof</span>(_account));</span><br><span class="line">        _action = action;</span><br><span class="line">        _amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (_action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Action.Deposit:</span><br><span class="line">                _account.Deposit(_amount);</span><br><span class="line">                succeeded = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Action.Withdraw:</span><br><span class="line">                _succeeded = _account.Withdraw(_amount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assumes `Deposit` is the opposite of `Withdraw`</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_succeeded) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (_action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Action.Deposit:</span><br><span class="line">                _account.Withdraw(_amount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Action.Withdraw:</span><br><span class="line">                _account.Deposit(_amount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the commands</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"><span class="keyword">var</span> commands = <span class="keyword">new</span> List&lt;BankAccountCommand&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Deposit, <span class="number">100</span>),</span><br><span class="line">    <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Withdraw, <span class="number">1000</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">WriteLine(bankAccount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> commands)</span><br><span class="line">    c.Call();</span><br><span class="line"></span><br><span class="line">WriteLine(bankAccount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> Enumerable.Reverse(commands))</span><br><span class="line">    c.Undo();</span><br><span class="line"></span><br><span class="line">WriteLine(bankAccount);</span><br></pre></td></tr></table></figure><h3 id="Composite-Command-Example"><a href="#Composite-Command-Example" class="headerlink" title="Composite Command Example"></a>Composite Command Example</h3><p>This is a combination of the <a href="/2020/02/composite-pattern/">Composite Pattern</a> and the Command pattern. Building on the example above a Composite Command could be used to transfer money from account A to account B. This will wrap several elements into one element which has the same API.</p><ol><li>Extend the interface to include a <code>Succcess</code> property.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Call</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>()</span>;</span><br><span class="line">    <span class="built_in">bool</span> Success &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create a general purpose composite command</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CompositeBankAccountCommand</span> : <span class="title">List</span>&lt;<span class="title">BankAccountCommand</span>&gt;, <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompositeBankAccountCommand</span>(<span class="params">IEnumerable&lt;BankAccountCommand&gt; collection</span>) : <span class="title">base</span>(<span class="params">collection</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        ForEach(cmd =&gt; cmd.Call());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> cmd <span class="title">in</span> </span></span><br><span class="line"><span class="function">        (<span class="params">(IEnumerable&lt;BankAccountCommand&gt;</span>)<span class="keyword">this</span>).<span class="title">Reverse</span>())</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.Success) cmd.Undo();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Success </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// A composite command is successful only if all of the constituent parts succeed</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.All(cmd =&gt; cmd.Success);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Sets each `Success` - not sure if this is the best approach</span></span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> cmd <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">                cmd.Success = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Use the command to test it.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"><span class="keyword">var</span> deposit = <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Deposit, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> withdraw = <span class="keyword">new</span> BankAccountCommand(bankAccount, BankAccountCommand.Action.Withdraw, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> composite = <span class="keyword">new</span> CompositeBankAccountCommand(<span class="keyword">new</span> []&#123; deposit, withdraw &#125;);</span><br><span class="line"></span><br><span class="line">composite.Call();</span><br><span class="line">WriteLine(bankAccount);</span><br><span class="line"></span><br><span class="line">composite.Undo();</span><br><span class="line">WriteLine(bankAccount);</span><br></pre></td></tr></table></figure><ol start="4"><li>Now to do the money transfer command we need to change how <code>Call</code> works as we need to care that the subsequent commands succeeded. This can be accomplished by making the <code>Call</code> and <code>Undo</code> methods virtual which allows the implementation to be overridden.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Call</span>()</span> &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> Success &#123; &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Create type <code>MoneyTransferCommand</code></li></ol><p>This is the implementation of a composite command using infrastructure from the above.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoneyTransferCommand</span> : <span class="title">CompositeBankAccountCommand</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MoneyTransferCommand</span> (<span class="params">BankAccount <span class="keyword">from</span>, BankAccount to, <span class="built_in">int</span> amount</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// We inherit from a list in the base class so we can call its `AddRange` method</span></span><br><span class="line">        AddRange(<span class="keyword">new</span> [] &#123;</span><br><span class="line">            <span class="keyword">new</span> BankAccountCommand(<span class="keyword">from</span>, BankAccountCommand.Action.Withdraw, amount),</span><br><span class="line">            <span class="keyword">new</span> BankAccountCommand(to, BankAccountCommand.Action.Deposit, amount)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need to override the base call command so we have consistency</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Call</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// we dont want to call a subsequent command if the previous command failed</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// this will keep a reference to the last command we envoked</span></span><br><span class="line">        BankAccountCommand last = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> cmd <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// precondition is there is no previous command or the previous command succeeded</span></span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span> || last.Success)</span><br><span class="line">            &#123;</span><br><span class="line">                cmd.Call();</span><br><span class="line">                last = cmd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cmd.Undo();</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// the whole chain has failed</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Use the composite command (happy path)</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">from</span> = <span class="keyword">new</span> BankAccount(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> to = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mtc = <span class="keyword">new</span> CompositeBankAccountCommand(<span class="keyword">from</span>, to, <span class="number">100</span>);</span><br><span class="line">mtc.Call();</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="keyword">from</span>);</span><br><span class="line">WriteLine(to);</span><br></pre></td></tr></table></figure><ol start="7"><li>Try transfer more than the balance allows. The overridden call has checks for this so will <code>Undo</code> the command and break out of the commands.</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mtc = <span class="keyword">new</span> CompositeBankAccountCommand(<span class="keyword">from</span>, to, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li><a href="https://exceptionnotfound.net/command-pattern-in-csharp/">https://exceptionnotfound.net/command-pattern-in-csharp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composite Pattern</title>
      <link href="/2020/02/composite-pattern/"/>
      <url>/2020/02/composite-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilised in a standard manner.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Composite.aspx">http://www.blackwasp.co.uk/Composite.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Decorator Pattern</title>
      <link href="/2020/02/decorator-pattern/"/>
      <url>/2020/02/decorator-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The decorator pattern is used to extend or alter the functionality of objects at run-time by wrapping them in an object of a decorator class. This provides a flexible alternative to using <a href="http://www.blackwasp.co.uk/Inheritance.aspx">inheritance</a> to modify behavior.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Decorator.aspx">http://www.blackwasp.co.uk/Decorator.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns</title>
      <link href="/2020/02/design-patterns/"/>
      <url>/2020/02/design-patterns/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 18/09/2023</strong></p><p>I have put these into groups <code>cloud design patterns</code>, <code>code design patterns</code> and <code>other patterns</code></p><h1 id="Cloud-Design-Patterns"><a href="#Cloud-Design-Patterns" class="headerlink" title="Cloud Design Patterns"></a>Cloud Design Patterns</h1><ul><li><a href="/2021/10/asynchronous-request-reply-pattern/">Asynchronous Request Reply Pattern</a></li><li>Circuit Breaker Pattern (<a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker">MS Docs</a>, <a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/cloud-design-patterns/circuit-breaker.html">AWS Docs</a>)</li><li><a href="/2021/04/valet-key-pattern/">Valet Key</a></li></ul><h1 id="Code-Design-Patterns"><a href="#Code-Design-Patterns" class="headerlink" title="Code Design Patterns"></a>Code Design Patterns</h1><p>Based on the Gang of Four Authors, Code Design patterns can typically be grouped into categories. </p><p>Categories <code>Creational</code>, <code>Structural</code> and <code>Behavioral</code> are sometimes referred to as <code>Gamma Categorization</code> which was named after Erich Gamma, one of the Gang of Four Authors. I found the <a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">Udemy Course</a> by <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a> hugely helpful in understanding these and other patterns.</p><h2 id="Creational-Patterns"><a href="#Creational-Patterns" class="headerlink" title="Creational Patterns"></a>Creational Patterns</h2><p>Deal with the creation (construction) of objects either explicit (constructor) or implicit (<a href="/tags/dependency-injection/">Dependency Injection</a>, reflection ect). Some are wholesale (single statement) and others are piecewise (step by step)</p><ul><li><a href="/2020/02/factory-pattern/">Factory</a></li><li><a href="/2020/04/builder-pattern/">Builder</a></li><li><a href="/2020/05/prototype-pattern/">Prototype</a></li><li><a href="/2020/02/singleton-pattern/">Singleton *</a></li></ul><h2 id="Structural-Patterns"><a href="#Structural-Patterns" class="headerlink" title="Structural Patterns"></a>Structural Patterns</h2><p>Concerned with the structure (IE: class members). Many are wrappers that mimic the underlying class interface. They generally stress the importance of good API design.</p><ul><li><a href="/2020/02/adapter-pattern/">Adapter *</a></li><li><a href="/2020/02/bridge-pattern/">Bridge *</a></li><li><a href="/2020/02/composite-pattern/">Composite *</a></li><li><a href="/2020/02/decorator-pattern/">Decorator *</a></li><li><a href="/2020/02/facade-pattern/">Facade *</a></li><li><a href="/2020/02/flyweight-pattern/">Flyweight *</a></li><li><a href="/2020/02/proxy-pattern/">Proxy *</a></li></ul><h3 id="Other-Structural-Patterns"><a href="#Other-Structural-Patterns" class="headerlink" title="Other Structural Patterns"></a>Other Structural Patterns</h3><ul><li><a href="/2017/10/sqlite-with-repository-pattern/">Repository</a></li><li><a href="/2021/02/options-pattern-asp-net-core/">Options (ASP.NET Core)</a></li><li><a href="/2021/11/special-case-pattern/">Special Case Pattern</a></li></ul><h2 id="Behavioral-Patterns"><a href="#Behavioral-Patterns" class="headerlink" title="Behavioral Patterns"></a>Behavioral Patterns</h2><p>All different and don’t really follow a theme but there is some overlap. Most are generally unique in their approach solving a particular problem. It could however be said that <code>Behavioral patterns</code> define manners of communication between classes and objects.</p><ul><li><a href="/2020/02/chain-of-responsibility-pattern/">Chain of Responsibility</a></li><li><a href="/2020/02/command-pattern/">Command</a></li><li><a href="/2020/02/interpreter-pattern/">Interpreter *</a></li><li><a href="/2020/02/iterator-pattern/">Iterator *</a></li><li><a href="/2020/02/mediator-pattern/">Mediator *</a> | <a href="/2020/08/cqrs/">Command and Query Responsibility Segregation (CQRS)</a></li><li><a href="/2020/02/memento-pattern/">Memento *</a></li><li><a href="/2020/02/observer-pattern/">Observer *</a></li><li><a href="/2020/02/state-pattern/">State *</a></li><li><a href="/2020/02/strategy-pattern/">Strategy *</a></li><li><a href="/2020/02/template-method-pattern/">Template Method *</a></li><li><a href="/2020/02/visitor-pattern/">Visitor *</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">https://www.udemy.com/course/design-patterns-csharp-dotnet/</a></li><li><a href="https://www.pluralsight.com/courses/patterns-library">https://www.pluralsight.com/courses/patterns-library</a></li><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li></ul><h1 id="Other-Patterns"><a href="#Other-Patterns" class="headerlink" title="Other Patterns"></a>Other Patterns</h1><p>These are patterns that I dont know enough about to pop into a category and probably dont have a working understanding of.</p><ul><li><a href="/2022/03/scientist-pattern/">Scientist Pattern</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Facade Pattern</title>
      <link href="/2020/02/facade-pattern/"/>
      <url>/2020/02/facade-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The facade pattern is used to define a simplified interface to a more complex subsystem.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Facade.aspx">http://www.blackwasp.co.uk/Facade.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Factory Pattern</title>
      <link href="/2020/02/factory-pattern/"/>
      <url>/2020/02/factory-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Motivation-amp-Definition"><a href="#Motivation-amp-Definition" class="headerlink" title="Motivation &amp; Definition"></a>Motivation &amp; Definition</h3><p>A factory component’s responsibility is solely for the <strong>wholesale creation of objects</strong> so <a href="/2020/04/builder-pattern/">non-piecewise like a builder pattern</a>. Motivational usage of a factory could include:</p><ul><li>Object creation logic sometimes becomes too convoluted</li><li>Constructor is not descriptive, its name will match the name of the containing type and additional information about how the object is constructed would need to be communicated in the summary documentation above the method. You cannot overload with same sets of arguments with different names. Optional parameters are confusing and not a great idea for a constructor.</li><li>Entire object creation (so <a href="/2020/04/builder-pattern/">non-piecewise like a builder pattern</a>) is outsourced to separate function (<strong>factory method</strong>), may exist in a separate class (<strong>factory</strong>), hierarchy of factories (<strong>abstract factory</strong>)</li></ul><p>Point Example from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a> of a constructor that can be simplified by use of a factory.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Initializes a point from EITHER cartesian or polar</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;a&quot;&gt;</span>x if cartesian, rho if polar<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;b&quot;&gt;</span>y if cartesian, theta if polar<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cs&quot;&gt;</span>Coordinate system enum.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b, CoordinateSystem cs = CoordinateSystem.Cartesian</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (cs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CoordinateSystem.Polar:</span><br><span class="line">_x = a * Math.Cos(b);</span><br><span class="line">_y = a * Math.Sin(b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line">_x = a;</span><br><span class="line">_y = b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h3><blockquote><p>The factory method is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time.</p></blockquote><p>Refactoring the example above to use factory methods:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a factory method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewCartesianPoint</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a factory method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewPolarPoint</span>(<span class="params"><span class="built_in">double</span> rho, <span class="built_in">double</span> theta</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(</span><br><span class="line">rho * Math.Cos(theta), </span><br><span class="line">rho * Math.Sim(theta));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_x = x;</span><br><span class="line">_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><blockquote><p>A factory is a separate component that knows how to initialize types in a particular way.</p></blockquote><p>It can be argued that the <strong>factory methods</strong> above violates <a href="/2018/05/single-responsibility-principle-srp/">SRP (Single Responsibility Principle)</a> as creation of the object and what it actually does are different concerns. You can move the factory methods into their own class. </p><p>A <strong>caveat</strong> however would then be that the constructor now needs to be public and the consumer can access it. If your assembly was being downloaded as a package (Example: <a href="https://www.nuget.org/packages">Nuget</a>) you can mark the constructor as <strong>internal</strong> which will fix this problem however this is not always the case.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PointFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">NewCartesianPoint</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">NewPolarPoint</span>(<span class="params"><span class="built_in">double</span> rho, <span class="built_in">double</span> theta</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(</span><br><span class="line">rho * Math.Cos(theta), </span><br><span class="line">rho * Math.Sim(theta));</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_x = x;</span><br><span class="line">_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Building on the above you can solve the public constructor issue by using an <strong>inner factory</strong> which would simply put the factory back inside Point as an inner class. They don’t have to be static but its the simplest.</p><p>This is how some of the .net framework is written, example:  <code>Task.Factory.StartNew ...</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">double</span> _x, _y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewCartesianPoint</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">NewPolarPoint</span>(<span class="params"><span class="built_in">double</span> rho, <span class="built_in">double</span> theta</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Point(</span><br><span class="line">rho * Math.Cos(theta), </span><br><span class="line">rho * Math.Sim(theta));</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Point</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_x = x;</span><br><span class="line">_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then call as </span></span><br><span class="line"><span class="keyword">var</span> point = Point.Factory.NewCartesianPoint(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><blockquote><p>The abstract factory pattern is used to provide a client with a set of related or dependent objects. The “family” of objects created by the factory are determined at run-time. These objects can be interfaces or abstract classes.</p></blockquote><p>This is relatively <strong>rarely used</strong> outside of a large complicated code bases however smaller contrived examples can be explained using a simple <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples">shopping cart</a> which follows <a href="/2018/04/open-closed-principle-ocp/">OCP (Open Close Principle)</a>. </p><h4 id="Cart-Example"><a href="#Cart-Example" class="headerlink" title="Cart Example"></a>Cart Example</h4><p>This is a <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples/ShoppingCart">cart example</a> based on code done by <a href="https://ardalis.com/?s=solid">Steve Smith aka Ardalis</a></p><p>Create the interface for the rules <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Interfaces/IPriceRule.cs">ShoppingCart/Interfaces/IPriceRule.cs</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPriceRule</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params">OrderItemModel item</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create the interface for the calculator <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Interfaces/IPricingCalculator.cs">ShoppingCart/Interfaces/IPricingCalculator.cs</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPricingCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Implement some rules <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Business/PriceRules/EachPriceRule.cs">ShoppingCart/Business/PriceRules/EachPriceRule.cs</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EachPriceRule</span> : <span class="title">IPriceRule</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsMatch</span>(<span class="params">OrderItemModel item</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> item.Sku.StartsWith(<span class="string">&quot;EACH&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> item.Quantity * <span class="number">5</span>m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Implement the calculator <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Business/PricingCalculator.cs">PricingCalculator.cs</a>, the <code>IEnumerable&lt;IPriceRule&gt;</code> would be injected using <a href="/tags/dependency-injection/">dependency injection</a>. </p><ul><li><strong>NOTE:</strong> If the calculator returned <code>IPriceRule</code> instead of the <code>decimal</code> it would be a true factory, calling <code>.First</code> is still retrieving an <code>IPriceRule</code> so the pattern is still the same. If you look at the <code>Hot Drink Machine</code> example below it does return the rules interface. </li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PricingCalculator</span> : <span class="title">IPricingCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IEnumerable&lt;IPriceRule&gt; _pricingRules;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PricingCalculator</span>(<span class="params">IEnumerable&lt;IPriceRule&gt; pricingRules</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">_pricingRules = pricingRules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">CalculatePrice</span>(<span class="params">OrderItemModel item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> _pricingRules</span><br><span class="line">.First(r =&gt; r.IsMatch(item))</span><br><span class="line">.CalculatePrice(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then to consume inject <a href="https://github.com/carlpaton/Boilerplate/blob/master/Class%20Library/PatternsAndPrinciples/ShoppingCart/Services/CartService.cs">IPricingCalculator</a> as <code>_pricingCalculator</code>, its <code>CalculatePrice</code> method will find the correct rule from the list based on item and then fluently call the rules <code>CalculatePrice</code> method.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_pricingCalculator.CalculatePrice(item);</span><br></pre></td></tr></table></figure><h4 id="Hot-Drink-Machine-Example"><a href="#Hot-Drink-Machine-Example" class="headerlink" title="Hot Drink Machine Example"></a>Hot Drink Machine Example</h4><p>A <code>HotDrinkMachine</code> example from <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a> explains that an abstract factory doesn’t necessarily need to return a family of objects but can return different objects with their own separate factories. This can be expanded to return families of objects per the text book definition.</p><p>The code creation would be done as follows:</p><ol><li>Create the interface <code>IHotDrink</code></li><li>Create the implementations, here <code>internal</code> insinuates we wont be giving out these classes but rather the <code>IHotDrink</code></li><li>Create factory interface <code>IHotDrinkFactory</code></li><li>Create the factory, the assumption here is the process for making Tea and Coffee is vastly different and therefor warrants their own factory. So we will create two factory objects. Again, here <code>internal</code> insinuates we wont be giving out these classes but rather the <code>IHotDrinkFactory</code>. </li><li>Create the <code>HotDrinkMachine</code> class, there are two ways he loaded them up <ol><li><a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/FactoryPattern/AbstractFactoryDemo.cs">Dictionary from enumeration AvailableDrink that maps to available factories</a></li><li><a href="https://github.com/carlpaton/Boilerplate/blob/master/.Net%20Core%20Console%20Application/PatternsAndPrinciples/FactoryPattern/AbstractFactoryDemo2.cs">HotDrinkMachine using reflection, typically you would use DI to inject these</a></li></ol></li><li>Finally this can be called as</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> machine = <span class="keyword">new</span> HotDrinkMachine();</span><br><span class="line">IHotDrink drink = machine.MakeDrink(); <span class="comment">// 1st example had params here</span></span><br><span class="line">drink.Consume();</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://dzone.com/articles/factory-method-vs-abstract">https://dzone.com/articles/factory-method-vs-abstract</a></li><li><a href="https://www.geeksforgeeks.org/abstract-factory-pattern/">https://www.geeksforgeeks.org/abstract-factory-pattern/</a></li><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="https://www.dotnettricks.com/learn/designpatterns/factory-method-design-pattern-dotnet">https://www.dotnettricks.com/learn/designpatterns/factory-method-design-pattern-dotnet</a></li><li><a href="https://www.c-sharpcorner.com/article/factory-method-design-pattern-in-c-sharp/">https://www.c-sharpcorner.com/article/factory-method-design-pattern-in-c-sharp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flyweight Pattern</title>
      <link href="/2020/02/flyweight-pattern/"/>
      <url>/2020/02/flyweight-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The flyweight pattern is used to reduce the memory and resource usage for complex models containing many hundreds, thousands or hundreds of thousands of similar objects.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Flyweight.aspx">http://www.blackwasp.co.uk/Flyweight.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interpreter Pattern</title>
      <link href="/2020/02/interpreter-pattern/"/>
      <url>/2020/02/interpreter-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The interpreter pattern is used to define the grammar for instructions that form part of a language or notation, whilst allowing the grammar to be easily extended.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Interpreter.aspx">http://www.blackwasp.co.uk/Interpreter.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterator Pattern</title>
      <link href="/2020/02/iterator-pattern/"/>
      <url>/2020/02/iterator-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The iterator pattern is used to provide a standard interface for traversing a collection of items in an aggregate object without the need to understand its underlying structure.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Iterator.aspx">http://www.blackwasp.co.uk/Iterator.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mediator Pattern</title>
      <link href="/2020/02/mediator-pattern/"/>
      <url>/2020/02/mediator-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The mediator pattern is used to reduce coupling between classes that communicate with each other. Instead of classes communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://medium.com/@letienthanh0212/cqrs-and-mediator-in-net-core-project-c0b477eab6e9">https://medium.com/@letienthanh0212/cqrs-and-mediator-in-net-core-project-c0b477eab6e9</a></li><li><a href="https://github.com/jbogard/MediatR">https://github.com/jbogard/MediatR</a></li><li><a href="https://ardalis.com/using-mediatr-in-aspnet-core-apps/">https://ardalis.com/using-mediatr-in-aspnet-core-apps/</a></li><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Mediator.aspx">http://www.blackwasp.co.uk/Mediator.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> wip </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memento Pattern</title>
      <link href="/2020/02/memento-pattern/"/>
      <url>/2020/02/memento-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The memento pattern is used to capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Memento.aspx">http://www.blackwasp.co.uk/Memento.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Observer Pattern</title>
      <link href="/2020/02/observer-pattern/"/>
      <url>/2020/02/observer-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The observer pattern is used to allow an object to publish changes to its state. Other objects subscribe to be immediately notified of any changes.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Observer.aspx">http://www.blackwasp.co.uk/Observer.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy Pattern</title>
      <link href="/2020/02/proxy-pattern/"/>
      <url>/2020/02/proxy-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. The proxy provides the same public interface as the underlying subject class, adding a level of indirection by accepting requests from a client object and passing these to the real subject object as necessary.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Proxy.aspx">http://www.blackwasp.co.uk/Proxy.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> structural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Singleton Pattern</title>
      <link href="/2020/02/singleton-pattern/"/>
      <url>/2020/02/singleton-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Use Case: When you need the same state (instance of a class) shared in across your application. Example <code>configuration data</code> that is more expensive to continually load. A Database repository (Data access), Object factory (creates instance of components)</p></blockquote><blockquote><p>Warning: Only use this when you really need it, potentially you could be using up a lot of memory if you do this when not needed. Think of a Web Server that is not restarted that often with 100/1000s of singleton classes using up memory unnecessarily.</p></blockquote><blockquote><p>Erich Gamma: When discussing which patterns to drop, we found that we still love them all. (Not really - Im in favor of dropping Singleton. Its use is almost always a design smell) ~ post original publication when the authors met to discuss the orginal patterns. </p></blockquote><h2 id="Motivation-amp-Definition"><a href="#Motivation-amp-Definition" class="headerlink" title="Motivation &amp; Definition"></a>Motivation &amp; Definition</h2><p>You would use a Singleton when the constructor call is particularly expensive and you only really want that constructor call being done once.</p><p>The singleton pattern ensures that only one object of a particular class is ever created. (so a single instance exists) All further references to objects of the singleton class refer to the same underlying instance.</p><p>This instance is what would have been created in the initial (and only) constructor call and ideally have lazy instantiation.</p><h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><p>The complete code example can be seen at <a href="https://github.com/carlpaton/SingletonPatternDemo">https://github.com/carlpaton/SingletonPatternDemo</a>.</p><p>These are based on the work by <a href="https://www.youtube.com/user/IAmTimCorey">Tim Corey</a> and <a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk</a>.</p><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><blockquote><p>Warning: This example doesnt prevent consumers creating additional copies so would rely on code review.</p></blockquote><p>These classes can be injected using built in <a href="/2020/02/di-in-net-core/">Dependency Injection in .Net</a> when calling <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.startupbase.configureservices">ConfigureServices</a> and passing it a services collection.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;TableServers&gt;</span><br></pre></td></tr></table></figure><p>Here .Net will inject TableServers as a singleton for you \ :D /</p><p>This is however not using the singleton design pattern - this is just using .Net to manage the class for you as if it WAS a singleton.</p><p>The TableServers code be defined as</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Represents a restaurant with waiters and waitresses ready to be assigned to serve tables of hungry customers.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> It will be done via a rotating list so everybody gets a turn.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TableServers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _servers = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _next = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TableServers</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _servers.Add(<span class="string">&quot;Foo&quot;</span>);</span><br><span class="line">        _servers.Add(<span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">        _servers.Add(<span class="string">&quot;Baz&quot;</span>);</span><br><span class="line">        _servers.Add(<span class="string">&quot;Bat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> next = _servers[_next];</span><br><span class="line">        _next++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_next &gt;= _servers.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            _next = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When calling <code>TableServers -&gt; GetNext()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> host = <span class="keyword">new</span> TableServers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The next server is: <span class="subst">&#123;host.GetNext()&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Expected output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The next server is: Foo</span><br><span class="line">The next server is: Bar</span><br><span class="line">The next server is: Baz</span><br><span class="line">The next server is: Bat</span><br><span class="line">The next server is: Foo</span><br><span class="line">The next server is: Bar</span><br><span class="line">The next server is: Baz</span><br><span class="line">The next server is: Bat</span><br><span class="line">The next server is: Foo</span><br><span class="line">The next server is: Bar </span><br></pre></td></tr></table></figure><h3 id="Table-Servers-Tim-Corey"><a href="#Table-Servers-Tim-Corey" class="headerlink" title="Table Servers (Tim Corey)"></a>Table Servers (Tim Corey)</h3><p>Here the instantiation can only be done using <code>GetTableServers()</code> so the class <code>TableServersSingleton</code> maintains its own state.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Represents a restaurant with waiters and waitresses ready to be assigned to serve tables of hungry customers.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> It will be done via a rotating list so everybody gets a turn.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TableServersSingleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> readonly - important as it means we cannot overwrite this `instance`</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> static - important as we dont have to instanciate the class (we cannot actually as the ctor is private)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> TableServersSingleton _instance = <span class="keyword">new</span> TableServersSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; _servers = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _next = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TableServersSingleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _servers.Add(<span class="string">&quot;Foo&quot;</span>);</span><br><span class="line">        _servers.Add(<span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">        _servers.Add(<span class="string">&quot;Baz&quot;</span>);</span><br><span class="line">        _servers.Add(<span class="string">&quot;Bat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> The only way to instanciate this class is now through this method, so the internal state is never changed</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TableServersSingleton <span class="title">GetTableServers</span>()</span> =&gt; _instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> next = _servers[_next];</span><br><span class="line">        _next++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_next &gt;= _servers.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            _next = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you then create some instances and run the code the the result will repeat <code>Foo</code>, <code>Bar</code>, <code>Baz</code> and <code>Bat</code>. This means the class is thread safe as it will rotate through the list correctly.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> host1 = TableServersSingleton.GetTableServers();</span><br><span class="line"><span class="keyword">var</span> host2 = TableServersSingleton.GetTableServers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The next server is: <span class="subst">&#123;host1.GetNext()&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The next server is: <span class="subst">&#123;host2.GetNext()&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Expected output. This is the same as calling <code>TableServers -&gt; GetNext()</code> from a none singleton type class.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The next server is: Foo</span><br><span class="line">The next server is: Bar</span><br><span class="line">The next server is: Baz</span><br><span class="line">The next server is: Bat</span><br><span class="line">The next server is: Foo</span><br><span class="line">The next server is: Bar</span><br><span class="line">The next server is: Baz</span><br><span class="line">The next server is: Bat</span><br><span class="line">The next server is: Foo</span><br><span class="line">The next server is: Bar </span><br></pre></td></tr></table></figure><h3 id="Singleton-Database-Dmitri-Nesteruk"><a href="#Singleton-Database-Dmitri-Nesteruk" class="headerlink" title="Singleton Database (Dmitri Nesteruk)"></a>Singleton Database (Dmitri Nesteruk)</h3><p>WIP!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=ggqjVuJ0g_8">IAmTimCorey - The Singleton Design Pattern</a></li><li><a href="https://www.udemy.com/course/design-patterns-csharp-dotnet/">Dmitri Nesteruk - Design Patterns in C# and .NET</a></li><li><a href="https://github.com/carlpaton/SingletonPatternDemo">Source code - carlpaton/SingletonPatternDemo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> creational patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>State Pattern</title>
      <link href="/2020/02/state-pattern/"/>
      <url>/2020/02/state-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/State.aspx">http://www.blackwasp.co.uk/State.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strategy Pattern</title>
      <link href="/2020/02/strategy-pattern/"/>
      <url>/2020/02/strategy-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Strategy.aspx">http://www.blackwasp.co.uk/Strategy.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template Method Pattern</title>
      <link href="/2020/02/template-method-pattern/"/>
      <url>/2020/02/template-method-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The template method pattern is used to define the basic steps of an algorithm and allow the implementation of the individual steps to be changed.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/TemplateMethod.aspx">http://www.blackwasp.co.uk/TemplateMethod.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visitor Pattern</title>
      <link href="/2020/02/visitor-pattern/"/>
      <url>/2020/02/visitor-pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.blackwasp.co.uk/gofpatterns.aspx">http://www.blackwasp.co.uk/gofpatterns.aspx</a></li><li><a href="http://www.blackwasp.co.uk/Visitor.aspx">http://www.blackwasp.co.uk/Visitor.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> behavioural patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Vulnerability</title>
      <link href="/2020/01/software-vulnerability/"/>
      <url>/2020/01/software-vulnerability/</url>
      
        <content type="html"><![CDATA[<p>Software vulnerability is when code is open to exploitation though known vulnerabilities. The references below contain links to sites and software that can help identify vulnerability.</p><h3 id="package-json-NPM"><a href="#package-json-NPM" class="headerlink" title="package.json (NPM)"></a>package.json (NPM)</h3><p>You can manually check for vulnerabilities with <code>npm audit</code>. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm audit --json &gt; logfoo.log</span><br></pre></td></tr></table></figure><p>At the bottom it will have a summary</p><pre><code>  &quot;metadata&quot;: &#123;    &quot;vulnerabilities&quot;: &#123;      &quot;info&quot;: 0,      &quot;low&quot;: 199,      &quot;moderate&quot;: 20,      &quot;high&quot;: 86,      &quot;critical&quot;: 2    &#125;,</code></pre><p>You should care about <em>severity=critical</em></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ossindex.sonatype.org/">https://ossindex.sonatype.org/</a></li><li><a href="https://owasp.org/www-project-dependency-check/">https://owasp.org/www-project-dependency-check/</a></li><li><a href="https://owasp.org/www-community/Vulnerability_Scanning_Tools">https://owasp.org/www-community/Vulnerability_Scanning_Tools</a></li><li><a href="https://github.com/carlpaton/VulnusCloud">https://github.com/carlpaton/VulnusCloud</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload File MVC Core</title>
      <link href="/2020/01/upload-file-mvc-core/"/>
      <url>/2020/01/upload-file-mvc-core/</url>
      
        <content type="html"><![CDATA[<h3 id="Net-Core-2x"><a href="#Net-Core-2x" class="headerlink" title=".Net Core 2x"></a>.Net Core 2x</h3><p>Upload and save some file.</p><h3 id="FileUploadViewModel"><a href="#FileUploadViewModel" class="headerlink" title="FileUploadViewModel"></a>FileUploadViewModel</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Display(Name = <span class="string">&quot;Some File&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> List&lt;IFormFile&gt; FormFiles &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="FileUploadController"><a href="#FileUploadController" class="headerlink" title="FileUploadController"></a>FileUploadController</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// POST: FileUpload/Create</span><br><span class="line">[HttpPost]</span><br><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line">public async Task&lt;IActionResult&gt; Create([Bind(&quot;PackageType,FormFiles&quot;)] FileUploadViewModel fileUploadViewModel)</span><br><span class="line">        &#123;</span><br><span class="line">            if (ModelState.IsValid)</span><br><span class="line">            &#123;</span><br><span class="line">                var postedFile = fileUploadViewModel.FormFiles[0];</span><br><span class="line">                </span><br><span class="line">using (var memoryStream = new MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                postedFile.CopyTo(memoryStream);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="View-Create-cshtml"><a href="#View-Create-cshtml" class="headerlink" title="View Create.cshtml"></a>View Create.cshtml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">asp-action</span>=<span class="string">&quot;Create&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">asp-for</span>=<span class="string">&quot;Foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">asp-for</span>=<span class="string">&quot;Foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">asp-validation-for</span>=<span class="string">&quot;PackageType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">asp-for</span>=<span class="string">&quot;FormFiles&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">asp-for</span>=<span class="string">&quot;FormFiles&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">asp-validation-for</span>=<span class="string">&quot;FormFiles&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/VulnusCloud">https://github.com/carlpaton/VulnusCloud</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-3.1">https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-3.1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Colab</title>
      <link href="/2020/01/colab/"/>
      <url>/2020/01/colab/</url>
      
        <content type="html"><![CDATA[<p><strong>Colab</strong> Notebooks. Colaboratory is a Google research project created to help disseminate machine learning education and research. It’s a Jupyter notebook environment that requires no setup to use and runs entirely in the cloud.</p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><p>List of most useful commands :</p><p><strong>RUNNING</strong></p><ul><li>Ctrl + ENTER : Run current cell</li><li>Shift + ENTER : Run current cell &amp; select next cell or create new one if last</li><li>Alt + ENTER : Run current cell &amp; create new cell</li><li>Ctrl + F9 : Run all cells in notebook</li></ul><p><strong>HANDLING CELLS</strong></p><ul><li>Ctrl + M + A : Create new cell above current cell</li><li>Ctrl + M + B : Create new cell below current cell</li><li>Ctrl + M + M : Transform current Code cell into Text cell</li><li>Ctrl + M + Y : Transform current Text cell into Code cell</li><li>Ctrl + M + P : Go to previous cell</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://colab.research.google.com/">https://colab.research.google.com/</a></li><li><a href="https://www.reddit.com/r/GoogleColab/comments/apxqm6/colabs_most_interesting_shortcuts/">https://www.reddit.com/r/GoogleColab/comments/apxqm6/colabs_most_interesting_shortcuts/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Serializers</title>
      <link href="/2020/01/json-serializers/"/>
      <url>/2020/01/json-serializers/</url>
      
        <content type="html"><![CDATA[<p>Other <a href="/2017/12/serialization/">Serialization technologies</a> include <strong>Binary</strong> and <strong>XML</strong> Serialization.</p><h3 id="System-Text-Json"><a href="#System-Text-Json" class="headerlink" title="System.Text.Json"></a>System.Text.Json</h3><p>New hotness &lt;3</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> JsonSerializer.Serialize(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview</a></li></ul><h4 id="Json-Serializer-Options"><a href="#Json-Serializer-Options" class="headerlink" title="Json Serializer Options"></a>Json Serializer Options</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JsonSerializerOptions IgnoreDefaultValues &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> JsonSerializerOptions</span><br><span class="line">&#123;</span><br><span class="line">DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,    <span class="comment">// ignore-all-default-value-properties</span></span><br><span class="line">PropertyNamingPolicy = JsonNamingPolicy.CamelCase,                  <span class="comment">// support camel case</span></span><br><span class="line">Converters =</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> JsonStringEnumConverter()</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-ignore-properties?pivots=dotnet-5-0#ignore-all-default-value-properties">https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-ignore-properties?pivots=dotnet-5-0#ignore-all-default-value-properties</a></li></ul><h3 id="Json-NET-Newtonsoft-Framework"><a href="#Json-NET-Newtonsoft-Framework" class="headerlink" title="Json.NET / Newtonsoft Framework"></a>Json.NET / Newtonsoft Framework</h3><p>Was integrated into ASP.NET even though it was 3rd party, I think its called Middleware. This lib is pretty much the de facto standard for JSON Serialization (Probably won awards, free beer &amp; stuff!)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> JsonConvert.SerializeObject(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/Common/blob/master/Common/Serialization/JsonConvertService.cs">https://github.com/carlpaton/Common/blob/master/Common/Serialization/JsonConvertService.cs</a></li><li><a href="https://www.newtonsoft.com/json">https://www.newtonsoft.com/json</a></li></ul><h3 id="System-Runtime-Serialization-Json"><a href="#System-Runtime-Serialization-Json" class="headerlink" title="System.Runtime.Serialization.Json"></a>System.Runtime.Serialization.Json</h3><p><strong>Class</strong>: <code>DataContractJsonSerializer</code></p><p>An older, Microsoft-developed serializer that was integrated in previous ASP.NET versions until Newtonsoft.Json replaced it. Needs more code and sucks, don’t use it :D</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> dataContractJsonSerializer = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        dataContractJsonSerializer.WriteObject(memoryStream, obj);</span><br><span class="line">        memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> streamReader = <span class="keyword">new</span> StreamReader(memoryStream))</span><br><span class="line">        &#123;</span><br><span class="line">            json = streamReader.ReadToEnd();</span><br><span class="line">            streamReader.Close();</span><br><span class="line">        &#125;</span><br><span class="line">        memoryStream.Close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- CALL IT</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> FizzbuzzEventBody() &#123;</span><br><span class="line">   buzz_at = BuzzAt,</span><br><span class="line">   fizz_at = FizzAt,</span><br><span class="line">   lower_bound = LowerBound,</span><br><span class="line">   upper_bound = UpperBound</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> json = ToJson&lt;FizzbuzzEventBody&gt;(obj);</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/Common/blob/master/Common/Serialization/DataContractJsonSerializerService.cs">https://github.com/carlpaton/Common/blob/master/Common/Serialization/DataContractJsonSerializerService.cs</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data">https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data</a></li><li><a href="https://www.c-sharpcorner.com/article/json-serialization-and-deserialization-in-c-sharp/">https://www.c-sharpcorner.com/article/json-serialization-and-deserialization-in-c-sharp/</a></li></ul><h3 id="System-Web-Script-Serialization"><a href="#System-Web-Script-Serialization" class="headerlink" title="System.Web.Script.Serialization"></a>System.Web.Script.Serialization</h3><p>I remember using this ages ago in <code>Web Forms</code> and <code>AjaxServer.asmx.cs</code> files - I stopped using it after somebody showed me <code>Json.NET</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">list.Add(<span class="string">&quot;some string value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// slower built in &#x27;JavaScriptSerializer&#x27;</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="keyword">new</span> JavaScriptSerializer().Serialize(list);</span><br><span class="line"><span class="keyword">return</span> json;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8">https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://michaelscodingspot.com/the-battle-of-c-to-json-serializers-in-net-core-3/">https://michaelscodingspot.com/the-battle-of-c-to-json-serializers-in-net-core-3/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuget Hosted Package</title>
      <link href="/2020/01/nuget-hosted-package/"/>
      <url>/2020/01/nuget-hosted-package/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NuGet is the package manager for .NET. It enables developers to create, share, and consume useful .NET libraries. NuGet client tools provide the ability to produce and consume these libraries as “packages”. </p></blockquote><h3 id="Write-Code"><a href="#Write-Code" class="headerlink" title="Write Code"></a>Write Code</h3><p>I used .Net Core 2.2 and build a class library, example code: <a href="https://github.com/carlpaton/Common/">https://github.com/carlpaton/Common/</a></p><p>Then login at <a href="https://www.nuget.org/">https://www.nuget.org/</a> with your Microsoft Account.</p><h3 id="Create-package"><a href="#Create-package" class="headerlink" title="Create package"></a>Create package</h3><ol><li>Open the <code>.csproj</code> file and add the following properties inside the existing <code>PropertyGroup</code> tag:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageId</span>&gt;</span>CarlPaton.Common<span class="tag">&lt;/<span class="name">PackageId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.2<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Authors</span>&gt;</span>Carl Paton<span class="tag">&lt;/<span class="name">Authors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Company</span>&gt;</span>carlpaton.github.io<span class="tag">&lt;/<span class="name">Company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>Common services and magic.<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageTags</span>&gt;</span>c#<span class="tag">&lt;/<span class="name">PackageTags</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageLicenseUrl</span>&gt;</span>https://github.com/carlpaton/Common/blob/master/LICENSE.md<span class="tag">&lt;/<span class="name">PackageLicenseUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryUrl</span>&gt;</span>https://github.com/carlpaton/Common<span class="tag">&lt;/<span class="name">RepositoryUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryType</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">RepositoryType</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Build a NuGet package, this is the <code>.nupkg</code> file. I ran this from the root of the project <code>C:\Dev\Common&gt;</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet pack</span><br></pre></td></tr></table></figure><p>This generated <code>C:\Dev\Common\Common\bin\Debug\CarlPaton.Common.1.0.0.nupkg</code></p><h3 id="Publish-package"><a href="#Publish-package" class="headerlink" title="Publish package"></a>Publish package</h3><ol start="3"><li><a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli#acquire-your-api-key">Acquire your API key</a></li><li>CD to</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Dev\Common\Common\bin\Debug</span><br></pre></td></tr></table></figure><ol start="5"><li>Publish to nuget &lt;3</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push CarlPaton.Common.1.0.0.nupkg -k yoursweetkeyhere -s https://api.nuget.org/v3/index.json</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.nuget.org/packages/CarlPaton.Common/">https://www.nuget.org/packages/CarlPaton.Common/</a></li></ul><h3 id="Version-Information"><a href="#Version-Information" class="headerlink" title="Version Information"></a>Version Information</h3><p>Add sweet nuget version to your projects <code>README.md</code> on GitHub - <a href="https://www.nuget.org/packages/CarlPaton.Common/"><img src="https://img.shields.io/nuget/v/CarlPaton.Common.svg?style=flat-square" alt="NuGet version (CarlPaton.Common)"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![NuGet version (CarlPaton.Common)](https://img.shields.io/nuget/v/CarlPaton.Common.svg?style=flat-square)](https://www.nuget.org/packages/CarlPaton.Common/)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli">https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli</a></li><li><a href="https://docs.microsoft.com/en-us/nuget/">https://docs.microsoft.com/en-us/nuget/</a></li><li><a href="https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package">https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stored Proc With Cursor Loop</title>
      <link href="/2019/12/sql-stored-proc-with-cursor-loop/"/>
      <url>/2019/12/sql-stored-proc-with-cursor-loop/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-Proc"><a href="#Create-Proc" class="headerlink" title="Create Proc"></a>Create Proc</h3><p>The <code>cursor</code> will iterate and return its position each time, only once it returns 0 is it complete. Looping like this was useful if the resulting insert needed to trigger another proc.</p><p><strong>READ_ONLY</strong> Prevents updates made through this cursor.</p><p><strong>FORWARD_ONLY</strong> Specifies that the cursor can only move forward and be scrolled from the first to the last row. FETCH NEXT is the only supported fetch option. </p><p><strong>LOCAL</strong> Specifies that the scope of the cursor is local to the batch, stored procedure, or trigger in which the cursor was created.</p><p><strong>STATIC</strong> Specifies that the cursor always displays the result set as it was when the cursor was first opened, and makes a temporary copy of the data to be used by the cursor</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[prc_run_some_crap]</span><br><span class="line">(</span><br><span class="line"><span class="variable">@id</span>                        <span class="type">BIGINT</span>,</span><br><span class="line"><span class="variable">@unused_second_param_id</span>    <span class="type">BIGINT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">PRINT <span class="string">&#x27;@id=&#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@id</span>);</span><br><span class="line">PRINT <span class="string">&#x27;@unused_second_param_id=&#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@unused_second_param_id</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@some_id</span> <span class="type">int</span>, </span><br><span class="line"><span class="variable">@some_description</span> <span class="type">varchar</span>(<span class="number">10</span>), </span><br><span class="line"><span class="variable">@some_date</span> datetime, </span><br><span class="line"><span class="variable">@some_bool</span> bit;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> My_Sweet_Cursor <span class="keyword">CURSOR</span> <span class="keyword">LOCAL</span> <span class="keyword">STATIC</span> FORWARD_ONLY READ_ONLY <span class="keyword">FOR</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">some_id, some_description, some_date, some_bool</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"> dbo.[first_table] <span class="keyword">WITH</span> (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">id <span class="operator">=</span> <span class="variable">@id</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">OPEN</span> My_Sweet_Cursor;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">FETCH</span> NEXT </span><br><span class="line"><span class="keyword">FROM</span> My_Sweet_Cursor</span><br><span class="line"><span class="keyword">INTO</span> <span class="variable">@some_id</span>, some_description, some_date, some_bool;</span><br><span class="line"></span><br><span class="line">WHILE @<span class="variable">@FETCH_STATUS</span> <span class="operator">=</span> <span class="number">0</span>  </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> some_id <span class="keyword">FROM</span> [dbo].[second_table] <span class="keyword">WITH</span> (NOLOCK) <span class="keyword">WHERE</span> some_id<span class="operator">=</span><span class="variable">@some_id</span> <span class="keyword">AND</span> some_description<span class="operator">=</span><span class="variable">@some_description</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">PRINT <span class="string">&#x27;Copying record : &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@some_id</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[second_table]</span><br><span class="line">([some_id]</span><br><span class="line">,[some_description]</span><br><span class="line">,[some_date]</span><br><span class="line">,[some_bool])</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="variable">@some_id</span>, </span><br><span class="line"><span class="variable">@some_description</span>, </span><br><span class="line"><span class="variable">@some_date</span>,</span><br><span class="line"><span class="variable">@some_bool</span>);</span><br><span class="line"><span class="keyword">END</span>; </span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">PRINT <span class="string">&#x27;Already exists &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@some_id</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FETCH</span> NEXT </span><br><span class="line"><span class="keyword">FROM</span> My_Sweet_Cursor</span><br><span class="line"><span class="keyword">INTO</span> <span class="variable">@some_id</span>, some_description, some_date, some_bool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CLOSE</span> My_Sweet_Cursor;  </span><br><span class="line"><span class="keyword">DEALLOCATE</span> My_Sweet_Cursor;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-with-cursor-loop.sql">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-with-cursor-loop.sql</a></li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver15</a></li></ul><h3 id="Execute-Proc"><a href="#Execute-Proc" class="headerlink" title="Execute Proc"></a>Execute Proc</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> dbo.[prc_run_some_crap] <span class="variable">@id</span> <span class="operator">=</span> <span class="number">123</span>, <span class="variable">@second_param_id</span> <span class="operator">=</span> <span class="number">456</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stored Proc Offset Fetch</title>
      <link href="/2019/12/sql-stored-proc-offset-fetch/"/>
      <url>/2019/12/sql-stored-proc-offset-fetch/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-Proc"><a href="#Create-Proc" class="headerlink" title="Create Proc"></a>Create Proc</h3><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-offset-fetch.sql">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/stored-proc-offset-fetch.sql</a></li></ul><p>This will select rows from the table <code>[hoe_database].[dbo].[random_data]</code> using <code>OFFSET</code> which is simply calculated as <code>(@page - 1) * @rows</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example: (2 - 1) * 25 = 25</span><br></pre></td></tr></table></figure><p><code>FETCH NEXT</code> then simply returns the next <code>@rows</code> which was 25.</p><p>For this to work we order by the <code>id DESC</code> so the most recent records are at the top.</p><h3 id="Execute-Proc"><a href="#Execute-Proc" class="headerlink" title="Execute Proc"></a>Execute Proc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.[prc_select_some_crap] @page = 2, @rows = 25;</span><br></pre></td></tr></table></figure><h3 id="Quick-Test"><a href="#Quick-Test" class="headerlink" title="Quick Test"></a>Quick Test</h3><p>Changing the values <code>@page</code> and <code>@rows</code> should show the results if you cannot create stored procs.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DECLARE @page INT = 5;</span><br><span class="line">DECLARE @rows INT = 25;</span><br><span class="line"></span><br><span class="line">IF (@page &lt; 1)</span><br><span class="line">    SET @page = 1;</span><br><span class="line">IF (@rows &lt; 1)</span><br><span class="line">    SET @rows = 25;</span><br><span class="line"></span><br><span class="line">SELECT [id]</span><br><span class="line">      ,[some_int]</span><br><span class="line">      ,[some_bit]</span><br><span class="line">      ,[some_varchar]</span><br><span class="line">      ,[some_datetime]</span><br><span class="line">      ,[some_numeric]</span><br><span class="line">FROM [hoe_database].[dbo].[random_data] (NOLOCK)</span><br><span class="line">ORDER BY id DESC</span><br><span class="line">OFFSET ((@page - 1) * @rows) ROWS </span><br><span class="line">FETCH NEXT @rows ROWS ONLY;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://sqlperformance.com/2015/01/t-sql-queries/pagination-with-offset-fetch">https://sqlperformance.com/2015/01/t-sql-queries/pagination-with-offset-fetch</a></li><li><a href="https://www.essentialsql.com/using-offset-and-fetch-with-the-order-by-clause/">https://www.essentialsql.com/using-offset-and-fetch-with-the-order-by-clause/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Application Architecture</title>
      <link href="/2019/12/web-application-architecture/"/>
      <url>/2019/12/web-application-architecture/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Updated 8 Dec 2020</p></blockquote><p>Application architecture of the microsoft eShopOnWeb example.</p><p><img src="/d/web-application-architecture/e-shop-on-web.jpg" alt="eShopOnWeb"></p><h3 id="Clean-architecture"><a href="#Clean-architecture" class="headerlink" title="Clean architecture"></a>Clean architecture</h3><p><a href="/2020/12/clean-architecture/">See clean architecture</a></p><h3 id="N-Layer"><a href="#N-Layer" class="headerlink" title="N-Layer"></a>N-Layer</h3><p>This is simliar to my post on <a href="/2019/07/n-tier-architecture/">N-Tier Architecture</a> but I feel <code>Clean architecture</code> above follows a better project/solution structure.</p><h3 id="Monolithic-application"><a href="#Monolithic-application" class="headerlink" title="Monolithic application"></a>Monolithic application</h3><blockquote><p>“A monolithic application is one that is entirely self-contained, in terms of its behavior. It may interact with other services or data stores in the course of performing its operations, but the core of its behavior runs within its own process and the entire application is typically deployed as a single unit. If such an application needs to scale horizontally, typically the entire application is duplicated across multiple servers or virtual machines.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures">https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures</a></li><li><a href="https://github.com/carlpaton/eShopOnWeb">https://github.com/carlpaton/eShopOnWeb</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generate Random Data</title>
      <link href="/2019/12/sql-gen-random-data/"/>
      <url>/2019/12/sql-gen-random-data/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE hoe_database;</span><br><span class="line"></span><br><span class="line">USE hoe_database;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.random_data ( </span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    some_int <span class="type">INT</span>,</span><br><span class="line">    some_bit BIT, </span><br><span class="line">    some_varchar <span class="type">VARCHAR</span>(<span class="number">10</span>), </span><br><span class="line">    some_datetime DATETIME, </span><br><span class="line">    some_numeric <span class="type">NUMERIC</span>(<span class="number">16</span>,<span class="number">2</span>) ) </span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="Insert-Some-Random-Data"><a href="#Insert-Some-Random-Data" class="headerlink" title="Insert Some Random Data"></a>Insert Some Random Data</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@count</span> <span class="type">INT</span> </span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@upper_bound</span> <span class="type">INT</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@upper_bound</span> <span class="operator">=</span> <span class="number">20000</span></span><br><span class="line"></span><br><span class="line">PRINT(<span class="string">&#x27;Oh yeah, doing the thing till &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="variable">@upper_bound</span>))</span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@count</span> <span class="operator">&lt;=</span> <span class="variable">@upper_bound</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.random_data </span><br><span class="line">    <span class="keyword">SELECT</span>    <span class="variable">@count</span>, </span><br><span class="line">            <span class="keyword">CASE</span> <span class="keyword">WHEN</span> DATEPART(MILLISECOND, GETDATE()) <span class="operator">&gt;=</span> <span class="number">500</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">ELSE</span> <span class="number">1</span> <span class="keyword">END</span> [some_bit], </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> </span><br><span class="line">            <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) <span class="operator">+</span> <span class="type">CHAR</span>((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">26</span>) <span class="operator">+</span> <span class="number">97</span>) [some_varchar], </span><br><span class="line">            DATEADD(MILLISECOND, (<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">6000</span>) <span class="operator">*</span> <span class="number">-1</span>, </span><br><span class="line">                DATEADD(<span class="keyword">MINUTE</span>, (<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">1000000</span>) <span class="operator">*</span> <span class="number">-1</span>, GETDATE())) [some_datetime], </span><br><span class="line">            (<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">100001</span>) <span class="operator">+</span> ((<span class="built_in">ABS</span>(CHECKSUM(NEWID())) <span class="operator">%</span> <span class="number">100001</span>) <span class="operator">*</span> <span class="number">0.00001</span>) [some_numeric]</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">IF (<span class="variable">@count</span> <span class="operator">%</span> <span class="number">5000</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">PRINT(<span class="variable">@count</span>)</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@count</span> <span class="operator">+</span><span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">PRINT(<span class="string">&#x27;DONE!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.mssqltips.com/sqlservertip/3157/different-ways-to-get-random-data-for-sql-server-data-sampling/">https://www.mssqltips.com/sqlservertip/3157/different-ways-to-get-random-data-for-sql-server-data-sampling/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transaction With Throw</title>
      <link href="/2019/12/sql-transaction-with-throw/"/>
      <url>/2019/12/sql-transaction-with-throw/</url>
      
        <content type="html"><![CDATA[<h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">USE [DocumentPacks];</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line">     <span class="keyword">BEGIN</span> TRANSACTION</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DECLARE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- INSERT</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- SOMETHING WENT WRONG WITH THE CODE ABOVE</span></span><br><span class="line">THROW <span class="number">51000</span>, <span class="string">&#x27;Foo error.&#x27;</span>, <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">     <span class="keyword">COMMIT</span> TRANSACTION</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorNumber</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_NUMBER();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorLine</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_LINE();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorMessage</span> NVARCHAR(<span class="number">4000</span>) <span class="operator">=</span> ERROR_MESSAGE();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorSeverity</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_SEVERITY();</span><br><span class="line">     <span class="keyword">DECLARE</span> <span class="variable">@ErrorState</span> <span class="type">INT</span> <span class="operator">=</span> ERROR_STATE();</span><br><span class="line"></span><br><span class="line">     IF @<span class="variable">@TRANCOUNT</span> <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">          <span class="keyword">ROLLBACK</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line">     RAISERROR(<span class="variable">@ErrorMessage</span>, <span class="variable">@ErrorSeverity</span>, <span class="variable">@ErrorState</span>);</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15</a></li><li><a href="https://stackoverflow.com/questions/31274274/t-sql-throw-exception-within-a-transaction">https://stackoverflow.com/questions/31274274/t-sql-throw-exception-within-a-transaction</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Batching Data Changes</title>
      <link href="/2019/12/sql-batching-data-changes/"/>
      <url>/2019/12/sql-batching-data-changes/</url>
      
        <content type="html"><![CDATA[<p>Batching data chances is encouraged when doing large <code>UPDATE</code> and <code>DELETE</code> statements which affect many rows.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The idea is that you</p><ol><li>Create <code>#full_list</code> and copy the primary ID into this table from <code>prod_table</code></li><li>Define the <code>batch_size</code>, example 1000 and other variables such as the <code>number_of_batches</code></li><li>Loop <code>WHILE @rows_exist = 1</code></li><li>Insert into <code>#temp_batch</code> by selecting <code>TOP(@batch_size)</code></li><li>Perform the <code>UPDATE</code> or <code>DELETE</code><ol><li>on <code>prod_table</code> by joining to <code>#temp_batch</code></li><li>DELETE FROM <code>#temp_full_list</code></li></ol></li><li>Set <code>@rows_exist </code>as infinite loops are frowned upon. Apparently.</li></ol><h3 id="Roll-Backs"><a href="#Roll-Backs" class="headerlink" title="Roll Backs"></a>Roll Backs</h3><p>A simple way to roll the data back is to create a new <code>dbo.temp_random_data</code> and insert the at very least the <code>id</code> so you can join back to it. This is really for an <code>UPDATE</code> as <code>DELETE</code> should trigger auditing. You do audit deletes in your database right? :)</p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li><a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/batching-data-changes.sql">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/batching-data-changes.sql</a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">USE hoe_database;</span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">IF (OBJECT_ID(<span class="string">&#x27;[dbo].[temp_random_data]&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NULL</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">PRINT(<span class="string">&#x27;CREATING temp_random_data&#x27;</span>)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.temp_random_data (</span><br><span class="line">[id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[insert_date] [datetime] <span class="keyword">DEFAULT</span> GETDATE(),</span><br><span class="line">[id_random_data] [<span class="type">int</span>] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[done] [<span class="type">int</span>] <span class="keyword">DEFAULT</span> <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.temp_random_data <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_temp_random_data_id <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"><span class="keyword">END</span>  </span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">PRINT <span class="string">&#x27;ALREADY EXISTS temp_random_data&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.temp_random_data</span><br><span class="line">(id_random_data, done)</span><br><span class="line"><span class="keyword">SELECT</span> id, <span class="number">0</span> <span class="keyword">as</span> done</span><br><span class="line"><span class="keyword">FROM</span> random_data (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> some_bit <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">-1</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@batch_size</span> <span class="type">INT</span> <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@rows_to_update</span> <span class="type">INT</span> <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> dbo.temp_random_data <span class="keyword">WITH</span> (NOLOCK))</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@number_of_batches</span> <span class="type">INT</span> <span class="operator">=</span> (<span class="variable">@rows_to_update</span> <span class="operator">/</span> <span class="variable">@batch_size</span>) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@current_batch</span> <span class="type">INT</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@message</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@rows_exist</span> <span class="type">INT</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #temp_batch;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #temp_batch( id_random_data <span class="type">INT</span> );</span><br><span class="line"></span><br><span class="line">WHILE <span class="variable">@rows_exist</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">BEGIN</span>   </span><br><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> #temp_batch</span><br><span class="line"><span class="keyword">SELECT</span> TOP (<span class="variable">@batch_size</span>) id_random_data</span><br><span class="line"><span class="keyword">FROM</span> dbo.temp_random_data (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> done <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id_random_data <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- This is the prod table</span></span><br><span class="line"><span class="keyword">UPDATE</span> random_data <span class="keyword">WITH</span> (ROWLOCK)</span><br><span class="line"><span class="keyword">SET</span> some_bit <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">FROM</span> random_data <span class="keyword">AS</span> rd</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> #temp_batch</span><br><span class="line"><span class="keyword">ON</span> rd.id <span class="operator">=</span> #temp_batch.id_random_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- This temp_ table can be deleted once done and you are happy with the change</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.temp_random_data</span><br><span class="line"><span class="keyword">SET</span> done <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> dbo.temp_random_data <span class="keyword">AS</span> trd</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> #temp_batch</span><br><span class="line"><span class="keyword">ON</span> trd.id_random_data <span class="operator">=</span> #temp_batch.id_random_data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> #temp_batch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@message</span> <span class="operator">=</span> <span class="string">&#x27;Finished batch &#x27;</span> <span class="operator">+</span> <span class="built_in">CAST</span>(<span class="variable">@current_batch</span> <span class="keyword">AS</span> <span class="type">VARCHAR</span>) <span class="operator">+</span> <span class="string">&#x27; of &#x27;</span> <span class="operator">+</span> <span class="built_in">CAST</span>(<span class="variable">@number_of_batches</span> <span class="keyword">AS</span> <span class="type">VARCHAR</span>) <span class="operator">+</span> <span class="string">&#x27;. &#x27;</span> <span class="operator">+</span> <span class="built_in">CAST</span>(<span class="built_in">CAST</span>(GETDATE() <span class="keyword">AS</span> SMALLDATETIME) <span class="keyword">AS</span> <span class="type">VARCHAR</span>)</span><br><span class="line">RAISERROR(<span class="variable">@message</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@current_batch</span> <span class="operator">=</span> <span class="variable">@current_batch</span> <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">PRINT ERROR_MESSAGE();</span><br><span class="line">BREAK;</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="number">1</span> <span class="keyword">FROM</span> dbo.temp_random_data <span class="keyword">WHERE</span> done <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">SET</span> <span class="variable">@rows_exist</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #temp_batch;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pi Resources</title>
      <link href="/2019/12/pi-resources/"/>
      <url>/2019/12/pi-resources/</url>
      
        <content type="html"><![CDATA[<h3 id="File-Manager"><a href="#File-Manager" class="headerlink" title="File Manager"></a>File Manager</h3><p>Re-install file manager when it crashes on start.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall pcmanfm</span><br></pre></td></tr></table></figure><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><p><em>GPIO</em> (general-purpose input/output) values can be seen by running <code>pinout</code>, if you hold the pi vertically with the usb ports facing down the <code>5V</code> pins are on the top left.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import RPi.GPIO as GPIO</span><br><span class="line"></span><br><span class="line"># for GPIO numbering, choose BCM  </span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"></span><br><span class="line"># or, for pin numbering, choose BOARD  </span><br><span class="line">GPIO.setmode(GPIO.BOARD)  </span><br><span class="line"></span><br><span class="line"># but you can&#x27;t have both, so only use one</span><br></pre></td></tr></table></figure><p><img src="/d/pi-resources/pinout.jpg" alt="GPIO"></p><ul><li><a href="https://www.raspberrypi.org/documentation/usage/gpio/python/README.md">https://www.raspberrypi.org/documentation/usage/gpio/python/README.md</a></li><li><a href="https://www.raspberrypi.org/documentation/usage/gpio/">https://www.raspberrypi.org/documentation/usage/gpio/</a></li><li><a href="https://raspi.tv/2013/rpi-gpio-basics-4-setting-up-rpi-gpio-numbering-systems-and-inputs">https://raspi.tv/2013/rpi-gpio-basics-4-setting-up-rpi-gpio-numbering-systems-and-inputs</a></li></ul><h3 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h3><ul><li><a href="https://www.hanselman.com/blog/BuildingRunningAndTestingNETCoreAndASPNETCore21InDockerOnARaspberryPiARM32.aspx">https://www.hanselman.com/blog/BuildingRunningAndTestingNETCoreAndASPNETCore21InDockerOnARaspberryPiARM32.aspx</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.makeuseof.com/tag/different-uses-raspberry-pi/">https://www.makeuseof.com/tag/different-uses-raspberry-pi/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Magic And Tips</title>
      <link href="/2019/12/sql-magic-and-tips/"/>
      <url>/2019/12/sql-magic-and-tips/</url>
      
        <content type="html"><![CDATA[<p>SQL Magic and tips that are too small to warrant their own pages (read Carl doesn’t know enough about them) but are still pretty sweet and worth noting how to do!</p><h3 id="Temporary-Tables-And-Variables"><a href="#Temporary-Tables-And-Variables" class="headerlink" title="Temporary Tables And Variables"></a>Temporary Tables And Variables</h3><p>Instantiated in <code>tempdb</code></p><ul><li>[<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table%20variables.sql]">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table%20variables.sql]</a>(<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/table</a> variables.sql)</li><li>[<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary%20tables.sql]">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary%20tables.sql]</a>(<a href="https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary">https://github.com/carlpaton/SQLStatements/blob/master/mssql/General/temporary</a> tables.sql)</li><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/create-table-transact-sql?redirectedfrom=MSDN&view=sql-server-ver15#temporary-tables">Temporary Tables</a></li></ul><blockquote><p>You can create local and global temporary tables. Local temporary tables are visible only in the current session, and global temporary tables are visible to all sessions.</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Temporary table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #carl_log</span><br><span class="line">(</span><br><span class="line">c1 <span class="type">Varchar</span>(<span class="number">50</span>), </span><br><span class="line">c2 <span class="type">Varchar</span>(<span class="number">50</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Table Variables</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@carl_log</span> <span class="keyword">table</span> </span><br><span class="line">( </span><br><span class="line">c1 <span class="type">Varchar</span>(<span class="number">50</span>), </span><br><span class="line">c2 <span class="type">Varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.mssqltips.com/sqlservertip/1556/differences-between-sql-server-temporary-tables-and-table-variables/">https://www.mssqltips.com/sqlservertip/1556/differences-between-sql-server-temporary-tables-and-table-variables/</a></li></ul><p>A Pro Tip!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF(OBJECT_ID(<span class="string">&#x27;[tempdb].[dbo].[#settings]&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [tempdb].[dbo].[#settings];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- can be replaced by</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #settings</span><br></pre></td></tr></table></figure><h3 id="DateAdd-amp-Current-Date-Stamps"><a href="#DateAdd-amp-Current-Date-Stamps" class="headerlink" title="DateAdd &amp; Current Date Stamps"></a>DateAdd &amp; Current Date Stamps</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- add using hours</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(hh, <span class="number">24</span> <span class="operator">*</span> <span class="number">1</span> <span class="operator">+</span> <span class="number">11</span>, DATEADD(dd, DATEDIFF(dd, <span class="number">0</span>, GETDATE()), <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">--- add using minutes</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(<span class="keyword">minute</span>, <span class="number">2115</span>, DATEADD(dd, DATEDIFF(dd, <span class="number">0</span>, GETDATE()), <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">SELECT</span> GETUTCDATE()</span><br></pre></td></tr></table></figure><h3 id="Order-By-Random"><a href="#Order-By-Random" class="headerlink" title="Order By Random"></a>Order By Random</h3><p>Select a random record from a large table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> dbo.carl_table (NOLOCK)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> NEWID()</span><br></pre></td></tr></table></figure><h3 id="Waitfor-Delay"><a href="#Waitfor-Delay" class="headerlink" title="Waitfor Delay"></a>Waitfor Delay</h3><p>10 seconds</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WAITFOR DELAY <span class="string">&#x27;00:00:10&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>The constraint will be called <code>CON_some_useful_meaningful_name__my_column</code> and is for the column <code>my_column</code>. The <code>CON_</code> prefix can be denoted as anything useful to your organization, always follow the suggestions of your DBA or the existing naming conventions in the database.</p><p>The constraint below means <code>my_column</code> has to be <code>UNIQUE</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE myInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="number">1</span> <span class="keyword">FROM</span> sys.key_constraints <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;CON_some_useful_meaningful_name__my_column&#x27;</span>)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[my_table] <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> [CON_some_useful_meaningful_name__my_column] <span class="keyword">UNIQUE</span> ([my_column])</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="Print-amp-Convert"><a href="#Print-amp-Convert" class="headerlink" title="Print &amp; Convert"></a>Print &amp; Convert</h3><p>When print things out for the user to see your proc doing something you will need to convert types. TIP! Set <code>SET NOCOUNT ON</code> first so you dont get <code>(n row(s) affected)</code> in your messages!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@SomeUuid</span> UNIQUEIDENTIFIER <span class="operator">=</span> NEWID ();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- HACK HACK HACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Inform the user</span></span><br><span class="line">PRINT(<span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">1000</span>),<span class="variable">@Counter</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span> <span class="operator">+</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">36</span>),<span class="variable">@SomeUuid</span>))</span><br></pre></td></tr></table></figure><h3 id="ROWCOUNT"><a href="#ROWCOUNT" class="headerlink" title="@@ROWCOUNT"></a>@@ROWCOUNT</h3><blockquote><p>Returns the number of rows affected by the last statement. If the number of rows is more than 2 billion, use ROWCOUNT_BIG.</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dbo.foo <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@ROWCOUNT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.foo <span class="keyword">SET</span> some_field <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@ROWCOUNT</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/rowcount-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/en-us/sql/t-sql/functions/rowcount-transact-sql?view=sql-server-ver15</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gas Engines</title>
      <link href="/2019/12/gas-engines/"/>
      <url>/2019/12/gas-engines/</url>
      
        <content type="html"><![CDATA[<h3 id="EVOE-10GX2"><a href="#EVOE-10GX2" class="headerlink" title="EVOE 10GX2"></a>EVOE 10GX2</h3><ul><li>Mixture: 20:1 (break-in &amp; normal flight)</li><li>Propeller: 10x6 (break-in), 12x6 (normal flight)</li></ul><h4 id="Break-in-Process"><a href="#Break-in-Process" class="headerlink" title="Break-in Process"></a>Break-in Process</h4><p><strong>First tank of fuel</strong>: Set the high-speed needle valve at 2.5 turns out and use the 10x6 break-in prop. Run the engine on the ground for its first tank of fuel and DO NOT go above half throttle. Cycle the throttle between idle and half throttle every minute.</p><p><strong>Second tank of fuel</strong>: Tune the needle valve to be slightly rich of the peak RPM at full throttle without a drop in RPM. Do not run at full throttle on the ground for more than 30 seconds at a time. Tune the low speed needle valve for a smooth transition from idle to mid-range, go back to full throttle to confirm the main needle valve setting and then fly. During this flight, be sure to be conscientious of extended periods of heating the engine. Be sure to mix-in some cool-down dives and lower-throttle flying.</p><p>Note: <code>low speed needle</code> turns the opersite way to the <code>high-speed needle</code> to rich/lean. ¯\<em>(ツ)</em>/¯</p><p><strong>Third tank of fuel</strong>: Fly the engine at high throttle while performing the recommended figure eight maneuvers. This will help the piston ring and cylinder liner to expand and contract; helping the breaking-in process. Tune the needle valve to be slightly rich of the peak RPM as necessary.</p><p><strong>Fourth tank of fuel</strong>: Select one of the recommended propellers for normal operation and mount it on your engine. Tune the main needle valve to be slightly rich of<br>the peak RPM and the low speed needle valve for a smooth transition from idle to full throttle and continue to break-in the engine in flight. </p><p>Do not worry about an engine setting being slightly rich during this process. When set correctly, the engine will occasionally sound as if it is misfiring (which it is). During the climbing maneuvers this should go away and might return during the diving maneuvers. If it does not go away during the climbs, land the airplane and lean the high-speed needle by 1–2 clicks, then take off and fly again. Enjoy the break-in process—you are doing a lot of flying.</p><ul><li><a href="/d/gas-engines/evoe10gx2.pdf">EVOE10GX2-Manual-EN.pdf</a></li></ul><h3 id="EVOE-33GX"><a href="#EVOE-33GX" class="headerlink" title="EVOE 33GX"></a>EVOE 33GX</h3><p><a href="/d/gas-engines/evoe33gx.pdf">EVOE33GX-Manual_EN.pdf</a></p><h3 id="DLE-30"><a href="#DLE-30" class="headerlink" title="DLE 30"></a>DLE 30</h3><ul><li>Mixture: 30:1</li><li>Propeller: 18×8, 18×10, 19×8, 20×8</li></ul><h3 id="Mixtures-amp-Oils"><a href="#Mixtures-amp-Oils" class="headerlink" title="Mixtures &amp; Oils"></a>Mixtures &amp; Oils</h3><ul><li>SA</li></ul><p>100% synthetic oils that work pretty well are Putoline, Stihl and <del>Motul 800</del>. Generally the oils used on racing 2 stoke go-carts are good.</p><ul><li>NZ</li></ul><p><a href="https://pbgrc.co.nz/index.php?route=product/product&product_id=435">Redline Oil</a> has come highly recommended.</p><ul><li>Smaller Engines: 20:1</li><li>Larger Engines: 40:1</li></ul><table><thead><tr><th></th><th>20:1</th><th>40:1</th></tr></thead><tbody><tr><td>1L</td><td>50ml</td><td>25ml</td></tr><tr><td>2L</td><td>100ml</td><td>50ml</td></tr><tr><td>3L</td><td>150ml</td><td>75ml</td></tr><tr><td>4L</td><td>200ml</td><td>100ml</td></tr><tr><td>5L</td><td>250ml</td><td>125ml</td></tr><tr><td>6L</td><td>300ml</td><td>150ml</td></tr><tr><td>7L</td><td>350ml</td><td>175ml</td></tr><tr><td>8L</td><td>400ml</td><td>200ml</td></tr><tr><td>9L</td><td>450ml</td><td>225ml</td></tr><tr><td>10L</td><td>500ml</td><td>250ml</td></tr></tbody></table><iframe width="560" height="315" src="https://www.youtube.com/embed/qIPbVAaOcJg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://www.lightningkarts.com.au/index.php?select=51">Oil Mix Chart</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NgRx Selectors</title>
      <link href="/2019/11/ngrx%20selectors/"/>
      <url>/2019/11/ngrx%20selectors/</url>
      
        <content type="html"><![CDATA[<p>Selectors are pure functions used for obtaining slices of store state.</p><h3 id="Selector-by-route"><a href="#Selector-by-route" class="headerlink" title="Selector by route"></a>Selector by route</h3><p>This will select based on route data, example: <code>/invoice/123</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--- foo.facade.ts</span><br><span class="line">public createInvoice (invoice: IInvoice): Observable&lt;IStoreItem&lt;IInvoice&gt;&gt; &#123;</span><br><span class="line">    this._store.dispatch(new CreateInvoiceAction(invoice));</span><br><span class="line">    return this._store.select(InvoiceSelectors.currentInvoice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public getInvoice (): Observable&lt;IStoreItem&lt;IInvoice&gt;&gt; &#123;</span><br><span class="line">    // need to dispatch GetInvoiceAction ??, could pass in a string token??</span><br><span class="line">    return this._store.select(InvoiceSelectors.byRoute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- foo.selectors.ts</span><br><span class="line">export const byRoute = createSelector(</span><br><span class="line">RouterSelectors.currentParams,</span><br><span class="line">(params: Params): string =&gt; &#123;</span><br><span class="line">return params.id;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export const currentInvoice = createSelector(</span><br><span class="line">  selectFeature,</span><br><span class="line">  (state: FeatureState) =&gt; state.counter</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>IStoreItem</code> is just a way to wrap the response and universally (thought-out your application) check if the store slice ready.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export interface IStoreItem&lt;T&gt; &#123;</span><br><span class="line">    isLoading: boolean;</span><br><span class="line">    item?: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> <a href="https://ngrx.io/guide/store/selectors">https://ngrx.io/guide/store/selectors</a> </li></ul><h3 id="Using-selectors-with-props"><a href="#Using-selectors-with-props" class="headerlink" title="Using selectors with props"></a>Using selectors with props</h3><p> To select a piece of state based on data that isn’t available in the store you can pass <code>props</code> to the selector function. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- foo.facade.ts</span><br><span class="line">public getCurrentInvoice (): Observable&lt;IStoreItem&lt;IInvoice&gt;&gt; &#123;</span><br><span class="line">  return this._store.pipe(select(fromRoot.getCount, &#123; multiply: 2 &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- foo.selectors.ts</span><br><span class="line">--- here `counter` is the response from `getCounterValue` and `props` came from the call to `getCount` above. NgRx is wierd :D</span><br><span class="line"></span><br><span class="line">export const getCount = createSelector(</span><br><span class="line">  getCounterValue,</span><br><span class="line">  (counter, props) =&gt; counter * props.multiply</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><a href="https://ngrx.io/guide/store/selectors#using-selectors-with-props">https://ngrx.io/guide/store/selectors#using-selectors-with-props</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NgRx Operators</title>
      <link href="/2019/11/ngrx-operators/"/>
      <url>/2019/11/ngrx-operators/</url>
      
        <content type="html"><![CDATA[<p>In the <code>.pipe(</code> you can call any of these operators</p><h3 id="ofType"><a href="#ofType" class="headerlink" title="ofType"></a>ofType</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Effect</span>()</span><br><span class="line"><span class="keyword">public</span> updateSomthingOnSomeEventEffect$ = <span class="variable language_">this</span>.<span class="property">_actions$</span>.<span class="title function_">pipe</span>(</span><br><span class="line">    ofType&lt;<span class="title class_">MyAction</span>&gt;(<span class="title class_">SuccessAction</span>.<span class="property">TYPE</span>),</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ngrx.io/guide/effects/operators">https://ngrx.io/guide/effects/operators</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJS Operators</title>
      <link href="/2019/11/rxjs-operators/"/>
      <url>/2019/11/rxjs-operators/</url>
      
        <content type="html"><![CDATA[<p>In the <code>.pipe(</code> you can call any of these operators, most of the comments below are right out of the source <a href="https://github.com/ReactiveX/rxjs">code docs</a>. Also see <a href="http://reactivex.io/documentation/operators.html">reactivex.io/documentation/operators</a> and <a href="https://rxjs.dev/guide/operators">rxjs.dev/guide/operators</a>.</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>Filter items emitted by the source Observable by only emitting those that satisfy a specified predicate.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter to check the something comes back and properties are set</span></span><br><span class="line"><span class="title function_">filter</span>(<span class="function"><span class="params">storeItem</span> =&gt;</span> storeItem &amp;&amp; !!storeItem.<span class="property">item</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter on a bool</span></span><br><span class="line"><span class="title function_">filter</span>(<span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">isLoading</span> === <span class="literal">false</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter that SOMETHING came back</span></span><br><span class="line"><span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.learnrxjs.io/learn-rxjs/operators/filtering/filter">https://www.learnrxjs.io/learn-rxjs/operators/filtering/filter</a></li><li><a href="https://www.concretepage.com/angular/angular-rxjs-filter">https://www.concretepage.com/angular/angular-rxjs-filter</a></li></ul><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>Perform a side effect for every emission on the source Observable, but return an Observable that is identical to the source.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quick tap to display whats coming back</span></span><br><span class="line"><span class="title function_">tap</span>(<span class="function"><span class="params">a</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(a)),</span><br><span class="line">    </span><br><span class="line"><span class="comment">// if its an object</span></span><br><span class="line"><span class="title function_">tap</span>(<span class="function"><span class="params">a</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a))),</span><br></pre></td></tr></table></figure><h3 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h3><p>Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only fire down to the `subscribe` when `item.listingId` changes</span></span><br><span class="line"><span class="title function_">distinctUntilChanged</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev.<span class="property">item</span>.<span class="property">listingId</span> === curr.<span class="property">item</span>.<span class="property">listingId</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">_fooFacade</span>.<span class="title function_">getCurrentListing</span>().<span class="title function_">pipe</span>(</span><br><span class="line"><span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">_destroyed$</span>),</span><br><span class="line"><span class="title function_">filter</span>(<span class="function"><span class="params">storeItem</span> =&gt;</span> storeItem &amp;&amp; !!storeItem.<span class="property">item</span>),</span><br><span class="line"><span class="title function_">distinctUntilChanged</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev.<span class="property">item</span>.<span class="property">listingId</span> === curr.<span class="property">item</span>.<span class="property">listingId</span>)</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function"><span class="params">storeItem</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do something, this was usewful when resetting state</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Applies a given <code>project</code> function to each value emitted by the source Observable, and emits the resulting values as an Observable.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// here only `item` is emmited as an observable</span></span><br><span class="line"><span class="title function_">map</span>(<span class="function"><span class="params">foo</span> =&gt;</span> foo.<span class="property">item</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// here we emit the object `&#123; fooProp: params.fooProp &#125;` as an observable      </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fooParam$</span> = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">queryParams</span>.<span class="title function_">pipe</span>(</span><br><span class="line"><span class="title function_">map</span>(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">fooProp</span>: params.<span class="property">fooProp</span> &#125;;</span><br><span class="line">    &#125;));    </span><br></pre></td></tr></table></figure><h3 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first emit will be an empty array []</span></span><br><span class="line"><span class="title function_">startWith</span>([])</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://reactivex.io/documentation/operators.html">http://reactivex.io/documentation/operators.html</a></li><li><a href="https://rxjs-dev.firebaseapp.com/guide/operators">https://rxjs-dev.firebaseapp.com/guide/operators</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Section</title>
      <link href="/2019/11/mvc-section/"/>
      <url>/2019/11/mvc-section/</url>
      
        <content type="html"><![CDATA[<p>MVC Sections allow you to manipulate where in the DOM things appear, this is helpful for scripts that require libraries to be available.</p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>In the <code>Index.cshtml</code> file the script below requires that jQuery is loaded.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@section ScriptsGameController &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ready!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This section can then be displayed in the <code>_Layout.cshtml</code> file</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/js/site.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    @RenderSection(&quot;Scripts&quot;, required: false)</span><br><span class="line">    @RenderSection(&quot;ScriptsGameController&quot;, required: false)</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest</title>
      <link href="/2019/11/jest/"/>
      <url>/2019/11/jest/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 01/07/2024</strong></p><p>Jest is a javaScript testing framework.</p><h2 id="Pre-Cursor"><a href="#Pre-Cursor" class="headerlink" title="Pre Cursor"></a>Pre Cursor</h2><ul><li>Install Node so we can run the JS locally <a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a>, check its installed with <code>node -v</code></li><li><code>npm init</code>, name <code>jesttesting</code> and enter defaults, for test type <code>jest</code></li><li>this creates <code>package.json</code></li><li><code>npm install --save-dev jest</code> to install jest</li><li>create our root module <code>index.js</code> and test for it <code>index.test.js</code></li></ul><p>The package.json file should look like </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jesttesting&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^29.7.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Then to create a js file that the browser can use run <code>npm install -g webpack webpack-cli</code></li><li>create <code>webpack.config.js</code> (it had to have the absolute path)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;C:\\dev\\jest\\dist&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li>Run <code>webpack</code>, this creates the bundle in dist which should be browser friendly.</li></ul><h2 id="Life-Cycle"><a href="#Life-Cycle" class="headerlink" title="Life Cycle"></a>Life Cycle</h2><p>Note that <code>it</code> and <code>test</code> are the same thing and you nest a <code>describe</code> in a <code>describe</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;unit of work should&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">beforeAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//setup spyOn</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">it</span>(<span class="string">`do x under y predicate &quot;<span class="subst">$&#123;allowsVariableInName&#125;</span>&quot;`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//arrange, act, expect</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;do foo under baz predicate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//arrange, act, expect</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">afterAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//mockRestore</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Update-index-js"><a href="#Update-index-js" class="headerlink" title="Update index.js"></a>Update index.js</h2><p>This is a simple example that redirects a user to a new version of the page when the js file is loaded in the master (so avalible on all pages)</p><h3 id="Data-driven"><a href="#Data-driven" class="headerlink" title="Data driven"></a>Data driven</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;unit of work&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">abName</span>: <span class="literal">true</span>, <span class="attr">expected</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">abName</span>: <span class="literal">false</span>, <span class="attr">expected</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ].<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; abName, expected &#125;</span>) =&gt;</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">`should <span class="subst">$&#123;expected ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;not&#x27;</span>&#125;</span> use &#x27;child-component-to-maybe-show&#x27; if abName feature is <span class="subst">$&#123;abName&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="TBA"><a href="#TBA" class="headerlink" title="TBA"></a>TBA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">expect(spy).toHaveBeenCalledTimes(1);</span><br><span class="line"></span><br><span class="line">toHaveBeenCalledWith</span><br><span class="line"></span><br><span class="line">toBeInstanceOf</span><br><span class="line"></span><br><span class="line">toBe</span><br><span class="line"></span><br><span class="line">toMatchSnapshot</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://jestjs.io/">https://jestjs.io/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> javascript </tag>
            
            <tag> npm </tag>
            
            <tag> webpack </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Passwordless SSH Access</title>
      <link href="/2019/10/passwordless-ssh-access/"/>
      <url>/2019/10/passwordless-ssh-access/</url>
      
        <content type="html"><![CDATA[<p>While setting up my <a href="/2019/10/raspberry-pi-cluster/">Raspberry Pi Cluster</a> I needed passwordless SSH access between the master and worker nodes. There are a few ways to do this which I detail below.</p><h3 id="Check-if-the-SSH-key-exists"><a href="#Check-if-the-SSH-key-exists" class="headerlink" title="Check if the SSH key exists"></a>Check if the SSH key exists</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="Keychain"><a href="#Keychain" class="headerlink" title="Keychain"></a>Keychain</h3><p>The <code>Keychain</code> steps below allow for passwordless SSH access from <code>node1</code> to <code>node3</code>.</p><p><a href="https://linux.die.net/man/1/keychain">Keychain</a> is a manager for ssh-agent.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install keychain</span><br></pre></td></tr></table></figure><h4 id="Setup-Common-User"><a href="#Setup-Common-User" class="headerlink" title="Setup Common User"></a>Setup Common User</h4><p>The steps below are based on the work by <a href="https://www.udemy.com/course/build-your-own-super-computer-with-raspberry-pi">Ben Heidorn - udemy.com</a></p><p>A common user is needed on each node to allow the nodes to authenticate and execute the MPI commands. I used the username <code>mpiuser</code>. By default the PI’s install with the user <code>PI</code> and password <code>raspberry</code>.</p><p><strong>node1</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -u 2345 mpiuser</span><br></pre></td></tr></table></figure><p><code>-m</code> creates the home directory, <code>-u</code> is the user id, I think you can use any user id as long as they are same on all nodes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd mpiuser            ~ raspberry for both prompts, secure I know!</span><br></pre></td></tr></table></figure><p>Now login as user <code>mpiuser</code> to test it works</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - mpiuser                   ~ switch to the mpiuser user</span><br><span class="line">exit                           ~ exit that user session and go back to the `pi` user</span><br></pre></td></tr></table></figure><p>Repeat the same for <strong>node3</strong>, this can be done over SSH using the PI user. You can connect using <code>ssh pi@node3</code>. When done run <code>exit</code> to fall back to <strong>node1</strong>.</p><h4 id="Setup-Generate-SSH-Keys"><a href="#Setup-Generate-SSH-Keys" class="headerlink" title="Setup Generate SSH Keys"></a>Setup Generate SSH Keys</h4><p>Allow each node to authenticate using SSH (Secure Shell) using public &amp; private keys.</p><p><strong>node1</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - mpiuser</span><br><span class="line">ssh-keygen -t rsa              ~ same to the default location `/home/mpiuser/.ssh/id_rsa`</span><br><span class="line">                               ~ passphrase `raspberry` - secure right? :D</span><br></pre></td></tr></table></figure><p><code>-t rsa</code> is the encription type</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id mpiuser@node3     ~ copys the ssh key to node3 (this would need to be done for nodes2/4)</span><br><span class="line">ssh node3                     ~ should now ask for the passphrase</span><br><span class="line">exit                          ~ go back to node1</span><br></pre></td></tr></table></figure><p>To allow the user to login without a password/passphrase. This is done on the Node1 (master)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano .bashrc</span><br></pre></td></tr></table></figure><p>At the bottom of the file add</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># keychain magic</span><br><span class="line">/usr/bin/keychain $HOME/.ssh/id_rsa</span><br><span class="line">source $HOME/.keychain/$HOSTNAME-sh</span><br></pre></td></tr></table></figure><p>After saving the file recompile it by running</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><p>Now you should be able to run <code>ssh node3</code> and not be asked for a password. </p><h3 id="No-passphrase"><a href="#No-passphrase" class="headerlink" title="No passphrase"></a>No passphrase</h3><p><strong>node1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa                             ~ default location `/home/pi/.ssh/id_rsa`</span><br><span class="line">                                              ~ blank password</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub pi@node3</span><br><span class="line">ssh pi@node3</span><br></pre></td></tr></table></figure><p><strong>node3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub pi@node1</span><br><span class="line">ssh pi@node1</span><br></pre></td></tr></table></figure><p>This will copy the keys to</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://collabnix.com/how-to-create-password-less-ssh-for-linux/">https://collabnix.com/how-to-create-password-less-ssh-for-linux/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster Setup OS</title>
      <link href="/2019/10/raspberry-pi-cluster-setup-os/"/>
      <url>/2019/10/raspberry-pi-cluster-setup-os/</url>
      
        <content type="html"><![CDATA[<p>Updated: <em>29/09/2020</em></p><p>I tried to keep the Operating System (OS) setup separate from the <a href="/tags/raspberry-pi/">Pi Posts</a> else they would be duplicated.</p><h3 id="Distributions"><a href="#Distributions" class="headerlink" title="Distributions"></a>Distributions</h3><p>There are a few distributions that work on the Pi, the most common is Raspberry Pi OS (previously called Raspbian). A lot of configuration options still use the terminology <code>raspbian</code>.</p><p>For clusters I mostly use <code>Raspberry Pi OS (32-bit) Lite</code> which is a minimal image based on <code>Debian Buster</code>, its then mannaged though <a href="/tags/ssh/">SSH</a>.</p><p>I have used <code>Raspberry Pi OS (32-bit) with desktop</code> and <code>retropie</code> just to have a hoon.</p><ul><li><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">2020-08-20-raspios-buster-armhf-lite</a></li><li><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">Raspios: 2020-08-20-raspios-buster-armhf-full</a></li><li><a href="/2019/10/retropie/">Retropie: retropie-buster-4.6-rpi4</a></li></ul><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><p>As I only have two <a href="https://www.pbtech.co.nz/product/SEVRBP0206/Raspberry-Pi-4-Model-B-4GB-LPDDR4-FIRST-28nm-Based">Raspberry Pi 4 Model B’s</a> I set them up as:</p><ul><li><code>node1</code> (master node)</li><li><code>node3</code> (worker node)</li></ul><h3 id="OS-Steps-For-Cluster"><a href="#OS-Steps-For-Cluster" class="headerlink" title="OS Steps (For Cluster)"></a>OS Steps (For Cluster)</h3><ol><li>Download <code>Raspberry Pi OS (32-bit) Lite</code> - <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">2020-08-20-raspios-buster-armhf-lite</a>.</li><li>Install on SD cards with <a href="https://www.balena.io/etcher/">Etcher</a> or any flashing utility.</li><li>Pop in the SD Cards and boot the Pi, allow disk expand and wait for the OS to figure out its life.</li><li>Once at the terminal login as user <code>pi</code> and password <code>raspberry</code>. Probably best to update your passwords, meh.</li><li>Run <code>sudo raspi-config</code> </li></ol><ul><li>Config country (4. Localisation Options)</li><li>Rename the Pi’s (2. Network Options)</li><li>Setup Wifi (2. Network Options) </li><li>SSH (5. Interfacing Options). Then finally reboot.</li></ul><ol start="6"><li>Install additional software, you dont actually need git unless you plan to pull down <a href="https://github.com/carlpaton/nginx-pi-demo">nginx-pi-demo</a> and build it yourself.</li></ol><p>The other software is just common things I install and use in other posts.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git nmap python-mpi4py keychain ansible</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi Cluster</title>
      <link href="/2019/10/raspberry-pi-cluster/"/>
      <url>/2019/10/raspberry-pi-cluster/</url>
      
        <content type="html"><![CDATA[<p>I was inspired by a Technology blogger <a href="https://www.youtube.com/channel/UCRjSO-juFtngAeJGJRMdIZw">Gary Sims</a> to build my own (small) super computer using Raspberry Pi’s and a message passing interface library. Following his <code>Prime Numbers</code> example the key concepts are:</p><p><strong>MPI library</strong> - Message passing interface, this is a standard way of sending blocks of data into a cluster from one node to another. For the examples below I used <a href="https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php">mpiexec</a> which is free and <a href="https://github.com/open-mpi/ompi">open source</a>.</p><p><strong>Scatter</strong> - the MPI program will see each core in your cluster as something it can ask to do work. It will scatter the numbers accross the nodes to check if they are prime.</p><p><strong>Gather</strong> - the MPI program will then gather the results. This is done on the master node that you started the command from.</p><p><img src="/d/raspberry-pi-cluster/raspberry-pi-cluster.jpg" alt="Raspberry Pi Cluster"></p><p>In this video Gary explains what a <code>Raspberry Pi Supercomputer Cluster</code> is and the key concepts of the message passing interface.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VzcarXuVUvU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Setup-Hardware-OS"><a href="#Setup-Hardware-OS" class="headerlink" title="Setup Hardware / OS"></a>Setup Hardware / OS</h3><p>Follow the <a href="/2019/10/raspberry-pi-cluster-setup-os/">OS Steps (For Cluster)</a>, then call them</p><ul><li><code>node1</code></li><li><code>node2</code></li></ul><p>The distro come with most applications already installed, some of the applications I used were <code>git</code>, <code>nano</code> and <code>ssh</code>. Additional installs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git python-mpi4py keychain ansible</span><br></pre></td></tr></table></figure><h3 id="Setup-Passwordless-SSH-Access"><a href="#Setup-Passwordless-SSH-Access" class="headerlink" title="Setup Passwordless SSH Access"></a>Setup Passwordless SSH Access</h3><p>See the <code>Keychain</code> section on this <a href="/2019/10/passwordless-ssh-access/">passwordless SSH access</a> post.</p><h3 id="Hostfile"><a href="#Hostfile" class="headerlink" title="Hostfile"></a>Hostfile</h3><p>When running <code>mpiexec python python_script.py</code> it can be run with the switch <code>-hostfile HOSTFILENAME</code>, so the full command is then <code>mpiexec -hostfile hostfile python python_script.py</code></p><p>The content of the hostfile is either the DNS name or IP address of all the nodes in the cluster.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node3</span><br></pre></td></tr></table></figure><h3 id="Work-Load"><a href="#Work-Load" class="headerlink" title="Work Load"></a>Work Load</h3><p>The PI’s need some problems to solve! Clone <a href="https://github.com/carlpaton/python-hoon">https://github.com/carlpaton/python-hoon</a> to the same dir on both PI’s. Its important that the directorys are the same as the MASTER node (using MPI) will look in these directorys for the script to run.</p><h4 id="Check-mpi4py"><a href="#Check-mpi4py" class="headerlink" title="Check mpi4py"></a>Check mpi4py</h4><blockquote><p>The script prints hostnames and ranks (process id in MPI) from each MPI process in a sequential manner.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd python-hoon/mpiexec</span><br><span class="line">time mpiexec python check_mpi4py.py</span><br><span class="line">time mpiexec -np 4 -hostfile hostfile python check_mpi4py.py          ~ limit to 4 cores</span><br></pre></td></tr></table></figure><p>This script was copied from <a href="https://chainermn.readthedocs.io/en/v1.0.0b2_a/installation/troubleshooting.html">chainermn.readthedocs.io</a></p><h4 id="Prime-Numbers"><a href="#Prime-Numbers" class="headerlink" title="Prime Numbers"></a>Prime Numbers</h4><p>Use parallel computing to find prime numbers in the range <code>0</code> to <code>10000</code>. This is a Python 2 script cloned from <a href="https://github.com/garyexplains/examples">github.com/garyexplains</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd python-hoon/mpiexec</span><br><span class="line">time mpiexec -hostfile hostfile python primenumbers27.py              ~ no core limit, use all nodes in `hostfile`</span><br></pre></td></tr></table></figure><p>The results below show the time taken to complete the script <code>primenumbers27.py</code> using 8 cores, 4 cores and finally just 1 core. The results should probably be averaged out or something but running just once like the below clearly shows speed improvements. Using Wifi and the speed of my SD cards would also come into play.</p><p><img src="/d/raspberry-pi-cluster/primenumbers27-8-cores.jpg" alt="8 Core 6.42s"></p><p><img src="/d/raspberry-pi-cluster/primenumbers27-4-cores.jpg" alt="4 Core 8.02s"></p><p><img src="/d/raspberry-pi-cluster/primenumbers27-1-core.jpg" alt="1 Core 28.06s"></p><p><strong>What Are Prime Numbers?</strong></p><ul><li>Greater than 1</li><li>Whole number with exactly two factors, itself and 1.</li></ul><p>Some examples of prime numbers: 2,3,5,7,11,13,17,19</p><p>The number 4 is not a prime number because it can be divided evenly by 4, 2, and 1. The number 5 is a prime number because it cannot be divided evenly by any other numbers except for 5 and 1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">2 / 1 = 2</span><br><span class="line">2 / 2 = 1</span><br><span class="line"></span><br><span class="line">3 / 1 = 3</span><br><span class="line">3 / 2 = 1.x</span><br><span class="line">3 / 3 = 1</span><br><span class="line"></span><br><span class="line">4 / 1 = 4</span><br><span class="line">4 / 2 = 2</span><br><span class="line">4 / 3 = 1.x</span><br><span class="line">4 / 4 = 1</span><br><span class="line"></span><br><span class="line">5 / 1 = 5</span><br><span class="line">5 / 2 = 2.x</span><br><span class="line">5 / 3 = 1.x</span><br><span class="line">5 / 4 = 1.x</span><br><span class="line">5 / 5 = 1</span><br><span class="line"></span><br><span class="line">6 / 1 = 6</span><br><span class="line">6 / 2 = 3</span><br><span class="line">6 / 3 = 2</span><br><span class="line">6 / 4 = 1.x</span><br><span class="line">6 / 5 = 1.x</span><br><span class="line">6 / 6 = 1</span><br><span class="line"></span><br><span class="line">7 / 1 = 7</span><br><span class="line">7 / 2 = 3.x</span><br><span class="line">7 / 3 = 2.x</span><br><span class="line">7 / 4 = 1.x</span><br><span class="line">7 / 5 = 1.x</span><br><span class="line">7 / 6 = 1.x</span><br><span class="line">7 / 7 = 1</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/garyexplains/examples">https://github.com/garyexplains/examples</a></li><li><a href="http://www.circuitbasics.com/how-to-write-and-run-a-python-program-on-the-raspberry-pi/">http://www.circuitbasics.com/how-to-write-and-run-a-python-program-on-the-raspberry-pi/</a></li><li><a href="https://www.raspberrypi.org/documentation/usage/python/">https://www.raspberrypi.org/documentation/usage/python/</a></li><li><a href="https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php">https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php</a></li><li><a href="https://chainermn.readthedocs.io/en/v1.0.0b2_a/installation/troubleshooting.html">https://chainermn.readthedocs.io/en/v1.0.0b2_a/installation/troubleshooting.html</a></li></ul><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p><a href="/2020/09/raspberry-pi-cluster-swarm/">This cluster can also be run with Docker in swarm mode.</a></p><ul><li><a href="https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm">https://howchoo.com/g/njy4zdm3mwy/how-to-run-a-raspberry-pi-cluster-with-docker-swarm</a></li><li><a href="https://www.docker.com/blog/happy-pi-day-docker-raspberry-pi/">https://www.docker.com/blog/happy-pi-day-docker-raspberry-pi/</a></li><li><a href="https://medium.com/@simone.dicicco/building-a-raspberry-pi-cluster-with-docker-8d53ee614479">https://medium.com/@simone.dicicco/building-a-raspberry-pi-cluster-with-docker-8d53ee614479</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> python </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retropie</title>
      <link href="/2019/10/retropie/"/>
      <url>/2019/10/retropie/</url>
      
        <content type="html"><![CDATA[<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h4 id="Pi-V4-Support"><a href="#Pi-V4-Support" class="headerlink" title="Pi V4 Support"></a>Pi V4 Support</h4><ol><li><a href="https://www.balena.io/etcher/">Download and install etcher</a></li><li><a href="https://retropie.org.uk/download/">Download the retropie image</a></li><li>Flash your card with etcher</li></ol><p>After loading up it will expand the disk and your should be able to configure your controller.</p><p>Other steps:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">F4 to exit to console</span><br><span class="line"></span><br><span class="line">sudo raspi-config</span><br><span class="line"></span><br><span class="line">4 Localisation Options -&gt; Change Wifi Country</span><br><span class="line"></span><br><span class="line">5 Interfacing Options -&gt; SSH -&gt; Enable</span><br><span class="line"></span><br><span class="line">2 Network Options -&gt; Wifi -&gt; Set SSID/Password</span><br><span class="line"></span><br><span class="line">? Change hostname, I used `node1`</span><br></pre></td></tr></table></figure><ul><li><a href="https://retropie.org.uk/docs/First-Installation/">https://retropie.org.uk/docs/First-Installation/</a></li></ul><h4 id="Pre-Official-Pi-V4-Support"><a href="#Pre-Official-Pi-V4-Support" class="headerlink" title="Pre Official Pi V4 Support"></a>Pre Official Pi V4 Support</h4><p>Raspbian is the operating system running on the PI, Retropie then runs on-top of this to allow emulation of arcade games. This sweet video runs though what you need to do.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/L5Pz60iHtL8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>### Terminal Steps<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone --depth=1 https://github.com/RetroPie/RetroPie-Setup</span><br><span class="line"></span><br><span class="line">cd RetroPie-Setup</span><br><span class="line"></span><br><span class="line">sudo nano retropie_packages.sh</span><br><span class="line">Add this line  __platform=rpi3</span><br><span class="line"></span><br><span class="line">sudo ./retropie_setup.sh</span><br></pre></td></tr></table></figure><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><p>Besides the PI itself you will need either the <code>Nintendo NES classic USB</code> or <code>USB Super Nintendo Game Controllers</code></p><h4 id="XBox-One-Controller"><a href="#XBox-One-Controller" class="headerlink" title="XBox One Controller"></a>XBox One Controller</h4><p>I used <code>select</code> as my hotkey.</p><p>Hotkey combinations are specific to the retroarch/libretro based emulators.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hotkey Combination        Action</span><br><span class="line">Hotkey+Start              Exit</span><br><span class="line">Hotkey+Right Shoulder  Save</span><br><span class="line">Hotkey+Left Shoulder  Load</span><br><span class="line">Hotkey+Right              Input State Slot Increase</span><br><span class="line">Hotkey+Left               Input State Slot Decrease</span><br><span class="line">Hotkey+X                  RGUI Menu</span><br><span class="line">Hotkey+B                  Reset</span><br></pre></td></tr></table></figure><ul><li><a href="https://retropie.org.uk/docs/Controller-Configuration/">https://retropie.org.uk/docs/Controller-Configuration/</a></li></ul><h3 id="All-the-roms"><a href="#All-the-roms" class="headerlink" title="All the roms"></a>All the roms</h3><ul><li> <a href="https://raspberrytips.com/download-retropie-roms/">https://raspberrytips.com/download-retropie-roms/</a> </li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://retropie.org.uk/">https://retropie.org.uk/</a></li><li><a href="https://www.raspberrypi.org/downloads/raspbian/">https://www.raspberrypi.org/downloads/raspbian/</a></li><li><a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></li><li><a href="https://www.lynda.com/Raspberry-Pi-tutorials/Loading-games-your-Raspberry-Pi/521141/580159-4.html">https://www.lynda.com/Raspberry-Pi-tutorials/Loading-games-your-Raspberry-Pi/521141/580159-4.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Imac 2019</title>
      <link href="/2019/09/imac-2019/"/>
      <url>/2019/09/imac-2019/</url>
      
        <content type="html"><![CDATA[<p>International Miniature Aerobatic Club</p><h3 id="Known-Basic-2019"><a href="#Known-Basic-2019" class="headerlink" title="Known Basic 2019"></a>Known Basic 2019</h3><table><thead><tr><th>No.</th><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td><img src="/d/imac-2019/1.JPG" alt="2.4.1.1"></td><td>360 degree turn</td></tr><tr><td>2</td><td>8.4.1.1; 9.1.5.2</td><td>Humpty bump, 1/2 roll on vertical down line</td></tr><tr><td>3</td><td>8.5.2.1; 9.1.2.2</td><td>Reverse half Cuban, 1/2 roll on 45 degree upline (I think this is downline)</td></tr><tr><td>4</td><td>7.4.1.1</td><td>Loop</td></tr><tr><td>5</td><td>1.2.7.1; 9.1.4.2</td><td>Sharks Tooth, 1/2 roll on 45 degree downline</td></tr><tr><td>6</td><td>5.2.1.1</td><td>Hammerhead / Stall turn</td></tr><tr><td>7</td><td>1.1.1.1; 9.1.3.4</td><td>Aileron roll</td></tr><tr><td>8</td><td>8.5.6.1; 9.1.4.2</td><td>Half Cuban, 1/2 roll on 45 degree downline</td></tr><tr><td>9</td><td>7.2.2.1; 9.1.3.2</td><td>Half inside loop, 1/2 roll on top</td></tr><tr><td>10</td><td>1.1.6.3; 9.11.1.6</td><td>1 1/2 Turn positive spin</td></tr></tbody></table><iframe width="560" height="315" src="https://www.youtube.com/embed/yMbcwHkP-lU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Learning-Aresti"><a href="#Learning-Aresti" class="headerlink" title="Learning Aresti"></a>Learning Aresti</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/1EVrfk0TVvQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="/d/imac-2019/2019-imac-known-basic.pdf">Basic 2019 PDF</a></li><li><a href="http://www.mini-iac.org/Downloads">http://www.mini-iac.org/Downloads</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH - Secure shell to instance</title>
      <link href="/2019/09/aws-secure-shell-ssh-to-instance/"/>
      <url>/2019/09/aws-secure-shell-ssh-to-instance/</url>
      
        <content type="html"><![CDATA[<ol><li>Create key pair in AWS Console and download it<ol><li>Suggested saved location <code>C:\TradeMe\Identities\carl-key-pair.pem</code></li></ol></li><li>Load <code>.pem</code> key, using <code>PuTTYgen</code><ol><li>Save private key, suggested location <code>C:\TradeMe\Identities\carl-key-pair.ppk</code></li></ol></li><li>Run <code>Pageant</code><ol><li>From the system tray Add key and select the <code>ppk</code> file</li><li>You should now be able to SSH using <code>PuTTY</code></li></ol></li><li>In AWS Console enable inbound traffic in security group</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSH   TCP   22   0.0.0.0/0</span><br></pre></td></tr></table></figure><ol start="4"><li>Connect</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ec2-user@ec2-xx-xxx-xxx-xxx.ap-southeast-2.compute.amazonaws.com</span><br><span class="line">root@ec2-xx-xxx-xxx-xxx.ap-southeast-2.compute.amazonaws.com</span><br></pre></td></tr></table></figure><ol start="5"><li>Running commands on the instance</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y ecs-init</span><br><span class="line">sudo service docker start</span><br><span class="line">sudo start ecs</span><br><span class="line"></span><br><span class="line">tail -f /var/log/esc/esc-agentlog.YYYY-MM-DD</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html#connection-prereqs-get-info-about-instance">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html#connection-prereqs-get-info-about-instance</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance-connect.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance-connect.html</a></li><li><a href="https://www.lynda.com/Docker-tutorials/Explore-ECS-cluster/606069/643362-4.html">https://www.lynda.com/Docker-tutorials/Explore-ECS-cluster/606069/643362-4.html</a></li><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/ecs-agent-disconnected/">https://aws.amazon.com/premiumsupport/knowledge-center/ecs-agent-disconnected/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beer Brewing</title>
      <link href="/2019/09/beer-brewing/"/>
      <url>/2019/09/beer-brewing/</url>
      
        <content type="html"><![CDATA[<h3 id="Temperatures"><a href="#Temperatures" class="headerlink" title="Temperatures"></a>Temperatures</h3><ul><li>Lagers: 10-14 degrees<ul><li>Pilsner is a type of pale lager.</li></ul></li><li>Ales: 18-21 degrees</li></ul><h3 id="Hydrometer"><a href="#Hydrometer" class="headerlink" title="Hydrometer"></a>Hydrometer</h3><p>Understanding what your fermentation is doing will help ensure a successful brew and encourage improvement in your brewing. A hydrometer to measure the gravity before, during and after fermentation is part of that process. If nothing else, it will help you work out the amount of alcohol in the beer and you’ll know when the fermentation has finished.</p><p>They measure: <em>specific gravity</em>, <em>potential alcohol</em> and approximate <em>sugar per liter</em>.</p><p>At its most basic scientific purpose, a hydrometer is an instrument that measures the <a href="https://en.wikipedia.org/wiki/Specific_gravity">specific gravity</a> of liquids, that is to say, it measures the ratio of the density of the liquid to the density of water.</p><h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><ul><li>Clean your drum with a sterilizing agent</li><li>Brewing, <strong>2 hours</strong><ul><li>Dissolve your brew in 2-4 liters of very hot water</li><li>Add 1kg of sugar or dextrose</li><li>Put about 10 liters of cold water in your fermenter</li><li>Add the hot mixture, and mix well.</li><li>Top it up to 23 liters and sprinkle with brewers’ yeast when the temperature is below 30°.</li></ul></li><li>Fermenting <strong>about a week</strong><ul><li>Seal the fermenter and partly fill the airlock with boiled, cooled water.</li><li>Once the airlock <em>stops bubbling</em> and the <em>brew clears</em>, leave it for another <strong>48 hours</strong></li><li>If the hydrometer reading is close to the expected reading and static for more than <strong>24 hours</strong> then it’s ready for bottling.</li></ul></li><li>Sterilize your bottles and caps with a sterilizing agent</li><li>Add a teaspoon of sugar or dextrose to each bottle</li><li>Fill each bottle to 40mm below the top</li><li>Cap the bottles, tilt them a few times to help dissolve the sugar</li><li>Store them in a <strong>warm place for five days</strong></li><li>Move them somewhere a <strong>bit cooler for another five days</strong></li><li>Give them <strong>another week</strong>, and try your beer</li></ul><p>Sample at <strong>three weeks</strong>, <strong>three months</strong>, and <strong>six months</strong> if you don’t get rat-assed with your mates and smash them all.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.brewshop.co.nz/brewing-resources/starting-home-brewing">https://www.brewshop.co.nz/brewing-resources/starting-home-brewing</a></li><li><a href="https://www.brewshop.co.nz/blog/5-tips-for-beginners/">https://www.brewshop.co.nz/blog/5-tips-for-beginners/</a></li><li><a href="https://www.brewshop.co.nz/blog/simple-beer-brewing-tips/">https://www.brewshop.co.nz/blog/simple-beer-brewing-tips/</a></li><li><a href="https://www.howtohomebrewbeers.com/2016/06/how-to-use-hydrometer-correctly-to.html">https://www.howtohomebrewbeers.com/2016/06/how-to-use-hydrometer-correctly-to.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> beer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wood Working Projects</title>
      <link href="/2019/09/wood-working-projects/"/>
      <url>/2019/09/wood-working-projects/</url>
      
        <content type="html"><![CDATA[<p>As humans waste things, I feel its too easy to just go out and buy something new (which comes in a box with packaging which we also then throw away)</p><p>I feel if we can all just re-purpose some <code>things</code> it will help. To this tune I have been trying to re-purpose old pallets <a href="https://www.google.com/search?q=pallet+projects+ideas">drawing insparation from other peoples projects</a>.</p><h3 id="Some-Projects"><a href="#Some-Projects" class="headerlink" title="Some Projects"></a>Some Projects</h3><p><img src="/d/wood-working-projects/bed-side-table.jpg" alt="Bed side table"></p><p><img src="/d/wood-working-projects/kids-toy-box.jpg" alt="Kids toy box"></p><p><img src="/d/wood-working-projects/planters.jpg" alt="Planters"></p><p><img src="/d/wood-working-projects/small-box.jpg" alt="Small box"></p>]]></content>
      
      
      
        <tags>
            
            <tag> wood work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Line Interface Overview</title>
      <link href="/2019/09/aws-command-line-interface-overview/"/>
      <url>/2019/09/aws-command-line-interface-overview/</url>
      
        <content type="html"><![CDATA[<p><a href="/2019/09/aws-install-and-configure-cli/">Firstly install and configure both the AWSCLI and ECSCLI</a>.</p><p>For the examples below <code>ecs</code> is the <code>[options]</code> argument after the <code>aws</code> command. It instructs <code>aws</code> to run the command for <code>Elastic Container Services</code>. Any commands that point to a <code>.json</code> configuration file are <a href="https://github.com/carlpaton/AWS">available on github</a>.</p><p>Detailed help for both EC2 (Elastic Compute Cloud) and ECS (Elastic Container Service) can be found at the links below:</p><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/index.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/index.html</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html</a></li></ul><p>You can dump the result if any command to a text file which is useful with the <code>describe</code> commands. Single <code>&gt;</code> will overwrite the file and <code>&gt;&gt;</code> will append. Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; aws ecr list-images --repository-name lexicon-webmvc &gt; output.txt</span><br><span class="line">C:\&gt; aws ecr list-images --repository-name lexicon-webmvc &gt;&gt; output.txt</span><br></pre></td></tr></table></figure><h3 id="ECR-Elastic-Container-Registry"><a href="#ECR-Elastic-Container-Registry" class="headerlink" title="ECR - Elastic Container Registry"></a>ECR - Elastic Container Registry</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr list-images --repository-name lexicon-webmvc</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecr/list-images.html">https://docs.aws.amazon.com/cli/latest/reference/ecr/list-images.html</a></li><li><a href="/2019/09/aws-elastic-container-registry/">ECR CLI commands</a> are listed here in context of the <a href="https://github.com/carlpaton/lexicon">lexicon</a> project.</li></ul><h3 id="Task-Definitions"><a href="#Task-Definitions" class="headerlink" title="Task Definitions"></a>Task Definitions</h3><p>Example task definition ARN : <code>arn:aws:ecs:ap-southeast-2:000000000000:task-definition/lexicon-task-definition:3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-task-definitions --region ap-southeast-2 --status INACTIVE</span><br><span class="line"></span><br><span class="line">aws ecs describe-task-definition --task-definition TASK-NAME</span><br></pre></td></tr></table></figure><p>You CANNOT DELETE task definitions they have to be only deregistered if you no longer want them.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs deregister-task-definition --task-definition TASK-NAME </span><br></pre></td></tr></table></figure><p>Register new from local <code>.json</code> file. If you use an existing name it will create a new revision of the task definition. The name is defined in the <code>.json</code> in the <code>family</code> parameter.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs register-task-definition --cli-input-json file://lexicon-task-definition.json --region ap-southeast-2</span><br></pre></td></tr></table></figure><h3 id="VPC-Virtual-Private-Cloud"><a href="#VPC-Virtual-Private-Cloud" class="headerlink" title="VPC - Virtual Private Cloud"></a>VPC - Virtual Private Cloud</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-vpcs</span><br><span class="line"></span><br><span class="line">aws ec2 create-vpc --cidr-block 10.0.0.0/16</span><br></pre></td></tr></table></figure><p>The above will create your VPC along with a <code>Route Table</code>, <code>DHCP options set</code>, <code>Network ACLs</code> and <code>Security Groups</code></p><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html</a></li></ul><h3 id="EC2-Instance"><a href="#EC2-Instance" class="headerlink" title="EC2 Instance"></a>EC2 Instance</h3><p>EC2 (Amazon Elastic Compute Cloud) is the virtual machine running in the cloud, this is a Linux variant running the <code>Amazon Linux AMI 2.0.20190913 x86_64 ECS HVM</code> - where AMI stands for <code>Amazon Machine Images</code></p><p>Terminated instances remain visible after termination (for approximately one hour).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ Descibes the virtual machine instance</span><br><span class="line">aws ec2 describe-instances &gt; output.txt</span><br><span class="line"></span><br><span class="line">~ Describes an attribute, example `kernel` which would be `KernelId` in the response</span><br><span class="line">aws ec2 describe-instance-attribute --instance-id i-00000000000000000 --attribute kernel --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">~ Kill it with fire</span><br><span class="line">aws ec2 terminate-instances --instance-ids i-00000000000000000</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html</a></li></ul><p>To create a launch template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ display existing launch templates</span><br><span class="line">aws ec2 describe-launch-templates</span><br><span class="line"></span><br><span class="line">~ create new</span><br><span class="line">aws ec2 create-launch-template --launch-template-name TemplateForWebServer --launch-template-data file://create-launch-template.json</span><br><span class="line"></span><br><span class="line">~ delete</span><br><span class="line">aws ec2 delete-launch-template --launch-template-id lt-0bcc8aca918ba6ae8</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html?icmpid=docs_ec2_console">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html?icmpid=docs_ec2_console</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestLaunchTemplateData.html">https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestLaunchTemplateData.html</a></li></ul><p>To run instances</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 run-instances --launch-template LaunchTemplateId=lt-0daef39547692deac</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html#launching-instances">https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html#launching-instances</a></li></ul><h3 id="Security-Groups"><a href="#Security-Groups" class="headerlink" title="Security Groups"></a>Security Groups</h3><p>This is used to open up ports, example allowing you to connect to SQL from SQL Server Management Studio on port 1433. The example below opens port 80.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-security-groups --filters Name=vpc-id,Values=VPC_ID --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">aws ec2 authorize-security-group-ingress --group-id SECURIYY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 --region ap-southeast-2</span><br></pre></td></tr></table></figure><h3 id="Subnets"><a href="#Subnets" class="headerlink" title="Subnets"></a>Subnets</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-subnet --generate-cli-skeleton</span><br><span class="line"></span><br><span class="line">aws ec2 create-subnet --vpc-id vpc-VPC_ID --cidr-block 10.0.1.0/24</span><br><span class="line"></span><br><span class="line">aws ec2 create-subnet --cli-input-json file://create-subnet-1.json</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html">https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html</a></li></ul><h3 id="Clusters"><a href="#Clusters" class="headerlink" title="Clusters"></a>Clusters</h3><p>Example cluster ARN: <code>arn:aws:ecs:ap-southeast-2:000000000000:cluster/lexicon-cluster</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-clusters</span><br><span class="line"></span><br><span class="line">aws ecs delete-cluster --cluster CLUSTER_ID</span><br><span class="line"></span><br><span class="line">aws ecs describe-clusters --clusters CLUSTER_ID</span><br><span class="line"></span><br><span class="line">aws ecs create-cluster --cluster-name lexicon-cluster --tags key=Description,value=lexicon</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/create-cluster.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/create-cluster.html</a></li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Start from task definition and keep it running.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-services --cluster lexicon-cluster</span><br><span class="line">aws ecs delete-service --service lexicon-service --cluster lexicon-cluster</span><br><span class="line"></span><br><span class="line">~ servicediscovery</span><br><span class="line">aws servicediscovery list-services --filters lexicon </span><br><span class="line">aws servicediscovery delete-service --id srv-cftwloewpccqww3k</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/servicediscovery/delete-service.html">https://docs.aws.amazon.com/cli/latest/reference/servicediscovery/delete-service.html</a></li></ul><h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs run-task --task-definition lexicon-task-definition:6 --cluster lexicon-cluster</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/run-task.html</a></li></ul><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>Assign metadata to AWS resources, this is a array of <code>key|value</code> so you can allocate infrastructure resources.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecs list-tags-for-resource --resource-arn </span><br></pre></td></tr></table></figure><ul><li><a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">https://aws.amazon.com/answers/account-management/aws-tagging-strategies/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Registry</title>
      <link href="/2019/09/aws-elastic-container-registry/"/>
      <url>/2019/09/aws-elastic-container-registry/</url>
      
        <content type="html"><![CDATA[<p>Amazon Elastic Container Registry (ECR) is a fully-managed <a href="https://aws.amazon.com/docker/">Docker</a> container registry that makes it easy for developers to store, manage, and deploy Docker container images.</p><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Create ECR Repository from the AWS Console, example: <code>lexicon-webmvc</code>  </p><ul><li><a href="https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2">https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">000000000000.dkr.ecr.ap-southeast-2.amazonaws.com/lexicon-webmvc</span><br><span class="line">This is the same as a docker hub image: microsoft/mssql-server-linux:2017-CU13</span><br></pre></td></tr></table></figure><h3 id="Push-image-from-Local"><a href="#Push-image-from-Local" class="headerlink" title="Push image from Local"></a>Push image from Local</h3><p><strong>Updated 05/04/2022</strong></p><p>Use the CLI to generate your login command</p><p><strong>CLI V2</strong></p><p><code>get-login-password</code> is the new command and I am piping the response into the next <code>docker login</code> command which is then read with <code>--password-stdin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws --profile carlos ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com</span><br><span class="line">docker tag spa-image:30April2022a 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com/spa-image:latest</span><br><span class="line">docker push 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com/spa-image:latest</span><br></pre></td></tr></table></figure><p><strong>CLI V1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws ecr get-login --no-include-email --region ap-southeast-2</span><br><span class="line">docker login -u AWS -p [MASSIVE ENCRIPTED BLOB] https://000000000000.dkr.ecr.ap-southeast-2.amazonaws.com</span><br><span class="line">docker tag docker-compose-lexicon_lexicon-webmvc 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com/lexicon-webmvc</span><br><span class="line">docker push 000000000000.dkr.ecr.ap-southeast-2.amazonaws.com/lexicon-webmvc</span><br></pre></td></tr></table></figure><p>Now the image will be available at the ECR.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aws.amazon.com/ecr/">https://aws.amazon.com/ecr/</a></li><li><a href="https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2">https://ap-southeast-2.console.aws.amazon.com/ecr/repositories?region=ap-southeast-2</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service - Lexicon from AWS Console</title>
      <link href="/2019/09/aws-elastic-container-service-lexicon-from-aws-console/"/>
      <url>/2019/09/aws-elastic-container-service-lexicon-from-aws-console/</url>
      
        <content type="html"><![CDATA[<p>The <code>Lexicon</code> is an open source project <a href="https://github.com/carlpaton/lexicon">available on GitHub</a>, the steps below setup the infrastructure in AWS using the AWS Console for launch type <code>EC2</code>. There is a <a href="/2019/09/aws-elastic-container-service-stack-overview/">stack overview here</a> that shows how the infrastructure works together. Alternatively this can also be <a href="/2019/09/aws-elastic-container-service-lexicon-from-cli/">done from the CLI</a> where I used the launch type <code>fargate</code>.</p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><p>Login to the Console and search for <code>ECS</code> and select create new cluster.</p><h4 id="Instance-configuration"><a href="#Instance-configuration" class="headerlink" title="Instance configuration"></a>Instance configuration</h4><p>AWS <code>Fargate</code> type is a compute engine that allows you to run <a href="http://aws.amazon.com/what-are-containers">containers</a> without having to manage servers or clusters. For the steps below I used <code>EC2 Linux + Networking</code>. (for reasons :D)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type:                            EC2 Linux + Networking</span><br></pre></td></tr></table></figure><p>This will also create the following resources:</p><ul><li>Cluster</li><li>VPC</li><li>Subnets</li><li>Auto Scaling group with Linux AMI</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cluster name:                    lexicon-cluster</span><br><span class="line">Provisioning Model:              On-Demand Instance</span><br></pre></td></tr></table></figure><p>With On-Demand Instances, you pay for compute capacity by the hour, with no long-term commitments or upfront payments.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EC2 instance type:               m5.large</span><br><span class="line">Instances:                       1</span><br><span class="line">EC2 Ami Id:                      Amazon Linux 2 AMI [ami-0e18747114eff8bce]</span><br><span class="line"> (ECS-optimized AMI)</span><br><span class="line">EBS storage (GiB):               22</span><br><span class="line">Key pair:                        *select if setup on EC2</span><br></pre></td></tr></table></figure><p><code>ami-0e18747114eff8bce</code> is the Amazon Linux AMI 2.0.20190913 x86_64 ECS HVM GP2 Linux Image used for the virtual machine. AMI stands for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">Amazon Machine Image</a>.</p><h4 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h4><p>Configure the VPC for your container instances to use. A VPC is an isolated portion of the AWS cloud populated by AWS objects, such as Amazon EC2 instances. You can choose an existing VPC, or create a new one with this wizard.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VPC:                             *create new</span><br><span class="line">CIDR block:                      10.0.0.0/16</span><br><span class="line">Subnet 1:                        10.0.0.0/24</span><br><span class="line">Subnet 2:                        10.0.1.0/24</span><br><span class="line">Security group:                  *create new</span><br><span class="line">Security group inbound rules:    0.0.0.0/0:80</span><br></pre></td></tr></table></figure><h4 id="Container-instance-IAM-role"><a href="#Container-instance-IAM-role" class="headerlink" title="Container instance IAM role"></a>Container instance IAM role</h4><p>The Amazon ECS container agent makes calls to the Amazon ECS API actions on your behalf, so container instances that run the agent require the ecsInstanceRole IAM policy and role for the service to know that the agent belongs to you. If you do not have the ecsInstanceRole already, we can create one for you.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Container instance IAM role:     ecsInstanceRole</span><br></pre></td></tr></table></figure><h4 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h4><p>These are key value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Description:lexicon</span><br></pre></td></tr></table></figure><h4 id="CloudWatch-Container-Insights"><a href="#CloudWatch-Container-Insights" class="headerlink" title="CloudWatch Container Insights"></a>CloudWatch Container Insights</h4><p>CloudWatch Container Insights is a monitoring and troubleshooting solution for containerized applications and microservices. It collects, aggregates, and summarizes compute utilization such as CPU, memory, disk, and network; and diagnostic information such as container restart failures to help you isolate issues with your clusters and resolve them quickly. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CloudWatch Container Insights:    [X] Enable Container Insights</span><br></pre></td></tr></table></figure><p>Clicking create will then create all of the following resources</p><ul><li>ECS cluster as <code>lexicon-cluster</code></li><li>ECS Instance IAM Policy - IAM Policy for the role ecsInstanceRole is attached</li><li>CloudFormation Stack - <code>EC2ContainerService-lexicon-cluster</code></li></ul><p>Cluster resources</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ECS AMI ID                           ami-0e18747114eff8bce</span><br><span class="line">VPC                                  vpc-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 1                             subnet-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 1 route table association     rtbassoc-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 2                             subnet-0c0c0c0000c00c0cc</span><br><span class="line">Subnet 2 route table association     rtbassoc-0c0c0c0000c00c0cc</span><br><span class="line">VPC Availability Zones               ap-southeast-2a, ap-southeast-2b, ap-southeast-2c</span><br><span class="line">Security group                       sg-0c0c0c0000c00c0cc</span><br><span class="line">Internet gateway                     igw-0c0c0c0000c00c0cc</span><br><span class="line">Route table                          rtb-0c0c0c0000c00c0cc</span><br><span class="line">Amazon EC2 route                     EC2Co-Publi-000000000000</span><br><span class="line">Virtual private gateway attachment   EC2Co-Attac-00000000000</span><br><span class="line">Launch configuration                 EC2ContainerService-lexicon-cluster-EcsInstanceLc-0c0c0c0000c00c0cc</span><br><span class="line">Auto Scaling group                   EC2ContainerService-lexicon-cluster-EcsInstanceAsg-0c0c0c0000c00c0cc</span><br></pre></td></tr></table></figure><h3 id="Task-Definitions"><a href="#Task-Definitions" class="headerlink" title="Task Definitions"></a>Task Definitions</h3><p>From <code>Task Definitions</code> select <code>Create new Task Definition</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Launch type: EC2 </span><br><span class="line">Task Definition Name:             lexicon-definition:6</span><br><span class="line">Requires Compatibilities:         EC2</span><br><span class="line">Task Role:                        ecsTaskExecutionRole</span><br><span class="line">Network Mode:                     default</span><br></pre></td></tr></table></figure><p>If you choose <default>, ECS will start your container using Docker’s default networking mode, which is Bridge on Linux and NAT on Windows. <default> is the only supported mode on Windows.</p><ul><li>For bridge (FARGATE will only have awsvpc)</li></ul><h4 id="Task-execution-IAM-role"><a href="#Task-execution-IAM-role" class="headerlink" title="Task execution IAM role"></a>Task execution IAM role</h4><p>This role is required by tasks to pull container images and publish container logs to Amazon CloudWatch on your behalf. If you do not have the ecsTaskExecutionRole already, we can create one for you.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task execution role:              ecsTaskExecutionRole</span><br></pre></td></tr></table></figure><h4 id="Task-size"><a href="#Task-size" class="headerlink" title="Task size"></a>Task size</h4><p>The task size allows you to specify a fixed size for your task. Task size is required for tasks using the Fargate launch type and is optional for the EC2 launch type. Container level memory settings are optional when task size is set. Task size is not supported for Windows containers.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task memory (GB):                 4096</span><br></pre></td></tr></table></figure><p>The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB, for example 1024, or as a string using GB, for example ‘1GB’ or ‘1 gb’.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task CPU (vCPU):                  2048   (512 = 0.5 vCPU, 1024 = 1 vCPU, 2048 = 2 vCPU)</span><br></pre></td></tr></table></figure><p>The number of CPU units used by the task. It can be expressed as an integer using CPU units, for example 1024, or as a string using vCPUs, for example ‘1 vCPU’ or ‘1 vcpu’.</p><h4 id="Add-Container-WEB"><a href="#Add-Container-WEB" class="headerlink" title="Add Container (WEB)"></a>Add Container (WEB)</h4><p>This is the ASP.NET MVC web application.</p><h5 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container name:          lexicon-web</span><br><span class="line">Image:                   000000000000.dkr.ecr.ap-southeast-2.amazonaws.com/lexicon-test</span><br><span class="line">Memory Limits (MiB):     soft 512</span><br><span class="line">Port mappings:           80 -&gt; 80</span><br></pre></td></tr></table></figure><p>Port mappings: <code>0 -&gt; 80</code> means any from the <code>host</code> to the container on 80. This will however then assign a random port like 32722 which would probably not be open in the security group.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Environment variables:   </span><br><span class="line"></span><br><span class="line">LEXICON_SQL_CONNECTION=Server=@@MACHINE_NAME@@,1433;Database=lexicon;User Id=sa;Password=Password123;</span><br><span class="line"></span><br><span class="line">~ these just check for null, so just set the one you want it to use to `yes`</span><br><span class="line">SUBSTITUTE_LOCAL_IP=</span><br><span class="line">SUBSTITUTE_PUBLIC_IP=yes</span><br></pre></td></tr></table></figure><h5 id="Advanced-container-configuration"><a href="#Advanced-container-configuration" class="headerlink" title="Advanced container configuration"></a>Advanced container configuration</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Essential:               un-check </span><br><span class="line">Log configuration:       [x] Auto-configure CloudWatch Logs</span><br></pre></td></tr></table></figure><p>Essential, if you check this and your process exits, then the entire task is shut down as well. At least one of your containers HAS to have this checked.</p><h4 id="Add-Container-SQL"><a href="#Add-Container-SQL" class="headerlink" title="Add Container (SQL)"></a>Add Container (SQL)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container name:          lexicon-sql</span><br><span class="line">Image:                   microsoft/mssql-server-linux:2017-CU13</span><br><span class="line">Memory Limits (MiB):     soft 2048</span><br><span class="line">Port mappings:           1433 -&gt; 1433</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Environment variables:   </span><br><span class="line"></span><br><span class="line">ACCEPT_EULA=Y</span><br><span class="line">SA_PASSWORD=Password123</span><br></pre></td></tr></table></figure><p>You may also designate AWS Systems Manager Parameter Store keys or ARNs using the ‘valueFrom’ field. ECS will inject the value into containers at run-time.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Essential:               check</span><br><span class="line">Log configuration:       [x] Auto-configure CloudWatch Logs</span><br></pre></td></tr></table></figure><h3 id="Task-run-once-off"><a href="#Task-run-once-off" class="headerlink" title="Task (run once off)"></a>Task (run once off)</h3><ul><li><code>Clusters</code> -&gt; <code>lexicon-cluster</code> -&gt; <code>tasks</code> -&gt; <code>run new task</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Launch type:             EC2</span><br><span class="line">Task Definition:         lexicon-definition:6</span><br><span class="line">Cluster:                 lexicon-cluster</span><br><span class="line">Number of tasks:         1</span><br></pre></td></tr></table></figure><p>Then hit <code>Run Task</code> and wait for the status to change to <code>RUNNING</code></p><ul><li><code>Clusters</code> -&gt; <code>select task</code> -&gt; <code>expand container</code> -&gt; Click external link</li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>You can start from task definition and keep it running as apposed to running the task as <code>once off</code>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/ecs/">https://docs.aws.amazon.com/ecs/</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html#cli-aws-ecs">https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html#cli-aws-ecs</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html">https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service - Lexicon from CLI</title>
      <link href="/2019/09/aws-elastic-container-service-lexicon-from-cli/"/>
      <url>/2019/09/aws-elastic-container-service-lexicon-from-cli/</url>
      
        <content type="html"><![CDATA[<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p><a href="/2019/09/aws-install-and-configure-cli/">Firstly install and configure both the AWSCLI and ECSCLI</a>. </p><p>These are the steps to use the <a href="/2019/09/aws-command-line-interface-overview/">CLI</a> to generate the <a href="/2019/09/aws-elastic-container-service-lexicon/">Lexicon</a> infrastructure with a Fargate Task. All <code>.json</code> configuration files are <a href="https://github.com/carlpaton/AWS">available on github</a>.</p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- Create ECS cluster using config and profile setup from `Prerequisites`</span><br><span class="line">ecs-cli up --cluster-config carl_configuration_name --ecs-profile carl_ecs_cli_profile</span><br><span class="line"></span><br><span class="line">--- Get default security group ID for the VPC. Use the VPC ID from the previous output</span><br><span class="line">aws ec2 describe-security-groups --filters Name=vpc-id,Values=vpc-00000000000000000 --region ap-southeast-2</span><br><span class="line"></span><br><span class="line">--- Security group rule to allow inbound access on port 80</span><br><span class="line">aws ec2 authorize-security-group-ingress --group-id sg-0000000000000000 --protocol tcp --port 80 --cidr 0.0.0.0/0 --region ap-southeast-2</span><br></pre></td></tr></table></figure><h3 id="Compose-File"><a href="#Compose-File" class="headerlink" title="Compose File"></a>Compose File</h3><p>Here you will need <code>subnet ID 1</code>, <code>subnet ID 2</code> and <code>security group ID</code> values which would have been displayed when you ran <code>ecs-cli up</code>. If you cleared the console you can use <code>aws ec2 describe-vpcs</code> and look at the <code>Tags</code> to make an educated guess.</p><ul><li><a href="https://github.com/carlpaton/AWS/blob/master/ec2/ecs/compose/docker-compose.yml">docker-compose.yml</a></li><li><a href="https://github.com/carlpaton/AWS/blob/master/ec2/ecs/compose/ecs-params.yml">ecs-params.yml</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service Stack Overview</title>
      <link href="/2019/09/aws-elastic-container-service-stack-overview/"/>
      <url>/2019/09/aws-elastic-container-service-stack-overview/</url>
      
        <content type="html"><![CDATA[<h3 id="VPC-Virtual-Private-Cloud"><a href="#VPC-Virtual-Private-Cloud" class="headerlink" title="VPC - Virtual Private Cloud"></a>VPC - Virtual Private Cloud</h3><p>A virtual private cloud (VPC) is a virtual network dedicated to your AWS account. It is logically isolated from other virtual networks in the AWS Cloud. You can launch your AWS resources, such as Amazon EC2 instances, into your VPC. A VPC spans all the Availability Zones in the region.</p><p>When you create a VPC, you must specify a range of IPv4 addresses for the VPC in the form of a Classless Inter-Domain Routing (CIDR) block; for example, <code>10.0.0.0/16</code>. This is the primary CIDR block for your VPC.</p><ul><li><a href="https://tools.ietf.org/html/rfc4632">https://tools.ietf.org/html/rfc4632</a></li></ul><p><img src="/d/aws-elastic-container-service-stack-overview/elastic-compute-cloud.png" alt="Amazon Elastic Container Service Stack Overview"></p><p> Amazon just wraps all this up under “Web Servers” in their official diagram</p><p><img src="/d/aws-elastic-container-service-stack-overview/nat-gateway-diagram.png" alt="Amazon Web Servers"></p><ul><li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/images/nat-gateway-diagram.png">https://docs.aws.amazon.com/vpc/latest/userguide/images/nat-gateway-diagram.png</a></li></ul><h3 id="Subnets"><a href="#Subnets" class="headerlink" title="Subnets"></a>Subnets</h3><p>After creating a VPC, you can add one or more subnets in each Availability Zone. When you create a subnet, you specify the CIDR block for the subnet, which is a subset of the VPC CIDR block.</p><ul><li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html</a></li></ul><h3 id="EC2-Elastic-Compute-Cloud"><a href="#EC2-Elastic-Compute-Cloud" class="headerlink" title="EC2 - Elastic Compute Cloud"></a>EC2 - Elastic Compute Cloud</h3><p>Amazon Elastic Compute Cloud (EC2) gives you a platform for your infrastructure to live in. The below is a high level diagram showing the structure and relationships. For access you will need to create an account at <a href="https://aws.amazon.com/">https://aws.amazon.com/</a></p><ul><li><a href="https://aws.amazon.com/ec2/">https://aws.amazon.com/ec2/</a></li></ul><h3 id="ECS-Elastic-Container-Service"><a href="#ECS-Elastic-Container-Service" class="headerlink" title="ECS - Elastic Container Service"></a>ECS - Elastic Container Service</h3><p>This is the AWS container orchestration service that supports <a href="https://www.docker.com/">Docker</a>.</p><ul><li><a href="https://aws.amazon.com/ecs/">https://aws.amazon.com/ecs/</a></li></ul><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><ul><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create_cluster.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create_cluster.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html</a></li></ul><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Start from task definition and keep it running.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>You can manually run a task from a task definition but its best to use a <code>Service</code> to keep it running. A <code>Task</code> is a running collection of docker containers.</p><ul><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task_definitions.html">https://docs.aws.amazon.com/AmazonECS/latest/userguide/task_definitions.html</a></li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><a href="https://www.docker.com/">Docker</a> container spun up from its image.</p>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Container Service Simple Demo</title>
      <link href="/2019/09/aws-elastic-container-service-simple-demo/"/>
      <url>/2019/09/aws-elastic-container-service-simple-demo/</url>
      
        <content type="html"><![CDATA[<p>This runs on top of Amazon Elastic Compute Cloud (Amazon EC2) and the steps below follow the AWS GUI (graphical user interface). I learnt most of the content below by following <a href="https://www.linkedin.com/in/arthur-ulfeldt-5150aa5/">Arthur Ulfeldt</a>‘s tutorial <a href="https://www.lynda.com/Docker-tutorials/Welcome/606069/643348-4.html">Deploying Docker to AWS</a>.</p><p>This demo will simply write the current datetime to a volume using the busybox image, the container is called <code>data-source</code>. Another container running nginx will then display this data, this container is called <code>data-server</code>.</p><p><img src="/d/aws-elastic-container-service-simple-demo/overview.jpg" alt="Simple Demo Infrastructure Overview"></p><p>Calling <code>data-server</code> on its public IP will then display as follows:</p><p><img src="/d/aws-elastic-container-service-simple-demo/simple-demo.jpg" alt="nginx data-server"></p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Create your account at <a href="https://aws.amazon.com/">https://aws.amazon.com/</a> login and under <code>AWS Management Console</code> type or look for <code>ECS</code>, this will take you to the <code>ECS Dashboard</code> </p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><p>Create cluster type of launch type <code>FARGATE</code>, it may be called something like <code>Networking only</code> and mention <code>Powered by AWS Fagate</code> - things in IT change daily :)</p><ul><li>Cluster name: <code>simple-demo2</code></li><li>Check <code>Create VPC</code></li><li>Tag: Description|simple-demo2 (this is the key|value)</li><li>Check <code>Enable container insights</code> for CloudWatch</li><li>From the <a href="/2019/09/aws-command-line-interface/">CLI</a> you can view all clusters:</li></ul><h3 id="Task-Definition"><a href="#Task-Definition" class="headerlink" title="Task Definition"></a>Task Definition</h3><p>Select <code>Task Definitions</code> -&gt; <code>Create new Task Definition</code></p><ul><li>Select the <code>FARGATE</code> template</li><li>Task Definition Name: task-definition-data-server</li><li>Requires Compatibilities: FARGATE</li><li>Task Role: escTaskExecutionRole</li><li>Network Mode: awsvpc</li><li>Task execution role: ecsTaskExecutionRole</li><li>Task memory (GB): 0.5GB</li><li>Task CPU (vCPU): 0.25 vCPU</li></ul><p>Volumes:</p><ul><li>create one called <code>shared-data</code></li></ul><p>CONTAINER 1</p><ul><li>Container name: <code>data-source</code></li><li>Image: busybox</li><li>Memory Limits (MiB): 128</li><li>Entry point:     <code>sh, -c, while true; do echo $(date) &gt; /shared-data/index.html; sleep 5; done</code></li><li>Mount points: select source volume, and set the path <code>/shared-data</code> to match the shell script</li><li>Log configuration: check Auto-configure CloudWatch Logs</li></ul><p>CONTAINER 2</p><ul><li>Container name: <code>data-server</code></li><li>Image: nginx</li><li>Memory Limits (MiB): 128</li><li>Port mappings: 0 -&gt; 80</li><li>Mount points: select source volume, and set the path <code>/usr/share/nginx/html</code></li></ul><h3 id="Run-Task"><a href="#Run-Task" class="headerlink" title="Run Task"></a>Run Task</h3><p>Now manually run the above task definition from <code>Tasks</code> tab, <code>Run new Task</code>.</p><p>Once it starts up select the running task, copy its <code>Public IP</code> into a browsers and you should see the current time update every 5 seconds. Per the image above this <code>IP</code> was <code>3.104.47.134</code></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.lynda.com/Docker-tutorials/Welcome/606069/643348-4.html">https://www.lynda.com/Docker-tutorials/Welcome/606069/643348-4.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Install &amp; Configure CLI</title>
      <link href="/2019/09/aws-install-and-configure-cli/"/>
      <url>/2019/09/aws-install-and-configure-cli/</url>
      
        <content type="html"><![CDATA[<h3 id="IAM-Overview"><a href="#IAM-Overview" class="headerlink" title="IAM Overview"></a>IAM Overview</h3><p>It is not reccomended to use the <code>rootuser</code> for any workloads/CLI/SDK access, rather setup a <code>IAM users</code> and grant access either by policy (single rule) or role. Think of a role as a hat that the user can wear to then have access to resources.</p><blockquote><p>“An IAM role is an IAM identity that you can create in your account that has specific permissions. An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS.”</p></blockquote><blockquote><p>“A role is intended to be assumable by anyone or thing who needs it.”</p></blockquote><blockquote><p>“An IAM role is similar to a user in that it is an AWS identity with permissions policies that determine what the identity can and cannot do in AWS. A role is intended to be assumable by anyone or thing who needs it. A role does not have standard long-term credentials (password or access keys) associated with it. Instead, if a user assumes a role, temporary security credentials are created dynamically and provided to the user.”</p></blockquote><p><img src="/d/aws-install-and-configure-cli/iam-overview.jpg" alt="IAM Overview"></p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>To configure the below you will need  the required <code>access key id</code> and  <code>secret access key</code> which you can get from the <a href="https://console.aws.amazon.com/iam/home?region=ap-southeast-2#/home">AWS AMI Console</a> (Identity and Access Management) you will need to be logged in. Any commands that point to a <code>.json</code> configuration file are <a href="https://github.com/carlpaton/AWS">available on github</a>.</p><h3 id="AWSCLI"><a href="#AWSCLI" class="headerlink" title="AWSCLI"></a>AWSCLI</h3><p><strong>Updated 05/03/2022</strong></p><ol><li>Install using the CLI</li></ol><ul><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html</a></li></ul><p>This will live in <code>C:\Program Files\Amazon\AWSCLI</code> and should then work from any terminal.</p><ol start="2"><li>Check version</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --version</span><br></pre></td></tr></table></figure><p>This could show v1 or v2 - I had to uninstall v1 to get v2 to work, there may be a switcher as v2 have breaking changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws-cli/1.21.7 Python/3.6.0 Windows/10 botocore/1.22.7</span><br><span class="line">aws-cli/2.4.23 Python/3.8.8 Windows/10 exe/AMD64 prompt/off</span><br></pre></td></tr></table></figure><ol start="3"><li>Configure with the keys you got from the IAM  in the amazon console.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; aws configure</span><br><span class="line">AWS Access Key ID [None]: HOEHOEHOEHOHEOHEOHE</span><br><span class="line">AWS Secret Access Key [None]: HO/hehOehoHEOHEhohEOHeohEOH+EohOEe</span><br><span class="line">Default region name [None]: ap-southeast-2</span><br><span class="line">Default output format [None]:</span><br></pre></td></tr></table></figure><p>This creates these text files in the following location:</p><ul><li><code>%USERPROFILE%\.aws\credentials</code> (windows)</li><li><code>~/.aws/credentials</code> (linux)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~ C:\Users\[USERNAME]\.aws\credentials</span><br><span class="line">[default]</span><br><span class="line">aws_access_key_id = HOEHOEHOEHOHEOHEOHE                    </span><br><span class="line">aws_secret_access_key = HO/hehOehoHEOHEhohEOHeohEOH+EohOEe</span><br></pre></td></tr></table></figure><ul><li><code>%USERPROFILE%\.aws\config</code> (windows)</li><li><code>~/.aws/config</code> (linux)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ C:\Users\[USERNAME]\.aws\config </span><br><span class="line">[default]</span><br><span class="line">region = ap-southeast-2</span><br></pre></td></tr></table></figure><ol start="4"><li>Then you can test it works</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws iam list-roles</span><br></pre></td></tr></table></figure><ol start="5"><li>Create the task execution IAM role</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--- Create the task execution role</span><br><span class="line">C:\dev\aws\ami&gt;</span><br><span class="line">aws iam --region ap-southeast-2 create-role --role-name ecsTaskExecutionRole --assume-role-policy-document file://task-execution-assume-role.json</span><br><span class="line"></span><br><span class="line">--- Attach the task execution role policy</span><br><span class="line">aws iam --region ap-southeast-2 attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy</span><br></pre></td></tr></table></figure><h4 id="More-than-one-profile"><a href="#More-than-one-profile" class="headerlink" title="More than one profile"></a>More than one profile</h4><p>As I have more than one profile I use <code>--profile carlos</code> this means my default profile is not used</p><p>config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">region = us-west-2</span><br><span class="line"></span><br><span class="line">[profile carlos]</span><br><span class="line">region = ap-southeast-2</span><br><span class="line"></span><br><span class="line">[profile localstack]</span><br><span class="line">region = us-east-1</span><br></pre></td></tr></table></figure><p>credentials</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id = ACB </span><br><span class="line">aws_secret_access_key = abcdef</span><br><span class="line"></span><br><span class="line">[carlos]</span><br><span class="line">aws_access_key_id = HIJ</span><br><span class="line">aws_secret_access_key = hijklm</span><br><span class="line"></span><br><span class="line">[localstack]</span><br><span class="line">aws_access_key_id = dummyaccess</span><br><span class="line">aws_secret_access_key = dummysecret</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html</a></li></ul><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://docs.aws.amazon.com/sdk-for-net/latest/developer-guide/creds-file.html">https://docs.aws.amazon.com/sdk-for-net/latest/developer-guide/creds-file.html</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users">https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html</a></li></ul><h3 id="ECSCLI-Elastic-Container-Service"><a href="#ECSCLI-Elastic-Container-Service" class="headerlink" title="ECSCLI (Elastic Container Service)"></a>ECSCLI (Elastic Container Service)</h3><p>This will live in <code>C:\Program Files\Amazon\ECSCLI</code></p><ol><li>Run windows powersell as administrator</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--- create folder</span><br><span class="line">New-Item C:\Program Files\Amazon\ECSCLI -type directory</span><br><span class="line"></span><br><span class="line">--- install</span><br><span class="line">Invoke-WebRequest -OutFile ‘C:\Program Files\Amazon\ECSCLI\ecs-cli.exe’ https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-windows-amd64-latest.exe</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Edit the environment variables and add <code>C:\Program Files\Amazon\ECSCLI</code> to the <code>PATH</code> variable field</p></li><li><p>Restart powersell  and check version</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ecs-cli --version</span><br></pre></td></tr></table></figure><ol start="4"><li>Configure with the same keys used above</li></ol><p>I used the profile names <code>carl_ecs_cli_profile</code> and <code>carl_configuration_name</code> below when setting up <a href="/2019/09/aws-elastic-container-service-lexicon-from-cli/">ECS for the Lexicon via the AWS CLI</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ecs-cli configure profile --profile-name carl_ecs_cli_profile --access-key HOEHOEHOEHOHEOHEOHE --secret-key HO/hehOehoHEOHEhohEOHeohEOH+EohOEe</span><br><span class="line"></span><br><span class="line">ecs-cli configure --cluster ClusterName1 --default-launch-type FARGATE --region ap-southeast-2 --config-name carl_configuration_name</span><br></pre></td></tr></table></figure><p>Note that <code>--cluster</code> needs to satisfy regular expression pattern: <code>[a-zA-Z][-a-zA-Z0-9]*</code></p><p>This creates these files which you can edit with any text editor.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ C:\Users\[USERNAME]\AppData\Local\ecs\config</span><br><span class="line">: carl_configuration_name</span><br><span class="line"></span><br><span class="line">~ C:\Users\[USERNAME]\AppData\Local\ecs\credentials </span><br><span class="line">: carl_ecs_cli_profile</span><br></pre></td></tr></table></figure><h3 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html#install-msi-on-windows">https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html#install-msi-on-windows</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_Configuration.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_Configuration.html</a></li><li><a href="https://console.aws.amazon.com/iam/">https://console.aws.amazon.com/iam/</a></li><li><a href="https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/tkv-create-ami-from-instance.html">https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/tkv-create-ami-from-instance.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML comments</title>
      <link href="/2019/09/c-sharp-xml-comments/"/>
      <url>/2019/09/c-sharp-xml-comments/</url>
      
        <content type="html"><![CDATA[<p>XML documentation comments are a special kind of comment, added above the definition of any user-defined type or member.</p><p>Once you enable <code>GenerateDocumentationFile</code> (I did it from the IDE which added this <code>GenerateDocumentationFile</code>  element to my .cspoj file) you will need to <code>inheritdoc</code> to derived classes. This is applicable when using a base class or interfaces.</p><p>The steps for VS 2017 was properties (from project) -&gt; build -&gt; output -&gt; check <code>XML documentation file</code></p><h3 id="inheritdoc"><a href="#inheritdoc" class="headerlink" title="inheritdoc"></a>inheritdoc</h3><p>Example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Some ISweet related comment</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISweet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Some Foo related comment</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Foo</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sweet</span> : <span class="title">ISweet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Foo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do foo things!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/codedoc">https://docs.microsoft.com/en-us/dotnet/csharp/codedoc</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/inheritdoc">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/inheritdoc</a></li></ul><h3 id="cref"><a href="#cref" class="headerlink" title="cref"></a>cref</h3><p>The cref attribute in an XML documentation tag means “code reference.”</p><p>Link to some code:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> It does the thing</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> This will link to the `SomeFooClass` class - <span class="doctag">&lt;see cref=&quot;SomeFooClass&quot;/&gt;</span>.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Foo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do foo things!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Its also helpful to link to exceptions, here the constructor links to the class <code>FooValidationException</code> which is a validation execption.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> It does the thing</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;foo1&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;FooValidationException&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Foo</span>(<span class="params"></span></span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/cref-attribute">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/cref-attribute</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE Rider</title>
      <link href="/2019/09/ide-rider/"/>
      <url>/2019/09/ide-rider/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Fuzzy search</span><br><span class="line">    - Alt+up                                          history</span><br><span class="line">    - Alt+Enter                                       add shortcuts</span><br><span class="line"></span><br><span class="line">- Mercurial</span><br><span class="line">    - Alt+a                                           annotation</span><br><span class="line">    - Ctrl+h                                          show history</span><br><span class="line">    - Ctrl+d                                          show changes</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.jetbrains.com/rider/">https://www.jetbrains.com/rider/</a></li><li><a href="https://www.youtube.com/embed/mTW_BUUKKRM?autoplay=1">https://www.youtube.com/embed/mTW_BUUKKRM?autoplay=1</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE Visual Studio Code</title>
      <link href="/2019/09/ide-visual-studio-code/"/>
      <url>/2019/09/ide-visual-studio-code/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 04/03/2025</strong></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+P                                              Quick Open, Go to File…</span><br><span class="line">Ctlf+Shift+P                                        Commands</span><br></pre></td></tr></table></figure><ul><li><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code format</a></p><ul><li>opinionated code formatter</li></ul></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=medo64.render-crlf">Render Line Endings</a></p><ul><li>Displays the line ending symbol and optionally extra whitespace when ‘Render whitespace’ is turned on.</li><li>If whitespace rendering is turned on, you will see the symbol for either LF (↓), CRLF (↵), or CR (←).</li></ul></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a></p><ul><li>Should then use <code>.editorconfig</code></li></ul></li></ul><p>Older ones I dont use anymore</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin">TSLint</a><ul><li>Adds tslint to VS Code using the TypeScript TSLint language service plugin.</li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest">Jest</a><ul><li>Test player &amp; debugger </li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare">VS Live Share</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-audio">VS Live Share Audio</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a></li></ul><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>File -&gt; Preferences -&gt; Settings -&gt; Under user settings click the ellipses … in the top right -&gt; Select ‘Open settings.json’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Show white space                    “editor.renderWhitespace”: “all”</span><br><span class="line">Auto save                           “files.autoSave”: “afterDelay”</span><br><span class="line">Explorer                            “explorer.autoReveal”: true</span><br><span class="line">format on save                      true</span><br></pre></td></tr></table></figure><p>Configure default formatter after installing prettier -&gt; <code>Ctlf+Shift+P</code> -&gt; <code>Format Document</code> -&gt; warns there are multiple formatters -&gt; configure -&gt; choose <code>prettier</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE Visual Studio</title>
      <link href="/2019/09/ide-visual-studio/"/>
      <url>/2019/09/ide-visual-studio/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CRTL+T                                           Got to all</span><br></pre></td></tr></table></figure><ul><li><a href="https://devblogs.microsoft.com/wp-content/uploads/sites/4/2019/03/vskeyboard.pdf">https://devblogs.microsoft.com/wp-content/uploads/sites/4/2019/03/vskeyboard.pdf</a></li></ul><h3 id="Built-in-tools"><a href="#Built-in-tools" class="headerlink" title="Built in tools"></a>Built in tools</h3><ul><li><a href="https://blogs.msdn.microsoft.com/devops/2016/07/15/7-ways-to-look-at-the-values-of-variables-while-debugging-in-visual-studio/">Autos, Locals</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/viewing-the-call-stack-in-visual-studio">Call Stack</a></li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=TomasRestrepo.Viasfora">Viasfora</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AddNewFile">Add New File</a></li><li><a href="https://www.jetbrains.com/resharper/">resharper</a>, <a href="https://www.jetbrains.com/dotcover/">dotcover</a>, <a href="https://www.jetbrains.com/decompiler/">dotpeek</a></li></ul><h3 id="Code-Snippets"><a href="#Code-Snippets" class="headerlink" title="Code Snippets"></a>Code Snippets</h3><ul><li><a href="https://gist.github.com/charleyza/77ae278b904cab2a19423809a69c2c67">unittest.snippet</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.visualstudio.com/downloads/">https://www.visualstudio.com/downloads/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE WebStorm</title>
      <link href="/2019/09/ide-webstorm/"/>
      <url>/2019/09/ide-webstorm/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/05/ide-editor-and-database-tools/">Also see IDE, Editor and Database Tools</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+/                                     Add/remove line or block comment</span><br><span class="line">Ctrl+Shift+f                               Find in Path</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.jetbrains.com/help/webstorm/mastering-keyboard-shortcuts.html">https://www.jetbrains.com/help/webstorm/mastering-keyboard-shortcuts.html</a></li><li><a href="https://www.jetbrains.com/webstorm/download/#section=windows">Webstorm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Objectives</title>
      <link href="/2019/08/objectives/"/>
      <url>/2019/08/objectives/</url>
      
        <content type="html"><![CDATA[<p>Objectives are specific results that you or your team wish to achieve within a time frame using the resources available. These are generally more specific and easier to measure than goals as they can be both short and long term.</p><p>Objectives can be used to create policy and evaluate performance by ticking off key results. To successfully make use of objectives to up-skill staff they need to check most of these boxes:</p><ul><li>Align to company values and objectives</li><li>Finite, so limited in size and scope with suggested periods of short term (3 months)  or long term (6 months)</li><li>Documented and tracked as visibility is key. This can be done with <code>small improvements</code></li><li>Continually improved upon and spoken about, this can be done in a bi-weekly catchup with your people leader / manager or chapter lead. </li></ul><h3 id="Objective-Sweet-Spot"><a href="#Objective-Sweet-Spot" class="headerlink" title="Objective Sweet Spot"></a>Objective Sweet Spot</h3><p>Further to the above to be well balanced, objectives need to be in the sweet spot between the <code>Company Strategy</code>, your <code>Now skills</code> and your own <code>Personal growth</code></p><p><img src="/d/objectives/objective-sweet-spot.jpg" alt="Well balanced objectives"></p><h3 id="Clarifying-the-objective"><a href="#Clarifying-the-objective" class="headerlink" title="Clarifying the objective"></a>Clarifying the objective</h3><p>This is where you want to get to.</p><ul><li>What do you want to achieve with an ideal outcome?</li><li>What do you want to change or improve on?</li><li>Why this objective, what value will it bring?</li><li>What will success look like?</li><li>What would the benefits of achieving this objective be<ul><li>For the team / company?</li><li>For growing your current skill set?</li><li>For long term growth?</li></ul></li><li>Looking 6 months ahead, what would you like to see happening?</li></ul><h3 id="What-you-already-bring-to-the-table"><a href="#What-you-already-bring-to-the-table" class="headerlink" title="What you already bring to the table"></a>What you already bring to the table</h3><p>These are existing strengths and areas you need to develop.</p><ul><li>What are you already doing that already contributes to this objective?</li><li>What is going well and what are the challenges?</li><li>What is currently in place to promote success and what affect is it having?</li><li>What is currently in place that gets in the way of success and what affect is it having?</li><li>Where are you right now in relation to the objective?</li><li>What progress have you made so far?</li><li>Which of your peers have had a similar objective that you can learn from?</li><li>What have you already tried? </li></ul><h3 id="Documenting"><a href="#Documenting" class="headerlink" title="Documenting"></a>Documenting</h3><p>Once you have identified the objective an approach to start documenting it and noting the key results could be to use a <code>70:20:10</code> split. This is 70% experimental, 20% social and 10% formal.</p><ul><li>70%  experimental, this is 7 points around the objective which include key results, technologies used and action items to help achieve the objective. </li><li>20 % social, this is 2 people that will help you with your objective. These can be anybody with domain knowledge around the objective. They need to know you have chosen then and be willing to help.</li><li>10% formal, this is training and can be lectures or formal discussions or simply <a href="/2019/01/online-learning-portals/">online training</a>.</li></ul><p>The above can be visually drawn as shown below, this was an objective to build a <code>Lexicon Manager</code> which is used to manage a company’s copy / microcopy. This is the actual text displayed on platforms such as desktop website or native mobile phone app.</p><p><img src="/d/objectives/objective-documenting.jpg" alt="Objective documenting"></p><p>From the above the 70% experimental column shown on the left can be grouped as:</p><ul><li>Key Results<ul><li>Company gains an asset</li><li>Code speak around containers</li></ul></li><li>Technologies used<ul><li>Amazon ECS</li><li>Docker compose &amp; Powershell</li><li>Code repository, <a href="https://github.com/carlpaton/lexicon">I released this project open source to GIT</a>.</li></ul></li><li>Documentation<ul><li>Gathering requirements</li><li>Actual documentation on wiki, share or presentation.</li></ul></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.businessdictionary.com/definition/objective.html">http://www.businessdictionary.com/definition/objective.html</a></li><li><a href="https://www.small-improvements.com/">https://www.small-improvements.com/</a></li><li><a href="https://github.com/carlpaton/lexicon">https://github.com/carlpaton/lexicon</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Text Files</title>
      <link href="/2019/07/reading-text-files/"/>
      <url>/2019/07/reading-text-files/</url>
      
        <content type="html"><![CDATA[<p>The simplest way to do this is to use the .Net framework classes: <code>System.IO.File</code></p><h3 id="ReadAllText"><a href="#ReadAllText" class="headerlink" title="ReadAllText"></a>ReadAllText</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filePath = <span class="string">@&quot;C:\Users\cpaton\Downloads\hoehoe.txt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> jsonText = File.ReadAllText(filePath);</span><br></pre></td></tr></table></figure><h3 id="ReadLines"><a href="#ReadLines" class="headerlink" title="ReadLines"></a>ReadLines</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filePath = <span class="string">@&quot;C:\Users\cpaton\Downloads\hoehoe.txt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> lines = File.ReadLines(filePath);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> lines) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//foo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Write To Text Files</title>
      <link href="/2019/07/write-to-text-files/"/>
      <url>/2019/07/write-to-text-files/</url>
      
        <content type="html"><![CDATA[<h3 id="StreamWriter"><a href="#StreamWriter" class="headerlink" title="StreamWriter"></a>StreamWriter</h3><p>This will append to the file at <code>filePath</code> and use <code>Newtonsoft.Json</code> to serialize the data to JSON in <code>someObject</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(filePath, <span class="literal">true</span>, Encoding.ASCII)) </span><br><span class="line">&#123;</span><br><span class="line">sw.Write(JsonConvert.SerializeObject(someObject));</span><br><span class="line">sw.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N-Tier Architecture</title>
      <link href="/2019/07/n-tier-architecture/"/>
      <url>/2019/07/n-tier-architecture/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“N-tier architecture is also called multi-tier architecture because the software is engineered to have the processing, data management, and presentation functions physically and logically separated.  That means that these different functions are hosted on several machines or clusters, ensuring that services are provided without resources being shared and, as such, these services are delivered at top capacity.  The “N” in the name n-tier architecture refers to any number from 1.”</p></blockquote><p>Also see <a href="/2019/12/web-application-architecture/">Web Application Architecture</a></p><h3 id="Application-Architecture-2-Layer"><a href="#Application-Architecture-2-Layer" class="headerlink" title="Application Architecture : 2 Layer"></a>Application Architecture : 2 Layer</h3><p><strong>Web UI &amp; Web API</strong></p><ul><li>Mocking is needed for both <code>Data</code> and <code>Business</code> however both UI and API use models from <code>Core.Entities</code> which were mapped in <code>Data</code>/<code>Business</code>.</li></ul><p><strong>Business</strong></p><ul><li>Will mostly have pure functions with the exeption of probably <code>DateTime</code> related functions.</li><li>Knows nothing about the <code>Data</code> module so no mocking is needed for unit tests in the </li></ul><p><img src="/d/n-tier-architecture/2-layer-architecture.jpg" alt="Application Architecture : 2 Layer"></p><h3 id="Application-Architecture-nLayer"><a href="#Application-Architecture-nLayer" class="headerlink" title="Application Architecture : nLayer"></a>Application Architecture : nLayer</h3><p><strong>Web UI &amp; Web API</strong></p><ul><li>No mocking is needed for <code>Data</code> only business, if a repository from <code>Data</code> is injected this is considered an <code>END RUN</code></li></ul><p><strong>Business</strong></p><ul><li>Mocking is needed for data, should accept and respond with <code>Core.Entities</code></li></ul><p><img src="/d/n-tier-architecture/n-layer-architecture.jpg" alt="Application Architecture : nLayer"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier">https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/">https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends</a></li><li><a href="https://stackify.com/n-tier-architecture/">https://stackify.com/n-tier-architecture/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wing Joiner</title>
      <link href="/2019/07/wing-joiner/"/>
      <url>/2019/07/wing-joiner/</url>
      
        <content type="html"><![CDATA[<p>Sweet wing joiner idea for my 60 size trainer by Grant from <a href="http://www.hangarone.co.nz/">http://www.hangarone.co.nz/</a></p><p><img src="/d/wing-joiner/wing-joiner.jpg" alt="Sweet Wing Joiner"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://drive.google.com/open?id=1sAs48H-vOKjOjf2cU_3GZ-fV7ceqFMmD">https://drive.google.com/open?id=1sAs48H-vOKjOjf2cU_3GZ-fV7ceqFMmD</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebForms Load File</title>
      <link href="/2019/07/web-forms-load-file/"/>
      <url>/2019/07/web-forms-load-file/</url>
      
        <content type="html"><![CDATA[<p>Although MVC is my framework of choice Legacy <code>WebForms</code> applications still exist in the world.</p><h3 id="ASPX-file"><a href="#ASPX-file" class="headerlink" title=".ASPX file"></a>.ASPX file</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>File<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">asp:FileUpload</span> <span class="attr">id</span>=<span class="string">&quot;FileUploadControl&quot;</span> <span class="attr">runat</span>=<span class="string">&quot;server&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form form-buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">&quot;ImportButton&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;Import&quot;</span> <span class="attr">runat</span>=<span class="string">&quot;server&quot;</span> <span class="attr">OnClick</span>=<span class="string">&quot;ImportButton_Click&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Code-Behind"><a href="#Code-Behind" class="headerlink" title="Code Behind"></a>Code Behind</h3><p>Here <code>_importFromExcelFileService</code> is the injected service.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ImportButton_Click </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">if</span> (<span class="params">!Validation(</span>))</span></span><br><span class="line"><span class="function"><span class="keyword">return</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> savePath = _importFromExcelFileService.SaveFile(FileUploadControl, Server);</span><br></pre></td></tr></table></figure><p>Validation method to separate the concearns using the same <code>_importFromExcelFileService</code> service.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Validation</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> validationMessage = _importFromExcelFileService.Validate(FileUploadControl);</span><br><span class="line"><span class="keyword">if</span> (validationMessage != <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Tools.ShowMessage(message, validationMessage, messageType.red);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Although this did create a dependancys on <code>System.Web.UI.WebControls.FileUpload</code> and <code>System.IO.FileInfo</code> I felt this to be a better design.</p><p>Its possible to mock these with <code>SystemWrapper</code> ~ <a href="https://stackoverflow.com/questions/1582596/how-do-i-moq-the-system-io-fileinfo-class-or-any-other-class-without-an-inter">https://stackoverflow.com/questions/1582596/how-do-i-moq-the-system-io-fileinfo-class-or-any-other-class-without-an-inter</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImportFromExcelFileService</span> : <span class="title">IImportFromExcelFileService</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _allowedExtension = <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SaveFile</span>(<span class="params">FileUpload fileUploadControl, HttpServerUtility server</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> filename = Path.GetFileName(fileUploadControl.FileName);</span><br><span class="line"><span class="keyword">var</span> path = server.MapPath(<span class="string">&quot;~/WhyIsThisNotBeingReadFromConfig/Tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Directory.Exists(path))</span><br><span class="line">Directory.CreateDirectory(path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> savePath = Path.Combine(path, Guid.NewGuid() + filename);</span><br><span class="line">fileUploadControl.SaveAs(savePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Validate</span>(<span class="params">FileUpload fileUploadControl</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!fileUploadControl.HasFile)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Please select a file.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI -_-</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> FileInfo(fileUploadControl.FileName).Extension != _allowedExtension)</span><br><span class="line"><span class="keyword">return</span> <span class="string">$&quot;Please supply a file in the format <span class="subst">&#123;_allowedExtension&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Futaba 10j</title>
      <link href="/2019/07/futaba-10j/"/>
      <url>/2019/07/futaba-10j/</url>
      
        <content type="html"><![CDATA[<h3 id="Aux-Chan"><a href="#Aux-Chan" class="headerlink" title="Aux-Chan"></a>Aux-Chan</h3><p>To assign a switch to a channel, here I use CH6 / SwC for flaps.</p><p><code>Menu 1</code> – <code>AUX-CHAN</code> – <code>CH6</code> – <code>SwC</code></p><ul><li>Manual page 56</li></ul><h3 id="End-Point"><a href="#End-Point" class="headerlink" title="End Point"></a>End Point</h3><p>To set servo end points if they are mechanically too far for the current TX/RX.</p><p><code>Menu 1</code> – <code>END POINT</code> – <code>6:FLP</code> (on pg2) – <code>&lt;-</code> =72</p><ul><li>Manual page 112</li></ul><h3 id="Dual-Rate-EXPO"><a href="#Dual-Rate-EXPO" class="headerlink" title="Dual Rate / EXPO"></a>Dual Rate / EXPO</h3><p><code>Menu 3</code> – <code>D/R EXPO</code></p><p>These are conservative settings that worked well with my apprentice and H9-40 stick.</p><table><thead><tr><th>Channel</th><th>Function</th><th>Low</th><th>High</th></tr></thead><tbody><tr><td>1</td><td>D/R</td><td>40%</td><td>70%</td></tr><tr><td>1</td><td>EXP</td><td>-30%</td><td>-40%</td></tr><tr><td>2</td><td>D/R</td><td>45%</td><td>65%</td></tr><tr><td>2</td><td>EXP</td><td>-30%</td><td>-40%</td></tr><tr><td>4</td><td>D/R</td><td>60%</td><td>100%</td></tr><tr><td>4</td><td>EXP</td><td>-40%</td><td>-70%</td></tr></tbody></table><ul><li>Manual page 104</li></ul><h3 id="Run-ailerons-on-their-own-channels"><a href="#Run-ailerons-on-their-own-channels" class="headerlink" title="Run ailerons on their own channels"></a>Run ailerons on their own channels</h3><p>Ailerons are normally run on a Y-Lead on channel 1 but they can be run on their own channels (1 and 6)</p><ol><li>Enable <code>FLAPARONS</code> (Menu 3), this mixes 1 &amp; 6 in opposite directions.</li></ol><h3 id="Mixing-flaps-to-work-with-ailerons"><a href="#Mixing-flaps-to-work-with-ailerons" class="headerlink" title="Mixing flaps to work with ailerons"></a>Mixing flaps to work with ailerons</h3><p>My <code>H9-40 sticks</code> flaps travel was the same as the ailerons so this would effectively create larger ailerons.</p><ol><li><p>Set all <code>AUX-CHAN</code> 5 to 10 to NULL, this released/centered the servos</p></li><li><p>Enable <code>FLAPARONS</code> (Menu 3), this mixed 1 &amp; 6 in opposite directions (Could also be done with mixing)</p></li><li><p>Enable under menu 1 <code>P.MIX 1-6</code> two mixes</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NOR 1 AIL-&gt;GER</span><br><span class="line">      RATE 100%</span><br><span class="line">  MASTER AIL</span><br><span class="line">  SLAVE GER</span><br><span class="line"></span><br><span class="line">NOR 2 AIL-&gt;AUX  </span><br><span class="line">      RATE 100%</span><br><span class="line">  MASTER AIL</span><br><span class="line">  SLAVE AUX (ch8)</span><br></pre></td></tr></table></figure><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><table><thead><tr><th>Channel</th><th>Timber</th><th>H9-40</th></tr></thead><tbody><tr><td>1</td><td>Aileron (Y-reverese-cable)</td><td>Left Aileron</td></tr><tr><td>2</td><td>Elevator</td><td>Elevator</td></tr><tr><td>3</td><td>Throttle</td><td>Throttle</td></tr><tr><td>4</td><td>Rudder</td><td>Rudder</td></tr><tr><td>5</td><td>NULL</td><td>Left Flap (GER)</td></tr><tr><td>6</td><td>Flaps (Y-straight-cable) on SwC</td><td>NULL</td></tr><tr><td>7</td><td>NULL</td><td>Right Aileron</td></tr><tr><td>8</td><td>NULL</td><td>Right Flap</td></tr><tr><td>9</td><td>NULL</td><td>NULL</td></tr><tr><td>10</td><td>NULL</td><td>NULL</td></tr></tbody></table><h3 id="Switches"><a href="#Switches" class="headerlink" title="Switches"></a>Switches</h3><table><thead><tr><th>Switch Letter</th><th>Timber</th><th>H9-40</th></tr></thead><tbody><tr><td>A</td><td>Elevator dual rate</td><td>Elevator dual rate</td></tr><tr><td>B</td><td>Rudder dual rate</td><td>Rudder dual rate</td></tr><tr><td>C</td><td>Flaps half/full</td><td>NULL</td></tr><tr><td>D</td><td>Aileron dual rates</td><td>Aileron dual rates</td></tr><tr><td>E</td><td>NULL</td><td>NULL</td></tr><tr><td>F</td><td>NULL</td><td>NULL</td></tr><tr><td>G</td><td>NULL</td><td>NULL</td></tr><tr><td>H</td><td>NULL</td><td>NULL</td></tr><tr><td>VR</td><td>NULL</td><td>Ignition On</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular expressions</title>
      <link href="/2019/07/regex/"/>
      <url>/2019/07/regex/</url>
      
        <content type="html"><![CDATA[<h3 id="Matching-in-a-query-string-parameter"><a href="#Matching-in-a-query-string-parameter" class="headerlink" title="Matching in a query string parameter"></a>Matching in a query string parameter</h3><p>I feel documentation on any regex is important and they are super hard to read / understand.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// $                                        -&gt; String interpolation</span><br><span class="line">/// @&quot;                                       -&gt; Starts a verbatim string literal.</span><br><span class="line">/// (                                        -&gt; Logical grouping of part of an expression.</span><br><span class="line">/// (\&amp;|\?)                                  -&gt; Start with `&amp;` or `?`</span><br><span class="line">/// ?                                        -&gt; Result of `(\&amp;|\?)` must be 0 or 1</span><br><span class="line">/// \b                                       -&gt; Matches a word boundary</span><br><span class="line">/// &#123;SomeAttribute.Hoe&#125;=1                    -&gt; String interpolation, if `SomeAttribute.Hoe` was `42` then this would add `42=1`</span><br><span class="line">/// \b                                       -&gt; Matches a word boundary</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">private readonly string MyQueryStringParamRegex = $@&quot;((\&amp;|\?)?)\b&#123;SomeAttribute.Hoe&#125;=1\b&quot;;</span><br></pre></td></tr></table></figure><p>You could then use this in code as</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (new Regex(MyQueryStringParamRegex).IsMatch(query))</span><br><span class="line">&#123;</span><br><span class="line">     // do something based on the match</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matching-email-address"><a href="#Matching-email-address" class="headerlink" title="Matching email address"></a>Matching email address</h3><p>Sweet example from <a href="https://www.computerhope.com/unix/regex-quickref.htm">computerhope.com</a> to match an Email address.</p><p><img src="/d/regex/regex-1.gif" alt="Email Matching Example"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.computerhope.com/unix/regex-quickref.htm">https://www.computerhope.com/unix/regex-quickref.htm</a></li><li><a href="https://www.dotnetperls.com/regex">https://www.dotnetperls.com/regex</a></li><li><a href="http://regexlib.com/cheatsheet.aspx">http://regexlib.com/cheatsheet.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana</title>
      <link href="/2019/07/kibana/"/>
      <url>/2019/07/kibana/</url>
      
        <content type="html"><![CDATA[<p><em>Kibana</em> lets you visualize your Elasticsearch data and navigate the Elastic Stack, also see <a href="/2018/04/elk-stack/">ELK Stack</a></p><h3 id="Stand-Alone-Containers"><a href="#Stand-Alone-Containers" class="headerlink" title="Stand Alone Containers"></a>Stand Alone Containers</h3><p><code>V7</code><br><code>docker run -d --name kibana-v7 -p 5607:5601 -e &quot;ELASTICSEARCH_HOSTS=&#123;host&#125;:&#123;port&#125;&quot; kibana:7.2.0</code></p><p><code>V5</code><br><code>docker run -d --name kibana-v5 -p 5605:5601 -e &quot;ELASTICSEARCH_URL=&#123;host&#125;:&#123;port&#125;&quot; kibana:5</code></p><h3 id="Environment-variables-translation"><a href="#Environment-variables-translation" class="headerlink" title="Environment variables translation"></a>Environment variables translation</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kibana Version         Kibana Setting              Docker Dev Env</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">V7                     elasticsearch.hosts         ELASTICSEARCH_HOSTS</span><br><span class="line">V5.6.4                 elasticsearch.url           ELASTICSEARCH_URL</span><br></pre></td></tr></table></figure><h3 id="Elastic-Ports"><a href="#Elastic-Ports" class="headerlink" title="Elastic Ports"></a>Elastic Ports</h3><p>9200 is for REST<br>9300 for nodes communication</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>V7 Current, yeah this will change in 5 minutes :D</p><ul><li><a href="https://www.elastic.co/guide/en/kibana/current/settings.html">https://www.elastic.co/guide/en/kibana/current/settings.html</a></li><li><a href="https://www.elastic.co/guide/en/kibana/current/docker.html">https://www.elastic.co/guide/en/kibana/current/docker.html</a></li></ul><p>V6</p><ul><li><a href="https://www.elastic.co/guide/en/kibana/5.6/settings.html">https://www.elastic.co/guide/en/kibana/5.6/settings.html</a></li><li><a href="https://www.elastic.co/guide/en/kibana/5.2/_configuring_kibana_on_docker.html">https://www.elastic.co/guide/en/kibana/5.2/_configuring_kibana_on_docker.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> utilities </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attribute - AspNetCore.Mvc</title>
      <link href="/2019/06/attribute-aspnet-mvc/"/>
      <url>/2019/06/attribute-aspnet-mvc/</url>
      
        <content type="html"><![CDATA[<p>Namespace <code>Microsoft.AspNetCore.Mvc</code></p><h2 id="FromBody"><a href="#FromBody" class="headerlink" title="FromBody"></a>FromBody</h2><p>Controller</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;Artist&gt;&gt; AddArtist([FromBody] Artist artist)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman collection -&gt; Body, Raw, Json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f22e850e-4b31-417d-bc4b-4813ba98a50c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Carl Paton&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="FromForm"><a href="#FromForm" class="headerlink" title="FromForm"></a>FromForm</h2><p>Controller</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPut</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;Artist&gt;&gt; UpdateArtist([FromForm] Guid id, [FromForm] <span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman collection -&gt; Body, form-data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEY             VALUE</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Id              f22e850e-4b31-417d-bc4b-4813ba98a50c</span><br><span class="line">Name            Carlos Poephole</span><br></pre></td></tr></table></figure><h2 id="FromRoute"><a href="#FromRoute" class="headerlink" title="FromRoute"></a>FromRoute</h2><p>Controller</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPut</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;Artist&gt;&gt; UpdateArtist([FromRoute] Guid sweetId)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman collection -&gt; PUT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:5000/foo/&#123;&#123;sweetId&#125;&#125;/bar/&#123;&#123;id&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="FromQuery"><a href="#FromQuery" class="headerlink" title="FromQuery"></a>FromQuery</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;List&lt;Artist&gt;&gt;&gt; SearchArtist([FromQuery(Name = <span class="string">&quot;q&quot;</span>)] <span class="built_in">string</span> searchOn)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman collection -&gt; GET</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KEY             VALUE</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">q               bob marley</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing with xUnit.net</title>
      <link href="/2019/06/unit-testing-with-xunit/"/>
      <url>/2019/06/unit-testing-with-xunit/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 15/09/2023</strong></p><p>xUnit.net is a free, open source, community-focused unit testing tool for the .NET Framework. Install <code>xunit</code> from Nuget as version <code>2.4.1</code>.</p><h3 id="Fact"><a href="#Fact" class="headerlink" title="Fact"></a>Fact</h3><p>See <a href="/2021/01/testing-strategies/">Testing Strategies</a> to understand what <code>U_I_E</code> is.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">U_I_E</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> someBool = ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.Equal(shouldPass, someBool&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Other asserts</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Assert.Contains(collection, x =&gt; x.SweetProp == <span class="string">&quot;Foo&quot;</span>);</span><br><span class="line">Assert.DoesNotContain(collection, x =&gt; x.SweetProp == <span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">Assert.NotNull(fooObj);</span><br><span class="line">Assert.True(condition);</span><br></pre></td></tr></table></figure><h3 id="Theory-Inline-Data"><a href="#Theory-Inline-Data" class="headerlink" title="Theory - Inline Data"></a>Theory - Inline Data</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">InlineData(<span class="string">&quot;foo@bar.com&quot;</span>, true)</span>]</span><br><span class="line">[<span class="meta">InlineData(<span class="string">&quot;baz@bat.com&quot;</span>, false)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">U_I_E</span>(<span class="params"><span class="built_in">string</span> someEmail, <span class="built_in">bool</span> someBool</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> someBool = ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.Equal(shouldPass, someBool&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Theory-Member-Data"><a href="#Theory-Member-Data" class="headerlink" title="Theory - Member Data"></a>Theory - Member Data</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">object</span>[]&gt; FooTestData()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// someString, someStrings                     </span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; <span class="string">&quot;foo&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; <span class="string">&quot;bar&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span> &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Theory</span>]</span><br><span class="line">[<span class="meta">MemberData(nameof(FooTestData))</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">U_I_E</span>(<span class="params"><span class="built_in">string</span> someString, IEnumerable&lt;<span class="built_in">string</span>&gt; someStrings</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.Equal(...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shared-Context-between-Tests"><a href="#Shared-Context-between-Tests" class="headerlink" title="Shared Context between Tests"></a>Shared Context between Tests</h3><p>xUnit doesnt have explicit <code>[SetUp]</code> and <code>[TearDown]</code> annotations like <a href="/2018/12/unit-testing-with-nunit/">NUnit</a>, instead they say you must use a Constructor and Dispose.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackTests</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    Stack&lt;<span class="built_in">int</span>&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackTests</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stack.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://xunit.net/docs/shared-context">https://xunit.net/docs/shared-context</a></li></ul><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>Verifies that the exact exception is thrown (and not a derived exception type). Returns the exception that was thrown, when successful.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">var</span> exception = Assert.ThrowsAsync&lt;HttpRequestException&gt;(<span class="keyword">async</span> () =&gt; <span class="keyword">await</span> classUnderTest.SomeMethodThatThrowsAsync());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assert</span></span><br><span class="line">Assert.Equal(expectedExceptionMessage, exception.Result.Message);</span><br></pre></td></tr></table></figure><h3 id="Naming-rules"><a href="#Naming-rules" class="headerlink" title="Naming rules"></a>Naming rules</h3><p>Define conventions across project from <a href="https://www.linkedin.com/posts/milan-jovanovic_architecture-tests-enforce-your-softwa[%E2%80%A6]808681238528-3hyS?utm_source=share&utm_medium=member_desktop">this post</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> DomainEvent_Should_Have_DomainEventSuffix</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> result = Types</span><br><span class="line">      .InAssembly(DomainAssembly)</span><br><span class="line">      .That()</span><br><span class="line">      .ImplementInterface(<span class="keyword">typeof</span>(IDomainEvent))</span><br><span class="line">      .Should()</span><br><span class="line">      .HaveNameEndingWith(<span class="string">&quot;DomainEvent&quot;</span>)</span><br><span class="line">      .GetResult();</span><br><span class="line"></span><br><span class="line">   result.IsSuccessful.Should().BeTrue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Architecture-tests"><a href="#Architecture-tests" class="headerlink" title="Architecture tests"></a>Architecture tests</h3><ul><li>Enforce command handler naming</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> CommandHandler_Should_HaveNameEndingWith_CommandHandler</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> result = Types.InAssembly(ApplicationAssembly)</span><br><span class="line">      .That()</span><br><span class="line">      .ImplementInterface(<span class="keyword">typeof</span>(ICommandHandler&lt;&gt;))</span><br><span class="line">      .Or()</span><br><span class="line">      .ImplementInterface(<span class="keyword">typeof</span>(ICommandHandler&lt;,&gt;))</span><br><span class="line">      .Should()</span><br><span class="line">      .HaveNameEndingWith(<span class="string">&quot;CommandHandler&quot;</span>)</span><br><span class="line">      .GetResult();</span><br><span class="line"></span><br><span class="line">   result.IsSuccessful.Should().BeTrue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Enforce microservice architecture (copied from <a href="https://x.com/mjovanovictech/status/1744630672868716845">Milan Jovanović</a>)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DomainLayer_Should_NotHaveDependencyOn_ApplicationLayer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> result = Types.InAssembly(DomainAssembly)</span><br><span class="line">      .Should()</span><br><span class="line">      .NotHaveDepencyOn(ApplicationAssembly.GetName().Name)</span><br><span class="line">      .GetResult();</span><br><span class="line"></span><br><span class="line">   result.IsSuccessful.Should().BeTrue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DomainLayer_Should_NotHaveDependcyOn_InfrastructureLayer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> result Types.InAssembly(DomainAssembly)</span><br><span class="line">      .Should()</span><br><span class="line">      .NotHaveDepencyOn(InfrastructureAssembly.GetName().Name)</span><br><span class="line">      .GetResult();</span><br><span class="line"></span><br><span class="line">   result.IsSuccessful.Should().BeTrue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://xunit.github.io/docs/getting-started/netfx/visual-studio">https://xunit.github.io/docs/getting-started/netfx/visual-studio</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backends for Frontends</title>
      <link href="/2019/05/backends-for-frontends/"/>
      <url>/2019/05/backends-for-frontends/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when you want to avoid customizing a single backend for multiple interfaces. This pattern was first described by Sam Newman.”</p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://samnewman.io/patterns/architectural/bff/">https://samnewman.io/patterns/architectural/bff/</a></li><li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends">https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Administrator</title>
      <link href="/2019/05/redis-administrator/"/>
      <url>/2019/05/redis-administrator/</url>
      
        <content type="html"><![CDATA[<p>Redis is an open source (BSD licensed), in-memory <strong>data structure store</strong>, used as a database, cache and message broker. You can quickly spin up a container and have a hoon using docker.</p><p>Redis Administrator is an <a href="https://github.com/carlpaton/RedisAdministrator">open source application</a> written in C# using the .NET framework. I would love for you to colaborate with me on it and welcome PR’s!</p><h2 id="Simplest-Usage"><a href="#Simplest-Usage" class="headerlink" title="Simplest Usage"></a>Simplest Usage</h2><ol><li>Create a <a href="https://docs.docker.com/network/">network</a> for the containers to connect to.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge redis-bridge-network</span><br></pre></td></tr></table></figure><ol start="2"><li>Bring up the <a href="https://hub.docker.com/_/redis?tab=description">Redis Server</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name red-srv -d -p 6379:6379 --network redis-bridge-network redis:4.0.5-alpine redis-server --appendonly yes</span><br></pre></td></tr></table></figure><ol start="3"><li>Bring up <a href="https://hub.docker.com/r/carlpaton/redis-administrator">Redis Administrator</a>, this is the user interface.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name red-admin -d -p 8081:80 --network redis-bridge-network --env REDIS_CONNECTION=red-srv,allowAdmin=true  carlpaton/redis-administrator:latest</span><br></pre></td></tr></table></figure><p>This UI can then be seen at - <a href="http://localhost:8081/">http://localhost:8081/</a></p><h3 id="Redis-Commander"><a href="#Redis-Commander" class="headerlink" title="Redis Commander"></a>Redis Commander</h3><p>Redis Commander and was written by <a href="https://github.com/joeferner/redis-commander">Joe Ferner</a> and is the OG redis UI. I think its really good and I used it a lot to understand Redis. If I was stronger in node.js I would try contribute towards its source code but as Im a .NET guy and wanted to take a deeper dive I built Redis Administartor instead.</p><p>You can bring up commander and connect to the same redis server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name red-com -d -p 8082:8082 --network redis-bridge-network --env REDIS_HOSTS=red-srv  rediscommander/redis-commander:latest</span><br></pre></td></tr></table></figure><p>This UI can then be seen at - <a href="http://localhost:8082/">http://localhost:8082/</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://redis.com/blog/so-youre-looking-for-the-redis-gui/">So, You’re Looking for the Redis GUI - redis.com</a></li><li><a href="https://www.npmjs.com/package/redis-commander/">Redis Commander - npmjs.com</a></li><li><a href="https://redis.io/topics/rediscli/">redis-cli, the Redis command line interface</a></li><li><a href="https://redis.io/topics/introduction">Introduction to Redis</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Tag Helpers</title>
      <link href="/2019/04/mvc-tag-helpers/"/>
      <url>/2019/04/mvc-tag-helpers/</url>
      
        <content type="html"><![CDATA[<p>MVC tag helpers and their Razor equivalent.</p><p>To get these new tag helpers to work you need to add the following to your <code>\Views\_ViewImports.cshtml</code> file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers</span><br></pre></td></tr></table></figure><p>All of the CSS class references below are from bootstrap.</p><h2 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a asp-action=&quot;Delete&quot; asp-route-id=&quot;@item.Id&quot;&gt;Edit&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">@Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id = item.Id &#125;, new &#123; onclick = &quot;return confirm(&#x27;Are you sure you want to delete this entry?&#x27;);&quot; &#125;)</span><br></pre></td></tr></table></figure><p>The above is pretty bad as it will allow a <code>GET</code> to a delete action that should rather only accept a <code>POST</code>.<br>To refactor this to a better design, rather add this to your view:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form asp-action=&quot;Delete&quot; asp-route-id=&quot;@item.Id&quot;&gt;</span><br><span class="line">    &lt;a asp-action=&quot;Edit&quot; asp-route-id=&quot;@item.Id&quot;&gt;Edit&lt;/a&gt; |</span><br><span class="line">    &lt;a asp-action=&quot;Index&quot; asp-route-id=&quot;@item.Id&quot; asp-controller=&quot;EntryPlatform&quot;&gt;Platform&lt;/a&gt; |</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Delete&quot; class=&quot;btn-link&quot; onclick=&quot;return confirm(&#x27;Are you sure you want to delete this entry?&#x27;);&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>Then in your controller add:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// POST: LexiconEntry/Delete/5</span><br><span class="line">[HttpPost, ActionName(&quot;Delete&quot;)]</span><br><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line">public IActionResult Delete(int id)</span><br><span class="line">&#123;</span><br><span class="line">    _repository.Delete(id);</span><br><span class="line">    TempData[&quot;message&quot;] = &quot;Entry deleted successfully.&quot;;</span><br><span class="line">    return RedirectToAction(&quot;Index&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Works with anything like string, datetime, double</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input asp-for=&quot;Name&quot; class=&quot;form-control&quot; /&gt;</span><br><span class="line">&lt;input asp-for=&quot;Salary&quot; class=&quot;form-control&quot; /&gt;</span><br><span class="line">&lt;input asp-for=&quot;SomeDate&quot; class=&quot;form-control&quot; /&gt;</span><br><span class="line"></span><br><span class="line">@Html.TextBox(&quot;Description&quot;, null, new &#123; @class = &quot;form-control&quot; &#125;)</span><br></pre></td></tr></table></figure><p>You can also store this as a cookie or session.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; asp-for=&quot;Id&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="Span-Validation-For"><a href="#Span-Validation-For" class="headerlink" title="Span Validation For"></a>Span Validation For</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span asp-validation-for=&quot;Description&quot; class=&quot;text-danger&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h2 id="Lable-for"><a href="#Lable-for" class="headerlink" title="Lable for"></a>Lable for</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label asp-for=&quot;Recommendation&quot; class=&quot;control-label&quot;&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure><h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Html.DisplayNameFor(model =&gt; model.Name)</span><br><span class="line"></span><br><span class="line">@foreach (var item in Model) &#123;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                @Html.DisplayFor(modelItem =&gt; item.Name)</span><br></pre></td></tr></table></figure><h2 id="DropDown-List-For"><a href="#DropDown-List-For" class="headerlink" title="DropDown List For"></a>DropDown List For</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.DropDownListFor(Model =&gt; Model.SubCategoryId, (List&lt;SelectListItem&gt;)ViewData[&quot;SubCategory_SelectList&quot;], &quot;-- Please Select --&quot;, new &#123; @class = &quot;form-control&quot; &#125;)</span><br></pre></td></tr></table></figure><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;divResults&quot;&gt;</span><br><span class="line">    &lt;partial name=&quot;~/Views/Entry/_Table.cshtml&quot; model=&quot;Model&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;divResults&quot;&gt;</span><br><span class="line">    @&#123;</span><br><span class="line">        @Html.Partial(&quot;~/Views/Entry/_Table.cshtml&quot;, Model);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://getbootstrap.com/docs/4.3/">getbootstrap.com/docs/4.3/</a></li><li><a href="https://blogs.msdn.microsoft.com/cdndevs/2015/08/06/a-complete-guide-to-the-mvc-6-tag-helpers/">blogs.msdn.microsoft.com</a></li><li><a href="https://github.com/carlpaton/lexicon">lexicon code</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Hexo</title>
      <link href="/2019/04/configure-hexo/"/>
      <url>/2019/04/configure-hexo/</url>
      
        <content type="html"><![CDATA[<p>Sweet plugins and configuration settings for Hexo.</p><h3 id="hexo-deployer-git"><a href="#hexo-deployer-git" class="headerlink" title="hexo-deployer-git"></a>hexo-deployer-git</h3><p><code>yarn add hexo-deployer-git</code></p><p>Once installed add the following to the root <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/carlpaton/carlpaton.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">carlpaton</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">carl.paton@gmail.com</span></span><br></pre></td></tr></table></figure><p>This then works with the commands:</p><ul><li><code>hexo generate</code> (short hand <code>hexo g</code>)</li><li><code>hexo deploy</code> (short hand <code>hexo d</code>)</li></ul><h3 id="hexo-browsersync"><a href="#hexo-browsersync" class="headerlink" title="hexo-browsersync"></a>hexo-browsersync</h3><p><code>yarn add hexo-browsersync</code></p><p>This then works with the command <code>hexo serve</code> (short hand <code>hexo s</code>)</p><h3 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h3><p>Then go to your theme’s main <code>_config.yml</code> and look for a property called google_analytics. Fill in your tracking ID.</p><p>google_analytics: UA-0000000-0</p><ul><li><a href="http://www.codeblocq.com/2015/12/Add-Google-Analytics-to-your-hexo-blog/">http://www.codeblocq.com/2015/12/Add-Google-Analytics-to-your-hexo-blog/</a></li></ul><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p><code>npm install hexo-generator-search</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/04/hello-hexo/"/>
      <url>/2019/04/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>I used <a href="https://hexo.io/">Hexo</a> as my blogs framework and the theme is a modified version of the <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a> theme, its really simple to use and integrate changes.</p><h3 id="Hexo-Installation"><a href="#Hexo-Installation" class="headerlink" title="Hexo Installation"></a>Hexo Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Verify required software for Hexo is installed, if not check the sweet video below</span></span><br><span class="line">node -v</span><br><span class="line">git version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><ul><li><a href="https://hexo.io/docs/">https://hexo.io/docs/</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/ARted4RniaU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Create-Hexo-Site"><a href="#Create-Hexo-Site" class="headerlink" title="Create Hexo Site"></a>Create Hexo Site</h3><p>This is done via the Hexo CLI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barebones hexo, this will create the folder `myblog` and initialize hexo blogging framework </span></span><br><span class="line">hexo init carlpaton.github.io</span><br></pre></td></tr></table></figure><ul><li><a href="https://hexo.io/docs/setup">https://hexo.io/docs/setup</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/0m2HnATkHOk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Configuration Files:</p><ul><li>“<strong>blog config</strong>“ refer to the <code>_config.yml</code> in the blog root directory.</li><li>“<strong>theme config</strong>“ refer to the path <code>theme/landscape/_config.yml</code></li></ul><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>Original links from the frameworks <a href="https://github.com/techlahoma/Hexo-Workshop/blob/master/source/_posts/hello-world.md">hello world</a> starter post.</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line">$ hexo s --draft                  ~ includes posts <span class="keyword">in</span> `<span class="built_in">source</span>\_drafts`</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info:</p><ul><li><a href="https://hexo.io/docs/deployment.html">Deployment</a></li><li><a href="https://hexo.io/docs/">documentation</a></li><li><a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a></li><li><a href="https://github.com/hexojs/hexo/issues">GitHub</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adding local code to git</title>
      <link href="/2019/04/adding-local-code-to-git/"/>
      <url>/2019/04/adding-local-code-to-git/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Create the new repository: <a href="https://github.com/new">https://github.com/new</a><br>1.1 Example name <code>EventLogger</code><br>1.2 Create as Public and dont add a README yet</p></li><li><p>Locate your folder in a command terminal: example <code>C:\Dev\EventLogger</code><br>2.1 run <code>git init</code>, this will create a <code>.git</code> folder</p></li><li><p>Set the <code>Git commit user setting</code><br>3.1 <code>C:\Dev\EventLogger\.git\config</code><br>3.2 Add as follows</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = Carl</span><br><span class="line">email = carl.paton@gmail.com</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Run <code>git add .</code> to stage your local files<br>4.1 Run <code>git status</code> to confirm your files are added/staged</p></li><li><p>Run <code>git commit -m &quot;first commit&quot;</code><br>5.1 Run <code>git log</code> to confirm your user setting`</p></li><li><p>Run <code>git remote add origin https://github.com/carlpaton/EventLogger.git</code></p></li><li><p>Run <code>git push -u origin master</code></p></li></ol><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><ol><li>Update the <code>config</code> to include your credentials</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = &quot;https://USERNAME:PASSWORD@github.com/carlpaton/EventLogger.git&quot;</span><br></pre></td></tr></table></figure><ul><li>NOTE: Credentials are stored in plain text!</li></ul><p>test</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Custom Model Binding</title>
      <link href="/2019/04/custom-model-binding/"/>
      <url>/2019/04/custom-model-binding/</url>
      
        <content type="html"><![CDATA[<p>Converts incoming request data into strongly typed key arguments.</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Foo.Api.Application.Infrastructure.ModelBinders;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Foo.Api.Application.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Artist</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Artist</span>(<span class="params">Guid id, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Id = id;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">ModelBinder(BinderType = typeof(JsonModelBinder))</span>]</span><br><span class="line">        <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">ModelBinder(BinderType = typeof(JsonModelBinder))</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JsonModelBinder"><a href="#JsonModelBinder" class="headerlink" title="JsonModelBinder"></a>JsonModelBinder</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.ModelBinding;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Foo.Api.Application.Infrastructure.ModelBinders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonModelBinder</span> : <span class="title">IModelBinder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> JsonSerializerOptions serializerOption = <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,</span><br><span class="line">            PropertyNameCaseInsensitive = <span class="literal">true</span>,</span><br><span class="line">            Converters = &#123; <span class="keyword">new</span> JsonStringEnumConverter() &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task <span class="title">BindModelAsync</span>(<span class="params">ModelBindingContext bindingContext</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = bindingContext.ValueProvider</span><br><span class="line">                .GetValue(bindingContext.FieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(<span class="keyword">value</span>.FirstValue))</span><br><span class="line">                <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = JsonSerializer</span><br><span class="line">                .Deserialize(<span class="keyword">value</span>.FirstValue, bindingContext.ModelType, serializerOption);</span><br><span class="line">            </span><br><span class="line">            bindingContext.Result = ModelBindingResult.Success(result);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding#custom-model-binder-sample">https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding#custom-model-binder-sample</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSQL Restore Dump</title>
      <link href="/2019/03/psql-restore-dump/"/>
      <url>/2019/03/psql-restore-dump/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/carlpaton/docker-psql-restore-dump">https://github.com/carlpaton/docker-psql-restore-dump</a></li></ul><p>This will create 2 containers <code>postgres-db</code> and <code>postgres-copy</code>, db is the database and copy is a volitile container used to copy your <code>mydump.sql</code> file to a volumn, from there the db container will have access to it.</p><h3 id="Download-latest-image-and-spin-up"><a href="#Download-latest-image-and-spin-up" class="headerlink" title="Download latest image and spin up"></a>Download latest image and spin up</h3><p>From powershell <code>run.ps1</code></p><ul><li><a href="https://github.com/carlpaton/docker-psql-restore-dump/blob/master/run.ps1">https://github.com/carlpaton/docker-psql-restore-dump/blob/master/run.ps1</a></li></ul><h3 id="Create-some-tables-data"><a href="#Create-some-tables-data" class="headerlink" title="Create some tables / data"></a>Create some tables / data</h3><p><em>This step is not needed if you already have a dump file</em></p><p>Connect with any editor (PgAdmin, Dbeaver) to <code>localhost:5432</code> with username <code>postgres</code> and password <code>postgres</code> then add some data to be used with the dump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE public.staff_master ( id serial NOT NULL, first_name text, surname text, email text, insert_date date, salary real, CONSTRAINT employee_pkey PRIMARY KEY (id));</span><br><span class="line">INSERT INTO public.staff_master (first_name, surname, email, insert_date, salary) VALUES (&#x27;carl psql&#x27;, &#x27;my surname&#x27;, &#x27;email@domain.com&#x27;, NOW(), 0);</span><br></pre></td></tr></table></figure><h3 id="Create-interactive-session"><a href="#Create-interactive-session" class="headerlink" title="Create interactive session"></a>Create interactive session</h3><p>From powershell <code>docker exec -it postgres-db bash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dump</span><br><span class="line">dir</span><br></pre></td></tr></table></figure><p>This should then reflect the file you copied <code>mydump.sql</code></p><p>You can also <code>CAT mydump.sql</code> but if its large your pc may fall on its head.</p><h3 id="Dump-something-to-test-with-from-‘postgres’"><a href="#Dump-something-to-test-with-from-‘postgres’" class="headerlink" title="Dump something to test with from ‘postgres’"></a>Dump something to test with from ‘postgres’</h3><p><em>This step is not needed if you already have a dump file</em></p><p>From powershell <code>pg_dump -U postgres -v -Fc postgres -f /dump/mydump.dump</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure><p>You should now see <code>mydump.dump</code> and <code>mydump.sql</code> where the dump file is the one you just created</p><h3 id="Create-‘mydb’"><a href="#Create-‘mydb’" class="headerlink" title="Create ‘mydb’"></a>Create ‘mydb’</h3><p>From powershell <code>psql -U postgres -c &quot;CREATE DATABASE mydb OWNER = postgres TABLESPACE pg_default;&quot;</code></p><h3 id="Restore-dump"><a href="#Restore-dump" class="headerlink" title="Restore dump"></a>Restore dump</h3><p>From powershell <code>pg_restore -U postgres -d mydb &lt; /dump/mydump.dump</code></p><h3 id="Quit"><a href="#Quit" class="headerlink" title="Quit"></a>Quit</h3><p>CTRL+C Exit</p><h3 id="Alternative-Copy"><a href="#Alternative-Copy" class="headerlink" title="Alternative Copy"></a>Alternative Copy</h3><p>If the file is massive you can try this method to copy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mydump.sql bd2f2aae3b84:/dump/mydump.sql</span><br></pre></td></tr></table></figure><p>.. where <code>bd2f2aae3b84</code> is the name of your container which you can get by running <code>docker ps --all</code></p><p>You can then check the files on the container with <code>ls -l --block-size=M</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fizz Buzz</title>
      <link href="/2019/03/rosetta-code-fizzbuzz/"/>
      <url>/2019/03/rosetta-code-fizzbuzz/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 03/07/2023</strong></p><p>This is a <a href="/2020/07/rosetta-code/">Rosetta Code</a> post.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>A popular interview question is the <code>FizzBuzz test</code>, its based on a children’s game where you count from 1 to 100 and for multiples of 3 say ‘Fizz’, multiples of 5 say “Buzz”, if both say ‘FizzBuzz’ else say the number.</p><p>For example, a typical round of fizz buzz would start as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1         </span><br><span class="line">2         </span><br><span class="line">Fizz      </span><br><span class="line">4         </span><br><span class="line">Buzz      </span><br><span class="line">Fizz      </span><br><span class="line">7         </span><br><span class="line">8         </span><br><span class="line">Fizz      </span><br><span class="line">Buzz      </span><br><span class="line">11        </span><br><span class="line">Fizz      </span><br><span class="line">13        </span><br><span class="line">14        </span><br><span class="line">Fizz Buzz </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Write a program that prints the numbers from 1 to n. But for multiples of three print <code>Fizz</code> instead of the number and for the multiples of five print <code>Buzz</code>. For numbers which are multiples of both three and five print <code>FizzBuzz</code>.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><h4 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h4><ul><li>fizzbuzz_iterative.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getFizzBuzz</span> = (<span class="params">upperBound</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> outPut = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= upperBound; i++) &#123;</span><br><span class="line">        outPut = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            outPut = <span class="string">&quot;Fizz&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            outPut += <span class="string">&quot;Buzz&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (outPut == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            outPut = i;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outPut);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getFizzBuzz&#125; <span class="keyword">from</span> <span class="string">&quot;./fizzbuzz_recursive.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">getFizzBuzz</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h4 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h4><p>Recursive solution based on code from <a href="https://www.linkedin.com/in/chinmay-deshmukh98/">Chinmay Deshmukh</a>, his was cooler because it used Typescript.</p><ul><li>fizzbuzz_recursive.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getFizzBuzz</span> = (<span class="params">totalNumber, currentNumber = <span class="number">1</span></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNumber &gt; totalNumber) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> ((currentNumber % <span class="number">3</span> == <span class="number">0</span>) &amp;&amp; (currentNumber % <span class="number">5</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fizz Buzz&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNumber % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNumber % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(currentNumber);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">getFizzBuzz</span>(totalNumber, currentNumber + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getFizzBuzz&#125; <span class="keyword">from</span> <span class="string">&quot;./fizzbuzz_recursive.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">getFizzBuzz</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://carlpaton.github.io/2018/06/docker-fizzbuzz-image/">Docker Fizzbuzz Image</a></li><li><a href="https://github.com/carlpaton/FizzBuzz">https://github.com/carlpaton/FizzBuzz</a></li><li><a href="http://rosettacode.org/wiki/Talk:FizzBuzz">http://rosettacode.org/wiki/Talk:FizzBuzz</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> rosetta code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reporting Frameworks</title>
      <link href="/2019/03/reporting-frameworks/"/>
      <url>/2019/03/reporting-frameworks/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 06/09/2024</strong></p><h3 id="Aspose"><a href="#Aspose" class="headerlink" title="Aspose"></a>Aspose</h3><ul><li><a href="https://products.aspose.com/pdf/net/">https://products.aspose.com/pdf/net/</a></li></ul><h3 id="Crystal-Reports"><a href="#Crystal-Reports" class="headerlink" title="Crystal Reports"></a>Crystal Reports</h3><ul><li><a href="https://www.crystalreports.com/resources/">https://www.crystalreports.com/resources/</a></li><li><a href="https://www.tektutorialshub.com/crystal-reports/how-to-download-and-install-crystal-report-runtime/">https://www.tektutorialshub.com/crystal-reports/how-to-download-and-install-crystal-report-runtime/</a></li></ul><h3 id="BIRT-Reports"><a href="#BIRT-Reports" class="headerlink" title="BIRT Reports"></a>BIRT Reports</h3><ul><li><a href="https://www.eclipse.org/birt/">https://www.eclipse.org/birt/</a></li></ul><h3 id="Hand-Rolled-No-Library"><a href="#Hand-Rolled-No-Library" class="headerlink" title="Hand Rolled (No Library)"></a>Hand Rolled (No Library)</h3><p>Simliar to other <code>PDF from HTML</code> library approaches like Iron PDF but here you make your own using Blazor (SPA framework) and Razor (markup language for rendering HTML).</p><ul><li><a href="https://www.youtube.com/watch?v=BMnjwz-u-9Y">Nick Chapsas - The Free Way to Create Awesome PDFs in .NET</a></li></ul><h3 id="iTextSharp"><a href="#iTextSharp" class="headerlink" title="iTextSharp"></a>iTextSharp</h3><ul><li><a href="https://github.com/itext/itextsharp">https://github.com/itext/itextsharp</a></li></ul><h3 id="PDFSharp"><a href="#PDFSharp" class="headerlink" title="PDFSharp"></a>PDFSharp</h3><ul><li><a href="http://www.pdfsharp.net/wiki/PDFsharpSamples.ashx">http://www.pdfsharp.net/wiki/PDFsharpSamples.ashx</a></li><li><a href="https://github.com/empira/PDFsharp">https://github.com/empira/PDFsharp</a></li></ul><h3 id="QuestPDF"><a href="#QuestPDF" class="headerlink" title="QuestPDF"></a>QuestPDF</h3><ul><li><a href="https://github.com/QuestPDF/QuestPDF">https://github.com/QuestPDF/QuestPDF</a></li><li><a href="https://www.youtube.com/watch?v=_M0IgtGWnvE">Nick Chapsas - The Easiest Way to Create PDFs in .NET</a></li></ul><h3 id="Visual-Studio-reporting"><a href="#Visual-Studio-reporting" class="headerlink" title="Visual Studio reporting"></a>Visual Studio reporting</h3><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftReportProjectsforVisualStudio">https://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftReportProjectsforVisualStudio</a></li></ul><h3 id="xsPDF"><a href="#xsPDF" class="headerlink" title="xsPDF"></a>xsPDF</h3><ul><li><a href="https://www.xspdf.com/">https://www.xspdf.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Accessibility Utilities</title>
      <link href="/2019/02/accessibility-utilities/"/>
      <url>/2019/02/accessibility-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="NVDA"><a href="#NVDA" class="headerlink" title="NVDA"></a>NVDA</h3><p>The NVDA screen reader can be downloaded free of charge by anyone. </p><ul><li><a href="https://www.nvaccess.org/download/">nvaccess.org/download</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack query string params vertically</title>
      <link href="/2019/02/stack-query-string-params-vertically/"/>
      <url>/2019/02/stack-query-string-params-vertically/</url>
      
        <content type="html"><![CDATA[<p>find and replace &amp; with \n&amp;</p><p><img src="/d/stack-query-string-params-vertically/stack-1.png" alt="find and replace"></p>]]></content>
      
      
      
        <tags>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Observables Pipe Async</title>
      <link href="/2019/02/angular-observables-pipe-async/"/>
      <url>/2019/02/angular-observables-pipe-async/</url>
      
        <content type="html"><![CDATA[<p>Observables provide support for passing messages between publishers and subscribers in your application. In the example below <code>parent.component</code> contains the <code>child.component</code> which binds to members <code>counterSubject</code>, <code>countObservable$</code> and <code>foo</code> declared in the parent. </p><p>In the interpolated html the  <code>| async</code> sets up and destroys the subscription for you. It is common practice for the observable to be suffixed with $, so here the observable is <code>countObservable$</code></p><h3 id="parent-component"><a href="#parent-component" class="headerlink" title="parent.component"></a>parent.component</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">parent.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> counterSubject = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">countObservable$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">  <span class="keyword">private</span> foo = <span class="string">&#x27;this is the text value of foo&#x27;</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">countObservable$</span> = <span class="variable language_">this</span>.<span class="property">counterSubject</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _count = <span class="variable language_">this</span>.<span class="property">counterSubject</span>.<span class="title function_">getValue</span>() + <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counterSubject</span>.<span class="title function_">next</span>(_count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">parent-search.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countObservable: &#123;&#123;countObservable$ | async&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countSubject: &#123;&#123;counterSubject.getValue()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;inc()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">foo</span>]=<span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">countObservable</span>]=<span class="string">&quot;countObservable$&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">counterSubject</span>]=<span class="string">&quot;counterSubject&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="child-component"><a href="#child-component" class="headerlink" title="child.component"></a>child.component</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">child-control-search.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() foo : <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Input</span>() countObservable : <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">  <span class="meta">@Input</span>() counterSubject : <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">child.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> foo: &#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countObservable: &#123;&#123;countObservable | async&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> countSubject: &#123;&#123;counterSubject | async&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/observables">https://angular.io/guide/observables</a></li><li><a href="https://stackblitz.com/edit/angular-elzdzs">https://stackblitz.com/edit/angular-elzdzs</a></li><li><a href="https://github.com/carlpaton/angular-observables">https://github.com/carlpaton/angular-observables</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Observables Subscribe</title>
      <link href="/2019/02/angular-observables-subscribe/"/>
      <url>/2019/02/angular-observables-subscribe/</url>
      
        <content type="html"><![CDATA[<p>The example below shows an <code>Observable</code> input into a child component, as its a stream that can change you need to subscribe to those changes and use a change detector to update the template.</p><p>If possible rather do the subscription in the parent component and input the data. Example <code>@Input() public inputType: IInputType;</code></p><h3 id="child-component"><a href="#child-component" class="headerlink" title="child.component"></a>child.component</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">child.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChangeDetectorRef</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">implements</span> <span class="title class_">OnChanges</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Input</span>() <span class="keyword">public</span> <span class="attr">observable$</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">IInputType</span>&gt;;</span><br><span class="line"><span class="keyword">private</span> <span class="attr">_destroyed$</span>: <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="attr">someString</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span> (</span><br><span class="line">        <span class="keyword">private</span> <span class="attr">_changeDetectorRef</span>: <span class="title class_">ChangeDetectorRef</span></span><br><span class="line">    ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ngOnChanges () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observable$</span>.<span class="title function_">pipe</span>(</span><br><span class="line">            <span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">_destroyed$</span>))</span><br><span class="line">            .<span class="title function_">subscribe</span>(<span class="function"><span class="params">inputType</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">setSomeString</span>(inputType);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_changeDetectorRef</span>.<span class="title function_">markForCheck</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ngOnDestroy () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_destroyed$</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> setSomeString (<span class="attr">inputType</span>: <span class="title class_">IInputType</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">someString</span> = inputType.<span class="property">someProperty</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>child<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> someString: &#123;&#123;someString&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/observables">https://angular.io/guide/observables</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front End Technologies</title>
      <link href="/2019/01/front-end-technologies/"/>
      <url>/2019/01/front-end-technologies/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Framework</th><th>State Management Library</th><th>Other Technolologies Used</th><th>Comment</th></tr></thead><tbody><tr><td>Angular</td><td>NgRx</td><td>Typescript</td><td>Redux with RxJs = NgRx</td></tr><tr><td></td><td></td><td>RxJs</td><td></td></tr><tr><td>React</td><td>Redux</td><td></td><td>Formally known as <code>Flux</code></td></tr><tr><td>Vue</td><td>Vuex</td><td></td><td>WAT</td></tr></tbody></table><h3 id="NgRx"><a href="#NgRx" class="headerlink" title="NgRx"></a>NgRx</h3><ul><li><a href="/2019/01/angular-reference/">Angular reference</a></li></ul><h3 id="RxJs"><a href="#RxJs" class="headerlink" title="RxJs"></a>RxJs</h3><ul><li><a href="https://www.udemy.com/rxjs-course/">https://www.udemy.com/rxjs-course/</a> ~ RxJs 6 In Practice </li><li><a href="https://www.lynda.com/Angular-tutorials/Learning-RxJS/630623-2.html">https://www.lynda.com/Angular-tutorials/Learning-RxJS/630623-2.html</a> ~ Rel. 1/12/2018</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> client side </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning &amp; Resources</title>
      <link href="/2019/01/learning-resources/"/>
      <url>/2019/01/learning-resources/</url>
      
        <content type="html"><![CDATA[<p>There are so many resources (many free) on the internet today that we are spoilt for choice. These are some that I have come across in my quest to better my craft. </p><p>Also see my list of <a href="/2019/01/legends-influencers/">Legends &amp; Influencers</a> and <a href="/2019/01/online-learning-portals/">Online Learning Portals</a>.</p><h4 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h4><ul><li><a href="https://docs.microsoft.com/en-us/learn/modules/welcome-to-azure/">https://docs.microsoft.com/en-us/learn/modules/welcome-to-azure/</a></li><li><a href="https://aws.amazon.com/">https://aws.amazon.com/</a></li><li><a href="https://www.qwiklabs.com/">https://www.qwiklabs.com/</a></li></ul><h4 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a>Icons</h4><ul><li><a href="https://css.gg/">https://css.gg/</a></li></ul><h4 id="Content-amp-Fake-API"><a href="#Content-amp-Fake-API" class="headerlink" title="Content &amp; Fake API"></a>Content &amp; Fake API</h4><ul><li><a href="https://www.fillmurray.com/">https://www.fillmurray.com/</a> , <a href="https://placekitten.com/">https://placekitten.com/</a></li><li><a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a></li><li><a href="https://unsplash.com/">https://unsplash.com/</a></li></ul><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ul><li><a href="https://cssbattle.dev/">https://cssbattle.dev/</a></li><li><a href="https://css-tricks.com/">css-tricks.com</a></li><li><a href="https://www.sassmeister.com/">https://www.sassmeister.com/</a></li></ul><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><ul><li><a href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics">Getting Started – Git Basics</a></li><li><a href="https://help.github.com/en/articles/organizing-information-with-tables">https://help.github.com/en/articles/organizing-information-with-tables</a></li></ul><h4 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h4><ul><li><a href="https://testing.googleblog.com/search/label/TotT">Testing on the Toilet</a> – blog by Google</li></ul><h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><ul><li><a href="https://docs.emmet.io/cheat-sheet/">docs.emmet.io/cheat-sheet/</a></li><li><a href="https://caniuse.com/">https://caniuse.com/</a></li><li><a href="https://www.base64-image.de/">https://www.base64-image.de/</a></li><li>Free PDF Books – <a href="http://www.allitebooks.in/">www.allitebooks.in</a><ul><li><em>All of the work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</em></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Legends &amp; Influencers</title>
      <link href="/2019/01/legends-influencers/"/>
      <url>/2019/01/legends-influencers/</url>
      
        <content type="html"><![CDATA[<p>I try to read as much as possible and link to posts that influence my way of thinking, a give credit where its due mindset.</p><p>These are Legends &amp; Influencers who have over the years impacted my own professional continual development.</p><p>Also a special shout out to my peers who have explained software related magic to me, sometimes more than once. You know who you are :)</p><h3 id="Fellow-Nerds-amp-Bloggers"><a href="#Fellow-Nerds-amp-Bloggers" class="headerlink" title="Fellow Nerds &amp; Bloggers"></a>Fellow Nerds &amp; Bloggers</h3><ul><li><a href="https://jaxsbr.github.io/pkb-blog/">Jaco Brink - jaxsbr.github.io</a></li></ul><h3 id="C-NET-MVC-Patterns"><a href="#C-NET-MVC-Patterns" class="headerlink" title="C#, .NET, MVC, Patterns"></a>C#, .NET, MVC, Patterns</h3><ul><li><a href="http://msmvps.com/blogs/deborahk">Deborah Kurata – msmvps.com/blogs/deborahk</a></li><li><a href="https://www.udemy.com/user/dmitrinesteruk/">Dmitri Nesteruk - udemy.com/user/dmitrinesteruk</a></li><li><a href="http://jesseliberty.com/">Jesse Liberty – jesseliberty.com</a></li><li><a href="https://jhmt.github.io/">Jun Hashimoto - jhmt.github.io</a></li><li>Mark Long - Infinite Skills/O’Reilly; Specifically helped with <a href="https://www.udemy.com/course/programming-in-microsoft-c-exam-70-483/">70-483</a></li><li><a href="https://martinfowler.com/">Martin Fowler - martinfowler.com</a></li><li><a href="https://blog.cleancoder.com/">Robert C. Martin – blog.cleancoder.com</a></li><li><a href="http://odetocode.com/blogs/all">Scott Allen – odetocode.com</a></li><li><a href="https://ardalis.com/">Steve Smith – ardalis.com</a></li><li><a href="https://twitter.com/tonynorthrup">Tony Northrup – twitter.com/tonynorthrup</a></li></ul><h3 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h3><ul><li><a href="http://hacklewayne.com/">Hackle Wayne - hacklewayne.com</a></li></ul><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><p>Learnt heaps from Tommy about <strong>Javascript</strong>, <strong>CSS</strong>, <strong>Typescript</strong>, <strong>Front End Frameworks</strong> and he help helped me setup my <a href="/tags/hexo/">hexo</a> blog, thank you my mate!</p><ul><li><a href="https://www.javascriptgames.online/">Ania Kubów - javascriptgames.online</a></li><li><a href="https://hoehoetester.github.io/">Tommy Tsuda - hoehoetester.github.io</a></li></ul><h3 id="Java-GIT"><a href="#Java-GIT" class="headerlink" title="Java, GIT"></a>Java, GIT</h3><ul><li><a href="https://melissapalmer.github.io/">Melissa Palmer – melissapalmer.github.io</a></li><li><a href="https://nvie.com/about/">Vincent Driessen – nvie.com/about/</a></li></ul><h3 id="Docker-Containers"><a href="#Docker-Containers" class="headerlink" title="Docker, Containers"></a>Docker, Containers</h3><ul><li><a href="http://container.training/">Jerome Petazzoni – container.training</a></li><li><a href="http://nigelpoulton.com/">Nigel Poulton – nigelpoulton.com</a></li><li><a href="http://leeroya.com/">Lee-Roy Ashworth – leeroya.com</a></li></ul><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><ul><li><a href="http://osmyn.com/">Rusty Divine – osmyn.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Certification Path</title>
      <link href="/2019/01/microsoft-certification-path/"/>
      <url>/2019/01/microsoft-certification-path/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Updated 20/05/2020</strong></em></p><p>Although I view the <a href="https://www.microsoft.com/en-us/learning/certification-overview.aspx">Microsoft Technical Certifications</a> certificates as a money making mechanism the skills measured for each certificate is a really good list to align your own skills to. (As a .Net developer) Perhaps I’m just a hypocrite that doesn’t have any certificates and secretly wants them :D</p><h3 id="Role-Based"><a href="#Role-Based" class="headerlink" title="Role Based"></a>Role Based</h3><p>Microsoft are <a href="https://www.microsoft.com/en-us/learning/community-blog-post.aspx?BlogId=8&Id=375282">retiring MCSA / MCSD along with other certifications</a> in favor of role based certifications.</p><ul><li><a href="https://docs.microsoft.com/en-us/learn/certifications/exams/az-900">AZ-900 (Microsoft Azure Fundamentals)</a><ul><li><a href="https://www.udemy.com/course/microsoft-azure-beginners-guide/">udemy.com/course/microsoft-azure-beginners-guide</a></li></ul></li><li><a href="https://docs.microsoft.com/en-gb/learn/certifications/azure-developer?WT.mc_id=certtransslide-slide-wwl">Azure Developer Associate</a><ul><li><a href="https://docs.microsoft.com/en-gb/learn/certifications/exams/az-204">AZ-204 (Developing Solutions for Microsoft Azure)</a></li></ul></li></ul><h3 id="Retired"><a href="#Retired" class="headerlink" title="Retired"></a>Retired</h3><p>Looks like MTA is staying for now - who knows what will happen in the future.</p><ul><li><a href="https://www.microsoft.com/en-us/learning/mta-summary-certification.aspx">MTA – Microsoft Technology Associate</a><ul><li><a href="https://www.microsoft.com/en-us/learning/exam-98-361.aspx">Exam 98-361 (Software Development Fundamentals)</a></li></ul></li><li><a href="https://www.microsoft.com/en-us/learning/mcsa-certification.aspx">MCSA – Microsoft Certified Solutions Associate</a><ul><li><a href="https://www.microsoft.com/en-us/learning/mcsa-web-applications-certification.aspx">App Builder, Web Applications</a><ul><li><a href="https://www.microsoft.com/en-us/learning/exam-70-483.aspx">Exam 70-483/Course 20483 (Programming in C#)</a><ul><li><a href="https://www.udemy.com/programming-in-microsoft-c-exam-70-483/">udemy.com</a></li><li><a href="https://www.exam-labs.com/exam/70-483">exam-labs.com</a></li><li><a href="https://mva.microsoft.com/en-US/training-courses/programming-in-c-jump-start-14254?l=j0iuozSfB_6900115888">mva.microsoft.com</a></li></ul></li><li><a href="https://www.microsoft.com/en-us/learning/exam-70-486.aspx">Exam 70-486/Course 20486 (Developing ASP.NET MVC Web Applications)</a></li></ul></li></ul></li><li><a href="https://www.microsoft.com/en-us/learning/mcsd-certification.aspx">MCSD – Microsoft Certified Solutions Developer</a><ul><li><a href="https://www.microsoft.com/en-us/learning/mcsd-app-builder-certification.aspx">App Builder</a><ul><li><a href="https://www.microsoft.com/en-us/learning/exam-70-487.aspx">Exam 70-487/Course 20487 (Developing Microsoft Azure and Web Services)</a></li><li><a href="https://www.microsoft.com/en-us/learning/exam-70-497.aspx">Exam 70-497 (Software Testing with Visual Studio)</a></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Online Learning Portals</title>
      <link href="/2019/01/online-learning-portals/"/>
      <url>/2019/01/online-learning-portals/</url>
      
        <content type="html"><![CDATA[<p>Some useful (some even free) online learning and reference portals.</p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ul><li><a href="https://www.udemy.com/">https://www.udemy.com</a> (individual course purchase)</li><li><a href="https://www.lynda.com/portal/sip?org=aucklandlibraries.govt.nz">https://www.lynda.com/portal/sip?org=aucklandlibraries.govt.nz</a> (free with organization login such as aucklandlibraries.govt.nz)</li><li><a href="https://www.freecodecamp.org/">https://www.freecodecamp.org/</a></li><li><a href="https://www.pluralsight.com/">https://www.pluralsight.com</a> (!free, monthly subscription)</li><li><a href="https://academind.com/learn/">https://academind.com/learn/</a> (some free, some once off purchase also monthly)</li></ul><h3 id="Class-Central"><a href="#Class-Central" class="headerlink" title="Class Central"></a>Class Central</h3><p>Learn from the best. Discover thousands of free online courses from top universities around the world like MIT, Stanford, and Harvard.</p><ul><li><a href="https://www.classcentral.com/">https://www.classcentral.com/</a></li></ul><h3 id="Containers-amp-Cloud"><a href="#Containers-amp-Cloud" class="headerlink" title="Containers &amp; Cloud"></a>Containers &amp; Cloud</h3><ul><li><a href="https://www.qwiklabs.com/">https://www.qwiklabs.com/</a> (!free)</li><li><a href="http://container.training/">http://container.training</a></li></ul><h3 id="NET-amp-ASP-NET"><a href="#NET-amp-ASP-NET" class="headerlink" title=".NET &amp; ASP.NET"></a>.NET &amp; ASP.NET</h3><ul><li><a href="https://www.youtube.com/user/IAmTimCorey/playlists/">https://www.youtube.com/user/IAmTimCorey/playlists/</a> (Heaps on C#)</li><li><a href="https://www.youtube.com/c/dotNET/playlists/">https://www.youtube.com/c/dotNET/playlists/</a></li><li><a href="https://www.youtube.com/c/csharpfritz/playlists/">https://www.youtube.com/c/csharpfritz/playlists/</a></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="https://realpython.com/">https://realpython.com/</a></li></ul><h3 id="Uncategorized"><a href="#Uncategorized" class="headerlink" title="Uncategorized"></a>Uncategorized</h3><ul><li><a href="https://channel9.msdn.com/">https://channel9.msdn.com</a></li><li><a href="https://www.w3schools.com/">https://www.w3schools.com</a></li><li><a href="https://mva.microsoft.com/">https://mva.microsoft.com</a></li><li><a href="https://www.edx.org/">https://www.edx.org</a></li><li><a href="https://www.coursera.org/?authMode=signup">https://www.coursera.org</a></li><li><a href="https://www.udacity.com/">https://www.udacity.com</a></li><li><a href="https://egghead.io/">https://egghead.io</a></li><li><a href="https://codewithmosh.com/courses">https://codewithmosh.com/courses</a></li><li><a href="https://linuxacademy.com/">https://linuxacademy.com/</a></li><li><a href="https://frontendmasters.com/">https://frontendmasters.com/</a> (subscription based)</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.freecodecamp.org/news/free-online-programming-cs-courses/">https://www.freecodecamp.org/news/free-online-programming-cs-courses/</a></li><li><a href="https://medium.com/quick-code/the-best-free-resources-to-learn-programming-online-in-2019-4dfe23a62c7f">https://medium.com/quick-code/the-best-free-resources-to-learn-programming-online-in-2019-4dfe23a62c7f</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spelling Lessons</title>
      <link href="/2019/01/spelling-lessons/"/>
      <url>/2019/01/spelling-lessons/</url>
      
        <content type="html"><![CDATA[<p>Early on in my working career I did telephonic and Email support for <a href="https://vodacommessaging.co.za/">Vodacom Messaging</a> which is run by <a href="https://www.aat.co.za/">Always Active Technologies</a> in Kloof, South Africa. I struggled with spelling and grammar but fortunately a senior Systems Architect took a personal interest in me and often commented on my Emails offering advice, spelling and grammar corrections.</p><p>Later he was fundamental in my software development path and I will forever be grateful for the help and patience. These days I try read and learn as much as possible, this page dedicated to documenting words I have to google the meaning of and would probably struggle to spell.</p><ul><li><a href="https://dictionary.cambridge.org/dictionary/english/arbiter">Arbiters</a><ul><li>A person who settles a dispute or has ultimate authority in a matter.</li></ul></li><li><a href="https://en.wikipedia.org/wiki/Software_entropy">Code Entropy</a><ul><li>As systems around our code change, the code left untouched becomes brittle.</li></ul></li><li><a href="https://www.lexico.com/en/definition/corollary">Corollary</a><ul><li>A proposition that follows from (and is often appended to) one already proved.</li></ul></li><li><a href="https://www.lexico.com/en/definition/eschew">Eschews</a><ul><li>Deliberately avoid using; abstain from.</li></ul></li><li><a href="https://www.lexico.com/en/definition/neophyte">Neophyte</a><ul><li>A person who is new to a subject or activity.</li></ul></li><li><a href="https://www.dictionary.com/browse/paradigm">Paradigm</a><ul><li>A typical example or pattern of something; a pattern or model.</li></ul></li><li><a href="https://www.todaysoftmag.com/article/1070/pragmatism-in-programming#:~:text=In%20the%20field%20of%20programming,the%20code%20in%20the%20future.">Pragmatism</a><ul><li>In the field of programming, this term refers to the “best practices” of programming.</li></ul></li><li><a href="https://www.lexico.com/en/definition/stylistically">Stylistically</a><ul><li>In a way that relates to the style in which something is written or done.</li></ul></li><li><a href="https://dictionary.cambridge.org/dictionary/english/succinct">Succinctly</a><ul><li>In a brief and clearly expressed manner.</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> learning resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vendor Prefixes</title>
      <link href="/2019/01/css-vendor-prefixes/"/>
      <url>/2019/01/css-vendor-prefixes/</url>
      
        <content type="html"><![CDATA[<p><strong>CSS vendor prefixes</strong>, also sometimes known as or <strong>CSS browser prefixes</strong>, are a way for <strong>browser</strong> makers to <strong>add</strong> support for new <strong>CSS</strong> features before those features are fully supported in all browsers.</p><p>Using a tool like an online tool like <a href="https://autoprefixer.github.io/">autoprefixer</a> can determine what prefixes need to be added. Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// recommended <span class="selector-tag">to</span> be</span><br><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    -webkit-box-<span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">    -ms-<span class="attribute">flex</span>-positive:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is using recommendations from [<a href="https://caniuse.com/#search=CSS%20Flexible%20Box%20Layout%20Module]">https://caniuse.com/#search=CSS%20Flexible%20Box%20Layout%20Module]</a>(<a href="https://caniuse.com/#search=CSS">https://caniuse.com/#search=CSS</a> Flexible Box Layout Module)</p><h3 id="Prefix-Browser-Relationship"><a href="#Prefix-Browser-Relationship" class="headerlink" title="Prefix Browser Relationship"></a>Prefix Browser Relationship</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-ms                ~ IE</span><br><span class="line">-webkit            ~ Chrome, Safari</span><br><span class="line">-moz               ~ Firefox</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://autoprefixer.github.io/">https://autoprefixer.github.io/</a></li><li><a href="https://caniuse.com/">https://caniuse.com/</a></li><li><a href="https://www.lifewire.com/css-vendor-prefixes-3466867">https://www.lifewire.com/css-vendor-prefixes-3466867</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Common Features</title>
      <link href="/2019/01/angular-common-features/"/>
      <url>/2019/01/angular-common-features/</url>
      
        <content type="html"><![CDATA[<p>Common features of Angular’s template syntax, the source code for the below is available at <a href="https://github.com/carlpaton/angular.io-start">https://github.com/carlpaton/angular.io-start</a> and was built using <a href="https://angular.io/start">https://angular.io/start</a></p><h3 id="ngFor"><a href="#ngFor" class="headerlink" title="ngFor"></a>ngFor</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let product of products&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">product-list.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; products &#125; <span class="keyword">from</span> <span class="string">&#x27;../products&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product-list&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product-list.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./product-list.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductListComponent</span> &#123;</span><br><span class="line">  products = products;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> products = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Phone XL&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">799</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;A large phone with one of the best screens&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="ngIf-Interpolation"><a href="#ngIf-Interpolation" class="headerlink" title="ngIf, Interpolation { { } }"></a>ngIf, Interpolation { { } }</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;product.description&quot;</span>&gt;</span></span><br><span class="line">Description: &#123;&#123; product.description &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Property-binding"><a href="#Property-binding" class="headerlink" title="Property binding [ ]"></a>Property binding [ ]</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">title</span>]=<span class="string">&quot;product.name + &#x27; details&#x27;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; product.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Event-binding"><a href="#Event-binding" class="headerlink" title="Event binding ( )"></a>Event binding ( )</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;share()&quot;</span>&gt;</span></span><br><span class="line">Share</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">product-list.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductListComponent</span> &#123;</span><br><span class="line">  products = products;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">share</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;The product has been shared hoe!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Here <code>product</code> is created in the <code>ngFor</code>  loop and is an input to component <code>app-product-alerts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product-list.<span class="property">component</span>.<span class="property">html</span></span><br><span class="line"></span><br><span class="line">&lt;div *ngFor=<span class="string">&quot;let product of products&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-alerts</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    [<span class="attr">product</span>]=<span class="string">&quot;product&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &lt;/<span class="attr">app-product-alerts</span>&gt;</span></span>  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>A property named <code>product</code> is defined with an <code>@Input</code> decorator</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductAlertsComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This input can then be used in the html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;product.price &gt; 700&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Notify Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Emit an event up to the product list component from <code>product-alerts.component</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Output</span>, <span class="title class_">EventEmitter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductAlertsComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() product;</span><br><span class="line">  <span class="meta">@Output</span>() notify = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Event binding to call the <code>notify.emit()</code> method</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">product-alerts.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;product.price &gt; 700&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;notify.emit()&quot;</span>&gt;</span>Notify Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Behavior that should happen when the button is clicked (In the parent component <code>product-list.component</code>)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product-list.<span class="property">component</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductListComponent</span> &#123;</span><br><span class="line">  <span class="title function_">onNotify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;You will be notified when the product goes on sale&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Update the product list component to receive output from the product alerts component.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">product-list.component.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">app-product-alerts</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">product</span>]=<span class="string">&quot;product&quot;</span> </span></span><br><span class="line"><span class="tag">  (<span class="attr">notify</span>)=<span class="string">&quot;onNotify()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product-alerts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/template-syntax">https://angular.io/guide/template-syntax</a></li><li><a href="https://angular.io/guide/component-interaction">https://angular.io/guide/component-interaction</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Reference</title>
      <link href="/2019/01/angular-reference/"/>
      <url>/2019/01/angular-reference/</url>
      
        <content type="html"><![CDATA[<h3 id="Change-detection"><a href="#Change-detection" class="headerlink" title="Change detection"></a>Change detection</h3><ul><li><a href="https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f">https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f</a></li><li><a href="https://medium.com/@bencabanes/angular-change-detection-strategy-an-introduction-819aaa7204e7">https://medium.com/@bencabanes/angular-change-detection-strategy-an-introduction-819aaa7204e7</a></li></ul><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><ul><li><a href="https://medium.com/@luukgruijs/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0">https://medium.com/@luukgruijs/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0</a></li></ul><h3 id="Unsubscribe-RxJS-Observables"><a href="#Unsubscribe-RxJS-Observables" class="headerlink" title="Unsubscribe RxJS Observables"></a>Unsubscribe RxJS Observables</h3><ul><li><a href="https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0">https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0</a></li></ul><h3 id="NgRx"><a href="#NgRx" class="headerlink" title="NgRx"></a>NgRx</h3><ul><li><a href="https://www.udemy.com/ngrx-course/">https://www.udemy.com/ngrx-course/</a> ~ NgRx In Depth (Angular 8)</li><li><a href="https://ngrx.io/guide/store">https://ngrx.io/guide/store</a></li><li><a href="https://www.lynda.com/Angular-tutorials/Learning-NgRx/709847-2.html">https://www.lynda.com/Angular-tutorials/Learning-NgRx/709847-2.html</a> ~ Rel. 8/3/2018</li></ul><h3 id="Ubuntu-Setup"><a href="#Ubuntu-Setup" class="headerlink" title="Ubuntu Setup"></a>Ubuntu Setup</h3><ul><li><a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall">https://github.com/nodesource/distributions/blob/master/README.md#debinstall</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - </span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">sudo apt install npm</span><br><span class="line">sudo npm install -g @angular/cli</span><br><span class="line"></span><br><span class="line">-- update npm with &#x27;n&#x27; if you cant update the version with the above</span><br><span class="line">sudo npm install -g n</span><br><span class="line">sudo n latest</span><br><span class="line"></span><br><span class="line">-- restore dependencies after git clone</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Pipes</title>
      <link href="/2019/01/angular-pipes/"/>
      <url>/2019/01/angular-pipes/</url>
      
        <content type="html"><![CDATA[<p>Recently while building a new feature I found that moving logic out of the the .ts file into a pipe would make it far more re-usable in other components. The progression of this piece of work went under several revisions to reduce coupling and increase cohesion. </p><p>The initial logic looked something like this and was used to set the value of a public member ‘<em>displayInfo</em>‘ at <em>ngOnChanges</em> by calling <em>getDisplayInfo</em></p><p>The value of displayInfo was then displayed in the .html file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">some-example.<span class="property">components</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line">public getDisplayInfo (<span class="attr">obj1</span>: <span class="title class_">CustomType1</span>,  </span><br><span class="line"><span class="attr">obj2</span>: <span class="title class_">CustomType2</span>,  </span><br><span class="line"><span class="attr">obj3</span>: <span class="title class_">CustomType3</span>): string &#123; </span><br><span class="line">   <span class="keyword">let</span> details = [];</span><br><span class="line">   <span class="keyword">if</span> (obj1) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; prop1, prop2 &#125; = obj1; </span><br><span class="line">      details.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;prop1&#125;</span> with some text and <span class="subst">$&#123;prop2&#125;</span>.`</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// other simliar logic using obj2 and obj3   </span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> details.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some-example.components.html</span><br><span class="line"></span><br><span class="line">&#123;&#123; displayInfo &#125;&#125;</span><br></pre></td></tr></table></figure><p>This worked however could be made better with a pipe as follows</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">display-info.<span class="property">pipe</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>; </span><br><span class="line"><span class="comment">// other type imports</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Pipe</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sweetPrefixDisplayInfo&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DisplayInfo</span> <span class="title class_">Pipe</span> implements <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">    public transform (<span class="attr">obj1</span>: <span class="title class_">CustomType1</span>, <span class="attr">obj2</span>: <span class="title class_">CustomType2</span>,  </span><br><span class="line"><span class="attr">obj3</span>: <span class="title class_">CustomType3</span>): string &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// exact logic from getDisplayInfo in &#x27;some-example.components.ts&#x27; </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">display-info.<span class="property">module</span>.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropertySearchCardDetailsPipe</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./display-info.pipe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">declarations</span>: [</span><br><span class="line">         <span class="title class_">DisplayInfoPipe</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">exports</span>: [</span><br><span class="line">         <span class="title class_">DisplayInfoPipe</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DisplayInfoPipeModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>The pipe was then imported as ‘DisplayInfoPipeModule’ into the module for my component in its module file <em>some-example.module.ts</em> This was then called in <em>some-example.components.ts</em> as follows</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some-example.components.html</span><br><span class="line"></span><br><span class="line">&#123;&#123; obj1 | sweetPrefixDisplayInfo:obj2:obj3 &#125;&#125;</span><br></pre></td></tr></table></figure><p>In my opinion this not only looks awkward but is not really how a pipe is intended to be used. It really should be seen as ‘hey sweetPrefixDisplayInfo take this value and format it’ the additional parameters could be to include additional formatting.</p><p>Example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; obj1.<span class="property">SomeDate</span> | <span class="attr">sweetPrefixDisplayInfo</span>:includeTime &#125;&#125;</span><br></pre></td></tr></table></figure><p>However in my case we were creating a sentence string from three complex objects with rules to include parts of the sentence should valid objects be passed, these are the obj1, obj2 and obj3 objects. </p><p>As obj1, obj2 and obj3 are complex objects the pipe would not make use of all their properties, this is a code smell which is violating <a href="/2018/05/single-responsibility-principle-srp/">single responsibility</a> and <a href="/2018/04/interface-segregation-principle-isp/">interface segregation</a> principles.</p><p>The cleaner solution I feel would be to still use the pipe and introduce a new object specific to its function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DisplayInfoData</span> &#123;</span><br><span class="line">    public <span class="attr">somePropWeCareAbout1</span>: string; </span><br><span class="line">    public <span class="attr">somePropWeCareAbout2</span>: string;</span><br><span class="line">    public <span class="attr">somePropWeCareAbout3</span>: string;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ect  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Then set a public property <em>fooDisplayInfo</em> in <em>some-example.components.ts</em> to the value of an instance of the type DisplayInfoData with the properties mapped from obj1, obj2 and obj3</p><p>Then call the pipe as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; fooDisplayInfo | sweetPrefixDisplayInfo &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://angular.io/guide/pipes">https://angular.io/guide/pipes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex</title>
      <link href="/2019/01/css-flex/"/>
      <url>/2019/01/css-flex/</url>
      
        <content type="html"><![CDATA[<p>Flex Direction</p><ul><li><a href="https://codepen.io/charleyza/pen/qgBNgQ">https://codepen.io/charleyza/pen/qgBNgQ</a></li></ul><p>Flex Grow</p><ul><li><a href="https://codepen.io/charleyza/pen/RvwRdX">https://codepen.io/charleyza/pen/RvwRdX</a></li></ul><p>Flex</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex: 0 0 auto;</span><br></pre></td></tr></table></figure><p>Is the same as:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flex-grow: 0;</span><br><span class="line"></span><br><span class="line">flex-shrink: 0;</span><br><span class="line"></span><br><span class="line">flex-basis: auto;</span><br></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://codepen.io/collection/ngWZpo/">https://codepen.io/collection/ngWZpo/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Screen Shots</title>
      <link href="/2019/01/screen-shots/"/>
      <url>/2019/01/screen-shots/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://cloudshot.com/">http://cloudshot.com/</a></li><li><a href="https://support.microsoft.com/en-nz/help/13776/windows-use-snipping-tool-to-capture-screenshots">https://support.microsoft.com/en-nz/help/13776/windows-use-snipping-tool-to-capture-screenshots</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular CLI</title>
      <link href="/2019/01/angular-cli/"/>
      <url>/2019/01/angular-cli/</url>
      
        <content type="html"><![CDATA[<p>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate directive highlight</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://angular.io/cli">https://angular.io/cli</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Directives</title>
      <link href="/2019/01/angular-directives/"/>
      <url>/2019/01/angular-directives/</url>
      
        <content type="html"><![CDATA[<h2 id="Attribute-directives"><a href="#Attribute-directives" class="headerlink" title="Attribute directives"></a>Attribute directives</h2><p>An <strong>Attribute</strong> directive changes the appearance or behavior of a DOM element.</p><h3 id="routerLink"><a href="#routerLink" class="headerlink" title="routerLink"></a>routerLink</h3><p>Here <code>queryParams</code> is an input which is being set in the <code>fooParam$</code> observable, this would be useful to carry params from one page to another.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;some-bem__class&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">routerLink</span>=<span class="string">&quot;&#123;&#123; link.url &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">[<span class="attr">queryParams</span>]=<span class="string">&quot;(fooParam$ | async )&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; link.title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://angular.io/api/router/RouterLink">https://angular.io/api/router/RouterLink</a> </li><li><a href="https://angular.io/guide/attribute-directives">https://angular.io/guide/attribute-directives</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BEM - Blocks Elements and Modifiers</title>
      <link href="/2019/01/css-bem/"/>
      <url>/2019/01/css-bem/</url>
      
        <content type="html"><![CDATA[<p><strong>Block</strong>, encapsulates a standalone entity that is meaningful on its own such as a <code>nav</code> block.</p><p><strong>Element</strong>, parts of a block and have no standalone meaning. Any element is semantically tied to its block such as <code>.list-item-link</code></p><p><strong>Modifier</strong>, flags on blocks or elements used to change appearance, behavior or state such as <code>--hidden</code> or <code>--hover</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BLOCK__ELEMENT--MODIFIER</span><br><span class="line">nav__list-item-link--active</span><br></pre></td></tr></table></figure><p><img src="/d/css-bem/css-bem.png" alt="BEM Example"></p><p>Contrived example using common html elements <code>ul</code>, <code>li</code> and <code>a</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Explore<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Marketplace<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Classes that can be used</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>    -&gt;    <span class="selector-class">.list</span></span><br><span class="line"><span class="selector-tag">li</span>    -&gt;    <span class="selector-class">.list-item</span></span><br><span class="line"><span class="selector-tag">a</span>     -&gt;    <span class="selector-class">.list-item-link</span></span><br></pre></td></tr></table></figure><p>So finally this would be</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;gh-nav__list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;gh-nav__list-item-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Explore<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;gh-nav__list-item-link gh-nav__list-item-link--hover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Marketplace<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://getbem.com/introduction/">http://getbem.com/introduction/</a></li><li><a href="https://codepen.io/charleyza/pen/OJLGvZM">https://codepen.io/charleyza/pen/OJLGvZM</a></li><li><a href="https://fonts.google.com/?selection.family=Mansalva">https://fonts.google.com/?selection.family=Mansalva</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boxing size</title>
      <link href="/2019/01/css-boxing-size/"/>
      <url>/2019/01/css-boxing-size/</url>
      
        <content type="html"><![CDATA[<p>Boxing Size</p><ul><li><a href="https://codepen.io/charleyza/pen/ErxgKO">https://codepen.io/charleyza/pen/ErxgKO</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Specificity and selectors</title>
      <link href="/2019/01/css-specificity-and-selectors/"/>
      <url>/2019/01/css-specificity-and-selectors/</url>
      
        <content type="html"><![CDATA[<h3 id="Specificity"><a href="#Specificity" class="headerlink" title="Specificity"></a>Specificity</h3><p>Specificity uses a four-category system to give a CSS selector a value. The selector with the most specific value wins. Each </p><table><thead><tr><th>Specificity</th><th>High</th><th></th><th></th><th>Low</th></tr></thead><tbody><tr><td>Selector</td><td>Inline</td><td>ID</td><td>Class, pseudo-class, attribute</td><td>element</td></tr><tr><td>Weight</td><td>1,0,0,0</td><td>0,1,0,0</td><td>0,0,1,0</td><td>0,0,0,1</td></tr></tbody></table><p>Examples:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nav#nav &gt; li:hover &#123; colour:red; &#125;</span><br><span class="line">Results in 0,1,1,2</span><br><span class="line"></span><br><span class="line">li:nth-child(2):hover &#123; color:red; &#125;</span><br><span class="line">Results in 0,0,2,1</span><br></pre></td></tr></table></figure><h3 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h3><p>These can help you add weight to the <code>Specificity</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.myDiv &#123;</span><br><span class="line">    padding-top: 50px;</span><br><span class="line">    margin-top: -50px;    </span><br><span class="line">    </span><br><span class="line">    &amp;.myDiv2 &#123;</span><br><span class="line">    padding-top: 150px;</span><br><span class="line">    margin-top: -150px;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*Resulting CSS and what it would select on</span><br><span class="line"></span><br><span class="line">.myDiv &#123; padding-top: 50px; margin-top: -50px; &#125;               ~ 0,0,1,0</span><br><span class="line">.myDiv.myDiv2 &#123; padding-top: 150px; margin-top: -150px; &#125;      ~ 0,0,2,0</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;myDiv myDiv2&quot;&gt;&lt;/div&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Universal-and-combinator-selectors"><a href="#Universal-and-combinator-selectors" class="headerlink" title="Universal and combinator selectors"></a>Universal and combinator selectors</h4><p>These have no effect on specificity.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// universal selector (*) matches elements of any type.</span><br><span class="line"></span><br><span class="line">* &#123; <span class="attribute">box-sizing</span>: border-box; <span class="attribute">font-family</span>: <span class="string">&quot;Open Sans&quot;</span>, sans-serif; &#125;</span><br><span class="line"></span><br><span class="line">// The adjacent sibling combinator (+) separates two selectors and matches the second element only if it immediately follows the first element, and both are children of the same parent element. Example: Paragraphs that come immediately after any image</span><br><span class="line"></span><br><span class="line">img + p &#123; <span class="attribute">font-style</span>: bold; &#125;</span><br><span class="line"></span><br><span class="line">// The child combinator (&gt;) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the children of elements matched by the first. Example: List items that are children of the <span class="string">&quot;my-things&quot;</span> list</span><br><span class="line"></span><br><span class="line">ul.my-things &gt; li &#123; <span class="attribute">margin</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"></span><br><span class="line">// The general sibling combinator (~) separates two selectors and matches the second element only if it follows the first element (though not necessarily immediately), and both are children of the same parent element. Example: Paragraphs that are siblings of and subsequent to any image</span><br><span class="line"></span><br><span class="line">img ~ p &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line">// The descendant combinator — typically represented by <span class="selector-tag">a</span> single space ( ) character. Example: List items that are descendants of the <span class="string">&quot;my-things&quot;</span> list</span><br><span class="line"></span><br><span class="line">ul.my-things li &#123; <span class="attribute">margin</span>: <span class="number">2em</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="pseudo-class"><a href="#pseudo-class" class="headerlink" title="pseudo-class"></a>pseudo-class</h4><p>Common <code>pseudo-class</code> selectors</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&amp;:first-child &#123;</span><br><span class="line">    margin-left: -8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&amp;:last-child &#123;</span><br><span class="line">    margin-bottom: 28px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&amp;:visited &#123;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:nth-child(1) &#123;</span><br><span class="line">    width: 900px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Attribute-Selector"><a href="#Attribute-Selector" class="headerlink" title="Attribute Selector"></a>Attribute Selector</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.someClass[someAttribute]</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity</a></li><li><a href="https://www.w3schools.com/css/css_specificity.asp">https://www.w3schools.com/css/css_specificity.asp</a></li><li><a href="https://dev.to/emmawedekind/css-specificity-1kca">https://dev.to/emmawedekind/css-specificity-1kca</a></li><li><a href="https://specifishity.com/">https://specifishity.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Boolean Coercion</title>
      <link href="/2019/01/js-boolean-coercion/"/>
      <url>/2019/01/js-boolean-coercion/</url>
      
        <content type="html"><![CDATA[<p>Boolean coercion: In javascript coercion, all values are converted to true except for the following values which are coerced to false:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(!!&quot;&quot;);         // false</span><br><span class="line">console.log(!!0);          // false</span><br><span class="line">console.log(!!null);       // false</span><br><span class="line">console.log(!!undefined);  // false</span><br><span class="line">console.log(!!NaN);        // false</span><br><span class="line">console.log(!!false);      // false</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript">https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing with MSTest</title>
      <link href="/2018/12/unit-testing-with-mstest/"/>
      <url>/2018/12/unit-testing-with-mstest/</url>
      
        <content type="html"><![CDATA[<h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line">[TestClass]</span><br><span class="line">public class MyClassTests</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   [TestMethod]</span><br><span class="line">   public void UnitOfWork_InitialCondition_ExpectedResult()</span><br><span class="line">   &#123;</span><br><span class="line">      // Arrange</span><br><span class="line">      // Act</span><br><span class="line">      // Assert</span><br><span class="line">      Assert.AreEqual(expected, actual);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-Asserts"><a href="#Other-Asserts" class="headerlink" title="Other Asserts"></a>Other Asserts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.IsTrue</span><br></pre></td></tr></table></figure><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>ThrowsException</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Act</span><br><span class="line">var exception = Assert.ThrowsException&lt;ArgumentException&gt;(() =&gt; classUnderTest.UnitOfWork(&quot;foo&quot;, &quot;bar&quot;));</span><br><span class="line"></span><br><span class="line">// Assert</span><br><span class="line">Assert.AreEqual(expected, exception.Message);</span><br></pre></td></tr></table></figure><p>ExpectedException</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ExpectedException(typeof(MyException))]</span><br><span class="line">[TestMethod]</span><br><span class="line">public void UnitOfWork_InitialCondition_ExpectedResult()</span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing">https://docs.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing</a></li><li><a href="https://www.automatetheplanet.com/mstest-cheat-sheet/#tab-con-3">https://www.automatetheplanet.com/mstest-cheat-sheet/#tab-con-3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit testing with NUnit</title>
      <link href="/2018/12/unit-testing-with-nunit/"/>
      <url>/2018/12/unit-testing-with-nunit/</url>
      
        <content type="html"><![CDATA[<p>Install from Nuget <code>3.12.0</code>, the <code>Mock</code> references below are from <a href="/2018/09/mocking-frameworks/">Moq</a> and the example’s <code>Unit Of Work</code> is <code>SomeMethod</code>.</p><h3 id="Assert-AreEqual"><a href="#Assert-AreEqual" class="headerlink" title="Assert.AreEqual"></a>Assert.AreEqual</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using Moq;</span><br><span class="line">using NUnit.Framework;</span><br><span class="line"></span><br><span class="line">[TestFixture]</span><br><span class="line">public class MyClassTest</span><br><span class="line">&#123;</span><br><span class="line">    private Mock&lt;ISomeService&gt; _someServiceMock;</span><br><span class="line"></span><br><span class="line">    [SetUp]</span><br><span class="line">    public void SetUp()</span><br><span class="line">    &#123;</span><br><span class="line">    _someServiceMock = new Mock&lt;ISomeService&gt;();    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [Test]</span><br><span class="line">    public void SomeMethod_initialCondition_expectedResult()</span><br><span class="line">    &#123;</span><br><span class="line">        // Arrange</span><br><span class="line">        var expected = &quot;hoe&quot;;</span><br><span class="line"></span><br><span class="line">        _someServiceMock</span><br><span class="line">        .Setup(x =&gt; x.SomeServiceMethod(someValue))</span><br><span class="line">        .Returns(true);</span><br><span class="line">        </span><br><span class="line">        var classUnderTest = new MyClass(_someServiceMock.Object);</span><br><span class="line"></span><br><span class="line">        // Act</span><br><span class="line">        var actual = classUnderTest.SomeMethod(..parms);</span><br><span class="line"></span><br><span class="line">        // Assert</span><br><span class="line">        Assert.AreEqual(expected, actual);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Assert-Throws"><a href="#Assert-Throws" class="headerlink" title="Assert.Throws"></a>Assert.Throws</h3><p>Assert type of <code>MyException</code> was thrown.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assert</span></span><br><span class="line">Assert.Throws&lt;MyException&gt;(() =&gt; classUnderTest.SomeMethod(paramValue1, paramValue2));</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.Throws.html">https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.Throws.html</a></li><li><a href="https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.ThrowsAsync.html">https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.ThrowsAsync.html</a></li></ul><h3 id="Verify"><a href="#Verify" class="headerlink" title=".Verify"></a>.Verify</h3><p>Assert a method in the mocked service was called once.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Assert</span><br><span class="line">_someServiceMock.Verify(</span><br><span class="line">   x =&gt; x.SomeOtherServiceMethod(paramValue1),</span><br><span class="line">   Times.Once());</span><br></pre></td></tr></table></figure><h3 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h3><p>Pass parameters to a test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[TestCase(-1, &quot;hoe&quot;)]</span><br><span class="line">[TestCase(42, &quot;foo&quot;)]</span><br><span class="line">public void SomeMethod_initialCondition_expectedResult(int someId, string someText)</span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="TestCaseSource"><a href="#TestCaseSource" class="headerlink" title="TestCaseSource"></a>TestCaseSource</h3><p>Pass the test an array of data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[TestCaseSource(&quot;GetSweetData&quot;)]</span><br><span class="line">public void SomeMethod_initial_condition_expected_result(int someId, string someText)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static readonly object[] GetSweetData = new List&lt;object&gt;()</span><br><span class="line">&#123;</span><br><span class="line">   new object[]&#123; 123, &quot;Some Data&quot; &#125;,</span><br><span class="line">   new object[]&#123; 456, &quot;Some Other Data&quot; &#125;,</span><br><span class="line">&#125;.ToArray();</span><br></pre></td></tr></table></figure><ul><li><a href="https://fluentassertions.com/introduction">https://fluentassertions.com/introduction</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.nuget.org/packages/NUnit/">https://www.nuget.org/packages/NUnit/</a></li><li><a href="https://ardalis.com/unit-test-naming-convention">https://ardalis.com/unit-test-naming-convention</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit">https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit</a></li><li><a href="https://github.com/nunit/docs/wiki/TestCaseSource-Attribute">TestCaseSource Attribute</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IEquatable</title>
      <link href="/2018/10/iequatable/"/>
      <url>/2018/10/iequatable/</url>
      
        <content type="html"><![CDATA[<p>Can be used to determine equality of class instances.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">obj1.Equals(obj2) <span class="comment">// will return false as the memory reference is not the same</span></span><br></pre></td></tr></table></figure><h3 id="Object-State-Equality"><a href="#Object-State-Equality" class="headerlink" title="Object State Equality"></a>Object State Equality</h3><p>Consider <code>Foo</code> has the following properties, for the above these would have received the default values right? So 0 and Null, so why did the quality fail? We already know it was the memory reference not being the same as custom types like <code>Foo</code> are reference types. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Desc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can fix this by simply inheriting and implementing <code>IEquatable&lt;T&gt;</code> where <code>T</code> is the type you want to compare with.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span> : <span class="title">IEquatable</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Desc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Equals</span>(<span class="params">Foo other</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ReferenceEquals(other, <span class="literal">null</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ReferenceEquals(<span class="keyword">this</span>, other))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (Id == other.Id</span><br><span class="line">                    &amp;&amp; Desc == other.Desc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">This method is used to return the hash code for this instance. A hash code is a numeric value which is used to insert and identify an object in a hash-based collection. The GetHashCode method provides this hash code for algorithms that need quick checks of object equality.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">GetHashCode</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Logical exclusive OR operator ^ is for compound assignment</span></span><br><span class="line">            <span class="built_in">int</span> hash = <span class="number">0</span>;</span><br><span class="line">            hash ^= Id.GetHashCode();</span><br><span class="line">            hash ^= Desc.GetHashCode();</span><br><span class="line">            <span class="keyword">return</span> hash;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So now equals has been overridden to compare the state. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Foo()</span><br><span class="line">&#123;</span><br><span class="line">Id = <span class="number">42</span>,</span><br><span class="line">Desc = <span class="string">&quot;Hoe&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Foo()</span><br><span class="line">&#123;</span><br><span class="line">Id = <span class="number">42</span>,</span><br><span class="line">Desc = <span class="string">&quot;Hoe&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.Equals(obj2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#compound-assignment">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#compound-assignment</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1">https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1</a></li><li><a href="https://www.geeksforgeeks.org/c-sharp-object-gethashcode-method-with-examples/">https://www.geeksforgeeks.org/c-sharp-object-gethashcode-method-with-examples/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Runners</title>
      <link href="/2018/09/test-runners/"/>
      <url>/2018/09/test-runners/</url>
      
        <content type="html"><![CDATA[<h3 id="Resharper-–-Unit-Test-Sessions"><a href="#Resharper-–-Unit-Test-Sessions" class="headerlink" title="Resharper – Unit Test Sessions"></a>Resharper – Unit Test Sessions</h3><ul><li><a href="https://www.jetbrains.com/help/resharper/Reference__Windows__Unit_Test_Sessions.html">Unit Test Sessions window</a></li><li><a href="https://www.jetbrains.com/help/resharper/Using_Unit_Test_Sessions.html">Using Unit Test Sessions</a></li></ul><h3 id="Dotnet-Watch"><a href="#Dotnet-Watch" class="headerlink" title="Dotnet Watch"></a>Dotnet Watch</h3><p><code>dotnet-watch</code> is a file watcher for <code>dotnet</code> that restarts the specified application when changes in the source code are detected.</p><ul><li>CS to solution directory</li><li>dotnet build<ul><li>dotnet test (run once)</li><li>dotnet watch test (watch for changes)</li></ul></li></ul><p><img src="/d/test-runners/dotnet-watch.png" alt="Dotnet Watch"></p><ul><li><a href="https://www.pluralsight.com/courses/test-driven-development-big-picture">https://www.pluralsight.com/courses/test-driven-development-big-picture</a></li><li><a href="https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/dotnet-watch.md">https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/dotnet-watch.md</a></li><li><a href="https://github.com/aspnet/DotNetTools/blob/master/src/dotnet-watch/README.md">https://github.com/aspnet/DotNetTools/blob/master/src/dotnet-watch/README.md</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>These 3 are listed in <a href="http://www.wrox.com/WileyCDA/WroxTitle/Professional-Test-Driven-Development-with-C-Developing-Real-World-Applications-with-TDD.productCd-047064320X.html">Professional Test Driven Development with C#: Developing Real World Applications with TDD</a></p><ul><li>TestDriven.NET</li><li>Developer Express Test Runner</li><li>Gallio</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Testing Frameworks</title>
      <link href="/2018/09/unit-testing-frameworks/"/>
      <url>/2018/09/unit-testing-frameworks/</url>
      
        <content type="html"><![CDATA[<h3 id="NUnit"><a href="#NUnit" class="headerlink" title="NUnit"></a>NUnit</h3><ul><li>See <a href="/2018/12/unit-testing-with-nunit/">Unit testing with NUnit</a></li></ul><h3 id="MSTest"><a href="#MSTest" class="headerlink" title="MSTest"></a>MSTest</h3><ul><li>See <a href="/2018/12/unit-testing-with-mstest/">Unit testing with MSTest</a></li></ul><h3 id="xUnit-net"><a href="#xUnit-net" class="headerlink" title="xUnit.net"></a>xUnit.net</h3><ul><li>See <a href="/2019/06/unit-testing-with-xunit/">Unit testing with xUnit</a></li></ul><h3 id="MbUnit"><a href="#MbUnit" class="headerlink" title="MbUnit"></a>MbUnit</h3><ul><li><a href="https://www.nuget.org/packages/mbunit/">https://www.nuget.org/packages/mbunit/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking Frameworks</title>
      <link href="/2018/09/mocking-frameworks/"/>
      <url>/2018/09/mocking-frameworks/</url>
      
        <content type="html"><![CDATA[<h3 id="Moq"><a href="#Moq" class="headerlink" title="Moq"></a>Moq</h3><p>Moq is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using Moq;</span><br><span class="line"></span><br><span class="line">var mockClientRepository = new Mock&lt;IClientRepository&gt;();</span><br><span class="line"></span><br><span class="line">mockClientRepository</span><br><span class="line">   .Setup(x =&gt; x.SelectList())</span><br><span class="line">   .Returns(new List&lt;ClientModel&gt; &#123; new ClientModel(&quot;Name&quot;, &quot;Surname&quot;) &#125;);</span><br><span class="line">  </span><br><span class="line">// then inject as `mockClientRepository.Object`</span><br></pre></td></tr></table></figure><p>If the method being mocked (<code>SelectList</code>) has parameters you don’t care about then you can mock them with <code>It.IsAny</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It.IsAny&lt;string&gt;()</span><br><span class="line">It.IsAny&lt;int&gt;()</span><br></pre></td></tr></table></figure><ul><li><a href="/2018/12/unit-testing-with-nunit/">See Unit testing with NUnit</a> </li><li><a href="https://github.com/Moq/moq4/wiki/Quickstart">https://github.com/Moq/moq4/wiki/Quickstart</a></li><li><a href="https://developerhandbook.com/unit-testing/writing-unit-tests-with-nunit-and-moq/">https://developerhandbook.com/unit-testing/writing-unit-tests-with-nunit-and-moq/</a></li><li><a href="http://www.aamiraftab.com/unit-testing-repository-pattern-using-moq-shouldly-in-xunit-framework/">http://www.aamiraftab.com/unit-testing-repository-pattern-using-moq-shouldly-in-xunit-framework/</a></li><li><a href="https://www.codeproject.com/Articles/47603/Mock-a-Database-Repository-using-Moq">https://www.codeproject.com/Articles/47603/Mock-a-Database-Repository-using-Moq</a></li><li><a href="https://www.pluralsight.com/courses/aspdotnet-core-mvc-testing-fundamentals">https://www.pluralsight.com/courses/aspdotnet-core-mvc-testing-fundamentals</a></li><li><a href="https://www.pluralsight.com/courses/mocking-with-moq">https://www.pluralsight.com/courses/mocking-with-moq</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li><a href="https://nsubstitute.github.io/">NSubstitute</a></li><li>Rhino Mocks</li><li>Type Mock</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
            <tag> mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection Frameworks</title>
      <link href="/2018/09/dependency-injection-frameworks/"/>
      <url>/2018/09/dependency-injection-frameworks/</url>
      
        <content type="html"><![CDATA[<p>Also see <a href="/2018/04/dependency-inversion-principle-dip/">Dependency Inversion Principle (DIP)</a>.</p><ul><li><a href="/2018/09/autofac/">Autofac</a></li><li><a href="/2018/09/ninject/">Ninject</a></li><li><a href="/2018/09/unity/">Unity</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li>Structure Map</li><li>Windsor</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autofac</title>
      <link href="/2018/09/autofac/"/>
      <url>/2018/09/autofac/</url>
      
        <content type="html"><![CDATA[<h3 id="Autofac-MVC-Example"><a href="#Autofac-MVC-Example" class="headerlink" title="Autofac (MVC Example)"></a>Autofac (MVC Example)</h3><p>Uses an IOC (Inversion of control) container, its simple to setup in an MVC application.</p><p>Install <code>Autofac</code> 5.2.0 and <code>Autofac.Extensions.DependencyInjection</code> 6.0.0</p><p><strong>Startup.cs</strong></p><p>The install should add <code>ConfigureContainer</code> to your <code>Startup.cs</code>, you dont need to build the container, you only nee to register things in it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureContainer(ContainerBuilder builder)</span><br><span class="line">&#123;</span><br><span class="line">builder.RegisterModule(new FooModule());</span><br><span class="line">builder.RegisterModule(new BarModule());</span><br><span class="line">builder.RegisterModule(new DataModule());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Modules</strong></p><p>Modules are a cool way to group things in a cohesive manner.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System.Linq;</span><br><span class="line">using Autofac;</span><br><span class="line"></span><br><span class="line">namespace fooapp.Plumbing.IoC</span><br><span class="line">&#123;</span><br><span class="line">    public class ModuleData : Module</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void Load(ContainerBuilder builder)</span><br><span class="line">        &#123;</span><br><span class="line">// register things using the builder</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Register things using the builder</strong></p><p>You can then use the power of reflection in the <code>DataModule</code> class above to resolve things from a repository, this is cool as it will resolve things like <code>ICoolRepository</code> to <code>CoolRepository</code> because they have the string <code>Repository</code> in their names.</p><p>Its pretty common to do this for a <a href="/2020/02/factory-pattern/">Factory</a> too.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterAssemblyTypes(System.Reflection.Assembly.GetAssembly(typeof(SomeBaseClass)))</span><br><span class="line">.Where(t =&gt; t.Name.EndsWith(&quot;Repository&quot;) || t.Name.EndsWith(&quot;Factory&quot;))</span><br><span class="line">        .AsImplementedInterfaces()</span><br><span class="line">        .SingleInstance();</span><br></pre></td></tr></table></figure><p>You can also look to the namespace when using reflection: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterAssemblyTypes(System.Reflection.Assembly.GetAssembly(typeof(SomeBaseClass)))</span><br><span class="line">.Where(t =&gt; t.IsInNamespace(&quot;fooapp.sweet.namespace&quot;))</span><br><span class="line">        .AsImplementedInterfaces()</span><br><span class="line">        .SingleInstance();</span><br></pre></td></tr></table></figure><p>Else if its a once off helper/magic just resolve directly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterInstance(new FooHelper()).As&lt;IFooHelper&gt;().SingleInstance();</span><br></pre></td></tr></table></figure><p><strong>SingleInstance</strong></p><p>Called in the fluent api examples above with <code>.SingleInstance();</code>, remember not have any state in anything that expects to exist as a <a href="/2020/02/singleton-pattern/">singleton</a>.</p><blockquote><p>Configure the component so that every dependent component or call to Resolve()</p></blockquote><h3 id="Autofac-Webforms-Example"><a href="#Autofac-Webforms-Example" class="headerlink" title="Autofac (Webforms Example)"></a>Autofac (Webforms Example)</h3><p>Uses an IOC (Inversion of control) container. This was useful in a legacy Web Forms application (Autofac, Version=4.8.1.0) however it would have worked just as well in the MVC application I used Unity in.</p><p>install <code>Autofac</code> 4.9.1 and <code>Autofac.Web</code> 4.0.0</p><p>Update web.config to include this below <code>system.webServer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">  &lt;add</span><br><span class="line">    name=&quot;ContainerDisposal&quot;</span><br><span class="line">    type=&quot;Autofac.Integration.Web.ContainerDisposalModule, Autofac.Integration.Web&quot;</span><br><span class="line">    preCondition=&quot;managedHandler&quot;/&gt;</span><br><span class="line">  &lt;add</span><br><span class="line">    name=&quot;PropertyInjection&quot;</span><br><span class="line">    type=&quot;Autofac.Integration.Web.Forms.PropertyInjectionModule, Autofac.Integration.Web&quot;</span><br><span class="line">    preCondition=&quot;managedHandler&quot;/&gt;</span><br><span class="line">&lt;/modules&gt;  </span><br></pre></td></tr></table></figure><p>Add <code>Global.asax</code> if it doesn’t already exist, implement <code>IContainerProviderAccessor</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Global : System.Web.HttpApplication, IContainerProviderAccessor</span><br></pre></td></tr></table></figure><p>Add some crap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// Provider that holds the application container.</span><br><span class="line">static IContainerProvider _containerProvider;</span><br><span class="line"></span><br><span class="line">// Instance property that will be used by Autofac HttpModules</span><br><span class="line">// to resolve and inject dependencies.</span><br><span class="line">public IContainerProvider ContainerProvider</span><br><span class="line">&#123;</span><br><span class="line">get &#123; return _containerProvider; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void Application_Start(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">// Build up your application container and register your dependencies.</span><br><span class="line">var builder = new ContainerBuilder();</span><br><span class="line">var connectionString = Tools.GetConnectionString(&quot;conn&quot;);</span><br><span class="line"></span><br><span class="line">// Your DI :D</span><br><span class="line">builder.Register(c =&gt; new MaterialRepository(connectionString))</span><br><span class="line">   .As&lt;IMaterialRepository&gt;();</span><br><span class="line"></span><br><span class="line">// Once you&#x27;re done registering things, set the container</span><br><span class="line">// provider up with your registrations.</span><br><span class="line">_containerProvider = new ContainerProvider(builder.Build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In your page code behind</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">namespace MyNameSpace</span><br><span class="line">&#123;</span><br><span class="line">    public partial class SomePage : System.Web.UI.Page</span><br><span class="line">    &#123;</span><br><span class="line">        public ISomeRepository _someRepository &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://autofac.org/">https://autofac.org/</a></li><li><a href="https://autofaccn.readthedocs.io/en/latest/integration/webforms.html">https://autofaccn.readthedocs.io/en/latest/integration/webforms.html</a></li></ul><h3 id="Contextual-Binding-Keyed-Services"><a href="#Contextual-Binding-Keyed-Services" class="headerlink" title="Contextual Binding (Keyed Services)"></a>Contextual Binding (Keyed Services)</h3><p>This is the same as <a href="/2018/09/ninject/">Ninjects Contextual Binding</a> but uses <code>.Keyed</code></p><p>Create an enum, for reasons :)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> LaunchDarklyProjectEnum</span><br><span class="line">&#123;</span><br><span class="line">    ProjectOne,</span><br><span class="line">    ProjectTwo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IoC Module example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sdkKeyProjectOne = <span class="string">&quot;sdk-0000000000000000&quot;</span>;</span><br><span class="line"></span><br><span class="line">builder.Register(c =&gt; <span class="keyword">new</span> LdClient(sdkKeyProjectOne))</span><br><span class="line">    .Keyed&lt;ILdClient&gt;(LaunchDarklyProjectEnum.ProjectOne)</span><br><span class="line">    .SingleInstance();</span><br></pre></td></tr></table></figure><p>Resolve with <code>KeyFilter</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LdFeatureRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILdClient _ldClientProjectOne;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LdFeatureRepository</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [KeyFilter(LaunchDarklyProjectEnum.ProjectOne</span>)] ILdClient ldClientProjectOne)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ldClientProjectOne = ldClientProjectOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html">https://autofaccn.readthedocs.io/en/latest/advanced/keyed-services.html</a></li></ul><h3 id="Disposal"><a href="#Disposal" class="headerlink" title="Disposal"></a>Disposal</h3><ul><li><a href="https://autofaccn.readthedocs.io/en/latest/lifetime/disposal.html">https://autofaccn.readthedocs.io/en/latest/lifetime/disposal.html</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://autofac.org/">https://autofac.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# LINQ</title>
      <link href="/2018/09/c-sharp-linq/"/>
      <url>/2018/09/c-sharp-linq/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">LINQ</a> stands for <strong>Language Integrated Query</strong>, it provides extension methods that are super useful when iterating through <a href="/2020/05/c-sharp-collections-of-entities/">collections of entities</a>. Below are some of the common and useful <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">LINQ</a> methods I have used while taking advantage of its <strong>Fluent API</strong> (This just means it returns a reference to the original object.)</p><p>Generally I don’t like to use temporary variables like <code>x</code> in the predicate, I find it easier to read if the variable is named in a manner that representing the state. Example: if the <code>_fooRepository</code> was <code>_clientRepository</code> then <code>x</code> could be substituted with <code>cl</code> or <code>client</code>.</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p> Projects each element of a sequence into a new form.</p><ul><li>Returns <code>IEnumerable</code> whose elements are the result of invoking the transform function on each element of source. So the below will return an <code>IEnumerable&lt;int&gt;</code>  containing the <code>Id&#39;s</code>.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foos = _fooRepository</span><br><span class="line">.SelectList()</span><br><span class="line">.Select(x =&gt; x.Id);</span><br></pre></td></tr></table></figure><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><p>Filters a sequence of values based on a predicate.</p><ul><li>Returns <code>IEnumerable</code> that contains elements from the input sequence that satisfy the condition.</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foos = _fooRepository</span><br><span class="line">.SelectList()</span><br><span class="line">.Where(x =&gt; x.MemberDate &gt;= startDate)</span><br><span class="line">.Where(x =&gt; x.MemberDate &lt; endDate);</span><br></pre></td></tr></table></figure><h3 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h3><p>Groups the elements of a sequence according to a specified key selector function. </p><ul><li>Returns <code>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fooGroupsOfMemberA = _fooRepository</span><br><span class="line">.SelectList()</span><br><span class="line">.Where(x =&gt; x.MemberDate &gt;= startDate)</span><br><span class="line">.Where(x =&gt; x.MemberDate &lt; endDate)</span><br><span class="line">.GroupBy(grp =&gt; grp.MemberA);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The data would the look like:</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">key: 55       ~ this is `MemberA`</span></span><br><span class="line"><span class="comment">elements: </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">[0] an element from SelectList,</span></span><br><span class="line"><span class="comment">[1] an element from SelectList</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">key: 105       ~ this is `MemberA`</span></span><br><span class="line"><span class="comment">elements: </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">[0] an element from SelectList,</span></span><br><span class="line"><span class="comment">[1] an element from SelectList,</span></span><br><span class="line"><span class="comment">            [2] an element from SelectList,</span></span><br><span class="line"><span class="comment">            [3] an element from SelectList,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><h3 id="Contains"><a href="#Contains" class="headerlink" title="Contains"></a>Contains</h3><p>Determines whether a sequence contains a specified element by using the default equality comparer.</p><ul><li>Returns <code>true</code> if the source sequence contains an element that has the specified value; otherwise, <code>false</code>.</li></ul><p>In the example below <code>bars</code> is some <code>IEnumerable</code> collection, the entity has a property <code>UserId</code> and I was looking for the SQL equivalent of <code>WHERE user_id IN (42, 105, 302) </code> so bars entities will now only have users whose id’s are 42, 105 or 302.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123; 42, 105, 302 &#125;</span></span><br><span class="line"><span class="keyword">var</span> userIds = _userRepository</span><br><span class="line">    .SelectList()</span><br><span class="line">    .Select(u =&gt; u.Id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bars = _fooRepository</span><br><span class="line">    .SelectList()</span><br><span class="line">    .Where(b =&gt; userIds.Contains(b.UserId));</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ninject</title>
      <link href="/2018/09/ninject/"/>
      <url>/2018/09/ninject/</url>
      
        <content type="html"><![CDATA[<p>Nuget packages: Ninject, Version 3.2.2</p><p>An obsessive focus on <em>simplicity</em> and <em>ease of use</em>. An example from their site:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Samurai</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IWeapon Weapon &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Samurai</span>(<span class="params">IWeapon weapon</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Then in the module</span></span><br><span class="line"><span class="comment">// I would put this `WarriorModule` in `Business/Plumbing/Ninject` </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WarriorModule</span> : <span class="title">NinjectModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Bind&lt;IWeapon&gt;().To&lt;Sword&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// The above is a Fluent API so you can then scope as needs be</span></span><br><span class="line">        <span class="comment">// .InSingletonScope();</span></span><br><span class="line">        <span class="comment">// .InTransientScope();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="When-Injected-Exactly-Into"><a href="#When-Injected-Exactly-Into" class="headerlink" title="When Injected Exactly Into"></a>When Injected Exactly Into</h3><p>This binding also allows you to bind an exact instance of something <code>WhenInjectedExactlyInto</code> so if you have a set of rules and your class needs a specific rule, you can inject it:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bind&lt;IRules&gt;().To&lt;SomeRule&gt;().WhenInjectedExactlyInto&lt;ConsumerClass&gt;();</span><br></pre></td></tr></table></figure><h3 id="Bind-All-Interfaces"><a href="#Bind-All-Interfaces" class="headerlink" title="Bind All Interfaces"></a>Bind All Interfaces</h3><p>If you have 100’s of services and they will be named as <code>IServiceName</code> for the interface and <code>ServiceName</code> for the implementation you can leverage refection and <code>BindAllInterfaces</code> to bind these for you.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patterns = <span class="keyword">new</span>[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;SweetApp.dll&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SweetApp.Admin.dll&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> typesToExclude = <span class="keyword">new</span> List&lt;Type&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typeof</span> (RubbishService),</span><br><span class="line">    <span class="keyword">typeof</span> (RubbishService2)</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">.Bind(x =&gt; x.FromAssembliesMatching(patterns)</span><br><span class="line">      .SelectAllClasses()</span><br><span class="line">      .Excluding(typesToExclude)</span><br><span class="line">      .BindDefaultInterface());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ninject.Extensions.Conventions.3.2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FromAssembliesMatching </span></span><br><span class="line"><span class="comment">-&gt; Scans the assemblies that matching one of the given assembly name pattern.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SelectAllClasses </span></span><br><span class="line"><span class="comment">-&gt; Selects all none abstract classes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Excluding </span></span><br><span class="line"><span class="comment">-&gt; Excludes the given types</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BindDefaultInterface</span></span><br><span class="line"><span class="comment">-&gt; Binds the default interface of the given types to the type. e.g. Foo : IFoo</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Contextual-Binding"><a href="#Contextual-Binding" class="headerlink" title="Contextual Binding"></a>Contextual Binding</h3><p>Contextual binding allows more than one binding for a type using <code>.Named</code></p><p>I dont think this is the best way to do things as the consumer (maybe a repository or service) then really has muiltiple concearns. (Well for my example anyway) The examples below were adapted from github.com/ninject and are for a scenario where 2 <a href="https://launchdarkly.com/">Launch Darkly (feature management client)</a> projects need to be injected into the same repository. Each project has its own SDK Key so the client needs to be instantiated with its correct key. </p><p>Create an enum, for reasons :)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> LaunchDarklyProjectEnum</span><br><span class="line">&#123;</span><br><span class="line">    ProjectOne,</span><br><span class="line">    ProjectTwo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The IOC is then setup. <code>InSingletonScope</code> is fine as there is no state and each request should get the same instance.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Bind&lt;ILdClient&gt;()</span><br><span class="line">    .ToMethod(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sdkKeyProjectOne = <span class="string">&quot;sdk-0000000000000000&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LdClient(sdkKeyProjectOne);</span><br><span class="line">    &#125;)</span><br><span class="line">    .InSingletonScope()</span><br><span class="line">    .Named(LaunchDarklyProjectEnum.ProjectOne);</span><br><span class="line"></span><br><span class="line">Bind&lt;ILdClient&gt;()</span><br><span class="line">    .ToMethod(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sdkKeyProjectTwo = <span class="string">&quot;sdk-1111111111111111&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LdClient(sdkKeyProjectTwo);</span><br><span class="line">    &#125;)</span><br><span class="line">    .InSingletonScope()</span><br><span class="line">    .Named(LaunchDarklyProjectEnum.ProjectTwo);    </span><br></pre></td></tr></table></figure><p>Then when resolved you indicate the name you want to use in the given context:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LdFeatureRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILdClient _ldClientProjectOne;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILdClient _ldClientProjectTwo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LdFeatureRepository</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Named(LaunchDarklyProjectEnum.ProjectOne</span>)] ILdClient ldClientProjectOne,</span></span><br><span class="line"><span class="function">        [<span class="title">Named</span>(<span class="params">LaunchDarklyProjectEnum.ProjectTwo</span>)] ILdClient ldClientProjectTwo)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ldClientProjectOne = ldClientProjectOne;</span><br><span class="line">        _ldClientProjectTwo = ldClientProjectTwo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/ninject/Ninject/wiki/Contextual-Binding">https://github.com/ninject/Ninject/wiki/Contextual-Binding</a></li><li><a href="https://launchdarkly.github.io/dotnet-server-sdk/html/T_LaunchDarkly_Client_ILdClient.htm">https://launchdarkly.github.io/dotnet-server-sdk/html/T_LaunchDarkly_Client_ILdClient.htm</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.ninject.org/">http://www.ninject.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity</title>
      <link href="/2018/09/unity/"/>
      <url>/2018/09/unity/</url>
      
        <content type="html"><![CDATA[<h3 id="Unity-MVC-Example"><a href="#Unity-MVC-Example" class="headerlink" title="Unity (MVC Example)"></a>Unity (MVC Example)</h3><p><em>“The Unity Container (Unity) is a lightweight, extensible dependency injection container. It facilitates building loosely coupled applications”</em></p><p>This was very simple to setup for an ASP.NET MVC project (net461) using the nuget packages:</p><ul><li> Unity.Container, Version=5.7.0</li><li> Unity.Abstractions, Version=3.3.0</li><li> Unity.Mvc, Version=5.0.13</li></ul><p>Implementation is as simple as this:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">~ /App_Start/UnityConfig.<span class="function">cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterComponents</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">var</span> container = <span class="keyword">new</span> UnityContainer();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// resolve instances with parameterless constructors</span></span><br><span class="line">     container.RegisterType&lt;IFizzRepository, FizzRepository&gt;();</span><br><span class="line">     container.RegisterType&lt;IBuzzRepository, BuzzRepository&gt;();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// resolve instances with constructors dependant on something already in the container</span></span><br><span class="line">     container.RegisterType&lt;IFooService, FooService&gt;(</span><br><span class="line">         <span class="keyword">new</span> InjectionConstructor(</span><br><span class="line">             container.Resolve&lt;IFizzRepository&gt;(),</span><br><span class="line">             container.Resolve&lt;IBuzzRepository&gt;()</span><br><span class="line">         ));</span><br><span class="line">     </span><br><span class="line">     DependencyResolver.SetResolver(<span class="keyword">new</span> UnityDependencyResolver(container));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~/Global.asax.cs</span><br><span class="line">UnityConfig.RegisterComponents();</span><br><span class="line"></span><br><span class="line">~/Controllers/KiefController.cs</span><br><span class="line">Constructor signature can then include `IFizzRepository fizzRepository, IFooService fooService`</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>If you have worked with amazing <a href="/2018/09/dependency-injection-frameworks/">Dependency Injection Frameworks</a> such as <a href="/2018/09/autofac-mvc/">Autofac</a> or <a href="/2018/09/ninject/">Ninject</a> you would expect to be able to create cohesive modules right? Well Unity doesn’t support this out of the box however you can create extension methods that do pretty much the same thing, just remember the order will matter if you are going to be calling <code>container.Resolve</code> later down the stack.</p><p>Simply call <code>container.AddExtension</code> and new up the module:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~ /App_Start/UnityConfig.<span class="function">cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterComponents</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> container = <span class="keyword">new</span> UnityContainer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Data repository</span></span><br><span class="line">    container.AddExtension(<span class="keyword">new</span> RepositoryModule());</span><br><span class="line">    </span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>The module then inherits the <code>Container</code> from the base class <code>UnityContainerExtension</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Unity;</span><br><span class="line"><span class="keyword">using</span> Unity.Extension;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FooApp.Domain.Plumbing.Unity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RepositoryModule</span> : <span class="title">UnityContainerExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Container.RegisterType&lt;IFizzRepository, FizzRepository&gt;();</span><br><span class="line">            Container.RegisterType&lt;IBuzzRepository, BuzzRepository&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><p> Unity is unable to automatically resolve <code>IEnumerable&lt;T&gt;</code> dependencies which you could use with an <a href="/2020/02/factory-pattern/">Abstract Factory</a>.</p><p> You can however get around this by naming the dependency.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Container.RegisterType&lt;IPriceRule, EachPriceRule&gt;(&quot;EachPriceRule&quot;);</span><br><span class="line">Container.RegisterType&lt;IPriceRule, WeightPriceRule&gt;(&quot;WeightPriceRule&quot;);</span><br></pre></td></tr></table></figure><p>This is then automagically injected into the consumer.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class FooController : Controller</span><br><span class="line">&#123;</span><br><span class="line">    private readonly IEnumerable&lt;IPriceRule&gt; _priceRules;</span><br><span class="line"></span><br><span class="line">    public FooController(IEnumerable&lt;IPriceRule&gt; priceRules)</span><br><span class="line">    &#123;</span><br><span class="line">        _priceRules = priceRules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.codeproject.com/Articles/988257/Dependency-Injection-using-Unity-container">https://www.codeproject.com/Articles/988257/Dependency-Injection-using-Unity-container</a></li><li><a href="https://msdn.microsoft.com/en-us/library/dn223671(v=pandp.30).aspx">https://msdn.microsoft.com/en-us/library/dn223671(v=pandp.30).aspx</a></li><li><a href="https://github.com/unitycontainer/unity">https://github.com/unitycontainer/unity</a></li><li><a href="https://github.com/unitycontainer/aspnet-mvc">https://github.com/unitycontainer/aspnet-mvc</a></li><li><a href="https://www.c-sharpcorner.com/article/dependency-injection-in-asp-net-mvc-5/">https://www.c-sharpcorner.com/article/dependency-injection-in-asp-net-mvc-5/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dual-Boot Windows 10 &amp; Ubuntu 18.04 - 16.04</title>
      <link href="/2018/09/how-to-dual-boot-windows-10-and-ubuntu/"/>
      <url>/2018/09/how-to-dual-boot-windows-10-and-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>The steps are summarized as follows:</p><ol><li>Install windows 10 first<ol><li>Use the maximum disk space for the volume as NTFS</li><li><a href="https://www.microsoft.com/en-us/download/windows-usb-dvd-download-tool">Windows USB/DVD Tool</a></li></ol></li><li>Install Ubuntu second<ol><li>At the disk/volume option choose ‘alongside’ windows 10</li><li>Create a new ‘ext4’ partition using the wizard.</li><li><a href="https://unetbootin.github.io/">UNetbootin</a></li></ol></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://builtvisible.com/the-ubuntu-installation-guide/">https://builtvisible.com/the-ubuntu-installation-guide/</a></li><li><a href="https://www.youtube.com/watch?v=qNeJvujdB-0">https://www.youtube.com/watch?v=qNeJvujdB-0</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Utilities</title>
      <link href="/2018/08/json-utilities/"/>
      <url>/2018/08/json-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="Generate-C-classes-from-JSON"><a href="#Generate-C-classes-from-JSON" class="headerlink" title="Generate C# classes from JSON"></a>Generate C# classes from JSON</h3><ul><li><a href="http://json2csharp.com/">http://json2csharp.com</a></li></ul><h3 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h3><ul><li><a href="https://jsonlint.com/">https://jsonlint.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectural Decision Log</title>
      <link href="/2018/08/architectural-decision-log/"/>
      <url>/2018/08/architectural-decision-log/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>“Architecture for agile projects has to be described and defined differently. Not all decisions will be made at once, nor will all of them be done when the project begins.”</em></p></blockquote><p>An example of this is <code>Dunk Me</code> - an open source pet project:</p><ul><li><a href="https://github.com/carlpaton/DunkMe/tree/master/Docs/ADR">https://github.com/carlpaton/DunkMe/tree/master/Docs/ADR</a></li></ul><p>Here with time I made decisions front end, API and database.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://adr.github.io/madr/">https://adr.github.io/madr/</a></li><li><a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions</a></li><li><a href="http://eclipse.github.io/winery/adr/">http://eclipse.github.io/winery/adr/</a><ul><li><a href="https://github.com/eclipse/winery/tree/master/docs/adr">https://github.com/eclipse/winery/tree/master/docs/adr</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Browser Utilities</title>
      <link href="/2018/08/browser-utilities/"/>
      <url>/2018/08/browser-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="Chrome-Extensions"><a href="#Chrome-Extensions" class="headerlink" title="Chrome Extensions"></a>Chrome Extensions</h3><p>From Chrome, run <a href="chrome://extensions/">chrome://extensions/</a> or <a href="https://chrome.google.com/webstore/category/extensions">https://chrome.google.com/webstore/category/extensions</a></p><ul><li>Also see <a href="/2020/09/netify/">Netify</a><ul><li><a href="https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj">https://chrome.google.com/webstore/detail/netify/mdafhjaillpdogjdigdkmnoddeoegblj</a></li></ul></li><li>Ignore X-Frame headers<ul><li>Also see <a href="/2018/06/x-frame-options/">X-Frame-Options</a></li></ul></li><li>Allow-Control-Allow-Origin: *<ul><li>Allows to you request any site with ajax from any source. Adds to response ‘Allow-Control-Allow-Origin: *’ header</li></ul></li><li>UnXSS<ul><li>Intercept and modify or delete websites’ security headers</li></ul></li><li>Postman Interceptor<ul><li>Sends requests fired through the Postman chrome app.</li></ul></li><li>Redux DevTools<ul><li>Query store</li></ul></li><li>Fireshot<ul><li>Screenshot web pages</li></ul></li><li>Wappalyzer<ul><li>Provides information about the page you visited, frameworks, hosting ect</li><li><a href="https://www.wappalyzer.com/">https://www.wappalyzer.com</a></li></ul></li><li>Edit this cookie<ul><li>Edit cookies, nom :D</li><li><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en</a> </li></ul></li><li>Mozbar<ul><li>Display SEO related elements such as meta tags</li><li><a href="https://chrome.google.com/webstore/detail/mozbar/eakacpaijcpapndcfffdgphdiccmpknp?hl=en">https://chrome.google.com/webstore/detail/mozbar/eakacpaijcpapndcfffdgphdiccmpknp?hl=en</a></li></ul></li></ul><h3 id="Firefox-Add-ons"><a href="#Firefox-Add-ons" class="headerlink" title="Firefox Add-ons"></a>Firefox Add-ons</h3><p>From Firefox navigate to <a href="https://addons.mozilla.org/en-US/firefox/">https://addons.mozilla.org/en-US/firefox/</a></p><ul><li><a href="https://addons.mozilla.org/en-US/firefox/addon/video-downloadhelper/?src=search">Video DownloadHelper</a></li></ul><h3 id="Internet-Explorer"><a href="#Internet-Explorer" class="headerlink" title="Internet Explorer"></a>Internet Explorer</h3><p>:D</p><p><img src="/d/browser-utilities/browsers-joke.png" alt="IE LOL"></p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> browser utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora</title>
      <link href="/2018/08/typora/"/>
      <url>/2018/08/typora/</url>
      
        <content type="html"><![CDATA[<p>This editor is useful for editing GIT readme files.</p><blockquote><p><em>Typora will give you a seamless experience as both a reader and a writer.</em></p></blockquote><ul><li><a href="https://typora.io/">https://typora.io/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Workflows</title>
      <link href="/2018/08/gitflow-workflow/"/>
      <url>/2018/08/gitflow-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="Trunk-Based"><a href="#Trunk-Based" class="headerlink" title="Trunk Based"></a>Trunk Based</h2><p>Developers collaborate on code in a single branch called ‘trunk’ this is <code>main/master/default</code> what ever its called now.</p><ul><li><a href="https://trunkbaseddevelopment.com/">https://trunkbaseddevelopment.com/</a></li><li><a href="https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development">https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development</a></li></ul><h2 id="Gitflow"><a href="#Gitflow" class="headerlink" title="Gitflow"></a>Gitflow</h2><p>This is a development model by <a href="https://nvie.com/about/">Vincent Driessen</a></p><ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/">https://nvie.com/posts/a-successful-git-branching-model/</a><ul><li><a href="https://nvie.com/files/Git-branching-model.pdf">https://nvie.com/files/Git-branching-model.pdf</a></li></ul></li></ul><p><img src="/d/gitflow-workflow/git-1.jpg" alt="Giflow"></p><p><a href="https://pdf2jpg.net/"><em>Converted with https://pdf2jpg.net</em></a></p><p>Other implementations:</p><ul><li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose Demo</title>
      <link href="/2018/08/docker-compose-demo/"/>
      <url>/2018/08/docker-compose-demo/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/docker-compose-demo/compose-demo-1.png" alt="Dock Compose"></p><p>To demonstrate the power of docker compose and <a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code">Infrastructure as code (IaC)</a> I put together the following functional example. I must also give credit to <a href="https://www.linkedin.com/in/godfrey-sisimogang-73a15a42/">Godfrey Sisimogang</a> for his input into the initial process flow – thank you my mate.</p><p>All of the <a href="https://github.com/carlpaton/DockerCompose">source code</a> is <a href="https://opensource.org/licenses/MIT">open source MIT</a> and I encourage fellow software craftsmen to fork the scripts and adapt for functional use.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The Eco-systems is made up of the following layers</p><ol><li>Database<ol><li><a href="https://store.docker.com/images/postgres">postgres:9.6-alpine</a></li></ol></li><li>Git clone<ol><li>SQL scripts used with <a href="https://flywaydb.org/">flyway</a> to provision/version the database</li><li>Scripts on <a href="https://github.com/carlpaton/SQLStatements/tree/master/postgresql/ComposeDemo">GitHub</a></li></ol></li><li>Flyway<ol><li>fusebox/flyway:5.1<ol><li><a href="https://flywaydb.org/documentation/command/baseline">Baseline</a></li><li><a href="https://flywaydb.org/documentation/command/migrate">Migrate</a></li></ol></li></ol></li><li>API to communicate with the database<ol><li><a href="https://store.docker.com/community/images/postgrest/postgrest">postgrest/postgrest:v0.5.0.0</a></li></ol></li><li>Fizz buzz generator<ol><li><a href="https://store.docker.com/community/images/carlpaton/fizzbuzz">carlpaton/fizzbuzz:v1.1.0</a></li><li><a href="https://github.com/carlpaton/FizzBuzz">Source code</a></li><li>What is <a href="/2018/06/docker-fizzbuzz-image/">Fizz Buzz</a></li><li><a href="/2018/07/building-docker-images/">Steps on how I got this image</a> onto the docker store (community)</li></ol></li><li>Angular Web Application to GET and display the data<ol><li><a href="https://github.com/carlpaton/DockerCompose/tree/master/angular-web">Source code</a> for application and config</li></ol></li></ol><p><img src="/d/docker-compose-demo/compose-demo-2.jpg" alt="Overview"></p><ul><li>Created with <a href="http://draw.io/">http://draw.io</a></li></ul><h3 id="Functional-Use"><a href="#Functional-Use" class="headerlink" title="Functional Use"></a>Functional Use</h3><p>To spin up the entire echo-system run <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">./compose.sh</a></p><p>Once you have run <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">./compose.sh</a> above and then stop the services for what ever reason you can start just the Database and API with <a href="https://github.com/carlpaton/DockerCompose/blob/master/start.sh">./start.sh</a></p><h3 id="Great-but-how-do-I-run-the-shell-scripts"><a href="#Great-but-how-do-I-run-the-shell-scripts" class="headerlink" title="Great but how do I run the shell scripts?"></a>Great but how do I run the shell scripts?</h3><p>In my case my local laptop runs Windows 10 and the docker magic runs in a virtual machine using <a href="/2018/03/virtual-box/">Oracle VM VirtualBox</a>. The virtual machine runs <a href="https://www.ubuntu.com/download/server">Ubuntu Server </a>this I felt was as close to the bare metal servers most corporate companys will be running.</p><ol><li><p>Create a new virtual machine with Virtual Box</p><ol><li>Set the ‘Network’ to ‘<a href="https://www.linuxbabe.com/virtualbox/a-pretty-good-introduction-to-virtualbox-bridged-networking-mode">Bridged Adapter</a>‘, the VM will then get an IP from your local <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">DHCP service</a> and be in the same range as your laptop.<br><img src="/d/docker-compose-demo/compose-demo-3.png" alt="Run Scripts"></li><li>I used ubuntu-17.10.1-server-amd64.iso</li></ol></li><li><p>Boot into the OS &amp; Install Docker CE</p><ol><li>There are steps here where I installed on VMWare Workstation Player<ol><li>I’ve opted to move over to VirtualBox as it plays nicely with Hyper V which will be necessary for <a href="https://kubernetes.io/docs/setup/minikube/">kubernetes &amp; minikube</a></li></ol></li><li>Installing SSH will allow you to <a href="/2018/04/putty/">putty</a> to the server, this helps with the copy and paste steps.</li></ol></li><li><p><a href="/2018/07/docker-compose/">Install docker compose</a></p></li><li><p>Clone these scripts from github to the local windows host</p><ol><li>Its possible to clone directly to the Ubuntu VM but thats up to you</li><li><a href="https://github.com/carlpaton/DockerCompose">https://github.com/carlpaton/DockerCompose</a></li></ol></li><li><p>Create a directory compose-demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir compose-demo</span><br><span class="line">cd compose-demo</span><br></pre></td></tr></table></figure></li></ol><p><img src="/d/docker-compose-demo/compose-demo-4.png" alt="Run Scripts"></p><ol start="6"><li>With nano create the <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">compose.sh</a> shell script and paste in the values from <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">github</a> and mark the script as executable</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo nano compose.sh</span><br><span class="line">right click to paste from your clip board</span><br><span class="line">crtl x</span><br><span class="line">y</span><br><span class="line">[ENTER]</span><br><span class="line"></span><br><span class="line">sudo chmod +x ./compose.sh</span><br></pre></td></tr></table></figure><ol start="7"><li><p>Repeat the above for the <a href="https://github.com/carlpaton/DockerCompose/blob/master/start.sh">start.sh</a> shell script</p></li><li><p>With nano create the <a href="https://github.com/carlpaton/DockerCompose/blob/master/docker-compose.yml">docker-compose.yml</a> file and paste in the values from <a href="https://github.com/carlpaton/DockerCompose/blob/master/docker-compose.yml">github</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo nano docker-compose.yml</span><br><span class="line">right click to paste from your clip board </span><br><span class="line">crtl x </span><br><span class="line">y</span><br><span class="line">[ENTER]</span><br></pre></td></tr></table></figure></li><li><p>Create the angular-web directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir angular-web</span><br><span class="line">cd angular-web</span><br></pre></td></tr></table></figure></li><li><p>Copy or create </p><p>these files</p><p> into the directory ‘angular-web’</p><ol><li><a href="https://github.com/carlpaton/DockerCompose/blob/master/angular-web/Dockerfile">Dockerfile</a></li><li><a href="https://github.com/carlpaton/DockerCompose/blob/master/angular-web/index.html">index.html</a></li><li><a href="https://github.com/carlpaton/DockerCompose/blob/master/angular-web/nginx.conf">nginx.conf</a><br><img src="/d/docker-compose-demo/compose-demo-5.png" alt="Run Scripts"></li></ol></li><li><p>Edit the index.html file to use the IP of the VM and target the API port</p><p><img src="/d/docker-compose-demo/compose-demo-6.png" alt="Run Scripts"></p></li><li><p>Create the flyway-git-clone directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">mkdir flyway-git-clone</span><br><span class="line">cd flyway-git-clone</span><br></pre></td></tr></table></figure></li><li><p>Copy or create the <a href="https://github.com/carlpaton/DockerCompose/blob/master/flyway-git-clone/Dockerfile">Dockerfile</a> into this directory</p><p><img src="/d/docker-compose-demo/compose-demo-7.png" alt="Run Scripts"></p></li><li><p>Change back up a directory to ‘compose-demo’, your folder should look like this now</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="/d/docker-compose-demo/compose-demo-8.png" alt="Run Scripts"></p><ol start="15"><li>Run <a href="https://github.com/carlpaton/DockerCompose/blob/master/compose.sh">compose.sh</a></li></ol><p><strong>NOTE WHAT THE SCRIPT WILL DO:</strong></p><p>a. The removal of containers<br>b. The removal of volumes (if found)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./compose.sh</span><br></pre></td></tr></table></figure><p>This will then run though the overview layers above, once complete you can browse the angular container which will call the API and display the fizz buzz data.</p><p>Exit code 0 means the container completed its life without any issues.</p><p><img src="/d/docker-compose-demo/compose-demo-9.png" alt="Run Scripts"></p><ol start="16"><li><p>Exit compose</p><p><img src="/d/docker-compose-demo/compose-demo-10.png" alt="Run Scripts"></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTRL C</span><br></pre></td></tr></table></figure><ol start="17"><li>Display all the containers, note that the compose containers take their names from the name in the YML file.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p><img src="/d/docker-compose-demo/compose-demo-11.png" alt="Run Scripts"></p><ol start="18"><li>You can now startup just the required containers with start.sh<ol><li>This will only start the database, API and Angular Web containers</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./start.sh</span><br></pre></td></tr></table></figure><p>You can then call the API directly, example <em><a href="http://10.0.0.108:3000/fizzbuzz_data">http://10.0.0.108:3000/fizzbuzz_data</a></em></p><p>The IP of your container will depend on your Host VM and DHCP server.</p><p><img src="/d/docker-compose-demo/compose-demo-12.png" alt="Run Scripts"></p><h3 id="Testing-Angular"><a href="#Testing-Angular" class="headerlink" title="Testing Angular"></a>Testing Angular</h3><p>You can then also call the angular application, example <em><a href="http://10.0.0.108:8080/">http://10.0.0.108:8080/</a></em></p><p><img src="/d/docker-compose-demo/compose-demo-13.png" alt="Run Scripts"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.docker.com/compose/compose-file/#depends_on">https://docs.docker.com/compose/compose-file/#depends_on</a></li><li><a href="https://docs.docker.com/compose/startup-order/">https://docs.docker.com/compose/startup-order/</a></li><li><a href="https://store.docker.com/community/images/boxfuse/flyway">https://store.docker.com/community/images/boxfuse/flyway</a></li><li><a href="https://postgrest.org/en/v5.0/install.html#docker">https://postgrest.org/en/v5.0/install.html#docker</a></li><li><a href="https://www.postgresql.org/docs/9.6/static/index.html">https://www.postgresql.org/docs/9.6/static/index.html</a></li><li><a href="https://store.docker.com/community/images/postgrest/postgrest">https://store.docker.com/community/images/postgrest/postgrest</a></li><li><a href="https://postgrest.org/en/v5.0/api.html#insertions-updates">https://postgrest.org/en/v5.0/api.html#insertions-updates</a></li><li><a href="https://www.w3schools.com/angular/angular_http.asp">https://www.w3schools.com/angular/angular_http.asp</a></li><li><a href="https://github.com/carlpaton/DockerCompose">https://github.com/carlpaton/DockerCompose</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectural Design Tools</title>
      <link href="/2018/07/architectural-design-tools/"/>
      <url>/2018/07/architectural-design-tools/</url>
      
        <content type="html"><![CDATA[<h3 id="Draw-IO"><a href="#Draw-IO" class="headerlink" title="Draw IO"></a>Draw IO</h3><p><em>“draw.io (formerly Diagramly) is free online diagram software. You can use it as a flowchart maker, network diagram software, to create UML online, as an ER diagram tool, to design database schema, to build BPMN online, as a circuit diagram maker, and more. draw.io can import .vsdx, Gliffy™ and Lucidchart™ files .”</em></p><ul><li><a href="https://www.draw.io/">https://www.draw.io/</a></li></ul><iframe width="644" height="362" src="https://www.youtube.com/embed/Z0D96ZikMkc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.tutorialspoint.com/uml/uml_activity_diagram.htm">https://www.tutorialspoint.com/uml/uml_activity_diagram.htm</a></li><li><a href="https://en.wikipedia.org/wiki/Swim_lane">https://en.wikipedia.org/wiki/Swim_lane</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database Normalization</title>
      <link href="/2018/07/database-normalization/"/>
      <url>/2018/07/database-normalization/</url>
      
        <content type="html"><![CDATA[<p>Normalization means evaluating and correcting table structures to minimize data redundancies. Normalization takes you through steps that lead to successively higher <strong>normal forms</strong>. In other words, First normal form (1NF), second normal form (2NF), third normal form (3NF), this is the normal form we should really look at achieving.</p><p>Before going on, we need to understand Functional Dependence. It plays quite a role with normalization. The definition of functional dependence is: The attribute A is fully functionally dependent on the attribute B if each value of B determines one and only one value of A.</p><p>Substituted into an example:</p><p><em>The attribute dbo.users.id is fully functionally dependent on the attribute dbo.users.username if each value of username determines one and only one value of id.</em></p><p>Most of the below is from <a href="https://support.microsoft.com/en-us/help/283878/description-of-the-database-normalization-basics">support.microsoft.com (database-normalization-basics)</a></p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><ul><li>Eliminate repeating groups in individual tables.</li><li>Create a separate table for each set of related data.</li><li>Identify each set of related data with a primary key.</li></ul><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><ul><li>Create separate tables for sets of values that apply to multiple records.</li><li>Relate these tables with a foreign key.</li></ul><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><ul><li>Eliminate fields that do not depend on the key.</li><li>Eliminate computable fields (Use a stored procedure)</li></ul><p>This goes up to 6NF however in general 3NF is acceptable.</p><p>Note that database normalization adds a performance impact and in some cases a de-normalization is needed.</p><p>See: <a href="https://en.wikipedia.org/wiki/Denormalization">https://en.wikipedia.org/wiki/Denormalization</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.guru99.com/database-normalization.html">https://www.guru99.com/database-normalization.html</a></li><li><a href="https://www.thoughtco.com/referential-integrity-definition-1019181">https://www.thoughtco.com/referential-integrity-definition-1019181</a></li><li><a href="https://en.wikipedia.org/wiki/Referential_integrity">https://en.wikipedia.org/wiki/Referential_integrity</a></li><li><a href="https://support.microsoft.com/en-us/help/283878/description-of-the-database-normalization-basics">https://support.microsoft.com/en-us/help/283878/description-of-the-database-normalization-basics</a></li><li><a href="https://en.wikipedia.org/wiki/Database_normalization">https://en.wikipedia.org/wiki/Database_normalization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>State Management for Front End</title>
      <link href="/2018/07/state-management-front-end/"/>
      <url>/2018/07/state-management-front-end/</url>
      
        <content type="html"><![CDATA[<p>There are many state management strategies, which ever you choose the <a href="https://redux-toolkit.js.org/">Redux Toolkit</a> will make your life easier.</p><p>Also see the <a href="/2022/04/front-end-app-organisation/">ducks</a> convention.</p><h3 id="Redux-with-Saga"><a href="#Redux-with-Saga" class="headerlink" title="Redux with Saga"></a>Redux with Saga</h3><p><img src="/d/state-management-front-end/redux-with-saga.jpg" alt="Redux with Saga"></p><h3 id="Redux-Thunk"><a href="#Redux-Thunk" class="headerlink" title="Redux Thunk"></a>Redux Thunk</h3><blockquote><p>Redux Thunk is middleware that allows you to return functions, rather than just actions, within Redux. This allows for delayed actions, including working with promises.</p></blockquote><ul><li><a href="https://www.freecodecamp.org/news/redux-thunk-explained-with-examples/">Redux Thunk Explained with Examples</a></li></ul><h3 id="Facade-Abstraction"><a href="#Facade-Abstraction" class="headerlink" title="Facade Abstraction"></a>Facade Abstraction</h3><p>A facade is used to abstract away the store pattern from the components. </p><p><img src="/d/state-management-front-end/tme.png" alt="Facade Abstraction, Drawn by Kristy Johnstone"></p><ul><li><a href="https://medium.com/default-to-open/understanding-a-large-scale-angular-app-with-ngrx-80f9fc5660cc">Understanding a large scale angular app with ngrx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> architecture </tag>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose</title>
      <link href="/2018/07/docker-compose/"/>
      <url>/2018/07/docker-compose/</url>
      
        <content type="html"><![CDATA[<h3 id="Install-Compose"><a href="#Install-Compose" class="headerlink" title="Install Compose"></a>Install Compose</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo docker-compose --version</span><br></pre></td></tr></table></figure><p>Once installed compose can build your containers in order based on a <a href="https://github.com/charleyza/DockerCompose/blob/master/docker-compose.yml">docker-compose.yml file</a></p><p>The command must be run relative to the above file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#starts up the containers</span><br><span class="line">sudo docker-compose up</span><br><span class="line"></span><br><span class="line">#deletes the containers</span><br><span class="line">sudo docker-compose rm</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></li><li>Jerome Petazzoni – <a href="http://container.training/">http://container.training</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building Docker Images</title>
      <link href="/2018/07/building-docker-images/"/>
      <url>/2018/07/building-docker-images/</url>
      
        <content type="html"><![CDATA[<h3 id="Hosted-on-store-docker-com"><a href="#Hosted-on-store-docker-com" class="headerlink" title="Hosted on store.docker.com"></a>Hosted on store.docker.com</h3><ol><li>Create an account at <a href="https://hub.docker.com/">https://hub.docker.com/</a><ol><li>Create a repository at <a href="https://hub.docker.com/repositories">https://hub.docker.com/repositories</a></li><li>Link to GitHub</li><li>Ensure you select a build rule on a branch, normally <code>master</code></li><li>Dockerfile is required - <a href="https://github.com/carlpaton/VulnusCloud/blob/master/Dockerfile">https://github.com/carlpaton/VulnusCloud/blob/master/Dockerfile</a></li></ol></li><li>This then builds to <a href="https://hub.docker.com/u/carlpaton">https://hub.docker.com/u/carlpaton</a></li><li>The image can then be pulled from <a href="https://store.docker.com/community/images/carlpaton/vodacommessagingxml2sms">store.docker.com</a> to build as a local container</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull carlpaton/vulnuscloud</span><br></pre></td></tr></table></figure><h3 id="Hosted-locally"><a href="#Hosted-locally" class="headerlink" title="Hosted locally"></a>Hosted locally</h3><p>This will still use official base images but the built image that holds your source code is local.</p><ol><li> Build your application that will run as a container</li><li>Example <a href="https://github.com/carlpaton/VodacommessagingXml2sms">vodacom messaging xml2sms</a></li><li>Setup the <a href="/2018/04/docker-containers-the-future/">docker environment</a></li><li>Publish the code locally and zip to a compressed file<ol><li><a href="https://github.com/carlpaton/VodacommessagingXml2sms/blob/master/Docker/copy.bat">Copy to the host</a></li><li>Extract the compressed file</li></ol></li><li>Create your Dockerfile<ol><li><a href="https://github.com/carlpaton/VodacommessagingXml2sms/blob/master/Docker/Dockerfile">Example Dockerfile</a></li></ol></li><li>Create a shell script to build the image &amp; spin up the container<ol><li><a href="https://github.com/carlpaton/VodacommessagingXml2sms/blob/master/Docker/xml2sms.sh">Example script</a></li></ol></li></ol><h3 id="Push-To-AWS-Elastic-Container-Registry"><a href="#Push-To-AWS-Elastic-Container-Registry" class="headerlink" title="Push To AWS Elastic Container Registry"></a>Push To AWS Elastic Container Registry</h3><p><a href="https://carlpaton.github.io/2019/09/aws-elastic-container-registry/">You can push local images to a remote ECR</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.ben-morris.com/using-docker-to-build-and-deploy-net-core-console-applications/">http://www.ben-morris.com/using-docker-to-build-and-deploy-net-core-console-applications/</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core">https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/docker/building-net-docker-images">https://docs.microsoft.com/en-us/dotnet/core/docker/building-net-docker-images</a></li><li><a href="https://andrewlock.net/optimising-asp-net-core-apps-in-docker-avoiding-manually-copying-csproj-files/">https://andrewlock.net/optimising-asp-net-core-apps-in-docker-avoiding-manually-copying-csproj-files/</a></li><li><a href="https://www.youtube.com/watch?v=sl2mfyjnkXk&amp;feature=youtu.be">https://www.youtube.com/watch?v=sl2mfyjnkXk&amp;feature=youtu.be</a></li><li><a href="https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables">https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/run/#parent-command">https://docs.docker.com/engine/reference/commandline/run/#parent-command</a></li><li><a href="https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables">https://stackoverflow.com/questions/37387235/asp-net-core-read-environment-variables</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sonarqube and Docker (Without Test Coverage)</title>
      <link href="/2018/07/sonarqube-and-docker/"/>
      <url>/2018/07/sonarqube-and-docker/</url>
      
        <content type="html"><![CDATA[<p><strong>Updated 03/11/2020</strong></p><p>Sonarqube provides static code analysis, testing and continuous inspection.</p><p>You can use the public <a href="https://hub.docker.com/_/sonarqube">Sonarqube</a> image and embedded H2 database to test out Sonarqube locally, H2 is not suitable for production but great to learn the product in a safe local environment.</p><p>This demo uses a random monorepository I forgot I had, the tests are MS Test but here Im just focusing on the code quality like smells and bugs, so the report wont include test coverage. Have a look at <a href="/2020/11/sonarqube-with-opencover-xunit-reports/">Sonarqube With Opencover And xUnit Reports</a> if you looking for some test coverage.</p><h2 id="Software-Setup"><a href="#Software-Setup" class="headerlink" title="Software Setup"></a>Software Setup</h2><h3 id="Sonarqube-Server"><a href="#Sonarqube-Server" class="headerlink" title="Sonarqube Server"></a>Sonarqube Server</h3><ol><li>Start the Sonarqube container, I like to use specific versions as <code>latest</code> can have breaking changes down the line, below I used <code>6.7.4</code>. The default login is <code>admin\admin</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonarqube674 -p 9000:9000 sonarqube:6.7.4</span><br></pre></td></tr></table></figure><ol start="2"><li>When Sonar v674 first starts it will ask you to create a token, the token is used to identify you when an analysis is performed. Generally you would store this in your secrets manager but as this is a local demo, my token was <code>sonardemo: a8d6e1e800aaeeec2986b202177d74677d8acbb4</code>, I skipped the rest of the tutorial when it asked me to create a new project, this will be done for you on the first scan.</li></ol><h3 id="Sonar-Scanner"><a href="#Sonar-Scanner" class="headerlink" title="Sonar Scanner"></a>Sonar Scanner</h3><ol><li>Locally you will need sonar scanner, at the time of writing this the latest version was <a href="https://github.com/SonarSource/sonar-scanner-msbuild/releases/tag/4.3.1.1372">4.3.1.1372</a></li></ol><ul><li><code>sonar-scanner-msbuild-4.3.1.1372-net46.zip</code> is for .Net Framework</li><li><code>sonar-scanner-msbuild-4.3.1.1372-netcoreapp2.0.zip</code> is for .Net Core</li></ul><p>Download <a href="https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.3.1.1372/sonar-scanner-msbuild-4.3.1.1372-netcoreapp2.0.zip">sonar-scanner-msbuild-4.3.1.1372-netcoreapp2.0.zip</a></p><ol start="2"><li><p>Extract the contents of the zip file into <code>C:\dev\sonardemo\tools</code>, the key is to see <code>SonarScanner.MSBuild.dll</code> in the root of tools.</p></li><li><p>The scanner has a Java dependancy, download and install JDK8 <a href="https://www.oracle.com/technetwork/es/java/javase/downloads/jre8-downloads-2133155.html">jre-8u181-windows-x64.exe</a>, you can verify its installed from the console by checking the version</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="Net-Core-SDK"><a href="#Net-Core-SDK" class="headerlink" title=".Net Core SDK"></a>.Net Core SDK</h3><ol><li>Download and install <a href="https://dotnet.microsoft.com/en-us/download/dotnet/2.0">.NET Core SDK 2.1.202</a></li></ol><p>This gives us MSBuild version 15x which will work with SonarScanner and the source code below.</p><h2 id="Setup-Source-Code"><a href="#Setup-Source-Code" class="headerlink" title="Setup Source Code"></a>Setup Source Code</h2><p>You can scan any project, here I’ll just use a random project from my <a href="https://github.com/carlpaton">Github space</a>.</p><ol><li><p>Clone the project <a href="https://github.com/carlpaton/Boilerplate">Boilerplate</a> to <code>c:\dev\sonardemo\tmp</code></p></li><li><p>Copy the contents of <code>C:\dev\sonardemo\tmp\Boilerplate\Class Library\PatternsAndPrinciples</code> to <code>C:\dev\sonardemo\</code> so that the <code>.sln</code> file is in the root, this just makes the sonar steps easier.</p></li><li><p>Ensure the 3 csproj files target <code>netcoreapp2.0</code>, its confusing because I thought 2.1 would work but it doesnt, its because the SDK we build with below, which is v2.1.202 targets <code>.Net Core 2.0</code> … too many numbers, just go with it (o_O)</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li>Run <code>dotnet restore</code> to update the assets, this is magic the IDE normally does for us :D</li></ol><h2 id="Scan-time"><a href="#Scan-time" class="headerlink" title="Scan time!"></a>Scan time!</h2><ol><li>The first step is to run the scanner, here we are passing the key <code>PatternsAndPrinciples</code> for the project to be created with login details from the step steps.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ./tools/SonarScanner.MSBuild.dll begin /k:&quot;PatternsAndPrinciples&quot; /d:sonar.host.url=&quot;http://localhost:9000&quot; /d:sonar.login=&quot;a8d6e1e800aaeeec2986b202177d74677d8acbb4&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>The second step is to build the project, needs to use MSBuild 14.0 or 15.0. The <code>.</code> at the end means current context so will look for the <code>.sln</code> you copied earlier to the root of <code>sonardemo</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet &quot;C:\Program Files\dotnet\sdk\2.1.202\MSBuild.dll&quot; .</span><br></pre></td></tr></table></figure><ol start="3"><li>The last step is to end the scan</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ./tools/SonarScanner.MSBuild.dll end /d:sonar.login=&quot;a8d6e1e800aaeeec2986b202177d74677d8acbb4&quot;</span><br></pre></td></tr></table></figure><p>The code analysis can then be seen at <a href="http://localhost:9000/dashboard?id=PatternsAndPrinciples">http://localhost:9000/dashboard?id=PatternsAndPrinciples</a></p><p><img src="/d/sonarqube-and-docker/sonar-project.png" alt="Great Success"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="/2018/05/quality-assurance-tools/">Also see Quality Assurance Tools</a> </li><li>You can also have these validations as part of your IDE – <a href="https://www.sonarlint.org/visualstudio/">https://www.sonarlint.org/visualstudio/</a></li><li><a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild">https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild</a></li><li><a href="https://docs.sonarqube.org/display/SONAR/Project+Existence">https://docs.sonarqube.org/display/SONAR/Project+Existence</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> sonarqube </tag>
            
            <tag> static code analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Image for SMS</title>
      <link href="/2018/07/docker-image-vodacommessagingxml2sms/"/>
      <url>/2018/07/docker-image-vodacommessagingxml2sms/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/docker-image-vodacommessagingxml2sms/sms-1.png" alt="Docker Image for SMS"></p><p>This docker image allows for a microservice to run within your LAN (Local Area Network) to accept POST and GET requests. The POST needs a JSON (Java Script Object Notation) object in its body to sent the SMS and the GET needs a watermark id to query for logs. The logs confirm the status of the message, example “delivered”. Authentication to Vodacom Messaging is handled by the container.</p><p>The image (which builds to a container) is called <em>carlpaton/vodacommessagingxml2sms</em> and is available at <a href="https://store.docker.com/community/images/carlpaton/vodacommessagingxml2sms">https://store.docker.com/community/images/carlpaton/vodacommessagingxml2sms</a></p><p>The code running in the container is written in C# (C-Sharp) and is a Microsoft WEB API project running on .NET Core 2. The Massive value in using .NET Core is it will run on Linux which will appeal to corporates.</p><h3 id="What-is-Vodacom-Messaging-XML2SMS"><a href="#What-is-Vodacom-Messaging-XML2SMS" class="headerlink" title="What is Vodacom Messaging XML2SMS?"></a>What is Vodacom Messaging XML2SMS?</h3><p><a href="https://www.vodacommessaging.co.za/xml2sms.asp">Vodacom Messaging</a> is an online mobile messaging and gateway provider, in a nutshell, their services provide mobile communication tools to send and receive messages in popular formats such as SMS (Short Message Service).</p><p>Although the world has moved on with instant messaging clients like WhatsApp and even E-mail (Electronic mail), in South Africa SMS is still hugely popular with corporates needing to communicate with their client base in a ubiquitous manner.</p><p>The XML2SMS product is a tool aimed at developers to integrate SMS capabilities into their applications, this can be used for a number of event driven messages such as access tokens or OTP (One Time Pin) for banking applications or real-time notifications of spend or activity. Every SMS Is tracked with status updates available of delivery for auditing purposes.</p><h3 id="Ubuntu-Server"><a href="#Ubuntu-Server" class="headerlink" title="Ubuntu Server"></a>Ubuntu Server</h3><p>All my testing was done on Ubuntu Server version 17 running as a virtual machine hosted on my notebook which runs Windows 10. Ubuntu then hosted docker, the images and containers.</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-2.png" alt="This setup reminded me of this meme, its good to laugh at things."></p><p>If you are un-familiar with Docker &amp; its capabilities I suggest you go through my article “<a href="/2018/04/docker-containers-the-future/">Docker -Containers  – The future</a>” before going any further, if you are already using docker and want to either publish your own containers or see a summary of how to use mine see “<a href="https://carlpaton.co.za/building-docker-images/">Building Docker Images</a>”</p><h3 id="Still-Unsure"><a href="#Still-Unsure" class="headerlink" title="Still Unsure?"></a>Still Unsure?</h3><p>If you are reading this and are still puzzling how to use my image perhaps this illustration will help clear things up for you.</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-3.png" alt="Docker Image for SMS"></p><h3 id="Steps-By-Step"><a href="#Steps-By-Step" class="headerlink" title="Steps By Step"></a>Steps By Step</h3><p>You can use <a href="https://carlpaton.co.za/docker-for-windows/">docker for windows</a> but for the purpose of this demo I have focused on Ubuntu Server in the configuration described above.</p><ol><li>Setup Docker on Linux, <a href="https://carlpaton.co.za/setup-docker-on-linux/">there are detailed steps here</a> to setup your VM Player (Virtual Machine Player), the hosted Linux OS (Operating System)</li><li>Create an [environmental properties file](<a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted">https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted</a> on store.docker.com/env_file_name.env), these will be injected into the container when it is created.</li></ol><p>I called mine <em>env_file_name.env,</em> below are the environmental properties the container will need. You can also set these in <a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/VodacommessagingXml2sms/appsettings.json">appsettings.json</a> – if you dont use the env file the container will look at appsettings.json instead.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USERNAME_ENVIRONMENT=</span><br><span class="line">PASSWORD_ENVIRONMENT=</span><br><span class="line">SMSGW_ENVIRONMENT=</span><br></pre></td></tr></table></figure><p>This is the authentication the container will pass to <a href="https://www.vodacommessaging.co.za/contact.asp">Vodacom Messaging, you will need an account with them to send SMS</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESPONSETYPE_ENVIRONMENT=json</span><br></pre></td></tr></table></figure><p>This is the flag to set the response from the container, you can have JSON or XML</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOCKMODE_ENVIRONMENT=1</span><br></pre></td></tr></table></figure><p>During development the container can mock the response from the SMS Gateway, set this flag to 1 for mocking or 0 to send the SMS Request to Vodacom Messaging. The implementation of this in the code is pretty crap, I think it would be better refactored to a factory pattern.</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-4.png" alt="Docker Image for SMS"></p><p>Editing the file on the server with nano</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-5.png" alt="Docker Image for SMS"></p><ol start="3"><li>Create your [shell script to pull the image &amp; spin up the container](<a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted">https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/Hosted</a> on store.docker.com/xml2sms.cloud.docker.com.sh) (Remember to mark it executable with chmod +x)</li></ol><p>Below is the content of my script:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--- This tells the script to run with bash</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">--- This pulls the image locally, the tag v1.0.0 can be omitted for latest.</span><br><span class="line">--- I’ve found when developing its best to specify a version so you know the </span><br><span class="line">--- only change is in your own code. </span><br><span class="line">docker pull carlpaton/vodacommessagingxml2sms:v1.0.0</span><br><span class="line"></span><br><span class="line">--- If the container is already built and running as xml2sms, stop it.</span><br><span class="line">sudo docker container kill xml2sms</span><br><span class="line"></span><br><span class="line">--- Delete the container you just stopped. </span><br><span class="line">--- The value with the above steps is repatability. </span><br><span class="line">sudo docker rm xml2sms</span><br><span class="line"></span><br><span class="line">--- This spins up the new container. </span><br><span class="line">--- -d means run detached, </span><br><span class="line">--- -p is the port mapping 81 external to Linux and 80 internal to the container, </span><br><span class="line">--- name is the containers name followed by which image to build from. </span><br><span class="line">sudo docker run --env-file=env_file_name.env -d -p 81:80 --name xml2sms carlpaton/vodacommessagingxml2sms:v1.0.0</span><br><span class="line"></span><br><span class="line">--- start the container you just created</span><br><span class="line">sudo docker start xml2sms</span><br><span class="line"></span><br><span class="line">--- Display all the containers on the host.</span><br><span class="line">sudo docker ps –all</span><br></pre></td></tr></table></figure><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-6.png" alt="Docker Image for SMS"></p><p>Execute the shell script above:</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-7.png" alt="Docker Image for SMS"></p><ol start="4"><li>Send a POST request with a JSON object to the container and note the response.</li></ol><p>If you set MOCKMODE_ENVIRONMENT=1 then the container will not call Vodacom Messaging but rather mock the response. The below are example POST methods from <a href="https://www.getpostman.com/">postman</a>.</p><p><a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/Docker/postman.txt">Details on the postman configuration can be found here</a>.</p><p>This shows the postman’s POST:</p><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-8.png" alt="Docker Image for SMS"></p><p>Note the key returned was 202, this will be used in the GET below.</p><ol start="5"><li>GET a HTTP request to the container with the watermark ID received in the POST above.</li></ol><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-9.png" alt="Docker Image for SMS"></p><p>You can then query the containers logs with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs xml2sms</span><br></pre></td></tr></table></figure><p><img src="/d/docker-image-vodacommessagingxml2sms/sms-10.png" alt="Docker Image for SMS"></p><h3 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h3><p>All this code is open source and licenced MIT (Massachusetts Institute of Technology) so I encourage developers to fork the code and adapt to work for their environment. Some ideas I can think of would include</p><ul><li>HTTPS Traffic to the container from your applications</li><li>Persist the requests / responses to a database (look at my <a href="https://github.com/charleyza/VodacommessagingXml2sms/blob/master/VodacommessagingXml2sms/Interfaces/ISmsLogger.cs">ISmsLogger.cs</a><strong>)</strong></li><li>Authentication HASH per application</li><li>Additional send options such as EMS (Extended Messaging Service), this already works on Vodacom Messaging and won’t take much effort to add to the container.</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://carlpaton.co.za/building-docker-images/">Building Docker Images</a></li><li><a href="https://carlpaton.co.za/docker-containers-the-future/">Docker -Containers  – The future</a></li><li><a href="https://www.getpostman.com/">Postman</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger – Swashbuckle AspNetCore</title>
      <link href="/2018/07/swagger-swashbuckle-aspnetcore/"/>
      <url>/2018/07/swagger-swashbuckle-aspnetcore/</url>
      
        <content type="html"><![CDATA[<p>Swagger tools for documenting and testing API’s built on ASP.NET Core</p><ol><li>Install Swashbuckle.AspNetCore from nuget</li><li>In Startup.cs (ConfigureServices) add</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvc();</span><br><span class="line"></span><br><span class="line">//Swashbuckle (Swagger)</span><br><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">c.SwaggerDoc(&quot;v1&quot;, new Info &#123; Title = &quot;Vodacommessaging Xml2sms&quot;, Version = &quot;v1&quot; &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>In Startup.cs (Configure) add</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//In the Configure method, insert middleware to expose the generated Swagger as JSON endpoint(s)</span><br><span class="line">app.UseSwagger();</span><br><span class="line"></span><br><span class="line">//Optionally insert the swagger-ui middleware if you want to expose interactive documentation, specifying the Swagger JSON endpoint(s) to power it from.</span><br><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;Vodacommessaging Xml2sms V1&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>Run your application and browse to /swagger</li></ol><p>Example project this has been added to : <a href="https://github.com/charleyza/VodacommessagingXml2sms">https://github.com/charleyza/VodacommessagingXml2sms</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">https://github.com/domaindrivendev/Swashbuckle.AspNetCore</a></li><li><a href="https://stackoverflow.com/questions/43707733/services-addswaggergen-giving-error">https://stackoverflow.com/questions/43707733/services-addswaggergen-giving-error</a></li><li><a href="http://wmpratt.com/swagger-and-asp-net-web-api-part-1/">http://wmpratt.com/swagger-and-asp-net-web-api-part-1/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> web api </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker FizzBuzz Image</title>
      <link href="/2018/06/docker-fizzbuzz-image/"/>
      <url>/2018/06/docker-fizzbuzz-image/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/docker-fizzbuzz-image/fizzbuzz-1.png" alt="Docker Fizzbuzz"></p><h3 id="What-is-FizzBuzz"><a href="#What-is-FizzBuzz" class="headerlink" title="What is FizzBuzz?"></a>What is FizzBuzz?</h3><p>A popular interview question is the “FizzBuzz test”, its based on a children’s game where you count from 1 to 100 and for multiples of 3 say “Fizz”, multiples of 5 say “Buzz”, if both say “FizzBuzz” else say the number, example 8.</p><p>Translated into to the code domain the question you could ask is:</p><p>“Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.”</p><h3 id="Whats-this-got-to-do-with-Docker"><a href="#Whats-this-got-to-do-with-Docker" class="headerlink" title="Whats this got to do with Docker?"></a>Whats this got to do with Docker?</h3><p>Well the hello world app from Docker is great but this is a little more fun and I like to put things into containers. FizzBuzz seems like a good candidate and is simpler to understand than the <a href="/2018/07/docker-image-vodacommessagingxml2sms/">Docker Image for SMS</a>.</p><p>The ‘hello world’ example from Docker also starts its life from an image they call ‘SCRATCH’ – this is great but not really useful in real world applications (Well ones I am capable of building anyway)<br>My ‘FizzBuzz’ image starts its life from ‘microsoft/aspnetcore:2.0’ so its far larger but comes with the .net goodness I know and love.</p><p>FizzBuzz is also a great way to demonstrate how easy Docker is to use and the powerful features it has! I hope it inspires developers looking to try their hand at Docker and gives a starting point.</p><p>Perhaps instead of asking a candidate to do the sudo code for you, ask them how they will code and create a docker image :)</p><h3 id="The-Code"><a href="#The-Code" class="headerlink" title="The Code"></a>The Code</h3><p>I used a C# Console Application targeting .Net Core 2 so the resulting container is platform agnostic.</p><p><a href="https://github.com/carlpaton/FizzBuzz">You can download all the source code here</a>.</p><p>Variables are used for the lowerBound, upperBound, fizzAt, buzzAt and outPut values as things need to be maintainable. This demonstrates that things can change, just look at our recent VAT increase!</p><p>These are read from injected environmental variables but do have hard coded defaults set, this is fine for this example however for production applications anything hard coded is frowned upon.</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var lowerBound = Environment.GetEnvironmentVariable(&quot;lowerBound&quot;) == null ? 1 : Convert.ToInt32(Environment.GetEnvironmentVariable(&quot;lowerBound&quot;));</span><br></pre></td></tr></table></figure><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>Docker builds images from Dockerfiles, I used <a href="http://cloud.docker.com/">cloud.docker.com</a> to create a repository which builds the resulting image to <a href="http://hub.docker.com/">hub.docker.com</a>. This can then be pulled from <a href="https://store.docker.com/community/images/carlpaton/fizzbuzz">store.docker.com</a> with the following commmand:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull carlpaton/fizzbuzz</span><br></pre></td></tr></table></figure><p>The docker file runs the following steps:</p><ol><li>Creates a builder image from microsoft/dotnet:2.0-sdk</li><li>Copys the solution file</li><li>Copys the project file and restores dependencys (same like your IDE does from Nuget)</li><li>Copys your class files</li><li>Builds &amp; Publishes your code (same like your IDE’s compiler does)</li><li>Finally from microsoft/aspnetcore:2.0 builds the image and copys in the compiled code from the ‘builder’ image</li></ol><p><a href="https://github.com/carlpaton/FizzBuzz/blob/master/Dockerfile">You can view the contents of the Dockerfile I used here</a>.</p><h3 id="Environmental-Variables"><a href="#Environmental-Variables" class="headerlink" title="Environmental Variables"></a>Environmental Variables</h3><p>The variables based on how you want the resulting container to behave need to be injected when you spin up, these need to be in a file thats relative to your current director.</p><p>Example: env_file_name.env</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lowerBound=1</span><br><span class="line">upperBound=100</span><br><span class="line">fizzAt=3</span><br><span class="line">buzzAt=4</span><br></pre></td></tr></table></figure><p>You then inject with <em>–env-file=env_file_name.env</em></p><h3 id="Shell-script"><a href="#Shell-script" class="headerlink" title="Shell script"></a>Shell script</h3><p>To pull the container and spin up the image you will need to simply run the following shell script.<br>Note that you can pass the environmental variables in the command, or even better you can <a href="/2018/07/docker-compose/">use Docker Compose</a>.</p><p>Example shell script:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">docker pull carlpaton/fizzbuzz:v1.0.0</span><br><span class="line">sudo docker container kill fizzbuzz</span><br><span class="line">sudo docker rm fizzbuzz</span><br><span class="line"></span><br><span class="line">sudo docker run --env-file=env_file_name.env --name fizzbuzz carlpaton/fizzbuzz:v1.0.0</span><br><span class="line"></span><br><span class="line">sudo docker start fizzbuzz</span><br><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlpaton/FizzBuzz/blob/master/fizzbuzz.sh">You can download this shell script here</a>.</p><h3 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h3><p>I believe in sharing things, all the code for the above is free <a href="https://opensource.org/licenses/MIT">MIT</a>.</p><h3 id="References-amp-Perquisites"><a href="#References-amp-Perquisites" class="headerlink" title="References &amp; Perquisites"></a>References &amp; Perquisites</h3><p>Before running the above you will need to <a href="/2018/04/setup-docker-on-linux/">setup Docker</a>.</p><ul><li><a href="https://blog.codinghorror.com/why-cant-programmers-program/">https://blog.codinghorror.com/why-cant-programmers-program/</a></li><li><a href="http://wiki.c2.com/?FizzBuzzTest">http://wiki.c2.com/?FizzBuzzTest</a></li><li><a href="https://www.youtube.com/watch?v=QPZ0pIK_wsc">https://www.youtube.com/watch?v=QPZ0pIK_wsc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Utilities</title>
      <link href="/2018/06/docker-utilities/"/>
      <url>/2018/06/docker-utilities/</url>
      
        <content type="html"><![CDATA[<h3 id="Container-Advisor"><a href="#Container-Advisor" class="headerlink" title="Container Advisor"></a>Container Advisor</h3><p><em>cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers.</em></p><ul><li><a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coveralls</title>
      <link href="/2018/06/coveralls/"/>
      <url>/2018/06/coveralls/</url>
      
        <content type="html"><![CDATA[<p><em>“Helps you deliver code confidently by showing which parts of your code aren’t covered by your test suite.”</em></p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>I have not used this service as yet but can see it rock on this repository - <a href="https://github.com/randsleadershipslack/destalinator">https://github.com/randsleadershipslack/destalinator</a></p><p><img src="/d/coveralls/coveralls.jpg" alt="coveralls"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://coveralls.io/">https://coveralls.io/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> continuous integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana</title>
      <link href="/2018/06/grafana/"/>
      <url>/2018/06/grafana/</url>
      
        <content type="html"><![CDATA[<p>The analytics platform for <strong>all</strong> your metrics,  Grafana allows you to query, visualize, alert on and <strong>understand</strong> your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a <strong>data driven culture</strong>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://docs.grafana.org/">http://docs.grafana.org/</a></li><li><a href="https://grafana.com/plugins">https://grafana.com/plugins</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travis CI</title>
      <link href="/2018/06/travis-ci/"/>
      <url>/2018/06/travis-ci/</url>
      
        <content type="html"><![CDATA[<p><em>“Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.”</em></p><ol><li><a href="https://docs.travis-ci.com/user/getting-started/">https://docs.travis-ci.com/user/getting-started/</a><ol><li><p>Link GitHub account</p></li><li><p>Link your repository</p></li><li><p>Add your <a href="https://github.com/carlpaton/Common/blob/master/.travis.yml">.travis.yml file</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">csharp</span></span><br><span class="line"><span class="attr">mono:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">dotnet:</span> <span class="number">2.2</span><span class="number">.104</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">restore</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></li></ol></li><li>Select the ‘BUILD’ option/image at the top<ol><li>From the second drop down select ‘markdown’</li><li>Copy the markdown to your <a href="https://github.com/carlpaton/FizzBuzz/blob/master/README.md">readme</a></li></ol></li></ol><p><img src="/d/travis-ci/markdown.jpg" alt="markdown"></p><p>Your README should then display as follows</p><p><img src="/d/travis-ci/travis-ci.jpg" alt="travis ci"></p><h3 id="Example-Implementation"><a href="#Example-Implementation" class="headerlink" title="Example Implementation"></a>Example Implementation</h3><ul><li><a href="https://github.com/carlpaton/Common">https://github.com/carlpaton/Common</a></li><li><a href="https://github.com/carlpaton/FizzBuzz">https://github.com/carlpaton/FizzBuzz</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.travis-ci.com/user/languages/csharp/">https://docs.travis-ci.com/user/languages/csharp/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> continuous integration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Driven development (TDD)</title>
      <link href="/2018/06/test-driven-development-tdd/"/>
      <url>/2018/06/test-driven-development-tdd/</url>
      
        <content type="html"><![CDATA[<p>Test First or Test Driven development is a design pattern that can be summed up as:</p><ol><li><p>Write a test case and fail it (RED)<br>~ This means create your unit tests referencing classes that do not exist<br>~ the project will not compile</p></li><li><p>Put enough code to pass (GREEN)<br>~ This mean create the signature of the classes &amp; methods you are testing (sometimes referred to as stubbing them out)<br>~ Return a default value, example if the return type is int then return 0</p></li><li><p>Re factor (REFACTOR)<br>~ Implement the methods with the intended logic<br>~ Run test cases Pass/Fail</p></li></ol><p><img src="/d/test-driven-development-tdd/tdd.jpg" alt="TDD"></p><h3 id="What-is-the-value"><a href="#What-is-the-value" class="headerlink" title="What is the value?"></a>What is the value?</h3><p>* High test coverage (You are forced to write Unit Tests)<br>* Intentions &amp; requirements are clear<br>* Iterative development and testing<br>* Defects are identified early<br>* Automatic regression</p><p>Also see: <a href="https://dzone.com/articles/fail-fast-principle-in-software-development">https://dzone.com/articles/fail-fast-principle-in-software-development</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.codeproject.com/Articles/560137/NET-TDD-Test-Driven-Development-by-example-Part">https://www.codeproject.com/Articles/560137/NET-TDD-Test-Driven-Development-by-example-Part</a></li><li><a href="https://stackoverflow.com/questions/793850/hello-world-the-tdd-way">https://stackoverflow.com/questions/793850/hello-world-the-tdd-way</a></li><li><a href="https://stackoverflow.com/questions/1365943/how-to-start-unit-testing-or-tdd">https://stackoverflow.com/questions/1365943/how-to-start-unit-testing-or-tdd</a></li><li><a href="https://stackoverflow.com/questions/3840125/useful-design-patterns-for-unit-testing-tdd">https://stackoverflow.com/questions/3840125/useful-design-patterns-for-unit-testing-tdd</a></li><li><a href="https://mva.microsoft.com/en-us/training-courses/testdriven-development-16458?l=iCWHq6vXC_2706218965">https://mva.microsoft.com/en-us/training-courses/testdriven-development-16458?l=iCWHq6vXC_2706218965</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X-Frame-Options</title>
      <link href="/2018/06/x-frame-options/"/>
      <url>/2018/06/x-frame-options/</url>
      
        <content type="html"><![CDATA[<p>Cross site scripting is frowned upon however there are times when you need to display the content of one site in the iFrame of another. An example is a war board showing a result set of data used for an operations team to monitor. This can be things like new support requests.</p><p>The host can block this by setting the following header in the response:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure><p>If this is set you can stand on your head but your iFrame will not display the content:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">--- include jquery</span><br><span class="line">src=&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;</span><br><span class="line"></span><br><span class="line">--- js methods</span><br><span class="line"> $(document).ready(function () &#123;</span><br><span class="line">var height = $(window).height();</span><br><span class="line">setInterval(&quot;Refresh()&quot;, 150000);</span><br><span class="line">$(&quot;#results&quot;).css(&quot;height&quot;, (height - 9) + &quot;px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">function Refresh() &#123;</span><br><span class="line">var iframe = document.getElementById(&#x27;results&#x27;);</span><br><span class="line">iframe.src = iframe.src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- some style</span><br><span class="line"> html, body &#123;</span><br><span class="line">margin: 0px;</span><br><span class="line">border: 0px;</span><br><span class="line">&#125;</span><br><span class="line">#results &#123;</span><br><span class="line">width: 99%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- iFrame</span><br><span class="line">iframe id=&quot;results&quot; src=&quot;https://en.wikipedia.org/wiki/MIT_License&quot; scrolling=&quot;no&quot;</span><br></pre></td></tr></table></figure><h3 id="Work-Around"><a href="#Work-Around" class="headerlink" title="Work Around"></a>Work Around</h3><p>You can removed the configuration from the server (if you have access)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- nginx</span><br><span class="line">Header always append X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- IIS (I have not tried this but saw it on SO, linked below) </span><br><span class="line">&lt; system.webServer&gt;</span><br><span class="line">     &lt; httpProtocol allowKeepAlive=&quot;true&quot; &gt;</span><br><span class="line">       &lt; customHeaders&gt;</span><br><span class="line">         &lt; add name=&quot;X-Frame-Options&quot; value=&quot;*&quot; /&gt;</span><br><span class="line">       &lt; /customHeaders&gt;</span><br><span class="line">     &lt; /httpProtocol&gt;</span><br><span class="line"> &lt; /system.webServer&gt;</span><br></pre></td></tr></table></figure><p>If this is for a warboard and you and not hijacking somebody’s website you can install a browser plug, example for <a href="https://chrome.google.com/webstore/detail/ignore-x-frame-headers/gleekbfjekiniecknbkamfmkohkpodhe">chrome is ‘Ignore X-Frame headers’</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/27358966/how-to-set-x-frame-options-on-iframe">https://stackoverflow.com/questions/27358966/how-to-set-x-frame-options-on-iframe</a></li><li><a href="https://stackoverflow.com/questions/38699221/load-denied-by-x-frame-options-does-not-permit-framing">https://stackoverflow.com/questions/38699221/load-denied-by-x-frame-options-does-not-permit-framing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> client side </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker, Interactive Container Session</title>
      <link href="/2018/06/docker-interactive-container-session/"/>
      <url>/2018/06/docker-interactive-container-session/</url>
      
        <content type="html"><![CDATA[<p>While playing with compose I had the need to manually run an Alpine container:</p><p>Spin up docker container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -v /test-vol --name=voltainer alpine:3.7 /bin/sh</span><br></pre></td></tr></table></figure><p>Also see <a href="/2018/04/docker-commands/">docker-commands -&gt;  Interactive processes (like a shell)</a></p><p>Update/Upgrade then install GIT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk upgrade</span><br><span class="line">apk add --no-cache bash git openssh</span><br></pre></td></tr></table></figure><p>Create/List directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>Clone GIT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/carlpaton/SQLStatements.git data</span><br></pre></td></tr></table></figure><p>Copy to docker volume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp data/ComposeDemo/*.sql /test-vol</span><br></pre></td></tr></table></figure><p>List installed packages</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk info</span><br></pre></td></tr></table></figure><p>Exit interactive session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTRL D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> utilities </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP verbs</title>
      <link href="/2018/06/http-verbs/"/>
      <url>/2018/06/http-verbs/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Verb</th><th>REST Example</th><th>Usage</th></tr></thead><tbody><tr><td><code>GET</code></td><td><a href="https://api.com/users">https://api.com/users</a></td><td>Read all users as a collection. Should return 200 OK or 404 Not Found.</td></tr><tr><td><code>GET</code></td><td><a href="https://api.com/users/%7Bid%7D">https://api.com/users/{id}</a></td><td>Read single user by id. Should return 200 OK or 404 Not Found. If your read needs to use a complex object ie: you are sending back JSON then rather use a <code>POST</code> to read (or send JUST the <code>&#123;id&#125;</code> in the route to keep using a <code>GET</code>)</td></tr><tr><td><code>POST</code></td><td><a href="https://api.com/users">https://api.com/users</a></td><td>Create new user. Should return 200 OK when the resource was updated, 201 if it was created, 202 is its still busy async, 204 if the actual resource was not returned.</td></tr><tr><td><code>PUT</code></td><td><a href="https://api.com/users/%7Bid%7D">https://api.com/users/{id}</a></td><td>Update user by id with complete representation. In rare cases you can also create like a <code>POST</code>. Should return 200 OK, 201 Created or 204 No Content</td></tr><tr><td><code>PATCH</code></td><td><a href="https://api.com/users/%7Bid%7D">https://api.com/users/{id}</a></td><td>Partial update</td></tr><tr><td><code>DELETE</code></td><td><a href="https://api.com/users/%7Bid%7D">https://api.com/users/{id}</a></td><td>Delete user by id. Return 200 OK, 204 or 404</td></tr></tbody></table><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://datatracker.ietf.org/doc/html/rfc7231#section-4">RFC 7231 - Request method standards</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bytes to string</title>
      <link href="/2018/06/bytes-to-string-c-sharp/"/>
      <url>/2018/06/bytes-to-string-c-sharp/</url>
      
        <content type="html"><![CDATA[<h3 id="Bytes-To-String"><a href="#Bytes-To-String" class="headerlink" title="Bytes To String"></a>Bytes To String</h3><p>Sweet conversion snaffled from stackoverflow.com &lt;3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class BytesToString</span><br><span class="line">&#123;</span><br><span class="line">    public static String Go(long byteCount)</span><br><span class="line">    &#123;</span><br><span class="line">        string[] suf = &#123; &quot;B&quot;, &quot;KB&quot;, &quot;MB&quot;, &quot;GB&quot;, &quot;TB&quot;, &quot;PB&quot;, &quot;EB&quot; &#125;; //Longs run out around EB</span><br><span class="line">        if (byteCount == 0)</span><br><span class="line">        return &quot;0&quot; + suf[0];</span><br><span class="line">        </span><br><span class="line">        long bytes = Math.Abs(byteCount);</span><br><span class="line">        int place = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));</span><br><span class="line">        double num = Math.Round(bytes / Math.Pow(1024, place), 1);</span><br><span class="line">        return (Math.Sign(byteCount) * num).ToString() + suf[place];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/281640/how-do-i-get-a-human-readable-file-size-in-bytes-abbreviation-using-net">https://stackoverflow.com/questions/281640/how-do-i-get-a-human-readable-file-size-in-bytes-abbreviation-using-net</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload File MVC</title>
      <link href="/2018/06/upload-file-mvc/"/>
      <url>/2018/06/upload-file-mvc/</url>
      
        <content type="html"><![CDATA[<h3 id="Net4-x-MVC"><a href="#Net4-x-MVC" class="headerlink" title=".Net4.x MVC"></a>.Net4.x MVC</h3><p>Upload and save some file.</p><h4 id="FileUploadViewModel"><a href="#FileUploadViewModel" class="headerlink" title="FileUploadViewModel"></a>FileUploadViewModel</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Display(Name = <span class="string">&quot;Some File&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> List&lt;HttpPostedFileBase&gt; Files &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="FileUploadController"><a href="#FileUploadController" class="headerlink" title="FileUploadController"></a>FileUploadController</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">ValidateAntiForgeryToken</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">SomeAction</span>(<span class="params">[Bind(Include = <span class="string">&quot;Foo,Files&quot;</span></span>)] FileUploadViewModel vwModel)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (vwModel.Files[<span class="number">0</span>] != <span class="literal">null</span>)</span><br><span class="line">   &#123;</span><br><span class="line"><span class="keyword">var</span> fileSize = vwModel.Files[<span class="number">0</span>].InputStream.Length;</span><br><span class="line">        <span class="keyword">var</span> limit = Convert.ToInt64(ConfigurationManager.AppSettings[<span class="string">&quot;allowedUploadFilesSize&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fileSize &gt; limit)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">// moan with message that converts `limit` from bytes to string.</span></span><br><span class="line">            <span class="comment">// 10485760 is 10mb as bytes</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       HttpPostedFileBase postedFile = vwModel.Files[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">var</span> fi = <span class="keyword">new</span> FileInfo(postedFile.FileName);</span><br><span class="line">       <span class="keyword">var</span> saveName = $(<span class="string">&quot;&#123;Guid.NewGuid()&#125;&#123;fi.Extension&#125;&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> savePath = $(<span class="string">&quot;&#123;AppDomain.CurrentDomain.BaseDirectory&#125;&#123;saveName&#125;&quot;</span>);</span><br><span class="line">       postedFile.SaveAs(savePath);</span><br></pre></td></tr></table></figure><ul><li><a href="/2018/06/bytes-to-string-c-sharp/">Bytes to string</a></li></ul><h4 id="View-FileUpload-cshtml"><a href="#View-FileUpload-cshtml" class="headerlink" title="View FileUpload.cshtml"></a>View FileUpload.cshtml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@using (Html.BeginForm(&quot;SomeAction&quot;, &quot;FileUpload&quot;, FormMethod.Post, new &#123; encType = &quot;multipart/form-data&quot;, id = &quot;uploadForm&quot; &#125;))</span><br><span class="line">&#123;</span><br><span class="line">// wrapper divs and magic here</span><br><span class="line">@Html.LabelFor(model =&gt; model.Files, htmlAttributes: new &#123; @class = &quot;control-label&quot; &#125;)</span><br><span class="line">@Html.TextBoxFor(m =&gt; m.Files, new &#123; type = &quot;file&quot;, name = &quot;Files&quot;, @class = &quot;form-control&quot;, @onchange = &quot;Save();&quot; &#125;)</span><br></pre></td></tr></table></figure><p>Client side post-back after the file changes is triggered by <code>@onchange</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">Save</span>()</span> &#123;</span><br><span class="line">    Loading();</span><br><span class="line">    document.getElementById(<span class="string">&#x27;uploadForm&#x27;</span>).submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calling RESTful endpoints</title>
      <link href="/2018/06/calling-restful-endpoints/"/>
      <url>/2018/06/calling-restful-endpoints/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Updated 24/05/2021</strong></em></p><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><p>This is the current recomended class for sending HTTP requests and receiving HTTP responses.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using (var client = new HttpClient())</span><br><span class="line">&#123;</span><br><span class="line">    using (var content = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">    var result = client.PostAsync(endPoint, content).Result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient">https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient</a></li></ul><h3 id="WebRequest"><a href="#WebRequest" class="headerlink" title="WebRequest"></a>WebRequest</h3><blockquote><p>“We don’t recommend that you use WebRequest or its derived classes for new development. Instead, use the System.Net.Http.HttpClient class. - docs.microsoft.com”</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var endPoint = string.Format(&quot;&#123;0&#125;/fizzbuzz_event&quot;, ApiUrl);</span><br><span class="line">WebRequest request = WebRequest.Create(endPoint);</span><br><span class="line">request.Method = &quot;POST&quot;;</span><br><span class="line">request.ContentType = &quot;application/json&quot;;</span><br><span class="line"></span><br><span class="line">var dataStream = request.GetRequestStream();</span><br><span class="line">dataStream.Write(new UTF8Encoding().GetBytes(json), 0, json.Length);</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.webrequest">https://docs.microsoft.com/en-us/dotnet/api/system.net.webrequest</a></li></ul><h3 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h3><blockquote><p>“We don’t recommend that you use the WebClient class for new development. Instead, use the System.Net.Http.HttpClient class. - docs.microsoft.com”</p></blockquote><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient">https://docs.microsoft.com/en-us/dotnet/api/system.net.webclient</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> web api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Value Type vs Reference Type</title>
      <link href="/2018/06/value-type-vs-reference-type/"/>
      <url>/2018/06/value-type-vs-reference-type/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/value-type-vs-reference-type/valref-1.png" alt="Value Type vs Reference Type"></p><p>The Types in .NET Framework are either treated by Value Type or by Reference Type.</p><h3 id="Value-Type"><a href="#Value-Type" class="headerlink" title="Value Type"></a>Value Type</h3><p>A <strong>Value Type</strong> stores its contents in memory allocated on the stack. When you created a Value Type, a single space in memory is allocated to store the value and that variable directly holds a value.</p><blockquote><p>In C#, all the “things” declared with the following list of type declarations are Value types (because they are from System.ValueType):</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool</span><br><span class="line">byte</span><br><span class="line">char</span><br><span class="line">decimal</span><br><span class="line">double</span><br><span class="line">enum</span><br><span class="line">float</span><br><span class="line">int</span><br><span class="line">long</span><br><span class="line">sbyte</span><br><span class="line">short</span><br><span class="line">struct</span><br><span class="line">uint</span><br><span class="line">ulong</span><br><span class="line">ushort</span><br></pre></td></tr></table></figure><h3 id="Reference-Types"><a href="#Reference-Types" class="headerlink" title="Reference Types"></a>Reference Types</h3><p><strong>Reference Types</strong> are used by a reference which holds a reference (address) to the object but not the object itself. Because reference types represent the address of the variable rather than the data itself, assigning a reference variable to another doesn’t copy the data. Instead it creates a second copy of the reference, which refers to the same location of the heap as the original value.</p><blockquote><p>All the “things” declared with the types in this list are Reference types (and inherit from System.Object… except, of course, for object which is the System.Object object):</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class</span><br><span class="line">interface</span><br><span class="line">delegate</span><br><span class="line">object</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>By default a class instance as an object is passed to methods by value, to change this if you want the method to alter the object, pass it with the ref keyword.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myObj = new SomeClass();</span><br><span class="line"></span><br><span class="line">SomeMethodThatChangesTheObjectValues(ref myObj)</span><br><span class="line">//do something magical</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/basic-types">https://docs.microsoft.com/en-us/dotnet/csharp/basic-types</a></li><li><a href="http://net-informations.com/faq/general/valuetype-referencetype.htm">http://net-informations.com/faq/general/valuetype-referencetype.htm</a></li><li><a href="https://stackoverflow.com/questions/5057267/what-is-the-difference-between-a-reference-type-and-value-type-in-c">https://stackoverflow.com/questions/5057267/what-is-the-difference-between-a-reference-type-and-value-type-in-c</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref</a></li><li><a href="https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i">https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clear Nuget Cache</title>
      <link href="/2018/05/clear-nuget-cache/"/>
      <url>/2018/05/clear-nuget-cache/</url>
      
        <content type="html"><![CDATA[<p>If library’s have the same name you can clear your cache with these commands. This can happen when you are developing and testing a new version of the library.</p><p>I downloaded the <a href="https://www.nuget.org/packages/NuGet.exe/">Nuget executable from nuget.org</a> then saved it to <em>c:\Data\Nuget</em></p><p>You can save it to any location and add that path to your  Environment Variables’ under “Path” – I didn’t see the value for this exercise.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nuget locals all -list</span><br><span class="line">nuget locals all -clear</span><br></pre></td></tr></table></figure><p>Example output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Carl&gt;cd c:\Data\nuget\</span><br><span class="line"></span><br><span class="line">c:\Data\Nuget&gt;nuget locals all -list</span><br><span class="line">http-cache: C:\Users\Carl\AppData\Local\NuGet\v3-cache</span><br><span class="line">global-packages: C:\Users\Carl\.nuget\packages\</span><br><span class="line">temp: C:\Users\Carl\AppData\Local\Temp\NuGetScratch</span><br><span class="line"></span><br><span class="line">c:\Data\Nuget&gt;nuget locals all -clear</span><br><span class="line">Clearing NuGet HTTP cache: C:\Users\Carl\AppData\Local\NuGet\v3-cache</span><br><span class="line">Clearing NuGet global packages cache: C:\Users\Carl\.nuget\packages\</span><br><span class="line">Clearing NuGet Temp cache: C:\Users\Carl\AppData\Local\Temp\NuGetScratch</span><br><span class="line">Local resources cleared.</span><br><span class="line"></span><br><span class="line">c:\Data\Nuget&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Global Assembly Cache</title>
      <link href="/2018/05/global-assembly-cache/"/>
      <url>/2018/05/global-assembly-cache/</url>
      
        <content type="html"><![CDATA[<p><em>“Each computer where the Common Language Runtime is installed has a machine-wide code cache called the Global Assembly Cache. The Global Assembly Cache stores assemblies specifically designated to be shared by several applications on the computer.”</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\assembly&gt;dir /s *myfile.dll*</span><br><span class="line">C:\Windows\Microsoft.NET\assembly&gt;dir /s *myfile.dll*</span><br><span class="line"></span><br><span class="line">I had the most success running the above from C:\Windows\</span><br></pre></td></tr></table></figure><p>If you suspect caching issues then:</p><ol><li>Ensure you are updating the referenced library manifest with the new version number (you can use the same number from your nuspec file if you are using nuget).</li><li>Update all the library’s manually (locations shown in the commands above), you can just copy from your applications /bin directory.</li><li>Run IISReset if your issue is a web application related.</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/19980650/where-is-my-gac-located/19981061">https://stackoverflow.com/questions/19980650/where-is-my-gac-located/19981061</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/framework/app-domains/gac">https://docs.microsoft.com/en-us/dotnet/framework/app-domains/gac</a></li><li><a href="https://docs.microsoft.com/en-us/previous-versions/commerce-server/ms957500(v=cs.70)">https://docs.microsoft.com/en-us/previous-versions/commerce-server/ms957500(v=cs.70)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Single Responsibility Principle (SRP)</title>
      <link href="/2018/05/single-responsibility-principle-srp/"/>
      <url>/2018/05/single-responsibility-principle-srp/</url>
      
        <content type="html"><![CDATA[<p>This is the ‘S’ in <a href="/2018/04/solid-object-oriented-design/">SOLID</a></p><p>Responsibility’s can be stated as “a reason to change”, multiple small <a href="https://carlpaton.co.za/interfaces/">interfaces</a> (interface-segregation principle ISP) can help to achieve SRP.</p><p>SRP is also related to the concept of ‘<a href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation Of Concerns</a>‘</p><h3 id="Definition-Robert-C-“Uncle-Bob”-Martin"><a href="#Definition-Robert-C-“Uncle-Bob”-Martin" class="headerlink" title="Definition (Robert C. “Uncle Bob” Martin)"></a>Definition (Robert C. “Uncle Bob” Martin)</h3><p>There should never be more than one reason for a class to change.</p><h3 id="Definition-Wikipedia"><a href="#Definition-Wikipedia" class="headerlink" title="Definition (Wikipedia)"></a>Definition (Wikipedia)</h3><p>The Single Responsibility Principle states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class.</p><h3 id="Cohesion-and-Coupling"><a href="#Cohesion-and-Coupling" class="headerlink" title="Cohesion and Coupling"></a>Cohesion and Coupling</h3><ul><li>Cohesion is how strongly related &amp; focused the responsibilities of a module are</li><li>Coupling is the degree to which each program module relies on each other</li></ul><p>The goal would be to have low coupling and high cohesion.</p><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/1_SRP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/5RwhyZnVRS8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li><a href="https://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074">https://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle–net-36074</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quality Assurance Tools</title>
      <link href="/2018/05/quality-assurance-tools/"/>
      <url>/2018/05/quality-assurance-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>“Selenium automates browsers. That’s it! What you do with that power is entirely up to you. Primarily, it is for automating web applications for testing purposes, but is certainly not limited to just that. Boring web-based administration tasks can (and should!) be automated as well.”</p><p><a href="https://www.seleniumhq.org/">https://www.seleniumhq.org/</a></p><h2 id="Sonarqube"><a href="#Sonarqube" class="headerlink" title="Sonarqube"></a>Sonarqube</h2><p>Static code analysis, Testing and Continuous Inspection.</p><p>“Continuous Inspection. SonarQube provides the capability to not only show health of an application but also to highlight issues newly introduced. With a Quality Gate in place, you can fix the leak and therefore improve code quality systematically.”</p><p><a href="https://www.sonarqube.org/">https://www.sonarqube.org/</a></p><h2 id="HP-Load-Runner"><a href="#HP-Load-Runner" class="headerlink" title="HP Load Runner"></a>HP Load Runner</h2><p>HP LoadRunner is an automated performance and test automation product for application load testing: examining system behavior and performance, while generating actual load.</p><p><a href="https://software.microfocus.com/en-us/products/loadrunner-load-testing/download">https://software.microfocus.com/en-us/products/loadrunner-load-testing/download</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Running a .Net Core Web Application</title>
      <link href="/2018/05/running-a-net-core-web-application/"/>
      <url>/2018/05/running-a-net-core-web-application/</url>
      
        <content type="html"><![CDATA[<p>Running the code locally your IDE does the work for you but when you deploy to a web server you will need to make some changes / configuration updates:</p><ol><li>Install both the .net core SDK and Runtime<ol><li><a href="https://www.microsoft.com/net/download/all">https://www.microsoft.com/net/download/all</a></li><li>For the .Net Core Runtime you will want the Hosting Bundle Installer</li><li>Reboot the host</li></ol></li><li>Update the sites <strong>Application Pool</strong> , set the <strong>.NET CLR version</strong> to <strong>No Managed Code</strong></li><li>Update the service configuration for <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.iisoptions?view=aspnetcore-2.2">IISOptions</a> in <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.istartup.configureservices?view=aspnetcore-2.2">ConfigureServices</a><ol><li>This will be in ‘Startup.cs’ (see below)</li></ol></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.Configure&lt;IISOptions&gt;(options =&gt; </span><br><span class="line">&#123; </span><br><span class="line">    options.ForwardClientCertificate = <span class="literal">false</span>; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>You may also need to update the BuildWebHost method in ‘Program.cs’ to include:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.UseContentRoot(<span class="string">&quot;c:\\yoursitedir&quot;</span>)=</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/index?view=aspnetcore-2.1&tabs=aspnetcore2x">Host ASP.NET Core on Windows with IIS</a></li><li><a href="https://docs.microsoft.com/en-gb/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-2.1">ASP.NET Core Module</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Reflector / Decompiler</title>
      <link href="/2018/05/net-reflector-decompiler/"/>
      <url>/2018/05/net-reflector-decompiler/</url>
      
        <content type="html"><![CDATA[<p><em>A decompiler is a computer program that takes an executable file as input, and attempts to create a high level source file which can be recompiled successfully.</em></p><ul><li><a href="https://www.jetbrains.com/decompiler/">https://www.jetbrains.com/decompiler/</a></li><li><a href="https://github.com/icsharpcode/ILSpy">https://github.com/icsharpcode/ILSpy</a></li><li><a href="https://www.telerik.com/products/decompiler.aspx">https://www.telerik.com/products/decompiler.aspx</a></li><li><a href="http://www.devextras.com/decompiler/">http://www.devextras.com/decompiler/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE, Editor and Database Tools</title>
      <link href="/2018/05/ide-editor-and-database-tools/"/>
      <url>/2018/05/ide-editor-and-database-tools/</url>
      
        <content type="html"><![CDATA[<p>An integrated development environment (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools, and a debugger.</p><h3 id="Local-IDE-amp-Code-Editors"><a href="#Local-IDE-amp-Code-Editors" class="headerlink" title="Local IDE &amp; Code Editors"></a>Local IDE &amp; Code Editors</h3><ul><li><a href="/2019/09/ide-visual-studio-code/">Visual Studio Code ~ code editor</a></li><li><a href="/2019/09/ide-visual-studio/">Visual Studio</a></li><li><a href="/2019/09/ide-webstorm/">Webstorm (Jetbrains)</a></li><li><a href="/2019/09/ide-rider/">Rider (Jetbrains)</a></li><li><a href="https://www.jetbrains.com/pycharm/">PyCharm (Jetbrains)</a> </li></ul><h3 id="Online-IDE"><a href="#Online-IDE" class="headerlink" title="Online IDE"></a>Online IDE</h3><ul><li><a href="https://stackblitz.com/">stackblitz.com</a> , <a href="https://www.youtube.com/watch?v=EBzoTnX6LzU">Using StackBlitz (youtube)</a></li><li><a href="https://codepen.io/">https://codepen.io/</a></li><li><a href="https://repl.it/@carlpaton/">https://repl.it/@carlpaton/</a> </li></ul><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><ul><li><a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></li><li><a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a></li><li><a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads">https://www.microsoft.com/en-us/sql-server/sql-server-downloads</a></li><li><a href="https://www.pgadmin.org/download/">https://www.pgadmin.org/download/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metric to Inch Conversion</title>
      <link href="/2018/05/metric-to-inch-conversion/"/>
      <url>/2018/05/metric-to-inch-conversion/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Metric Size</th><th>Fractional Inch</th></tr></thead><tbody><tr><td>1 mm</td><td>3/64”</td></tr><tr><td>2 mm</td><td>5/64”</td></tr><tr><td>3 mm</td><td>1/8”</td></tr><tr><td>4 mm</td><td>5/32”</td></tr><tr><td>4.7 mm</td><td>3/16”</td></tr><tr><td>5 mm</td><td>13/64”</td></tr><tr><td>6 mm</td><td>15/64”</td></tr><tr><td>6.3 mm</td><td>1/4”</td></tr><tr><td>7 mm</td><td>9/32”</td></tr><tr><td>8 mm</td><td>5/16”</td></tr><tr><td>9 mm</td><td>23/64”</td></tr><tr><td>9.5 mm</td><td>3/8”</td></tr><tr><td>10 mm</td><td>25/64”</td></tr><tr><td>12.7 mm</td><td>1/2”</td></tr><tr><td>19 mm</td><td>3/4”</td></tr><tr><td>10.16 cm</td><td>4”</td></tr><tr><td>91.44 cm</td><td>36”</td></tr><tr><td>121.92 cm</td><td>48”</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.rapidtables.com/convert/length/mm-to-inch.html">https://www.rapidtables.com/convert/length/mm-to-inch.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Access PostgreSQL database command line terminal in a container</title>
      <link href="/2018/05/access-postgresql-database-command-line-terminal-in-a-container/"/>
      <url>/2018/05/access-postgresql-database-command-line-terminal-in-a-container/</url>
      
        <content type="html"><![CDATA[<p>Access PostgreSQL database command line terminal in a container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it [CONTAINER NAME] psql -U postgres</span><br></pre></td></tr></table></figure><p>Commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\c [DATABASE NAME] ~ connects to a database</span><br><span class="line">\d ~ checks all tables</span><br><span class="line">\d+ [TABLE NAME] ~ checks </span><br><span class="line">\q ~ quit</span><br></pre></td></tr></table></figure><p>You can also run this as a shell script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">sudo docker exec -it [CONTAINER NAME] psql -U postgres -c &quot;CREATE DATABASE mydatabase OWNER = postgres TABLESPACE pg_default;&quot;</span><br><span class="line"></span><br><span class="line">sudo docker exec -it [CONTAINER NAME] psql -d gblcore -U postgres -c &quot;CREATE SCHEMA myschema AUTHORIZATION postgres;&quot;</span><br><span class="line"></span><br><span class="line">sudo docker exec -i [CONTAINER NAME] pg_restore -U postgres -d mydatabase &lt; /tmp/production20180529.dump</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Db Visualizer</title>
      <link href="/2018/05/db-visualizer/"/>
      <url>/2018/05/db-visualizer/</url>
      
        <content type="html"><![CDATA[<p>DbVisualizer is the universal database tool for developers,  DBAs and analysts. It is the perfect solution since the same tool can be used on all major operating systems accessing a wide range of databases.</p><p><a href="https://www.dbvis.com/">https://www.dbvis.com/</a></p><h3 id="Page-Setup"><a href="#Page-Setup" class="headerlink" title="Page Setup"></a>Page Setup</h3><p>File -&gt; Page Setup -&gt; <code>A3 (297 x 420mm)</code></p><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p>CTRL ALT E -&gt; JPG</p>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Code Analysis</title>
      <link href="/2018/05/net-code-analysis/"/>
      <url>/2018/05/net-code-analysis/</url>
      
        <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/EvX7WBJuI_g" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://msdn.microsoft.com/en-us/library/bb385914.aspx">https://msdn.microsoft.com/en-us/library/bb385914.aspx</a></li><li><a href="https://dailydotnettips.com/exploring-the-code-metrics-tools-in-visual-studio/">https://dailydotnettips.com/exploring-the-code-metrics-tools-in-visual-studio/</a></li></ul><h3 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h3><p><a href="https://developercommunity.visualstudio.com/content/problem/30872/support-code-metrics-for-net-core-projects.html">https://developercommunity.visualstudio.com/content/problem/30872/support-code-metrics-for-net-core-projects.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> static code analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xamarin Setup &amp; Install</title>
      <link href="/2018/05/xamarin-setup-install/"/>
      <url>/2018/05/xamarin-setup-install/</url>
      
        <content type="html"><![CDATA[<p><em>“Xamarin is a mobile app development platform for building native iOS, Android, and Windows apps from a common C#/.NET code base.”</em></p><p>To compile for iOS, bring up a <a href="/2018/04/vmware-workstation-player/">VM, pull the macOS High Sierra virtual hard disc</a> and install x-code.<br>VS2017 will do the rest! &lt;3</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/visualstudio/cross-platform/visual-studio-and-xamarin">https://docs.microsoft.com/en-us/visualstudio/cross-platform/visual-studio-and-xamarin</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/cross-platform/learn-app-building-basics-with-xamarin-forms-in-visual-studio">https://docs.microsoft.com/en-us/visualstudio/cross-platform/learn-app-building-basics-with-xamarin-forms-in-visual-studio</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/cross-platform/setup-and-install">https://docs.microsoft.com/en-us/visualstudio/cross-platform/setup-and-install</a></li><li><a href="https://www.xamarin.com/prebuilt">https://www.xamarin.com/prebuilt</a></li><li><a href="https://docs.microsoft.com/en-us/xamarin/xamarin-forms/get-started/hello-xamarin-forms/">https://docs.microsoft.com/en-us/xamarin/xamarin-forms/get-started/hello-xamarin-forms/</a></li><li><a href="https://www.codeproject.com/Articles/1097179/SQLite-with-Xamarin-Forms-Step-by-Step-guide">https://www.codeproject.com/Articles/1097179/SQLite-with-Xamarin-Forms-Step-by-Step-guide</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> xamarin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Custom Data Annotations</title>
      <link href="/2018/05/mvc-custom-data-annotations/"/>
      <url>/2018/05/mvc-custom-data-annotations/</url>
      
        <content type="html"><![CDATA[<h3 id="Custom-Annotation"><a href="#Custom-Annotation" class="headerlink" title="Custom Annotation"></a>Custom Annotation</h3><p>/CustomValidation/ValidateAgeAttribute.cs</p><p>This can be used to apply a custom range validation to the given date time value.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.ComponentModel.DataAnnotations;</span><br><span class="line">using System.Web.Mvc;</span><br><span class="line"></span><br><span class="line">namespace PROJECTNAMESPACE.CustomValidation</span><br><span class="line">&#123;</span><br><span class="line"> [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]</span><br><span class="line"> public class ValidateAgeAttribute : ValidationAttribute, IClientValidatable</span><br><span class="line"> &#123;</span><br><span class="line"> private const string DefaultErrorMessage = &quot;Your age is invalid, your &#123;0&#125; should fall between &#123;1&#125; and &#123;2&#125;&quot;;</span><br><span class="line"></span><br><span class="line">public DateTime MinimumDateProperty &#123; get; private set; &#125;</span><br><span class="line"> public DateTime MaximumDateProperty &#123; get; private set; &#125;</span><br><span class="line"></span><br><span class="line">public ValidateAgeAttribute(</span><br><span class="line"> int minimumAgeProperty,</span><br><span class="line"> int maximumAgeProperty)</span><br><span class="line"> : base(DefaultErrorMessage)</span><br><span class="line"> &#123;</span><br><span class="line"> MaximumDateProperty = DateTime.Now.AddYears(minimumAgeProperty * -1);</span><br><span class="line"> MinimumDateProperty = DateTime.Now.AddYears(maximumAgeProperty * -1);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">protected override ValidationResult IsValid(object value, ValidationContext validationContext)</span><br><span class="line"> &#123;</span><br><span class="line"> if (value != null)</span><br><span class="line"> &#123;</span><br><span class="line"> DateTime parsedValue = (DateTime)value;</span><br><span class="line"></span><br><span class="line">if (parsedValue &lt;= MinimumDateProperty || parsedValue &gt;= MaximumDateProperty)</span><br><span class="line"> &#123;</span><br><span class="line"> return new ValidationResult(FormatErrorMessage(validationContext.DisplayName));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return ValidationResult.Success;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> public IEnumerable&lt;ModelClientValidationRule&gt; GetClientValidationRules(ModelMetadata metadata, ControllerContext context)</span><br><span class="line"> &#123;</span><br><span class="line"> var rule = new ModelClientValidationRule()</span><br><span class="line"> &#123;</span><br><span class="line"> ValidationType = &quot;validateage&quot;,</span><br><span class="line"> ErrorMessage = FormatErrorMessage(metadata.GetDisplayName()),</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">rule.ValidationParameters.Add(&quot;minumumdate&quot;, MinimumDateProperty.ToShortDateString());</span><br><span class="line"> rule.ValidationParameters.Add(&quot;maximumdate&quot;, MaximumDateProperty.ToShortDateString());</span><br><span class="line"></span><br><span class="line">yield return rule;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public override string FormatErrorMessage(string name)</span><br><span class="line"> &#123;</span><br><span class="line"> return string.Format(ErrorMessageString, name, MinimumDateProperty.ToShortDateString(), MaximumDateProperty.ToShortDateString());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Applied-to-Model"><a href="#Applied-to-Model" class="headerlink" title="Applied to Model"></a>Applied to Model</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Required]</span><br><span class="line">[Display(Name = &quot;Effective From&quot;)]</span><br><span class="line">[DisplayFormat(DataFormatString = &quot;&#123;0:dd/MM/yyyy&#125;&quot;, ApplyFormatInEditMode = true)]</span><br><span class="line">[ValidateAge(15, 65)]</span><br><span class="line">public DateTime DateOfBirth &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.macaalay.com/2014/02/24/unobtrusive-client-and-server-side-age-validation-in-mvc-using-custom-data-annotations/">Unobtrusive Client and Server Side Age Validation in MVC using Custom Data Annotations (http://www.macaalay.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Multi Threaded Application</title>
      <link href="/2018/05/c-sharp-multi-threaded-application/"/>
      <url>/2018/05/c-sharp-multi-threaded-application/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Updated 23/03/2021</strong></em></p><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Running Tasks in parallel is very simple, the collection of tasks below return a string and its workload is simply to create a text file and then delay for x milliseconds to mimic a longer workload.</p><p>The complete code for these snippets is at <a href="https://github.com/carlpaton/ThreadingDemo/tree/main/src/RunTasksInParallel">https://github.com/carlpaton/ThreadingDemo/tree/main/src/RunTasksInParallel</a></p><p>Some configuration</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> millisecondsTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">var</span> taskCount = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>Create the service that does some work and has the mimic of a longer workload. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">HandleAsync</span>(<span class="params"><span class="built_in">int</span> millisecondsTimeout</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dateTime = DateTime.Now;</span><br><span class="line">    <span class="keyword">var</span> fileName = <span class="string">$&quot;<span class="subst">&#123;dateTime.Hour&#125;</span>_<span class="subst">&#123;dateTime.Minute&#125;</span>_<span class="subst">&#123;dateTime.Second&#125;</span>_<span class="subst">&#123;dateTime.Millisecond&#125;</span>.txt&quot;</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0&#125; : &#123;1&#125;&quot;</span>, dateTime, fileName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.Append(<span class="string">$&quot;<span class="subst">&#123;dateTime&#125;</span> <span class="subst">&#123;fileName&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> File.WriteAllTextAsync(<span class="string">$&quot;data/<span class="subst">&#123;fileName&#125;</span>&quot;</span>, sb.ToString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Task.Delay(millisecondsTimeout);</span><br><span class="line">    <span class="keyword">return</span> fileName.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create the task list and populate it with the workload.</p><p>Note that adding them to the list is not what starts the tasks, its the <code>File.WriteAllTextAsync</code> that would have been the trigger.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; taskCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">    tasks.Add(createFileService.HandleAsync(millisecondsTimeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then wait for the tasks to all complete</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> Task.WhenAll(tasks);</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenall">https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenall</a></li></ul><h3 id="Task-Array"><a href="#Task-Array" class="headerlink" title="Task Array"></a>Task Array</h3><p>This was adapted from <a href="https://stackoverflow.com/questions/4190949/create-multiple-threads-and-wait-all-of-them-to-complete">stackoverflow.com</a> examples and is very simliar to the list example above however the tasks are started using <code>Task.Factory.StartNew</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listOfSomething = <span class="keyword">new</span> PopulateListOfSomething();</span><br><span class="line"><span class="keyword">var</span> tasks = <span class="keyword">new</span> Task[listOfSomething.Count];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listOfSomething.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> someService = <span class="keyword">new</span> SomeService(listOfSomething[i]);</span><br><span class="line">    tasks[i] = Task.Factory.StartNew(() =&gt; someService.Go());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task.WaitAll(tasks);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/4190949/create-multiple-threads-and-wait-all-of-them-to-complete">https://stackoverflow.com/questions/4190949/create-multiple-threads-and-wait-all-of-them-to-complete</a></li><li><a href="https://msdn.microsoft.com/en-us/library/dd537610(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd537610(v=vs.100).aspx</a></li><li><a href="https://msdn.microsoft.com/en-us/library/bb157784.aspx">https://msdn.microsoft.com/en-us/library/bb157784.aspx</a></li><li><a href="http://www.dotnetcurry.com/dotnet/1360/concurrent-programming-dotnet-core">http://www.dotnetcurry.com/dotnet/1360/concurrent-programming-dotnet-core</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> threading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modifying Posted Variable Value In Controller Action</title>
      <link href="/2018/05/modifying-posted-variable-value-in-controller-action/"/>
      <url>/2018/05/modifying-posted-variable-value-in-controller-action/</url>
      
        <content type="html"><![CDATA[<p>Generally this is not something I would do as the data the user captures is what they intend to persist or send. I have however seen use cases where the controller has a bool field that determines if an UPDATE or INSERT is required.</p><h3 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h3><ol><li>A user partially fills out a form that persists the data to more than one table, each table schema is defined by a property class on the view model</li><li>The user clicks save, the data is then persisted to the database (INSERT required)</li><li>The user then fills out more of the form and then clicks save again (UPDATE required)</li></ol><p>The class could look something like this</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ClientScheduleViewModel</span><br><span class="line">&#123;</span><br><span class="line">   [Required(ErrorMessage = &quot;Client required.&quot;)]</span><br><span class="line">    public string ClientId &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public UserInformationViewModel DisplayInfo &#123; get; set; &#125;</span><br><span class="line">    public UserCaptureModel CaptureInfo &#123; get; set; &#125;</span><br><span class="line">    public bool DoInsert&#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The DisplayInfo and CaptureInfo property’s could be passed to a partial view, one to display and one to capture.</p><p>When the view model data is posted back to the controller, DoInsert being true would indicate a new record is required and false means an update where the lookup on both tables could be done by ClientId.</p><p>When ActionResult returns controls and data binds to the view, DoInsert would still display the value that was posted. This is probably a security thing.</p><p>There are 3 shims to get around this as suggested by <a href="https://stackoverflow.com/users/29407/darin-dimitrov">Darin Dimitrov</a> on stack overflow. (the below has been adapted for my example)</p><ol><li>Remove the value from the modelstate:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line">public ActionResult Foo(SomeModel model)</span><br><span class="line">&#123;</span><br><span class="line">    ModelState.Remove(&quot;DoInsert&quot;);            </span><br><span class="line">    model.DoInsert = false; //change after doing the insert</span><br><span class="line">    return View(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Manually generate the hidden field</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;DoInsert&quot; value=&quot;&lt;%= Model.DoInsert %&gt;&quot; /&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>Write a custom helper which will use the value of your model and not the one that’s being POSTed</li></ol><p>Option 2 is probably the best route as there is no hard coding.</p><h3 id="Alternative-Solutions"><a href="#Alternative-Solutions" class="headerlink" title="Alternative Solutions"></a>Alternative Solutions</h3><ol><li>Include the database id as a hidden field (additional validations will be needed to ensure the user did not maliciously change values)</li><li>Store the id in a session or cookie (for the cookie option you should obfuscate or encode the data)</li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://stackoverflow.com/questions/4837744/hiddenfor-not-getting-correct-value-from-view-model">Hiddenfor not getting correct value from view model</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Salted Hash</title>
      <link href="/2018/05/salted-hash/"/>
      <url>/2018/05/salted-hash/</url>
      
        <content type="html"><![CDATA[<p>In <a href="https://en.wikipedia.org/wiki/Cryptography">cryptography</a>, a <strong>salt</strong> is <a href="https://en.wikipedia.org/wiki/Random_Number_Generator">random</a> data that is used as an additional input to a <a href="https://en.wikipedia.org/wiki/One-way_function">one-way function</a> that “<a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">hashes</a>” <a href="https://en.wikipedia.org/wiki/Data_(computing)">data</a>, a <a href="https://en.wikipedia.org/wiki/Password">password</a> or <a href="https://en.wikipedia.org/wiki/Passphrase">passphrase</a>. Salts are closely related to the concept of <a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce</a>. The primary function of salts is to defend against <a href="https://en.wikipedia.org/wiki/Dictionary_attacks">dictionary attacks</a> or against its hashed equivalent, a pre-computed <a href="https://en.wikipedia.org/wiki/Rainbow_table">rainbow table</a> attack.</p><p>This can be visually demonstrated as:</p><p><img src="/d/salted-hash/password-hash-salt-1.png" alt="Salted Hash"></p><h2 id="Cool-how-do-we-do-this-in-code"><a href="#Cool-how-do-we-do-this-in-code" class="headerlink" title="Cool, how do we do this in code?"></a>Cool, how do we do this in code?</h2><p><strong>Updated 24/04/2022</strong></p><h3 id="HMACSHA512"><a href="#HMACSHA512" class="headerlink" title="HMACSHA512"></a>HMACSHA512</h3><p>The <code>salt</code> string can be passed as the users email if you are lazy but its better to generate your own byte array.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EncryptionService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> password</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">var</span> buffer = Encoding.UTF8.GetBytes(password);</span><br><span class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> HMACSHA512(key).ComputeHash(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> password, <span class="built_in">byte</span>[] key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = Encoding.UTF8.GetBytes(password);</span><br><span class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> HMACSHA512(key).ComputeHash(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> password, <span class="built_in">string</span> salt</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> saltBytes = Encoding.ASCII.GetBytes(salt);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = Encoding.UTF8.GetBytes(password);</span><br><span class="line">        <span class="keyword">var</span> key = <span class="keyword">value</span>.Concat(saltBytes).ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> buffer = Encoding.UTF8.GetBytes(password);</span><br><span class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> HMACSHA512(key).ComputeHash(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p><em>MD5 is considered deprecated</em></p><p>Consider the following username and password:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> email = <span class="string">&quot;foo@domain.com&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="string">&quot;qwerty&quot;</span>;</span><br></pre></td></tr></table></figure><p>The password value needs to be hashed and then persisted to the database.</p><ol><li>Create the salt by getting the byte array values of the email, the assumption would be that an email address is unique.</li></ol><p>You can SHOULD create a random byte array for the salt using <code>RNGCryptoServiceProvider</code>. You would then need to persist that byte array to the database and use it in your user authentication challenge routine. The use of <code>email</code> here is just a dirty example.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salt = Encoding.ASCII.GetBytes(email);</span><br></pre></td></tr></table></figure><ol start="2"><li>Create a byte array of the password and concatenate the two into one byte array</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">value</span> = Encoding.UTF8.GetBytes(password);</span><br><span class="line"><span class="keyword">var</span> saltedValue = <span class="keyword">value</span>.Concat(salt).ToArray();</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a MD5 hash from the ‘salted value’</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// need MD5 to calculate the hash</span></span><br><span class="line"><span class="built_in">byte</span>[] hashedBytes = ((HashAlgorithm)CryptoConfig</span><br><span class="line">  .CreateFromName(<span class="string">&quot;MD5&quot;</span>))</span><br><span class="line">  .ComputeHash(saltedValue);</span><br></pre></td></tr></table></figure><ol start="4"><li>Encode and to string the hash. You can also use <code>Convert.ToBase64String(hashedBytes);</code></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string representation (similar to UNIX format)</span></span><br><span class="line"><span class="keyword">var</span> encoded = BitConverter.ToString(hashedBytes)</span><br><span class="line">  .Replace(<span class="string">&quot;-&quot;</span>, <span class="built_in">string</span>.Empty)</span><br><span class="line">  .ToLower();</span><br></pre></td></tr></table></figure><p>This would then result in a value of <code>A9419D55933FBCF43BA46087F8F20B22</code></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Salt_(cryptography)">https://en.wikipedia.org/wiki/Salt_(cryptography)</a></li><li><a href="http://blogs.quickheal.com/password-security-a-dash-of-salt-and-little-of-hash-to-go-please/">http://blogs.quickheal.com/password-security-a-dash-of-salt-and-little-of-hash-to-go-please/</a></li><li><a href="https://github.com/charleyza/HashDemo">Functional examples of the above can be found here</a>.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unit Tests Overview</title>
      <link href="/2018/05/unit-tests-overview/"/>
      <url>/2018/05/unit-tests-overview/</url>
      
        <content type="html"><![CDATA[<p>“<em>UNIT TESTING is a level of software testing where individual units/ components of a software are tested. The purpose is to validate that each unit of the software performs as designed. A unit is the smallest testable part of any software. It usually has one or a few inputs and usually a single output</em>.”</p><p><img src="/d/unit-tests-overview/test-lol.png" alt="Unit Tests"></p><p>Effective unit tests need Clean Code with a Testable design. Your tests need to be Context-aware, that is to say unit tests in project a may not hold the same value of tests in project b.</p><p>Also see <a href="https://github.com/charleyza/Practices/blob/master/UnitTestGuidelines.md"> this forked readme from Rusty Divine (http://osmyn.com/)</a></p><h3 id="Unit-of-Work"><a href="#Unit-of-Work" class="headerlink" title="Unit of Work"></a>Unit of Work</h3><p>Everything that happens from invoking a public method to it returning the results after it’s finished; it’s the work done along the path you see the debugger take through your code.</p><h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>Code that invokes a unit of work within the confines of a project layer while faking external dependencies and validates an assumption about one specific scenario. </p><p>There are also <a href="/2022/01/integration-tests/">Integration Tests</a> and other <a href="/2021/01/testing-strategies/">testing stategies</a>.</p><h3 id="Stubs"><a href="#Stubs" class="headerlink" title="Stubs"></a>Stubs</h3><p>A substitute for a dependency in the code under test that allows the code to compile and the dependency to return data as specified by the test but importantly cannot itself directly make a test fail.</p><ul><li><strong>Example</strong>: Stub out external depednancy with <a href="/2021/05/wiremocks/">wiremock</a>.</li></ul><h3 id="Mocks"><a href="#Mocks" class="headerlink" title="Mocks"></a>Mocks</h3><p>A substitute for a dependency in the code under test that knows how many times each of its methods were called an in what order so that it can validate an assumption about how the dependency was used and therefore make a test fail.</p><ul><li><strong>Example</strong>: Mock out external depednancy with <a href="/2018/09/mocking-frameworks/">Moq</a>.</li></ul><h3 id="Fakes"><a href="#Fakes" class="headerlink" title="Fakes"></a>Fakes</h3><p>A generic term for a replacement of a real dependency with something the test specifies, which includes both stubs and mocks.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ardalis.com/unit-test-naming-convention">https://ardalis.com/unit-test-naming-convention</a></li><li><a href="http://softwaretestingfundamentals.com/unit-testing/">http://softwaretestingfundamentals.com/unit-testing/</a></li><li><a href="https://www.pluralsight.com/courses/csharp-unit-testing-enterprise-applications">https://www.pluralsight.com/courses/csharp-unit-testing-enterprise-applications</a></li><li><a href="https://www.pluralsight.com/courses/basic-unit-testing-csharp-developers">https://www.pluralsight.com/courses/basic-unit-testing-csharp-developers</a></li><li><a href="https://www.telerik.com/products/mocking/unit-testing.aspx">https://www.telerik.com/products/mocking/unit-testing.aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packets larger than max_allowed_packet are not allowed</title>
      <link href="/2018/05/packets-larger-than-max_allowed_packet-are-not-allowed/"/>
      <url>/2018/05/packets-larger-than-max_allowed_packet-are-not-allowed/</url>
      
        <content type="html"><![CDATA[<p><em>“A communication packet is a single SQL statement sent to the MySQL server, a single row that is sent to the client, or a binary log event sent from a master replication server to a slave.”</em></p><p>You can view this setting:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;max_allowed_packet&#x27;;</span><br><span class="line"></span><br><span class="line">Default before change would show: 4194304</span><br></pre></td></tr></table></figure><p>To change this in windows you must find and update the config file for the service:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqld.exe&quot; --defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 5.7\my.ini&quot; MySQL57</span><br></pre></td></tr></table></figure><p>Edit the file and change the ‘max_allowed_packet’ value from 4M to something larger like 10M (this is 10 mb)</p><p>If you are running linux you can try this to set it to 16M</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL max_allowed_packet=16777216;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html">https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Controllers</title>
      <link href="/2018/05/mvc-controllers/"/>
      <url>/2018/05/mvc-controllers/</url>
      
        <content type="html"><![CDATA[<h3 id="Web-Result"><a href="#Web-Result" class="headerlink" title="Web Result"></a>Web Result</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionResult</span><br></pre></td></tr></table></figure><h3 id="Web-Return"><a href="#Web-Return" class="headerlink" title="Web Return"></a>Web Return</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return RedirectToAction(&quot;ActionName&quot;, &quot;ControllerName&quot;, new &#123; id = vwModel.SomeId &#125;);</span><br><span class="line">return View(&quot;ViewName&quot;, vwModel);</span><br><span class="line">return PartialView(&quot;_PartialViewName&quot;, vwModel);</span><br></pre></td></tr></table></figure><h3 id="Web-API-Result"><a href="#Web-API-Result" class="headerlink" title="Web API Result"></a>Web API Result</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseMessage</span><br></pre></td></tr></table></figure><h3 id="Web-API-Return"><a href="#Web-API-Return" class="headerlink" title="Web API Return"></a>Web API Return</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return Request.CreateResponse(HttpStatusCode.OK, anyObject);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Data Annotations</title>
      <link href="/2018/05/mvc-data-annotations/"/>
      <url>/2018/05/mvc-data-annotations/</url>
      
        <content type="html"><![CDATA[<h3 id="Date-formatting"><a href="#Date-formatting" class="headerlink" title="Date formatting"></a>Date formatting</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DisplayFormat(DataFormatString = &quot;&#123;0:dd/MM/yyyy&#125;&quot;, ApplyFormatInEditMode = true)]</span><br></pre></td></tr></table></figure><h3 id="Number-formatting"><a href="#Number-formatting" class="headerlink" title="Number formatting"></a>Number formatting</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DisplayFormat(DataFormatString = &quot;&#123;0:N&#125;&quot;, ApplyFormatInEditMode = true)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC Html Helpers</title>
      <link href="/2018/05/mvc-html-helpers/"/>
      <url>/2018/05/mvc-html-helpers/</url>
      
        <content type="html"><![CDATA[<h3 id="DropDownListFor"><a href="#DropDownListFor" class="headerlink" title="DropDownListFor"></a>DropDownListFor</h3><p>View helper sample code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.DropDownListFor(model =&gt; model.OperatorValue, (List&lt;SelectListItem&gt;)ViewData[&quot;OperatorValue_SelectList&quot;], new &#123; @class = &quot;form-control&quot; &#125;)</span><br></pre></td></tr></table></figure><p>Controller sample code, this can be in ‘Lookups.cs’ class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;SelectListItem&gt; OperatorSelectList()</span><br><span class="line">&#123;</span><br><span class="line">   var r = new List&lt;SelectListItem&gt;</span><br><span class="line">   &#123;</span><br><span class="line">      new SelectListItem &#123; Value = &quot;&quot;, Text = &quot;-- Please Select --&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value = &quot;*&quot;, Text = &quot;*&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value = &quot;/&quot;, Text = &quot;/&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value = &quot;+&quot;, Text = &quot;+&quot; &#125;,</span><br><span class="line">      new SelectListItem &#123; Value = &quot;-&quot;, Text = &quot;-&quot; &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DisplayNameFor"><a href="#DisplayNameFor" class="headerlink" title="DisplayNameFor"></a>DisplayNameFor</h3><p>Display from property that is a list of another class</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class AddViewModel</span><br><span class="line">&#123;</span><br><span class="line">   public double BaseRate &#123; get; set; &#125;</span><br><span class="line">   public DateTime EffectiveFrom &#123; get; set; &#125;</span><br><span class="line">   public List&lt;HistoryViewModel&gt; RatePrimeHistory &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HistoryViewModel</span><br><span class="line">&#123;</span><br><span class="line">   public double BaseRate &#123; get; set; &#125;</span><br><span class="line">   public DateTime EffectiveFrom &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To display the history data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;table&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;th&gt;</span><br><span class="line">      @&#123;var dummy = Model.RatePrimeHistory.FirstOrDefault(); &#125;</span><br><span class="line">      @Html.DisplayNameFor(model =&gt; dummy.BaseRate)</span><br><span class="line">   &lt;/th&gt;</span><br><span class="line">   &lt;th&gt;</span><br><span class="line">      @Html.DisplayNameFor(model =&gt; dummy.EffectiveFrom)</span><br><span class="line">   &lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">@foreach (var item in Model.RatePrimeHistory)</span><br><span class="line">&#123;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;</span><br><span class="line">      @Html.DisplayFor(modelItem =&gt; item.BaseRate)</span><br><span class="line">   &lt;/td&gt;</span><br><span class="line">   &lt;td&gt;</span><br><span class="line">      @Html.DisplayFor(modelItem =&gt; item.EffectiveFrom)</span><br><span class="line">   &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/12941465/calling-ienumerable-overload-of-displaynamefor">Calling IEnumerable overload of DisplayNameFor</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth1 And Basic Authentication</title>
      <link href="/2018/05/oauth1-and-basic-auth/"/>
      <url>/2018/05/oauth1-and-basic-auth/</url>
      
        <content type="html"><![CDATA[<p>I have a library that provides a <code>HttpHeaderModel</code> model - <a href="https://github.com/carlpaton/Common/blob/master/Common/Http/Authorization/HttpHeaderService.cs">HttpHeaderService.cs</a> with unit tests in <a href="https://github.com/carlpaton/Common/blob/master/CommonUnitTest/Http/Authorization/HttpHeaderServiceTest.cs">HttpHeaderServiceTest.cs</a>. These values are what can be used in the code that does the http request.</p><p>This can also be downloaded from Nuget as <a href="https://www.nuget.org/packages/CarlPaton.Common/">CarlPaton.Common</a></p><h3 id="Basic-Authentication"><a href="#Basic-Authentication" class="headerlink" title="Basic Authentication"></a>Basic Authentication</h3><p>This is added to the <code>Header</code> of the request in the format <code>name</code> and <code>value</code>. The name is <code>Authorization</code> and the value is the word <code>Basic</code> and a base 64 encoded string of <code>username:password</code>. Example: <code>Basic dXNlcm5hbWU6cGFzc3dvcmQ=</code> </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> auth = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;:&#123;1&#125;&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> plainTextBytes = Encoding.ASCII.GetBytes(auth);</span><br><span class="line"><span class="keyword">var</span> base64Encoded = System.Convert.ToBase64String(plainTextBytes);</span><br><span class="line"><span class="keyword">var</span> completeHeader = <span class="built_in">string</span>.Format(<span class="string">&quot;Basic &#123;0&#125;&quot;</span>, base64Encoded);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line">request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">request.ContentType = <span class="string">&quot;application/json; charset=utf-8&quot;</span>;</span><br><span class="line">request.Headers.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Basic dXNlcm5hbWU6cGFzc3dvcmQ=&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="OAuth1"><a href="#OAuth1" class="headerlink" title="OAuth1"></a>OAuth1</h3><blockquote><p>OAuth1 is deprecated, please use <a href="/2020/12/oauth2/">OAuth 2.0</a></p></blockquote><p>This is added to the <code>Header</code> of the request in the format <code>name</code> and <code>value</code>. The name is <code>Authorization</code> and the value is the word <code>OAuth</code> followed by concatinated string of key/values <code>oauth_consumer_key</code>, <code>oauth_token</code>, <code>oauth_signature_method</code>, <code>oauth_timestamp</code>, <code>oauth_nonce</code>, <code>oauth_version</code> and <code>oauth_signature</code>.</p><p>The <code>oauth_signature</code> is simply the <code>consumerSecret</code> &amp; <code>tokenSecret</code> joined by <code>&amp;</code> as url-encoding <code>%26</code></p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&quot;OAuth oauth_consumer_key=\&quot;&#123;consumerKey&#125;\&quot;,oauth_token=\&quot;&#123;accessToken&#125;\&quot;,oauth_signature_method=\&quot;PLAINTEXT\&quot;,oauth_timestamp=\&quot;&#123;timeStamp&#125;\&quot;,oauth_nonce=\&quot;&#123;nonce&#125;\&quot;,oauth_version=\&quot;1.0\&quot;,oauth_signature=\&quot;&#123;consumerSecret&#125;%26&#123;tokenSecret&#125;\&quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line">request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">request.ContentType = <span class="string">&quot;application/json; charset=utf-8&quot;</span>;</span><br><span class="line">request.Headers.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;OAuth oauth_consumer_key=\&quot;ConsumerKey\&quot;,oauth_token=\&quot;AccessToken\&quot;,oauth_signature_method=\&quot;PLAINTEXT\&quot;,oauth_timestamp=\&quot;1579220112\&quot;,oauth_nonce=\&quot;ShPKxisPFC0\&quot;,oauth_version=\&quot;1.0\&quot;,oauth_signature=\&quot;ConsumerSecret%26TokenSecret\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.add">https://docs.microsoft.com/en-us/dotnet/api/system.net.webheadercollection.add</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker, Containers – The future!</title>
      <link href="/2018/04/docker-containers-the-future/"/>
      <url>/2018/04/docker-containers-the-future/</url>
      
        <content type="html"><![CDATA[<p>Docker, Containers – The future!<img src="/d/docker-containers-the-future/docker-containers-the-future-1.png"></p><p>In the Information Technology space ‘buzz words’ come and go, we heard about ‘Web 2.0’ which to me didn’t really mean anything besides old sites were ugly and we needed to make things better? (HTML5 did a good job of this) ‘Synergy’ was another – it was used so often it lost all meaning. Perhaps my opinion is invalid but the over use of ‘buzz words’ makes smart people sound dumb! Today we have things like ‘IoT’ which is ‘Internet of Things’ – this one makes sense as things in our lives are connected to the internet and ‘Life runs on code’.</p><p>Another one I see coming up a lot is ‘Docker’ and ‘Containers’…</p><p>Now Docker and Containers are not just some ‘buzz words’. Together they are by far the most exciting technology I have seen in ages, honestly the last time I was this excited about something in IT was when I wrote my first compiled application in C# and benched it against what we now call Classic ASP (VB Script) – well the C# code smashed the Classic ASP and I was hooked! Now back to Docker and to quote <a href="https://www.pluralsight.com/authors/nigel-poulton">Nigel Poulton</a> – “if you are in any way into IT, I am telling you now, Docker and containers are going to be a massive part of your future.”</p><p>I cannot agree more, once you catch on how easy Docker is to use you will simply never go back to not using it. Docker runs on Windows, Mac and Linux with most of the commands figuring the ‘voodoo’ out for you. You don’t have to be a systems administrator with years of experience to use this technology – today in IT the lines between ‘Developers’ and ‘Operations’ are blurred. You guessed it there is a buzz word for this too and its “DevOps”.</p><p>The biggest problem with using anything new is either having nothing to apply it to or not really knowing how to apply it to your current problem domain. As a software developer Im often faced with this – I want to use something new and cool but know if I try use it I am probably just going to upset perfectly working code and cost my employer time which means money.</p><p>I hope this article helps at least one person trying to figure out how they can (1) Use docker even if its just in their development environment and (2) Possibly integrate it into their systems.</p><h3 id="Before-We-Start"><a href="#Before-We-Start" class="headerlink" title="Before We Start"></a>Before We Start</h3><p>This short video is well worth watching and explains the fundamentals.</p><p>Learn Docker in 12 Minutes</p><iframe width="560" height="315" src="https://www.youtube.com/embed/YFl2mCHdv24" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Baby-Steps-–-Installing-Docker"><a href="#Baby-Steps-–-Installing-Docker" class="headerlink" title="Baby Steps – Installing Docker"></a>Baby Steps – Installing Docker</h3><p>You can simply install “Docker for Windows”, check “Docker Support” in a new Visual Studio 2017 project and deploy to docker from the IDE. This is pretty cool and will give you the opportunity to quick and easily fiddle with this new technology but this is not the open source path I’d encourage you to follow.</p><p>If you want to work and stay relevant in today’s corporate world you have to understand that there are budget constraints. This means corporates like solutions that are “cheap” or “free”. Based on the “open source” comment above you will either be frowning right now or know that I’m going to tell you to use Linux &amp; .Net Core. You don’t have to be a Systems Administrator to use Linux, “DevOps” is here and you don’t have to dual boot your PC – just install a Virtual Machine (VM) and hack away!</p><p>The “Docker for Windows” setup is pretty cool, it allows you to switch between Windows and Linux containers (The Linux voodoo runs in a Hyper V MobyLinuxVM) but my focus here is a native Windows host (My OS is Windows 10 64 bit) running a Linux Virtual Machine with the docker installation and containers all running in the Linux VM. This approach I feel will lend itself to the containers running on a bare-metal Linux host.</p><h4 id="Step-1-–-Choose-a-VM-Player"><a href="#Step-1-–-Choose-a-VM-Player" class="headerlink" title="Step 1 – Choose a VM Player"></a>Step 1 – Choose a VM Player</h4><p>I really like ‘<a href="/2018/04/vmware-workstation-player/">VMware Workstation Player</a>’ as its simple to use and from what I’ve seen is rock solid. At the time of writing this I was using VMware-player-14.1.1 which does unfortunately clash with the Hyper V settings in ‘Docker For Windows’ so it may not be for everybody.</p><h4 id="Step-2-–-Choose-your-Linux-Operating-System"><a href="#Step-2-–-Choose-your-Linux-Operating-System" class="headerlink" title="Step 2 – Choose your Linux Operating System"></a>Step 2 – Choose your Linux Operating System</h4><p>Ubuntu has 2 points going for it; (1) its popular so chances are somebody has already solved a problem for you and; (2) it comes with enough things installed that you don’t have to write complicated bash scripts to get things to work. Just remember that with all the additional applications installed on the OS there is more potential for an attacker to take advantage of.</p><p>You can use Ubuntu’s Desktop Graphical User Interface (GUI) version but I’d suggest the Server version as this is probably what you will find at most corporates as it will maximize a servers processing power. My local VM runs ‘ubuntu-17.10.1-server’ and I make use of <a href="/2018/04/putty/">Putty</a> to SSH to it.</p><p>The nice thing about Putty is you can copy and paste, I am lazy and would rather copy a known working command with parameters. A lot of developers like to rather type the commands themselves, repetition does improve cognitive function so this has merit too. Just do what works for you.</p><h4 id="Step-3-–-Install-Docker-on-Ubuntu-Server"><a href="#Step-3-–-Install-Docker-on-Ubuntu-Server" class="headerlink" title="Step 3 – Install Docker on Ubuntu Server"></a>Step 3 – Install Docker on Ubuntu Server</h4><p>Follow the <a href="/2018/04/setup-docker-on-linux/">steps here to setup Docker on Linux</a>.</p><h4 id="Functional-Use-Cases-for-Docker"><a href="#Functional-Use-Cases-for-Docker" class="headerlink" title="Functional Use Cases for Docker"></a>Functional Use Cases for Docker</h4><p>The examples below should help you identify somewhere in your development process where you can use Docker. None of these are at scale, all run locally on your notebook and thanks to .Net Core all work on Linux – Now I think that’s pretty cool and worth looking at!</p><ol><li>Database containers<ol><li>Microsoft SQL Express</li><li>MySQL</li><li>PostgreSQL</li></ol></li><li>.Net Core Web API<ol><li>This will be our microservice to talk to the database(es)</li><li>You can use Soap UI or Postman to test them</li></ol></li><li>.Net Core MVC Web Application<ol><li>A web application that consumes the Web API</li></ol></li></ol><p>Although I used 3 database containers, generally an organization will choose one database and stick with it. This was done to demonstrate (1) these database types can and do run in containers on Linux and (2) how simple it is to spin them up. For the database shell scripts you can just leave them in the root users directory but I like to create directorys for each.</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/mssql-server-linux/mssql-server-linux.sh</span><br></pre></td></tr></table></figure><h3 id="Microsoft-SQL-Express"><a href="#Microsoft-SQL-Express" class="headerlink" title="Microsoft SQL Express"></a>Microsoft SQL Express</h3><p>The <a href="https://github.com/charleyza/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/mssql-server-linux/mssql-server-linux.sh">complete shell script can be downloaded from here</a>, the steps below run though how you can get the shell script onto the Linux VM and how to use it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#create directory </span><br><span class="line">mkdir mssql-server-linux</span><br><span class="line"></span><br><span class="line">#change to this directory</span><br><span class="line">cd mssql-server-linux</span><br><span class="line"></span><br><span class="line">#edit script with nano text editor</span><br><span class="line">sudo nano mssql-server-linux.sh</span><br></pre></td></tr></table></figure><p>Sudo means run as root/admin, nano is a text editor and mssql-server-linux.sh is the name of our shell script.<br>When the editor opens up, paste the commands listed below, then press ‘Ctrl x’ and enter so save the file, Y for yes and then enter.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#pull the image</span><br><span class="line">sudo docker pull microsoft/mssql-server-linux:2017-CU5</span><br><span class="line"></span><br><span class="line">#kill the container if its running</span><br><span class="line">sudo docker container kill mssql_p5</span><br><span class="line"></span><br><span class="line">#rm/delete the container if it exists</span><br><span class="line">sudo docker rm mssql_p5</span><br><span class="line"></span><br><span class="line">#spin up a detached mssql container</span><br><span class="line">sudo docker run --name=mssql-p5 -e &#x27;ACCEPT_EULA=Y&#x27; -e &#x27;SA_PASSWORD=Password123&#x27; -e &#x27;MSSQL_PID=Express&#x27; -p 62005:1433 -d microsoft/mssql-server-linux:2017-CU5</span><br><span class="line"></span><br><span class="line">#start the container</span><br><span class="line">sudo docker start mssql_p5</span><br><span class="line"></span><br><span class="line">#list containers</span><br><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p>You don’t have to map the ports like I did with -p 62005:1433; I do this so I can have more than one database container of that type on the same <a href="https://docs.docker.com/network/bridge/#manage-a-user-defined-bridge">network bridge</a>. 2017-CU5 is the tagged version I tested with, if left off it will default to LATEST</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x mssql-server-linux.sh</span><br></pre></td></tr></table></figure><p>This marks the shell script as executable</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./mssql-server-linux.sh</span><br></pre></td></tr></table></figure><p>This runs the shell script. Once done you can now connect to the ‘mssql_p5’ container on x.x.x.x:62005 with sa/Password123 from a client such as <a href="https://dbeaver.jkiss.org/download/">Dbeaver</a> or <a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms">SQL Server Management Studio (SSMS)</a>.</p><p>Where x.x.x.x is the ip address of your Linux VM. You can run the following command to get the IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p>Provision the database with the <a href="https://github.com/carlpaton/SQLStatements/tree/master/mssql/test">SQL scripts here</a>. These are needed for the Web API project to function.</p><p>This can be automated with another container running a console application or a flyway container – <a href="https://hub.docker.com/r/boxfuse/flyway/">hub.docker.com/r/boxfuse/flyway</a></p><p>For demo purposes you could even have a seed/provision call in the Web API.</p><h3 id="MySQL-amp-PostgreSQL"><a href="#MySQL-amp-PostgreSQL" class="headerlink" title="MySQL &amp; PostgreSQL"></a>MySQL &amp; PostgreSQL</h3><p>The steps are 90% the same as the above, you can find sample shell scripts &amp; SQL scripts below:</p><ul><li><a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/mysql/mysql.sh">https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/mysql/mysql.sh</a><ul><li><a href="https://github.com/carlpaton/SQLStatements/tree/master/mysql/test">MySQL SQL Scripts</a> to provision the database</li></ul></li><li><a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/postgres/postgres.sh">https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/postgres/postgres.sh</a><ul><li><a href="https://github.com/carlpaton/SQLStatements/tree/master/postgresql/test">PostgreSQL  Scripts</a> to provision the database</li></ul></li></ul><h3 id="Net-Core-Web-API"><a href="#Net-Core-Web-API" class="headerlink" title=".Net Core Web API"></a>.Net Core Web API</h3><p>Up until now we have pulled and used predefined images for the database containers. For our Application Programming Interface (API) we will still use a predefined base image but build on top of it with instructions from something called a ‘<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>’</p><p>You can organize your files in any way you want to, I use the users home directory and then create folders from there grouping things together.</p><p>Create your dotnet folder and Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#change to the root directory (if you are still inside mssql-server-linux)</span><br><span class="line">cd\</span><br><span class="line"></span><br><span class="line">#create directory</span><br><span class="line">mkdir dotnet-webapi</span><br><span class="line"></span><br><span class="line">#change directory</span><br><span class="line">cd dotnet-webapi</span><br><span class="line"></span><br><span class="line">#edit the dockerfile</span><br><span class="line">sudo nano Dockerfile</span><br></pre></td></tr></table></figure><p>Paste this into the Dockerfile and save it. (Check the steps above for the ‘mssql-server-linux.sh’ file if you are a bit lost)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft/aspnetcore:2.0</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY ./content .</span><br><span class="line">ENTRYPOINT [&quot;dotnet&quot;, &quot;aspnetapp.dll&quot;]</span><br></pre></td></tr></table></figure><p>Create the shell script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano dotnet-webapi.sh</span><br></pre></td></tr></table></figure><p>Paste this into dotnet-webapi.sh and save it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">sudo docker pull microsoft/dotnet:2.0-sdk</span><br><span class="line">sudo docker container kill dotnet-webapi</span><br><span class="line">sudo docker rm dotnet-webapi</span><br><span class="line">sudo docker rmi image_name:dotnet_image_webapi</span><br><span class="line">sudo docker build -t dotnet_image_webapi .</span><br><span class="line">sudo docker run -d -p 81:80 --name dotnet-webapi dotnet_image_webapi</span><br><span class="line">sudo docker start dotnet-webapi</span><br><span class="line">sudo docker ps --all</span><br></pre></td></tr></table></figure><p>Now the Dockerfile will need some content, you can download <a href="https://github.com/carlpaton/DockerDemo/tree/master/Sample%20Code">the source code</a> from here and publish yourself or you can use <a href="https://github.com/carlpaton/DockerDemo/tree/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/content">the published application</a>. The key for either is to ensure you update the <a href="https://github.com/carlpaton/DockerDemo/blob/master/Sample%20Code/NetCoreWebApi/NetCoreWebApi/appsettings.json">appsettings.json</a> file. (The ConnMySQL, ConnPgSQL &amp; ConnMsSQL values to match you Linux VM &amp; passwords in the shell scripts if you have changed them from the defaults I chose.)</p><p>Once the connection strings are updated you will need to compress the published solution into a <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/content.zip">content.zip archive like this one</a>.</p><p>You will then need to edit <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/copy.bat">https://github.com/carlpaton/DockerDemo/blob/master/Docker%20(Linux)/Ubuntu/dotnet-webapi/copy.bat</a> to have your Linux VM’s IP.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set PATH=C:\Program Files\PuTTY</span><br><span class="line"></span><br><span class="line">pscp c:/Dev-Code-School/DockerDemo/&quot;Docker (Linux)&quot;/Ubuntu/dotnet-webapi/content.zip carl@192.168.231.134:/home/carl/dotnet-webapi/content.zip</span><br><span class="line"></span><br><span class="line">echo &quot;DONE&quot;</span><br></pre></td></tr></table></figure><p>Run the copy.bat file from your local host (Windows, as administrator); this will copy the compressed content.zip file to the Linux VM. There are probably more efficient ways to get the data to the VM, for me this was the simplest. Im more than happy to listen and learn about other ways to do this? (Any Linux Fundies out there?)</p><p>When your containers are running on a bare metal Linux server this content should be read from a <a href="https://docs.docker.com/storage/volumes/">volumn</a>.</p><p>Ensure you have upzip installed, <a href="/2018/04/linux-commands/">see these linux commands install help it.</a></p><p>Unzip the content.zip file to /dotnet/content</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip content.zip</span><br></pre></td></tr></table></figure><p>Then mark the script as executable and run it, this will spin up the MS SQL Container.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x dotnet-webapi.sh</span><br><span class="line">sudo ./dotnet-webapi.sh</span><br></pre></td></tr></table></figure><p>You will now be able to access the API on port 81, below are examples for each database repository (you will need to use the IP of your VM)</p><p>If the API throws an error, make sure you have run the <a href="https://github.com/carlpaton/SQLStatements">SQL commands to provision each database</a>.</p><ul><li><a href="http://192.168.180.130:81/api/values">http://192.168.180.130:81/api/values</a></li><li><a href="http://192.168.180.130:81/api/mssql">http://192.168.180.130:81/api/mssql</a></li><li><a href="http://192.168.180.130:81/api/mysql">http://192.168.180.130:81/api/mysql</a></li><li><a href="http://192.168.180.130:81/api/pgsql">http://192.168.180.130:81/api/pgsql</a></li></ul><p>If the API still doesnt work you can <a href="/2018/04/docker-commands/">check the container logs</a> with the <a href="https://docs.docker.com/config/containers/logging/">logs command</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs dotnet-webapi</span><br><span class="line">sudo docker logs mssql_p5</span><br></pre></td></tr></table></figure><h3 id="Net-Core-MVC-Web-Application"><a href="#Net-Core-MVC-Web-Application" class="headerlink" title=".Net Core MVC Web Application"></a>.Net Core MVC Web Application</h3><p>The steps are so similar to the Web API there is no value in repetition. The key difference is the content changes to the Web Application and the container will listen on port 80 (the Web API is on port 81)</p><ul><li><a href="http://192.168.180.130/">http://192.168.180.130:80</a></li></ul><h3 id="And-Now"><a href="#And-Now" class="headerlink" title="And Now?"></a>And Now?</h3><p>The steps above just scratch the surface of what you can do with containers. If this has peeked your interest and I really hope it has I suggest you look at the <a href="https://docs.docker.com/compose/">docker compose command</a> tool for defining and running multi-container Docker applications.</p><p>Docker Compose in 12 Minutes:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Qw9zlE3t8Ko" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="Free-self-paced-courses"><a href="#Free-self-paced-courses" class="headerlink" title="Free self-paced courses"></a>Free self-paced courses</h4><p>Docker wants to make things easy for you and have a wealth of information and <a href="https://training.play-with-docker.com/">free self-paced courses to learn Docker</a></p><p><em>” Check out the Docker Playground or join the Docker Community Slack and Docker Forums to learn, mentor and collaborate with others members of the Docker community. “</em></p><h4 id="Orchestration"><a href="#Orchestration" class="headerlink" title="Orchestration"></a>Orchestration</h4><p><em>” Container Orchestration refers to the automated arrangement, coordination, and management of software containers. Container Orchestration allows users to define how to coordinate the containers in the cloud when the multi-container packaged application is deployed. “</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/HDt_iN1hINA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><h4 id="Training-amp-Mentors"><a href="#Training-amp-Mentors" class="headerlink" title="Training &amp; Mentors"></a>Training &amp; Mentors</h4><ul><li><a href="https://thanethomson.com/">Thane Thomson</a></li><li><a href="http://blog.nigelpoulton.com/category/docker/">Nigel Poulton</a></li><li><a href="https://www.pluralsight.com/courses/docker-getting-started">https://www.pluralsight.com/courses/docker-getting-started</a></li></ul><h4 id="Docker-com"><a href="#Docker-com" class="headerlink" title="Docker.com"></a>Docker.com</h4><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce">https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/logs/">https://docs.docker.com/engine/reference/commandline/logs/</a></li><li><a href="https://docs.docker.com/config/pruning/">https://docs.docker.com/config/pruning/</a></li><li><a href="https://store.docker.com/images/mssql-server-windows-express/">https://store.docker.com/images/mssql-server-windows-express/</a></li><li><a href="https://hub.docker.com/r/microsoft/mssql-server-linux/">https://hub.docker.com/r/microsoft/mssql-server-linux/</a></li><li><a href="https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-docker">https://docs.microsoft.com/en-gb/sql/linux/quickstart-install-connect-docker</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/logs/">https://docs.docker.com/engine/reference/commandline/logs/</a></li><li><a href="https://github.com/Microsoft/mssql-docker/issues/195">https://github.com/Microsoft/mssql-docker/issues/195</a></li><li><a href="https://store.docker.com/images/mysql">https://store.docker.com/images/mysql</a></li><li><a href="https://store.docker.com/images/postgres">https://store.docker.com/images/postgres</a></li><li><a href="https://hub.docker.com/r/microsoft/aspnetcore/">https://hub.docker.com/r/microsoft/aspnetcore/</a></li><li><a href="https://store.docker.com/images/dotnet">https://store.docker.com/images/dotnet</a></li><li><a href="https://docs.docker.com/engine/examples/dotnetcore/#create-a-dockerfile-for-an-aspnet-core-application">https://docs.docker.com/engine/examples/dotnetcore/#create-a-dockerfile-for-an-aspnet-core-application</a></li></ul><h4 id="Linux-Operating-Systems"><a href="#Linux-Operating-Systems" class="headerlink" title="Linux Operating Systems"></a>Linux Operating Systems</h4><ul><li><a href="https://askubuntu.com/questions/223691/how-do-i-create-a-script-file-for-terminal-commands/223698">https://askubuntu.com/questions/223691/how-do-i-create-a-script-file-for-terminal-commands/223698</a></li><li><a href="https://www.ubuntu.com/download/desktop">https://www.ubuntu.com/download/desktop</a></li><li><a href="https://askubuntu.com/questions/938700/how-do-i-install-docker-on-ubuntu-16-04-lts">https://askubuntu.com/questions/938700/how-do-i-install-docker-on-ubuntu-16-04-lts</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker For Windows</title>
      <link href="/2018/04/docker-for-windows/"/>
      <url>/2018/04/docker-for-windows/</url>
      
        <content type="html"><![CDATA[<p>Download Docker for windows CE from <a href="https://www.docker.com/docker-windows">https://www.docker.com/docker-windows</a></p><ul><li>Run the install, windows will re-boot a few times and install some updates.</li><li>The linux VM lives here, C:\Users\Public\Documents\Hyper-V\Virtual hard disks\ ~ try not to upset it.</li><li>Enable <a href="/2018/04/windows-power-shell/">power shell commands</a></li></ul><p>CD quickly to the location you clone the repository too, I saved this as ‘C:\Users\Carl\CD-CodeLocation.ps1’ </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Location -Path C:\Dev-Code-School\DockerDemo</span><br></pre></td></tr></table></figure><h3 id="Windows-Containers"><a href="#Windows-Containers" class="headerlink" title="Windows Containers"></a>Windows Containers</h3><p>aspnet</p><ul><li>NB – Switch docker for windows to run as ‘WINDOWS CONTAINERS’ from the system tray.</li><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/windows%20containers/aspnet/build-container-aspnet.ps1">\DockerDemo\Docker For Windows\windows containers\aspnet\build-container-aspnet.ps1</a></li><li>The initial image pull WILL TAKE SOME TIME, ignore the initial container kill/rm fails on ‘aspnet-site’</li><li>Open the given IP in your browser. The WEB API helpfile is shown from the projects ‘HelpPage’ area</li><li>Source code for the sample API is here ~ \DockerDemo\Sample API Code\WebApi\</li></ul><p>iis</p><ul><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/windows%20containers/iis/build-container-iissite.ps1">\DockerDemo\Docker For Windows\windows containers\iis\build-container-iissite.ps1</a></li><li>The initial image pull will take some time, ignore the initial container kill/rm fails on ‘iis-site’</li><li>Open the given IP in your browser on Port 80, default IIS landing screen is shown</li><li>Open the given IP in your browser on Port 81, content\index.htm is shown</li></ul><h3 id="Linux-Containers"><a href="#Linux-Containers" class="headerlink" title="Linux Containers"></a>Linux Containers</h3><p>mysql</p><ul><li>NB – Switch docker for windows to run as ‘LINUX CONTAINERS’ from the system tray.</li><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/linux%20containers/mysql/create-container-mysql_p5.ps1">\DockerDemo\Docker For Windows\linux containers\mysql\create-container-mysql_p5.ps1</a></li><li>Ignore the initial container kill/rm fails on ‘mysql_p5’</li><li>Connect to the mysql_p5 container instance on 127.0.0.1:62005</li><li>There are some fly scripts at \DockerDemo\linux\mysql\flyway<ul><li>~ These can be added to the powershell script or run manually.</li></ul></li></ul><p>postgresql</p><ul><li>Run <a href="https://github.com/carlpaton/DockerDemo/blob/master/Docker%20For%20Windows/linux%20containers/postgresql/create-container-postgres_p6.ps1">\DockerDemo\Docker For Windows\linux containers\postgresql\create-container-postgres_p6.ps1</a></li><li>Ignore the initial container kill/rm fails on ‘postgres_p6’</li><li>Connect to the postgres_p6 container instance on 127.0.0.1:62006</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/dotnet-architecture/eShopModernizing/wiki/02.-How-to-containerize-the-.NET-Framework-web-apps-with-Windows-Containers-and-Docker">How to containerize the .NET Framework web apps with Windows Containers and Docker</a></li><li><a href="https://github.com/StefanScherer">https://github.com/StefanScherer</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 120 Size</title>
      <link href="/2018/04/stick-120/"/>
      <url>/2018/04/stick-120/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><p>120 Size</p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 160 Size</title>
      <link href="/2018/04/stick-160/"/>
      <url>/2018/04/stick-160/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="Plans"><a href="#Plans" class="headerlink" title="Plans"></a>Plans</h3><ul><li><a href="http://www.hangarone.co.nz/big-stik-plan-100-span-30cc-size-by-don-anderson-p-6100.html">Big Stik Plan 100″ Span 30cc Size by Don Anderson</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 25 Size</title>
      <link href="/2018/04/stick-25/"/>
      <url>/2018/04/stick-25/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="Big-Stick-Laser-Cut-Balsa-Kit-1060mm"><a href="#Big-Stick-Laser-Cut-Balsa-Kit-1060mm" class="headerlink" title="Big Stick Laser Cut Balsa Kit 1060mm"></a>Big Stick Laser Cut Balsa Kit 1060mm</h3><p>The HK link says its 1060mm but the wing I got is 1200 without the tips so I’ll go with the slightly longer size. These are some guestimates on wood to be used.</p><p><em>Fuselage</em></p><ul><li>Ply re-enforcement where the landing gear attaches. </li><li>F1 -&gt; 5 or 6mm ply</li><li>F2,3 -&gt; 3mm ply</li><li>F4,5,6 -&gt; 5mm balsa</li><li>Triangle stock -&gt; Probably cut from 3mm balsa scraps</li><li>Gussets -&gt; 2 or 3mm square</li><li>Sides -&gt; 2mm balsa forward grain</li><li>Top/Bottom -&gt; 2mm balsa sideways grain</li><li>Wing seats 2mm balsa vertical grain (Thanks for the tip bro Clive!)</li></ul><p><em>Wing</em></p><ul><li>Main spar &amp; LE -&gt; 8mm square hard balsa</li><li>Forward spar/stringers -&gt; 4mm balsa</li><li>Sheer web -&gt; 2mm balsa</li><li>Ribs &amp; caps, 2mm balsa</li><li>Wing tips, 5 or 6mm balsa</li><li>Sheeting -&gt; 2mm balsa</li><li>TE -&gt; 6mm square (I think)</li><li>Triangle stock -&gt; Probably cut from 3mm balsa scraps</li></ul><p><em>Tail</em></p><ul><li>4mm balsa, I’ll build it up with 2mm to try save weight.</li></ul><p><img src="/d/stick-25/formers.jpg" alt="Formers"></p><p><img src="/d/stick-25/rib-template.jpg" alt="Rib Template"></p><p><img src="/d/stick-25/stick-25-fuse.jpg" alt="Fuselage"></p><p><img src="/d/stick-25/wing-tips.jpg" alt="Wing Tips"></p><ul><li><a href="https://hobbyking.com/en_us/big-stick-laser-cut-balsa-kit-1060mm-kit.html?___store=en_us">Big Stick Laser Cut Balsa Kit 1060mm (Kit)</a></li></ul><h3 id="Durafly-Das-UglyStik-Electric"><a href="#Durafly-Das-UglyStik-Electric" class="headerlink" title="Durafly Das UglyStik Electric"></a>Durafly Das UglyStik Electric</h3><p>v2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Specs:</span><br><span class="line"></span><br><span class="line">- Wingspan: 1200mm</span><br><span class="line">- Length: 1020mm</span><br><span class="line">- Wing Area: 29.5dm²</span><br><span class="line">- Weight: 1250g (RTF without battery)</span><br><span class="line"></span><br><span class="line">Required:</span><br><span class="line"></span><br><span class="line">- 4 x 20~25g servo (30 x 15mm)</span><br><span class="line">- 35-36 or 35-42 brushless outrunner</span><br><span class="line">- 2100~2500 3s or 4s Lipoly</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 40 Size</title>
      <link href="/2018/04/stick-40/"/>
      <url>/2018/04/stick-40/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="55in-1397mm-Span-Middle-Stick"><a href="#55in-1397mm-Span-Middle-Stick" class="headerlink" title="55in / 1397mm Span Middle Stick"></a>55in / 1397mm Span Middle Stick</h3><p><img src="/d/stick-40/55in-1397mm-span.jpg" alt="55in 1397mm Span - outerzone.co.uk"></p><ul><li><a href="https://outerzone.co.uk/plan_details.asp?ID=4245">https://outerzone.co.uk/plan_details.asp?ID=4245</a></li><li><a href="https://drive.google.com/drive/folders/1XAJqL9UUzjd-U5ovnpVoFRyiT2gELPlE?usp=sharing">https://drive.google.com/drive/folders/1XAJqL9UUzjd-U5ovnpVoFRyiT2gELPlE?usp=sharing</a></li></ul><h3 id="58in-1480mm-Span-Hangar-9"><a href="#58in-1480mm-Span-Hangar-9" class="headerlink" title="58in / 1480mm Span (Hangar 9)"></a>58in / 1480mm Span (Hangar 9)</h3><p>Fuselage</p><ul><li>F1 to the end of the fuse (excluding rudder) 1100 mm</li><li>F1 is 82 mm high by 80 mm wide, note that the fuse bulges out under the wing to 90×90 mm</li></ul><p>Wing</p><ul><li>1480 mm TE length</li><li>1360 mm LE length</li><li>325 LE Tip to TE tip</li><li>Symmetrical shape ~ <a href="http://airfoiltools.com/airfoil/details?airfoil=raf27-il">simliar to RAF 27 AIRFOIL (raf27-il)</a></li></ul><p>Tail</p><ul><li>552 mm TE length</li><li>485 mm LE length</li><li>220 LE Tip to TE tip</li></ul><p><img src="/d/stick-40/stick-3.jpg" alt="H9 40 Fuse"></p><p><img src="/d/stick-40/stick-4.jpg" alt="H9 40 Wing"></p><h3 id="40-Size-Fiber-Glass-Fuselage"><a href="#40-Size-Fiber-Glass-Fuselage" class="headerlink" title="40 Size (Fiber Glass Fuselage)"></a>40 Size (Fiber Glass Fuselage)</h3><p>Fuselage</p><ul><li>F1 to the end of the fuse (excluding rudder) 970 mm</li><li>F1 is 85 mm high by 80 mm wide</li></ul><p><em>Possible Wing Construction:</em></p><ul><li>Spars are made from spruce 3/16 (5mm) by 1/4 (6mm) or 1/4 square</li><li>Sheeting 2mm for LE (leading edge) and TE (trailing edge)</li><li>Ribs 2mm balsa</li><li>Rib caps 5mm x 1.6mm</li><li>LE is 3/8 square</li><li>TE 3/8 x 1/2</li></ul><p><img src="/d/stick-40/stick-5.jpg" alt="Images from Arthur Colby"></p><p><img src="/d/stick-40/stick-6.jpg" alt="Images from Arthur Colby"></p><p><em>Fuselage Construction:</em></p><ul><li>TBA</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick 60 Size</title>
      <link href="/2018/04/stick-60/"/>
      <url>/2018/04/stick-60/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="62in-1574mm-Original-Das-Ugly"><a href="#62in-1574mm-Original-Das-Ugly" class="headerlink" title="62in / 1574mm Original Das Ugly"></a>62in / 1574mm Original Das Ugly</h3><p><img src="/d/stick-60/62in-1574mm-original-das-ugly.jpg" alt="62in / 1574mm Original Das Ugly - outerzone.co.uk"></p><p>Im not really sure if the original (Phil Kraft 1966) was a 40 or a 60, In my opinion its a 60 but who knows :D</p><ul><li><a href="https://outerzone.co.uk/plan_details.asp?ID=5175">https://outerzone.co.uk/plan_details.asp?ID=5175</a></li><li><a href="https://drive.google.com/drive/folders/1k9kEXjdvclKmiR3R58EC2UsKHXUMC8Oa?usp=sharing">https://drive.google.com/drive/folders/1k9kEXjdvclKmiR3R58EC2UsKHXUMC8Oa?usp=sharing</a></li></ul><h3 id="66in-1680mm-Drastik-60"><a href="#66in-1680mm-Drastik-60" class="headerlink" title="66in / 1680mm Drastik 60"></a>66in / 1680mm Drastik 60</h3><p>I sold my ARF before getting a chance to build it. The over sized wing and fuselage was awesome.</p><p>Wing</p><ul><li>1680 mm TE length</li><li>1530 mm LE length</li><li>400 mm LE Tip to TE tip</li></ul><p>Fuselage</p><ul><li>F1 to the end of the fuse (excluding rudder) 1175 mm</li><li>F1 to end of the rudder 1440 mm</li><li>F1 height 105 mm</li></ul><p><img src="/d/stick-60/stick-7.jpg" alt="Drastik 60"></p><p>These are some snaps of the same model that was for sale on a marketplace, helpful to gauge size.</p><p><img src="/d/stick-60/drastik-1.jpg" alt="Drastik 60"><br><img src="/d/stick-60/drastik-2.jpg" alt="Drastik 60"><br><img src="/d/stick-60/drastik-3.jpg" alt="Drastik 60"></p><h3 id="60in-1524mm-H9-Ultra-Stick-10cc-ARF"><a href="#60in-1524mm-H9-Ultra-Stick-10cc-ARF" class="headerlink" title="60in / 1524mm H9 Ultra Stick 10cc ARF"></a>60in / 1524mm H9 Ultra Stick 10cc ARF</h3><table><thead><tr><th>Specification</th><th>Description</th></tr></thead><tbody><tr><td>Trim Scheme Colors</td><td>White (HANU870), Flourescent Red (HANU890), Black (HANU874)</td></tr><tr><td>Spinner Size</td><td>2.25” ( 57mm)</td></tr><tr><td>Wing Area</td><td>810 sq inches</td></tr><tr><td>Wingspan</td><td>60” (1524mm)</td></tr><tr><td>Electric</td><td>14.8V 4000mAh 30C 4S LiPo (Recommended) with Power 52 Motor</td></tr><tr><td>Prop</td><td>12x6 -&gt; 14x8.5</td></tr><tr><td>After market wheels</td><td>Du-Bro 500Rv 5 Dia/Big Wheels</td></tr></tbody></table><ul><li><a href="/d/stick-60/HAN2345-Manual-MULTI.pdf">H9 Ultra Stick Manual</a></li></ul><p><img src="/d/stick-60/h9-60-arf-01.jpg" alt="h9 60 arf"></p><p><img src="/d/stick-60/h9-60-arf-02.jpg" alt="h9 60 arf"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Micro Ultra Stick</title>
      <link href="/2018/04/stick-micro/"/>
      <url>/2018/04/stick-micro/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="15in-400mm-Span"><a href="#15in-400mm-Span" class="headerlink" title="15in / 400mm Span"></a>15in / 400mm Span</h3><p>Same plan but printed at 50%</p><p><em>Fuselage</em></p><ul><li>F1 - 3mm ply</li><li>F2, F3, F4 and F5 all 1.5mm balsa</li><li>1mm x 3mm for bracing</li></ul><p><em>Wing</em></p><ul><li>Ribs 1.5mm balsa</li><li>1mm balsa for skinning and cap strips</li></ul><p><em>Tail</em></p><ul><li>3mm x 3mm for control surfaces</li></ul><p><img src="/d/stick-micro/400mm-a.jpg" alt="400mm Micro Ultra"></p><p><img src="/d/stick-micro/400mm-b.jpg" alt="400mm Micro Ultra"></p><h3 id="31in-800mm-Span"><a href="#31in-800mm-Span" class="headerlink" title="31in / 800mm Span"></a>31in / 800mm Span</h3><p>335 grams including 1000 Mah 3 Cell Lipo</p><p><em>Fuselage</em></p><ul><li>F1 - 3mm ply</li><li>F2, F3 - 3mm balsa</li><li>F4, F5 - 2mm balsa</li><li>Sheeting (top, bottom, sides) - 2mm balsa</li><li>Wing seat, 3mm balsa vertical grain</li><li>Bracing inside the fuse 3x3mm balsa</li></ul><p><em>Wing</em></p><p>The Airfoil is <a href="/2018/04/airfoils/">Eppler 168 15% width</a></p><ul><li>2mm balsa for skinning and cap strips</li><li>Ribs &amp; sheer webbing 3mm balsa</li><li>5mm trailing edge</li><li>5mm balsa spars</li><li>9.5mm balsa leading edge</li><li>Wing tips 5mm balsa</li></ul><p><em>Tail</em></p><ul><li>5x5mm balsa control surfaces, gussets and triangle bracing (hard would be better)</li></ul><p><strong>Wood Shopping List</strong></p><ul><li>2mm balsa (x4) - <a href="http://www.hangarone.co.nz/balsa-sheet-20mm-100mm-915mm-p-1742.html">http://www.hangarone.co.nz/balsa-sheet-20mm-100mm-915mm-p-1742.html</a></li><li>3mm balsa (x5) - <a href="http://www.hangarone.co.nz/balsa-sheet-30mm-100mm-915mm-18-p-1746.html">http://www.hangarone.co.nz/balsa-sheet-30mm-100mm-915mm-18-p-1746.html</a></li><li>5mm balsa (x2) - <a href="http://www.hangarone.co.nz/balsa-sheet-50mm-100mm-915mm-316-p-1750.html">http://www.hangarone.co.nz/balsa-sheet-50mm-100mm-915mm-316-p-1750.html</a></li><li>9.5mm balsa (x1) - <a href="http://www.hangarone.co.nz/balsa-sheet-95mm-100mm-915mm-38-p-1755.html">http://www.hangarone.co.nz/balsa-sheet-95mm-100mm-915mm-38-p-1755.html</a></li><li>3mm ply (x1) - <a href="http://www.hangarone.co.nz/birch-plywood-30mm-300mm-300mm-18-p-4309.html">http://www.hangarone.co.nz/birch-plywood-30mm-300mm-300mm-18-p-4309.html</a></li></ul><p><img src="/d/stick-micro/800mm-rib.jpg" alt="800mm Micro Ultra Rib"></p><p><img src="/d/stick-micro/800mm.jpg" alt="800mm Micro Ultra"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://aerofred.com/details.php?image_id=99469">https://aerofred.com/details.php?image_id=99469</a></li><li><a href="https://drive.google.com/open?id=1UbFKG9-SI9BApiWPF_RSDiL536Q5YlRC">https://drive.google.com/open?id=1UbFKG9-SI9BApiWPF_RSDiL536Q5YlRC</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mini Ultra Stick</title>
      <link href="/2018/04/stick-mini/"/>
      <url>/2018/04/stick-mini/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/04/stick-sizes/">All stick sizes</a></p><h3 id="38in-980mm-Span"><a href="#38in-980mm-Span" class="headerlink" title="38in / 980mm Span"></a>38in / 980mm Span</h3><ul><li><a href="https://drive.google.com/drive/folders/1DhsSUBvhgs3u2XKls4y0ogXOpnO_5Tuf?usp=sharing">PDF Plans (not original, adapted from plans drawn by : W.C.Wrigley)</a></li></ul><p>E-Flight used to make these, I rebuilt one and over powered it with a park 480 and a 40 amp esc.</p><p><em>Fuselage</em></p><ul><li>Park 450, 2200 3S, 10x7e prop</li><li>Overall Length: 34 in (865mm)</li><li>Flying Weight: 710g</li></ul><p><em>Landing Gear</em></p><ul><li>25mm deep at fuselage connection tapering down to approx 15mm</li><li>165mm long on each arm</li></ul><p>Pictures shared with me in <a href="https://www.facebook.com/groups/1510169962560076">Balsa Model Aircraft Builders Association</a></p><p><img src="/d/stick-mini/landing_gear_01.jpg" alt="Mini Ultra Landing Gear"><br><img src="/d/stick-mini/landing_gear_02.jpg" alt="Mini Ultra Landing Gear"><br><img src="/d/stick-mini/landing_gear_03.jpg" alt="Mini Ultra Landing Gear"></p><p><em>Wing</em></p><ul><li>Span: 38.75 in (985mm)</li><li>Area: 325 sq in (21 sq dm)</li><li>Estimated height TE to LE: (325 / 38.17 = 8.38 in) =&gt; 212mm (includes ailerons)</li><li>Ailerons throw 15mm Up/Down Low Rate, 19mm High Rate</li></ul><p><em>Tail</em></p><ul><li>Elevator throw 18mm Up/Down Low Rate, 23mm High Rate</li><li>Rudder throw 23mm Right/Left Low Rate, 32mm High Rate</li></ul><p><img src="/d/stick-mini/1.jpg" alt="Mini Ultra"><br><img src="/d/stick-mini/2.jpg" alt="Mini Ultra"><br><img src="/d/stick-mini/3.jpg" alt="Mini Ultra"></p><ul><li><a href="https://www.horizonhobby.com/mini-ultra-stick-arf-efl2250">https://www.horizonhobby.com/mini-ultra-stick-arf-efl2250</a></li><li><a href="https://www.spektrumrc.com/Products/Default.aspx?ProdID=EFL2250">https://www.spektrumrc.com/Products/Default.aspx?ProdID=EFL2250</a></li></ul><h3 id="36in-914mm-Span"><a href="#36in-914mm-Span" class="headerlink" title="36in / 914mm Span"></a>36in / 914mm Span</h3><p><em>Engine</em></p><ul><li>.19</li></ul><p><img src="/d/stick-mini/36in-914mm-span.jpg" alt="36in / 914mm Span - outerzone.co.uk"></p><ul><li><a href="https://outerzone.co.uk/plan_details.asp?ID=6144">https://outerzone.co.uk/plan_details.asp?ID=6144</a></li><li><a href="https://drive.google.com/drive/folders/1eHOD-LG8OXDfRZlQf0kE_bLQRbAcrLLj?usp=sharing">https://drive.google.com/drive/folders/1eHOD-LG8OXDfRZlQf0kE_bLQRbAcrLLj?usp=sharing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK Stack</title>
      <link href="/2018/04/elk-stack/"/>
      <url>/2018/04/elk-stack/</url>
      
        <content type="html"><![CDATA[<p><em>“”ELK” is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana.”</em></p><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>You can filter the search results to display only those documents that contain a particular value in a field.</p><ul><li><a href="/2019/07/kibana/">Kibana docker container</a></li><li><a href="https://hub.docker.com/_/kibana">https://hub.docker.com/_/kibana</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> elk stack </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Local SSID</title>
      <link href="/2018/04/local-ssid/"/>
      <url>/2018/04/local-ssid/</url>
      
        <content type="html"><![CDATA[<p>The following scripts use netsh to allow you to create a SSID (Wi-Fi network) on your local notebook, you can then connect your phone, tablet or other mobile device to it.</p><h3 id="Batch-file"><a href="#Batch-file" class="headerlink" title="Batch file"></a>Batch file</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo Setup SSID Jackal</span><br><span class="line">@pause</span><br><span class="line">netsh wlan set hostednetwork mode=allow ssid=&quot;Jackal&quot; key=&quot;changeme&quot;</span><br><span class="line"></span><br><span class="line">@echo Start SSID</span><br><span class="line">@pause</span><br><span class="line">netsh wlan start hostednetwork</span><br><span class="line"></span><br><span class="line">@echo Display SSID Status</span><br><span class="line">@pause</span><br><span class="line">netsh wlan show hostednetwork</span><br><span class="line">@pause</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Running a .Net Core console application</title>
      <link href="/2018/04/running-a-net-core-console-application/"/>
      <url>/2018/04/running-a-net-core-console-application/</url>
      
        <content type="html"><![CDATA[<p>Locally your IDE does the work for you but when you run the console application on a remote server you need to check the following:</p><ol><li>Publish your application<ol><li>Right click the project and select publish</li><li>Copy to the contents of ‘PublishOutput’ remote server, example <code>C:\Data\Application A</code></li><li>Update the ‘appsettings.json’ with your production settings (if relevant)</li></ol></li><li>On the remote server<ol><li>Download the .Net Core SDK at <a href="https://www.microsoft.com/net/download/windows">https://www.microsoft.com/net/download/windows</a></li><li>Add ‘C:\Program Files\dotnet’ to your current users ‘Environment Variables’ under “Path”</li><li>Run your the application with <code>dotnet library.dll</code> where <code>library.dll</code> is the name of your assembly name.</li></ol></li></ol><h3 id="Run-your-the-application"><a href="#Run-your-the-application" class="headerlink" title="Run your the application"></a>Run your the application</h3><p><img src="/d/running-a-net-core-console-application/running-1.png" alt="Run your the application"></p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p><img src="/d/running-a-net-core-console-application/running-2.png" alt="Environment Variables"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-vs">https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-vs</a></li><li><a href="https://www.microsoft.com/net/learn/get-started/windows">https://www.microsoft.com/net/learn/get-started/windows</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/index?tabs=netcore2x">https://docs.microsoft.com/en-us/dotnet/core/tools/index?tabs=netcore2x</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Power Shell</title>
      <link href="/2018/04/windows-power-shell/"/>
      <url>/2018/04/windows-power-shell/</url>
      
        <content type="html"><![CDATA[<p><em><strong>Updated 13/04/2021</strong></em></p><h3 id="Basic-Functions"><a href="#Basic-Functions" class="headerlink" title="Basic Functions"></a>Basic Functions</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- debug</span><br><span class="line">Set-PSDebug -Off;</span><br><span class="line">#Set-PSDebug -Trace 1;</span><br><span class="line">write-host &quot;Do the thing&quot;;</span><br><span class="line"></span><br><span class="line">--- Internet Information Services</span><br><span class="line">Restart-IIS</span><br><span class="line">Start-IIS</span><br><span class="line"></span><br><span class="line">-- Allow scripts to run</span><br><span class="line">Get-ExecutionPolicy</span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>PowerShell Core is portable as <code>pwsh</code></p><ul><li><a href="https://github.com/PowerShell/PowerShell">https://github.com/PowerShell/PowerShell</a></li><li><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pwsh">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pwsh</a></li></ul><h3 id="invoke-expression"><a href="#invoke-expression" class="headerlink" title="invoke-expression"></a>invoke-expression</h3><p>This will open a new ps window, <code>Read-Host</code> keeps it open.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-expression &#x27;cmd /c start powershell -Command &#123; write-host &quot;Running stubs!&quot;; set-location &quot;.\stubs\foo\&quot;; docker-compose up ; Read-Host&#125;&#x27;;</span><br><span class="line">invoke-expression &#x27;cmd /c start powershell -Command &#123; write-host &quot;Running Run_Api!&quot;; set-location &quot;.\api\&quot;; ./Run_Api.ps1 ; Read-Host&#125;&#x27;;</span><br></pre></td></tr></table></figure><p>You can also pass <code>set-location</code> an absolute path, this is generally <em>trash</em> but will work in a pinch!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-location &quot;C:\Dev\foo-app\api\&quot;;</span><br></pre></td></tr></table></figure><h3 id="Argument"><a href="#Argument" class="headerlink" title="Argument"></a>Argument</h3><p><code>foo.ps1 foo bar baz</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write-host &quot;There are a total of $($args.count) arguments&quot;</span><br><span class="line">for ( $i = 0; $i -lt $args.count; $i++ ) &#123;</span><br><span class="line">    write-host &quot;Argument  $i is $($args[$i])&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.red-gate.com/simple-talk/sysadmin/powershell/how-to-use-parameters-in-powershell/">https://www.red-gate.com/simple-talk/sysadmin/powershell/how-to-use-parameters-in-powershell/</a></li></ul><h3 id="Named-Parameters"><a href="#Named-Parameters" class="headerlink" title="Named Parameters"></a>Named Parameters</h3><p><code>foo.ps1 -Reset true -BuildSource true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Param(</span><br><span class="line">    [switch]$Reset,</span><br><span class="line">[switch]$BuildSource</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/carlpaton/VulnusCloud/blob/master/Docs/docker-compose-vulnuscloud/run.ps1">https://github.com/carlpaton/VulnusCloud/blob/master/Docs/docker-compose-vulnuscloud/run.ps1</a></li></ul><h3 id="Parameter-attribute"><a href="#Parameter-attribute" class="headerlink" title="Parameter attribute"></a>Parameter attribute</h3><p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-7.1#parameter-attribute">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-7.1#parameter-attribute</a></p><h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$host.ui.RawUI.WindowTitle = &#x27;&#x27;Sweet Title&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.1#equality-operators">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.1#equality-operators</a></p><h3 id="Approved-Verbs-for-PowerShell-Commands"><a href="#Approved-Verbs-for-PowerShell-Commands" class="headerlink" title="Approved Verbs for PowerShell Commands"></a>Approved Verbs for PowerShell Commands</h3><p><a href="https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.3">https://learn.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.3</a></p><h3 id="Set-Variable"><a href="#Set-Variable" class="headerlink" title="Set-Variable"></a>Set-Variable</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// set</span><br><span class="line">Set-Variable -Name &quot;BearerToken&quot; -Value $(GetBearerToken) -Scope global // accessible by other scripts running</span><br><span class="line">Set-Variable -Name &quot;BearerToken&quot; -Value $(GetBearerToken) -Scope script // only accessible in this scripts scope</span><br><span class="line"></span><br><span class="line">// get</span><br><span class="line">&quot;Authorization&quot; = &quot;Bearer $(Get-Variable -Name &quot;BearerToken&quot; -ValueOnly)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> power shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Inversion Principle (DIP)</title>
      <link href="/2018/04/dependency-inversion-principle-dip/"/>
      <url>/2018/04/dependency-inversion-principle-dip/</url>
      
        <content type="html"><![CDATA[<p>This is the ‘D’ in <a href="/2018/04/solid-object-oriented-design/">SOLID</a>, also see <a href="/2018/09/dependency-injection-frameworks/">Dependency Injection Frameworks</a></p><h3 id="Definition-Robert-C-Martin-and-Micah-Martin"><a href="#Definition-Robert-C-Martin-and-Micah-Martin" class="headerlink" title="Definition (Robert C. Martin and Micah Martin)"></a>Definition (Robert C. Martin and Micah Martin)</h3><p>The Dependency Inversion Principle states that high-level modules should not depend on low-level modules.  Both should depend on abstractions. Furthermore, abstractions should not depend on details, but rather details should depend on abstractions. This is from the Agile Principles, Patterns, and Practices in C# book by Robert C. Martin and Micah Martin.</p><h3 id="Definition-Mark-Seemann"><a href="#Definition-Mark-Seemann" class="headerlink" title="Definition (Mark Seemann)"></a>Definition (Mark Seemann)</h3><p>“Dependency Injection is a set of software design principles and patterns that enable us to develop loosely coupled code.”</p><h3 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h3><p><strong>IOC</strong> (Inversion of control) is a general parent term while <strong>DI</strong> (<strong>Dependency injection</strong>) is a subset of <strong>IOC</strong>.<br><strong>IOC</strong> is a concept where the flow of application is inverted. … <strong>DI</strong> provides objects that an object needs. So rather than the dependencies construct themselves they are injected by some external means.</p><ul><li><a href="https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection">https://stackoverflow.com/questions/6550700/inversion-of-control-vs-dependency-injection</a></li><li><a href="https://www.codeproject.com/Articles/592372/Dependency-Injection-DI-vs-Inversion-of-Control-IO">https://www.codeproject.com/Articles/592372/Dependency-Injection-DI-vs-Inversion-of-Control-IO</a></li></ul><p>Inversion of Control of <code>IoC</code> can be implemented in two ways, one using a Service Locator and another is Dependency Injection.</p><h4 id="Implementation-Dependency-Injection"><a href="#Implementation-Dependency-Injection" class="headerlink" title="Implementation - Dependency Injection"></a>Implementation - Dependency Injection</h4><p>This is a <code>Strategy Pattern</code>. The most common implementation is constructor injection. Dependencies are passed in via the constructor. The constructor then is being honest with the things that call it in that it is explicitly stating the things that it needs in order for it to be in a valid state and to be able to do the work that it expects to be able to do.</p><h5 id="PROS"><a href="#PROS" class="headerlink" title="PROS"></a>PROS</h5><ul><li>Classes are self-document what they need</li><li>Works well with or without a container</li><li>Classes are always in a valid state once constructed.</li></ul><h5 id="CONS"><a href="#CONS" class="headerlink" title="CONS"></a>CONS</h5><ul><li>Constructors can end up with many parameters/dependencies, which is a design smell.</li><li>Some features, EG, serialization, may require a default constructor.</li><li>Some methods in the class may not require things that other methods require, which is a design smell.</li></ul><p>The dependencies can also be injected using:</p><ul><li><a href="https://www.tutorialsteacher.com/ioc/Method-injection-using-unity-container">Method Injection</a></li><li><a href="https://www.tutorialsteacher.com/ioc/property-injection-using-unity-container">Property Injection</a></li></ul><h4 id="Implementation-Service-Locator"><a href="#Implementation-Service-Locator" class="headerlink" title="Implementation - Service Locator"></a>Implementation - Service Locator</h4><p>With the <code>Service Locator</code>, the class is still responsible for creating its dependencies. It just uses the service locator to do it. With DI, the class is given its dependencies.</p><ul><li><a href="https://martinfowler.com/articles/injection.html">https://martinfowler.com/articles/injection.html</a></li><li><a href="https://www.c-sharpcorner.com/UploadFile/dacca2/service-locator-design-pattern/">https://www.c-sharpcorner.com/UploadFile/dacca2/service-locator-design-pattern/</a></li></ul><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/5_DIP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/NnZZMkwI6KI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><em>docs.microsoft.com</em></p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1">Dependency injection in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/dependency-injection?view=aspnetcore-2.1">Dependency injection into controllers in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/hands-on-labs/aspnet-mvc-4-dependency-injection">ASP.NET MVC 4 Dependency Injection</a></li></ul><p><em>pluralsight.com</em></p><ul><li><a href="https://www.pluralsight.com/courses/dependency-injection-on-ramp">Jeremy Clark: dependency-injection-on-ramp</a></li></ul><p><em>Other</em></p><ul><li><a href="https://blog.elmah.io/appsettings-in-aspnetcore/">https://blog.elmah.io/appsettings-in-aspnetcore/</a></li><li><a href="https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/">https://cmatskas.com/net-core-dependency-injection-with-constructor-parameters-2/</a></li><li><a href="https://www.codeproject.com/Tips/1033646/SOLID-Principle-with-Csharp-Example">https://www.codeproject.com/Tips/1033646/SOLID-Principle-with-Csharp-Example</a></li><li><a href="https://www.intertech.com/Blog/the-single-responsibility-principle-with-c-examples/">https://www.intertech.com/Blog/the-single-responsibility-principle-with-c-examples/</a></li><li><a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</a></li><li><a href="https://stackoverflow.com/questions/7542051/learning-single-responsibility-principle-with-c-sharp">https://stackoverflow.com/questions/7542051/learning-single-responsibility-principle-with-c-sharp</a></li><li><a href="/2018/05/inversion-of-control-ioc/">/inversion-of-control-ioc/</a></li><li><a href="https://aspnetboilerplate.com/Pages/Documents/Dependency-Injection">https://aspnetboilerplate.com/Pages/Documents/Dependency-Injection</a></li><li><a href="https://medium.com/@ivorobioff/dependency-injection-vs-service-locator-2bb8484c2e20">https://medium.com/@ivorobioff/dependency-injection-vs-service-locator-2bb8484c2e20</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
            <tag> dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design By Contract</title>
      <link href="/2018/04/design-by-contract/"/>
      <url>/2018/04/design-by-contract/</url>
      
        <content type="html"><![CDATA[<p><em>Prescribes that software designers should define formal, precise and verifiable interface specifications for software components, which extend the ordinary definition of abstract data types with preconditions, postconditions and invariants. These specifications are referred to as “contracts”, in accordance with a conceptual metaphor with the conditions and obligations of business contracts.</em></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Design_by_contract">https://en.wikipedia.org/wiki/Design_by_contract</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interface Segregation Principle (ISP)</title>
      <link href="/2018/04/interface-segregation-principle-isp/"/>
      <url>/2018/04/interface-segregation-principle-isp/</url>
      
        <content type="html"><![CDATA[<p>This is the “I” is <a href="/2018/04/solid-object-oriented-design/">SOLID</a></p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><em>“Clients should not be forced to depend on methods they do not use.”</em></p><p>Simply put use small, cohesive interfaces over “fat” interfaces that implement methods and properties that your current problem domain does not care about.</p><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/4_ISP_code_refactor.md</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/y1JiMGP51NE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liskov substitution principle (LSP)</title>
      <link href="/2018/04/liskov-substitution-principle-lsp/"/>
      <url>/2018/04/liskov-substitution-principle-lsp/</url>
      
        <content type="html"><![CDATA[<p>This is the “L” in <a href="/2018/04/solid-object-oriented-design/">SOLID</a>.</p><p>LSP suggests that IS-A relationships between classes should be replaced with IS-SUBSTITUTABLE-FOR.</p><p>In C#, the LSP is often implemented through interfaces and polymorphism.</p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><em>“The Liskov Substitution Principle states that Subtypes must be substitutable for their base types.”</em></p><ul><li>Named for Barbara Liskov, who first described the principle in 1988.</li></ul><p>In order for substitutability to work child classes must not:</p><ul><li>Remove base class behavior</li><li>Violate base class invariants, these could be any constraints defined (or reasonable assumed by clients) on the base classes.</li></ul><h3 id="Why-follow-LSP"><a href="#Why-follow-LSP" class="headerlink" title="Why follow LSP?"></a>Why follow LSP?</h3><p>If the classes are none substitutable then polymorphism will not work and there will be code smells added such as if conditions / switches which will be hard to maintain. This also violates the <a href="https://carlpaton.co.za/open-closed-principle-ocp/">Open / Closed Principle (OCP)</a></p><p>You will also have issues such as <code>NotImplementedException();</code> being left in inherited methods. This violates the <a href="https://carlpaton.co.za/interface-segregation-principle-isp/">Interface Segregation Principle (ISP)</a></p><h3 id="References-amp-Sample-Code"><a href="#References-amp-Sample-Code" class="headerlink" title="References &amp; Sample Code"></a>References &amp; Sample Code</h3><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_problem.md</a></li><li><a href="https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_refactor.md">https://github.com/carlpaton/SOLID/blob/master/3_LSP_code_refactor.md</a></li><li><a href="https://dzone.com/articles/solid-principles-liskov-substitution-principle">https://dzone.com/articles/solid-principles-liskov-substitution-principle</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/-3UXq2krhyw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Full disclosure I asked <a href="https://chat.openai.com/chat">Chat GPT</a> for this example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">GetArea</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetArea</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Width * Height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Square</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SideLength &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetArea</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SideLength * SideLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this example, Rectangle and Square are both classes that implement the IShape interface. The GetArea method is defined in the interface and implemented by both classes. Now, in any part of our code, if we have a variable of type IShape, we can assign it a Rectangle or Square object without any issue.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span> &#123;</span><br><span class="line">    IShape shape1 = <span class="keyword">new</span> Rectangle &#123; Width = <span class="number">2</span>, Height = <span class="number">3</span> &#125;;</span><br><span class="line">    IShape shape2 = <span class="keyword">new</span> Square &#123; SideLength = <span class="number">3</span> &#125;;</span><br><span class="line">    Console.WriteLine(shape1.GetArea()); <span class="comment">// 6</span></span><br><span class="line">    Console.WriteLine(shape2.GetArea()); <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, <code>shape1</code> is assigned a <code>Rectangle</code> object and <code>shape2</code> is assigned a <code>Square</code> object, both of them implements the <code>IShape</code> interface and have a GetArea method, so it can be called without any issue and the program will work as expected.</p><p>It’s also important to notice that in this example we can not add any method in the <code>Square</code> class that does not exist in the <code>IShape</code> interface, otherwise it will cause a compilation error, that’s what makes it a substitute.</p>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open/Closed Principle (OCP)</title>
      <link href="/2018/04/open-closed-principle-ocp/"/>
      <url>/2018/04/open-closed-principle-ocp/</url>
      
        <content type="html"><![CDATA[<p>This is the ‘O’ in <a href="/2018/04/solid-object-oriented-design/">SOLID</a></p><p>Simply put:</p><ul><li>Open to extension is to allow new behavior to be added in the future</li><li>Closed to modification is not to change the source/binary code</li></ul><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>“*The Open / Closed Principle states that software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.*” – Wikipedia</p><ul><li>Dr. Bertrand Meyer originated the term in his 1988 book, Object-Oriented Software Construction</li></ul><h3 id="How-do-we-open-things-for-extension"><a href="#How-do-we-open-things-for-extension" class="headerlink" title="How do we open things for extension?"></a>How do we open things for extension?</h3><p>The key is to rely on abstractions, so this is interfaces or an abstract base class. Its however very important <strong>not</strong> to simply apply OCP to every class unless you know based that the business rules are likely to change.</p><p>Its best to focus on “Refactoring to a better design”, this means you should write your code with the least amount of complexity first and when needed refactor it and apply a principal such as OCP. So if it changes once, accept it. If it changes again consider refactoring.</p><h4 id="PROS"><a href="#PROS" class="headerlink" title="PROS"></a>PROS</h4><ul><li>Existing core classes are not changed so you are less likely to introduce regression bugs</li><li>You are adding new classes each time, so you can test and have faith you will not upset things</li></ul><h4 id="CONS"><a href="#CONS" class="headerlink" title="CONS"></a>CONS</h4><ul><li>This add complexity and must be used with caution, dont use OCP to try impress your boss</li></ul><h3 id="Typical-Approaches"><a href="#Typical-Approaches" class="headerlink" title="Typical Approaches"></a>Typical Approaches</h3><ul><li>Parameters<ul><li>By passing parameters to your methods you allow their behavior to change.</li></ul></li><li><a href="/2018/03/pillars-of-object-oriented-programming-oop/">Inheritance</a><ul><li>By using the <code>override</code> keyword in a concrete class you can over-ride the behavior of <code>virtual</code> or <code>abstract</code> methods. </li></ul></li><li>Composition /  <a href="/2018/04/dependency-inversion-principle-dip/">Dependency Injection</a> <ul><li>By injecting an instance of a service defined by its <code>interface</code> the consumer is open to extension but closed for modification.</li><li>An <a href="/2020/02/factory-pattern/">Abstract Factory</a> can ne used if there are different rules the consumer must follow based on its state. An example is <a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples">shopping cart price rules</a>.</li></ul></li></ul><h3 id="Sample-Code"><a href="#Sample-Code" class="headerlink" title="Sample Code"></a>Sample Code</h3><p>Shopping cart examples based on work from Steve Smith</p><ul><li><a href="https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples">https://github.com/carlpaton/Boilerplate/tree/master/Class%20Library/PatternsAndPrinciples</a></li></ul><p>Great examples by <a href="https://ardalis.com/?s=solid">Steve Smith aka Ardalis</a></p><ul><li><a href="https://github.com/carlpaton/SolidSample">https://github.com/carlpaton/SolidSample</a></li><li><a href="https://www.pluralsight.com/courses/csharp-solid-principles">https://www.pluralsight.com/courses/csharp-solid-principles</a></li></ul><p>Other Examples from <a href="https://github.com/bradvin">Brad Vincent</a></p><ul><li><a href="https://github.com/carlpaton/SOLID/blob/master/2_OCP_code_problem.md">https://github.com/carlpaton/SOLID/blob/master/2_OCP_code_problem.md</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://hackernoon.com/why-the-open-closed-principle-is-the-one-you-need-to-know-but-dont-176f7e4416d">https://hackernoon.com/why-the-open-closed-principle-is-the-one-you-need-to-know-but-dont-176f7e4416d</a></li><li><a href="https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html">https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html</a></li><li><a href="https://codeblog.jonskeet.uk/2013/03/15/the-open-closed-principle-in-review/">https://codeblog.jonskeet.uk/2013/03/15/the-open-closed-principle-in-review/</a></li><li><a href="http://joelabrahamsson.com/a-simple-example-of-the-openclosed-principle/">http://joelabrahamsson.com/a-simple-example-of-the-openclosed-principle/</a></li><li><a href="http://www.debugosaurus.com/solid/2017/03/18/Open-closed.html">http://www.debugosaurus.com/solid/2017/03/18/Open-closed.html</a></li><li><a href="https://code-maze.com/open-closed-principle/">https://code-maze.com/open-closed-principle/</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/VFlk43QGEgc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tell, Dont Ask</title>
      <link href="/2018/04/tell-dont-ask/"/>
      <url>/2018/04/tell-dont-ask/</url>
      
        <content type="html"><![CDATA[<p><em>Tell-Don’t-Ask is a principle that helps people remember that object-orientation is about bundling data with the functions that operate on that data. It reminds us that rather than asking an object for data and acting on that data, we should instead tell an object what to do. This encourages to move behavior into an object to go with the data.</em></p><ul><li>Don’t interrogate objects for their internals – move behavior to the object</li><li>Tell the object what you want it to do</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.martinfowler.com/bliki/TellDontAsk.html">https://www.martinfowler.com/bliki/TellDontAsk.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Model Airplanes</title>
      <link href="/2018/04/model-airplanes/"/>
      <url>/2018/04/model-airplanes/</url>
      
        <content type="html"><![CDATA[<p>I fly model airplanes in mode 2 (this mean the throttle and rudder controls are on the left with elevator and aileron control on the right)</p><h3 id="Build-Logs"><a href="#Build-Logs" class="headerlink" title="Build Logs"></a>Build Logs</h3><ul><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=197680">Shotgun scratch build</a></li><li><a href="http://www.avcom.co.za/phpBB3/viewtopic.php?f=16&t=152011">Pilot Extra 260 Repair</a></li><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=154155">Mini Ultra Stick Rebuild / Repair</a></li><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=178725">vmar 60 stick recover</a></li><li><a href="http://avcom.co.za/phpBB3/viewtopic.php?f=16&t=150617">40 Size Stick Rebuild</a></li><li><a href="http://www.avcom.co.za/phpBB3/viewtopic.php?f=16&t=160836">Depron twin motor stick – Silly stick</a></li><li><a href="http://www.avcom.co.za/phpBB3/viewtopic.php?f=16&t=155970&start=45">Depron Cargo Plane Build (ft-guinea)</a></li></ul><h3 id="Online-PDF-Plans"><a href="#Online-PDF-Plans" class="headerlink" title="Online PDF Plans"></a>Online PDF Plans</h3><ul><li><a href="https://outerzone.co.uk/">https://outerzone.co.uk</a></li><li><a href="https://aerofred.com/">https://aerofred.com/</a></li></ul><h3 id="Fond-Memory’s-with-a-foamy-trainer"><a href="#Fond-Memory’s-with-a-foamy-trainer" class="headerlink" title="Fond Memory’s with a foamy trainer"></a>Fond Memory’s with a foamy trainer</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/i45KT8ag-h8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SOLID (object-oriented design)</title>
      <link href="/2018/04/solid-object-oriented-design/"/>
      <url>/2018/04/solid-object-oriented-design/</url>
      
        <content type="html"><![CDATA[<h3 id="SOLID-object-oriented-design"><a href="#SOLID-object-oriented-design" class="headerlink" title="SOLID (object-oriented design)"></a>SOLID (object-oriented design)</h3><p>In object-oriented computer programming, the term SOLID is a <a href="https://en.wikipedia.org/wiki/Mnemonic">mnemonic acronym</a> for five design principles intended to make software designs more understandable, flexible and maintainable.</p><p>These patterns and principles work together and each problem domain will require a different approach and implementation (or no implementation of the principle at all)</p><ul><li><a href="/2018/05/single-responsibility-principle-srp/">Single responsibility principle (SRP)</a></li><li><a href="/2018/04/open-closed-principle-ocp/">Open/Closed Principle (OCP)</a></li><li><a href="/2018/04/liskov-substitution-principle-lsp/">Liskov substitution principle (LSP)</a></li><li><a href="/2018/04/interface-segregation-principle-isp/">Interface segregation principle (ISP)</a></li><li><a href="/2018/04/dependency-inversion-principle-dip/">Dependency Inversion Principle (DIP)</a></li></ul><h3 id="References-amp-Influences"><a href="#References-amp-Influences" class="headerlink" title="References &amp; Influences"></a>References &amp; Influences</h3><ul><li><a href="https://www.pluralsight.com/courses/principles-oo-design">https://www.pluralsight.com/courses/principles-oo-design (Steve Smith)</a></li><li><a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</a></li><li><a href="https://github.com/charleyza/SOLID">https://github.com/charleyza/SOLID</a></li><li><a href="https://www.youtube.com/playlist?list=PLlbvMh5cf97P0jGgh9Csxg5m-KCM021ZI">https://www.youtube.com/playlist?list=PLlbvMh5cf97P0jGgh9Csxg5m-KCM021ZI</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stick sizes</title>
      <link href="/2018/04/stick-sizes/"/>
      <url>/2018/04/stick-sizes/</url>
      
        <content type="html"><![CDATA[<h3 id="Sizes"><a href="#Sizes" class="headerlink" title="Sizes"></a>Sizes</h3><p>These sizes have never made any sense to me as I had an <a href="https://www.horizonhobby.com/apprentice-s-15e-rtf-with-safe-reg%3B-technology-efl3100">e flite apprentice</a> which had a 1500mm wing but Horizonhobby say its a 15 size, it was electric so who knows! (15-size, 840Kv brushless, 30A ESC, 3S 3200mAh)</p><p>I think the sizes come from the older balsa models so the pilot knew which size <a href="/2018/04/glow-engines/">internal combustion glow engine</a> to use, though it was and still is common for pilots to fit a BIGGER engine :D</p><ul><li><a href="/2018/04/stick-micro/">15in;400mm / 31in;800mm (Micro)</a></li><li><a href="/2018/04/stick-mini/">36in;914mm / 38in;980mm (Mini)</a></li><li><a href="/2018/04/stick-25/">47in;1200mm (25 Size)</a></li><li><a href="/2018/04/stick-40/">55in;1397mm;Middle / 58in;1480mm;H9 (40 Size)</a></li><li><a href="/2018/04/stick-60/">62in;1574mm;DasUgly / 66in;1680mm;Dra  (60 Size)</a></li><li><a href="/2018/04/stick-120/">120 Size</a></li><li><a href="/2018/04/stick-160/">160 Size</a></li></ul><p>A ‘stick’ is a shoulder wing sport / trainer model aircraft originally designed by Phil Kraft in 1966, his was called the Das Ugly Stick and had a round cowl.</p><p>“<em>The original concept of the Ugly Stik was to design a radio controlled aircraft which could be built in an absolute minimum of time. Its purpose was towards a flying test bed for new proportional control developments and an all around shop airplane which could be used as a loaner for visiting flyers, testing repaired equipment, and any use which required an airplane which could be considered as expendable</em>.”</p><p><img src="/d/stick-sizes/stick-1.jpg" alt="June 1966"></p><p>Notable difference between the Das Ugly and a modern Ultra stick is the shape of the tail, the flat trailing edges on the ailerons and elevator &amp; it has no cowling.</p><p><img src="/d/stick-sizes/stick-2.jpg" alt="Ultra Stick"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shotgun</title>
      <link href="/2018/04/shotgun/"/>
      <url>/2018/04/shotgun/</url>
      
        <content type="html"><![CDATA[<p>A shotgun 5000 is a funfly type of model aircraft with large control surfaces and a wing with a very <a href="https://en.wikipedia.org/wiki/Chord_(aeronautics)">thick chord</a>.</p><p><a href="https://drive.google.com/drive/folders/0B0HFzNerE1b7eFVQX0pGbl9hcWs?usp=sharing">PDF plans for the build can be found here</a>.</p><h3 id="Shotgun-2500"><a href="#Shotgun-2500" class="headerlink" title="Shotgun 2500"></a>Shotgun 2500</h3><p>These are plans of the original printed at 50%</p><p><em>Wing Construction:</em></p><p><img src="/d/shotgun/shotgun-1.jpg" alt="Shotgun Wing"></p><p><em>Fuselage Construction:</em></p><p><img src="/d/shotgun/shotgun-2.jpg" alt="Shotgun Fuselage"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Airfoils</title>
      <link href="/2018/04/airfoils/"/>
      <url>/2018/04/airfoils/</url>
      
        <content type="html"><![CDATA[<p>An <strong>airfoil</strong> is the shape of a <a href="https://en.wikipedia.org/wiki/Wing">wing </a>. There are many shapes but the most common are symmetrical, asymmetrical or cambered airfoils.</p><p><img src="/d/airfoils/airfoils.jpg" alt="Common Airfoils"></p><h3 id="Common-Airfoils"><a href="#Common-Airfoils" class="headerlink" title="Common Airfoils"></a>Common Airfoils</h3><p>Also see <a href="https://www.amazon.com/Airfoil-Sections-Containing-co-ordinates-aeromodellers/dp/B003XO1PF4">Airfoil Sections by Kiwi John Malkin</a>.</p><h4 id="NACA-0015-naca0015-il-Airfoil"><a href="#NACA-0015-naca0015-il-Airfoil" class="headerlink" title="NACA 0015 (naca0015-il) Airfoil"></a>NACA 0015 (naca0015-il) Airfoil</h4><p><img src="/d/airfoils/naca-0015-airfoil.jpg" alt="naca4digit"></p><ul><li><a href="http://airfoiltools.com/airfoil/details?airfoil=naca0015-il">http://airfoiltools.com/airfoil/details?airfoil=naca0015-il</a></li></ul><h4 id="NACA-0016-Airfoil"><a href="#NACA-0016-Airfoil" class="headerlink" title="NACA 0016 Airfoil"></a>NACA 0016 Airfoil</h4><p><img src="/d/airfoils/naca-0016-airfoil.jpg" alt="naca4digit"></p><ul><li><a href="http://airfoiltools.com/airfoil/naca4digit?MNaca4DigitForm%5Bcamber%5D=0&amp;MNaca4DigitForm%5Bposition%5D=0&amp;MNaca4DigitForm%5Bthick%5D=16&amp;MNaca4DigitForm%5BnumPoints%5D=101&amp;MNaca4DigitForm%5BcosSpace%5D=0&amp;MNaca4DigitForm%5BcosSpace%5D=1&amp;MNaca4DigitForm%5BcloseTe%5D=0&amp;yt0=Plot">http://airfoiltools.com/airfoil/naca4digit?MNaca4DigitForm%5Bcamber%5D=0&amp;MNaca4DigitForm%5Bposition%5D=0&amp;MNaca4DigitForm%5Bthick%5D=16&amp;MNaca4DigitForm%5BnumPoints%5D=101&amp;MNaca4DigitForm%5BcosSpace%5D=0&amp;MNaca4DigitForm%5BcosSpace%5D=1&amp;MNaca4DigitForm%5BcloseTe%5D=0&amp;yt0=Plot</a></li></ul><h4 id="NACA-2412-naca2412-il-Airfoil"><a href="#NACA-2412-naca2412-il-Airfoil" class="headerlink" title="NACA 2412 (naca2412-il) Airfoil"></a>NACA 2412 (naca2412-il) Airfoil</h4><p><img src="/d/airfoils/naca-2412-airfoil.jpg" alt="naca4digit"></p><ul><li><a href="http://airfoiltools.com/airfoil/details?airfoil=naca2412-il">http://airfoiltools.com/airfoil/details?airfoil=naca2412-il</a></li></ul><h4 id="CLARK-Y-Airfoil-clarky-il"><a href="#CLARK-Y-Airfoil-clarky-il" class="headerlink" title="CLARK Y Airfoil (clarky-il)"></a>CLARK Y Airfoil (clarky-il)</h4><p><img src="/d/airfoils/clark-y-airfoil.jpg" alt="Clarke Y"></p><ul><li><a href="http://airfoiltools.com/airfoil/details?airfoil=clarky-il">http://airfoiltools.com/airfoil/details?airfoil=clarky-il</a></li></ul><h4 id="Airfoil-Eppler-168-15-width"><a href="#Airfoil-Eppler-168-15-width" class="headerlink" title="Airfoil Eppler 168 15% width"></a>Airfoil Eppler 168 15% width</h4><p><img src="/d/airfoils/e168-12.45-airfoil.jpg" alt="E168 (12.45%)"></p><ul><li><a href="http://airfoiltools.com/plotter/index?airfoil=e168-il">http://airfoiltools.com/plotter/index?airfoil=e168-il</a></li><li><a href="/2018/04/stick-micro/">Use in for Micro Stick</a></li></ul><h3 id="Javafoil-Simulator"><a href="#Javafoil-Simulator" class="headerlink" title="Javafoil Simulator"></a>Javafoil Simulator</h3><p>Digital airfoil analysis &lt;3</p><ul><li><a href="https://www.mh-aerotools.de/airfoils/javafoil.htm">https://www.mh-aerotools.de/airfoils/javafoil.htm</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/pNx9aVGv_go" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>### How do these work?<p>There are several factors to consider when trying to understand how a wing works, each factor together helps generate the force of lift.</p><h4 id="1-Air-deflection-with-angle-of-attack-amp-Coanda-effect"><a href="#1-Air-deflection-with-angle-of-attack-amp-Coanda-effect" class="headerlink" title="1. Air deflection with angle of attack &amp; Coandă effect"></a>1. Air deflection with angle of attack &amp; Coandă effect</h4><p>This is how a flat wing will fly, air under the wing is deflected down and by the Coandă effect air above the wing is guided along its surface and down as well. The air is slowed and deflected down by the wing it pushes the wing up and back. This is <strong>lift</strong> and <strong>drag</strong>.</p><p>Wings need to deflect air downwards which can be achieved using symmetrical, asymmetrical or cambered airfoils.</p><p><img src="/d/airfoils/slats-and-flaps.jpg" alt="By Cruithne9 - Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=53650245"></p><h4 id="2-Bernoulli’s-principle"><a href="#2-Bernoulli’s-principle" class="headerlink" title="2. Bernoulli’s principle"></a>2. Bernoulli’s principle</h4><p><em>Bernoulli’s principle states that an increase in the speed of a fluid occurs simultaneously with a decrease in pressure or a decrease in the fluid’s potential energy.</em></p><p>This means that faster flowing air (on top of the wing) exerts less pressure than the slower air beneath the wing. This pressure difference creates an upwards force – lift.</p><p>This explanation has obvious problems such as:</p><ul><li>Then how can a plane fly upside down?</li><li>Some models have flat wings, they fly just fine.</li></ul><p>The principle also mentions that the faster air ontop of the wing meets up with the slower flowing air underneath at the trailing edge – this is incorrect.</p><p><img src="/d/airfoils/wing.jpg" alt="https://www.discoverhover.org/infoinstructors/guide8.htm"></p><h4 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h4><p>Yeah cool story bro I just want to watch a video :D</p><iframe width="560" height="315" src="https://www.youtube.com/embed/aFO4PBolwFg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/6UlsArvbTeo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>### References<ul><li><a href="https://en.wikipedia.org/wiki/Airfoil">https://en.wikipedia.org/wiki/Airfoil</a></li><li><a href="https://en.wikipedia.org/wiki/Coand%C4%83_effect">https://en.wikipedia.org/wiki/Coand%C4%83_effect</a></li><li><a href="https://en.wikipedia.org/wiki/Lift_(force)">https://en.wikipedia.org/wiki/Lift_(force)</a></li><li><a href="https://www.grc.nasa.gov/www/k-12/airplane/right2.html">https://www.grc.nasa.gov/www/k-12/airplane/right2.html</a></li><li><a href="http://airfoiltools.com/airfoil/naca4digit">http://airfoiltools.com/airfoil/naca4digit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Commands</title>
      <link href="/2018/04/linux-commands/"/>
      <url>/2018/04/linux-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Quick-docker-container-to-have-a-hoon"><a href="#Quick-docker-container-to-have-a-hoon" class="headerlink" title="Quick docker container to have a hoon"></a>Quick docker container to have a hoon</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name ubuntu-c ubuntu</span><br><span class="line">docker start -i ubuntu-c</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.docker.com/v17.12/edge/engine/reference/commandline/run/">https://docs.docker.com/v17.12/edge/engine/reference/commandline/run/</a></li><li><a href="https://docs.docker.com/v17.12/edge/engine/reference/commandline/start/">https://docs.docker.com/v17.12/edge/engine/reference/commandline/start/</a></li></ul><h3 id="Update-amp-Upgrade"><a href="#Update-amp-Upgrade" class="headerlink" title="Update &amp; Upgrade"></a>Update &amp; Upgrade</h3><p> <code>pt-get update</code> downloads the package lists from the repositories and “updates” them to get information on the newest versions of packages and their dependencies. </p><p> <code>apt-get upgrade</code> will fetch new versions of packages existing on the machine if APT knows about these new versions by way of <code>apt-get update</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line">--- Install application `zip` &amp; `unzip`. Check version and example use.</span><br><span class="line">apt-get install zip unzip</span><br><span class="line">zip --version</span><br><span class="line">unzip content.zip</span><br><span class="line"></span><br><span class="line">--- applications</span><br><span class="line">python3, python</span><br><span class="line">nano</span><br></pre></td></tr></table></figure><h3 id="Misc-Commands-and-magic"><a href="#Misc-Commands-and-magic" class="headerlink" title="Misc Commands and magic"></a>Misc Commands and magic</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--- Misc Commands</span><br><span class="line"></span><br><span class="line">ll                                ~ list files (simliar to DIR)</span><br><span class="line">la                                ~ list files horizontally</span><br><span class="line">rm -r [DIRECTORY NAME]            ~ delete directory</span><br><span class="line">rm -fm [DIRECTORY NAME]           ~ delete directory with files in it</span><br><span class="line">mkdir [DIRECTORY NAME]            ~ create directory</span><br><span class="line">sudo ./sbin/shutdown -r now       ~ reboot</span><br><span class="line">sudo ./sbin/shutdown -h now       ~ omit now to schedule a shutdown</span><br><span class="line">sudo -i                           ~ switch to the root user</span><br><span class="line"></span><br><span class="line">--- Hardware Related</span><br><span class="line"></span><br><span class="line">htop                              ~ system-monitor process-viewer and process-manager</span><br><span class="line">top                               ~ this is like the windows task manager</span><br><span class="line">grep -c ^processor /proc/cpuinfo  ~ CPU core count</span><br><span class="line">free -m                           ~ displays memory usage</span><br></pre></td></tr></table></figure><h3 id="Text-Editor"><a href="#Text-Editor" class="headerlink" title="Text Editor"></a>Text Editor</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nano postgres.sh                 ~ edit and create the file</span><br><span class="line">chmod +x postgres.sh             ~ mark as executable</span><br><span class="line">./postgres.sh                    ~ runs the script</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm foo.txt</span><br><span class="line">ESC : wq                         ~ save and exit</span><br><span class="line">ESC : q!                         ~ exit dont save</span><br></pre></td></tr></table></figure><ul><li><a href="https://wiki.gentoo.org/wiki/Nano/Basics_Guide">https://wiki.gentoo.org/wiki/Nano/Basics_Guide</a></li><li><a href="https://itsfoss.com/how-to-exit-vim/">https://itsfoss.com/how-to-exit-vim/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation Player</title>
      <link href="/2018/04/vmware-workstation-player/"/>
      <url>/2018/04/vmware-workstation-player/</url>
      
        <content type="html"><![CDATA[<p>This is a free VM player that can run on Windows 10, you create a new virtual machine and install the OS from an ISO file.</p><ul><li><a href="https://my.vmware.com/en/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0">Download v14</a></li><li><a href="https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/12_0">Download v12</a></li></ul><p>When you create VM Images they reside locally at :</p><ul><li>C:\Users[Windows User name]\Documents\Virtual Machines[Machine Name]</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/JrC65WxFMfE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="macOS-High-Sierra"><a href="#macOS-High-Sierra" class="headerlink" title="macOS High Sierra"></a>macOS High Sierra</h3><p>Currently this only works for version 12 of VMware Workstation Player and you will need to patch it with unlocker208, details in the links below.</p><ul><li><a href="https://techsviewer.com/install-macos-high-sierra-vmware-windows/">https://techsviewer.com/install-macos-high-sierra-vmware-windows/</a></li><li><a href="https://www.pcsteps.com/2157-mac-os-x-virtual-machine-vmware-player/">https://www.pcsteps.com/2157-mac-os-x-virtual-machine-vmware-player/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glow Engines</title>
      <link href="/2018/04/glow-engines/"/>
      <url>/2018/04/glow-engines/</url>
      
        <content type="html"><![CDATA[<p>A glow plug engine, or <a href="https://en.wikipedia.org/wiki/Glow_plug_(model_engine)">glow engine</a>, is a type of small internal combustion engine typically used in model aircraft, model cars and similar applications. I don’t really fly these engines as petrol engines are more reliable but I do refurbish and collect them.</p><p><img src="/d/glow-engines/glow-engine.jpg" alt="Stripped OS 46 AX"></p><p>The number stamped on the engine is the size or displacement measured in cubic inches (ci). I only understand cubic centimeters (cc) as this is what my car is measured in (1400 cc). To put this into perspective a 61ci glow engine is a 10cc</p><p>These are the engines I had in my collection in South Africa:  ASP 108 A, ASP 91 A, ASP 61-AII, ASP  52-AII, ASP 46a, IRVINE 46, ASP 36-AII, ASP 25-AII, AP 15, OS 15 LA, ASP 12A and ASP 09</p><h3 id="ASP-108-A"><a href="#ASP-108-A" class="headerlink" title="ASP 108 A"></a>ASP 108 A</h3><p>This is a 17cc engine, for is power to weight it is rubbish but I do like the shiny head! The ‘A’ means the carbs high speed needle is located on the carb and not remotely – Im told this is more reliable in terms of fuel/air mixture but its not safe as your fingers get very close to the prop.</p><p><img src="/d/glow-engines/asp108.jpg" alt="ASP 108 A"></p><h3 id="ASP-91-A"><a href="#ASP-91-A" class="headerlink" title="ASP 91 A"></a>ASP 91 A</h3><p>Power to weight this is a very good engine, I have 2 the one has a broken crank shaft and both are missing the high speed needle valves. Perhaps one day I will rebuild and run them both. These are 15cc engines.</p><p><img src="/d/glow-engines/asp91a.jpg" alt="ASP 91 A"></p><h3 id="Irvine-61"><a href="#Irvine-61" class="headerlink" title="Irvine 61"></a>Irvine 61</h3><p>Nice and clean but missing the exhaust nut and bolts. These are no longer made so will have to try match from and ASP if possible.</p><p><img src="/d/glow-engines/irvine61.jpg" alt="Irvine 61"></p><h3 id="ASP-61-AII"><a href="#ASP-61-AII" class="headerlink" title="ASP 61-AII"></a>ASP 61-AII</h3><p>This is a a 10cc engine with a remote carb.</p><p><img src="/d/glow-engines/asp61aii.jpg" alt="ASP 61-AII"></p><h3 id="ASP-52-AII"><a href="#ASP-52-AII" class="headerlink" title="ASP  52-AII"></a>ASP  52-AII</h3><p>This engines remote carb mount is broken but its in very good shape otherwise. This engine is 8.5cc</p><p><img src="/d/glow-engines/asp52aii.jpg" alt="ASP 52-AII"></p><h3 id="ASP-46a"><a href="#ASP-46a" class="headerlink" title="ASP 46a"></a>ASP 46a</h3><p>These are very common engines, mine has an OS 46 exhaust and the one head fin is damaged but it runs 100%. This is a 7.5cc engine.</p><p><img src="/d/glow-engines/asp46a.jpg" alt="ASP 46a"></p><h3 id="Irvine-46"><a href="#Irvine-46" class="headerlink" title="Irvine 46"></a>Irvine 46</h3><p>This engine’s carb mount is broken and its missing its exhaust, the block can be fixed but I will try source another block and rebuild it.</p><p><img src="/d/glow-engines/Irvine46.jpg" alt="Irvine 46"></p><h3 id="ASP-36-AII"><a href="#ASP-36-AII" class="headerlink" title="ASP 36-AII"></a>ASP 36-AII</h3><p>This is a fantastic size engine for a shotgun with a displacement of 5.8cc. This one needs some cleaning but Im reluctant to as I may actually want to fly it.</p><p><img src="/d/glow-engines/asp36aii.jpg" alt="ASP 36-AII"></p><h3 id="ASP-25-AII"><a href="#ASP-25-AII" class="headerlink" title="ASP 25-AII"></a>ASP 25-AII</h3><p>This would probably work pretty well in a shotgun, it has a 4cc displacement. The remote part of the carb has been removed and the high speed needle attached to the carb – I think the previous owner did this for reliability.</p><p><img src="/d/glow-engines/asp25aii.jpg" alt="ASP 25-AII"></p><h3 id="AP-15"><a href="#AP-15" class="headerlink" title="AP 15"></a>AP 15</h3><p>I’m not sure about the history but this ‘AP’ was manufactured by ASP and its a 2.4cc</p><p><img src="/d/glow-engines/ap15.jpg" alt="AP 15"></p><h3 id="OS-15-LA"><a href="#OS-15-LA" class="headerlink" title="OS 15 LA"></a>OS 15 LA</h3><p>I think the LA/AX ect lettering on these OS engines is got something to do with the ports (in/out) in the combustion process. Apparently the AX range are racing engines but I really don’t know. My little 15 LA is pretty dirty and needs a cleanup.</p><p><img src="/d/glow-engines/os15la.jpg" alt="OS 15 LA"></p><h3 id="ASP-12A"><a href="#ASP-12A" class="headerlink" title="ASP 12A"></a>ASP 12A</h3><p>I prefer this ‘classic’ exhaust porting on these tiny engines, this is a 1.9cc</p><p><img src="/d/glow-engines/asp12a.jpg" alt="ASP 12A"></p><p><strong>ASP 09</strong></p><p>This is the smallest I own, the block is exactly the same as the ASP 15. This 09 is a 1.4cc which means my old KIA Rio’s displacement was 1000 times more – really puts things into perspective!</p><p><img src="/d/glow-engines/asp09a.jpg" alt="ASP 09"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Putty</title>
      <link href="/2018/04/putty/"/>
      <url>/2018/04/putty/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>” PuTTY</strong> (/ˈpʌti/) is a free and open-source terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, <strong>SSH</strong>, Telnet, rlogin, and raw socket connection. It can also connect to a serial port. “</p></blockquote><ul><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/7YNd1tFJfwc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Copy-Files"><a href="#Copy-Files" class="headerlink" title="Copy Files"></a>Copy Files</h3><p>You can copy files to/from the Linux host with batch scripts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set PATH=C:\Program Files\PuTTY</span><br><span class="line"></span><br><span class="line">pscp C:\Dev\obfuscation\publish.zip carl@192.168.31.129:/home/carl/obfuscation/publish.zip</span><br><span class="line"></span><br><span class="line">echo &quot;DONE&quot;</span><br></pre></td></tr></table></figure><ul><li><a href="https://community.nxp.com/thread/220596">https://community.nxp.com/thread/220596</a></li></ul><h2 id="Tunneling"><a href="#Tunneling" class="headerlink" title="Tunneling"></a>Tunneling</h2><p>If ports on you network are closed off you can use putty to tunnel to the box and hit the intended port, example if your container is running on port 7000:</p><ol><li>open putty, select the entry for your session and click load</li><li>then on the left go to tunnels</li><li>in the bottom half…<ol><li>enter a source port 7000</li></ol></li><li>in destination enter 127.0.0.1:7000<ol><li>click add</li></ol></li><li>You should see it listed in forwarded ports</li><li>go back to sessions (right at the top in the left section)<ol><li>click save</li><li>now when you connected, go to <a href="http://localhost:7000/">http://localhost:7000</a> in your browser</li></ol></li></ol><h3 id="Check-SSH-Server-Running-Is-Running"><a href="#Check-SSH-Server-Running-Is-Running" class="headerlink" title="Check SSH Server Running Is Running"></a>Check SSH Server Running Is Running</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep openssh</span><br></pre></td></tr></table></figure><ul><li>openssh is the server</li><li><a href="https://ubuntuforums.org/showthread.php?t=979955">https://ubuntuforums.org/showthread.php?t=979955</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electric Motors</title>
      <link href="/2018/04/electric-motors/"/>
      <url>/2018/04/electric-motors/</url>
      
        <content type="html"><![CDATA[<p>The numbers on brushless electric motors vary so much between manufacturers that they are pretty meaningless. The only real way to compare motors is on:</p><ul><li>Stator dimensions (should be specified as diameter, length or height)</li><li>When comparing motors of the same or almost the same Kv, look at the Rm (resistance). That determines how much heat will be generated. Copper loss = Rm x amps².<ul><li>I² x Rm = copper loss (Watts)</li><li>Iron loss = Io x volts (Watts) ~ Io is no-load current.</li></ul></li></ul><p>It doesn’t matter if one motor is fat and short and the other longer and thinner. If the Kv is the same, the torque per amp will be the same.</p><p><img src="/d/electric-motors/electric-1.jpg" alt="Brushless electric"></p><h3 id="Software-Utilities"><a href="#Software-Utilities" class="headerlink" title="Software Utilities"></a>Software Utilities</h3><ul><li><a href="https://www.ecalc.ch/">https://www.ecalc.ch/</a></li><li><a href="https://www.scorpionsystem.com/support/downloads/">https://www.scorpionsystem.com/support/downloads/</a></li></ul><p>Below are the motors I’ve used/researched and information about their possible uses:</p><h3 id="Turnigy-NTM-Prop-Drive-3536-1400KV"><a href="#Turnigy-NTM-Prop-Drive-3536-1400KV" class="headerlink" title="Turnigy NTM Prop Drive 3536 1400KV"></a>Turnigy NTM Prop Drive 3536 1400KV</h3><p><a href="https://www.youtube.com/watch?v=2fv41XSx4YM&t=4s">Experimental Airlines</a> refer to this motor as ‘the powerhouse’</p><p><img src="/d/electric-motors/electric-2.jpg" alt="Prop Drive 3536 1400KV"></p><h3 id="Small-stick-1100-span"><a href="#Small-stick-1100-span" class="headerlink" title="Small stick (1100 span)"></a>Small stick (1100 span)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Turnigy aerodrive d3542/4 1450kv</span><br><span class="line">70 amp / 3 to 5 cell</span><br><span class="line">10x6 (52 amp draw, 580 watts)</span><br><span class="line">10x7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Batteries and Chargers</title>
      <link href="/2018/04/batteries-and-chargers/"/>
      <url>/2018/04/batteries-and-chargers/</url>
      
        <content type="html"><![CDATA[<h3 id="Lithium-Polymer"><a href="#Lithium-Polymer" class="headerlink" title="Lithium Polymer"></a>Lithium Polymer</h3><p><em>Aka Lipo</em></p><ul><li>Typically a full charge is 4.2v per cell</li><li>Avoid discharge below 3.4v per cell</li><li>Storage voltage is 3.70v to 3.85v per cell</li><li>Store at room temperature</li></ul><p>Storing in a fridge does slow the chemical reaction taking place which can prolong lifespan, however taking a battery out from a cold fridge can cause condensation to occur on the inside of the battery. This can make it short.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://thedronegirl.com/2015/02/07/lipo-battery/">http://thedronegirl.com/2015/02/07/lipo-battery/</a></li><li><a href="https://www.rcgroups.com/forums/showthread.php?1436092-Lipo-storage-voltage">https://www.rcgroups.com/forums/showthread.php?1436092-Lipo-storage-voltage</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Model tools and spares</title>
      <link href="/2018/04/model-tools-and-spares/"/>
      <url>/2018/04/model-tools-and-spares/</url>
      
        <content type="html"><![CDATA[<p>I can never remember the names of a lot of these things and I don’t like bothering domain experts with the same question just because I was too lazy to make my own notes.</p><h3 id="Power-analyser"><a href="#Power-analyser" class="headerlink" title="Power analyser"></a>Power analyser</h3><p><code>HK 010 power analyser</code> - this tool can measure the amp draw and watt output underload.</p><h3 id="Blind-Nut-Nutsert"><a href="#Blind-Nut-Nutsert" class="headerlink" title="Blind Nut / Nutsert"></a>Blind Nut / Nutsert</h3><p>This gives your cap-screw or bolt a solid thread to screw into – useful for mounting motors and to attach a wing to the fuselage with nylon wing bolts.</p><p><img src="/d/model-tools-and-spares/blind-nut.png" alt="Blind Nut / Nutsert"></p><h3 id="Razor-Saw"><a href="#Razor-Saw" class="headerlink" title="Razor Saw"></a>Razor Saw</h3><p>This saw has many teeth and gives a nice fine cut, helpful when cutting notches into ribs for spars / stringers. Ive also seen it called a mitre saw (I think its because it can be used with a mitrebox to hold the material you are cutting)</p><p>54 or 42 Teeth Per Inch (TPI) will give a nice clean cut.</p><p><img src="/d/model-tools-and-spares/razor-saw.jpg" alt="Razor Saw"></p><h3 id="Nylon-Steel-Landing-Gear-Staps"><a href="#Nylon-Steel-Landing-Gear-Staps" class="headerlink" title="Nylon/Steel Landing Gear Staps"></a>Nylon/Steel Landing Gear Staps</h3><p><img src="/d/model-tools-and-spares/wire-landing-1.jpg" alt="Landing Gear Staps"></p><p><img src="/d/model-tools-and-spares/wire-landing-2.jpg" alt="Landing Gear Staps"></p><h3 id="Wire-landing-Gear-Small-push-rods"><a href="#Wire-landing-Gear-Small-push-rods" class="headerlink" title="Wire landing Gear / Small push rods"></a>Wire landing Gear / Small push rods</h3><p>This is called Piano wire / music wire also known as <a href="https://en.wikipedia.org/wiki/Spring_steel">spring steel</a></p><p>Small models (25 size and under) would use 1mm (0.39 inch) as pushrods and 2mm for landing gear</p><p>40 to 60 size you can use 5 or 6 mm for landing gear.</p><p><img src="/d/model-tools-and-spares/pianno-wire.jpg" alt="Pianno Wire"></p><h3 id="Drill-amp-Tap"><a href="#Drill-amp-Tap" class="headerlink" title="Drill &amp; Tap"></a>Drill &amp; Tap</h3><p><strong>10</strong>–<strong>32</strong> threads are historically the original rack screw type. The term <strong>10</strong>–<strong>32</strong> comes from Unified and American Screw Threads for Bolts, Nuts, and Machine Screws standards published by ANSI B1.1-1974. The number “<strong>10</strong>” is simply a size designator with no numerical <strong>meaning</strong>. The number “<strong>32</strong>” refers to <strong>32</strong> threads per inch.</p><p>Steel tap and drill bit for preparing holes to accept bolts</p><p><img src="/d/model-tools-and-spares/tap.jpg" alt="Drill &amp; Tap"></p><h4 id="Reamer"><a href="#Reamer" class="headerlink" title="Reamer"></a>Reamer</h4><p>I’ve used these to ream a new prop hole bigger to suite an engine.</p><p><img src="/d/model-tools-and-spares/reamer-1.jpg" alt="Great Planes Precision Prop Reamer – (5/16″ &amp; 3/8″)"></p><p><img src="/d/model-tools-and-spares/reamer-2.jpg" alt="General purpose reamer, also used with rc car bodys"></p><h3 id="Pin-Vice"><a href="#Pin-Vice" class="headerlink" title="Pin Vice"></a>Pin Vice</h3><p>I have used these to manually (by hand) drill holes in models.</p><p><img src="/d/model-tools-and-spares/pin-vice.jpg" alt="Pin vice"></p><h4 id="Laser-Cutting"><a href="#Laser-Cutting" class="headerlink" title="Laser Cutting"></a>Laser Cutting</h4><p>Max Cutting Area 1200x900mm, materials would be 3,4mm ply and balsa</p><h4 id="Wood-Glue"><a href="#Wood-Glue" class="headerlink" title="Wood Glue"></a>Wood Glue</h4><p>This is the recommended glue for all models.</p><p><img src="/d/model-tools-and-spares/wood-glue.jpg" alt="Wood Glue"></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><ul><li><a href="https://www.firebrandaerorc.co.nz/ignition-glow-system-items">Sullivan On-board Glow Driver</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT Commands</title>
      <link href="/2018/04/git-commands/"/>
      <url>/2018/04/git-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .                              ~ add all changes</span><br><span class="line">git add foo\bar\baz.md                 ~ add just one file</span><br><span class="line"></span><br><span class="line">git reset                              ~ un-stage any files added</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-add">https://git-scm.com/docs/git-add</a></li><li><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch                             ~ display the current local branches</span><br><span class="line">git branch -1                          ~ all branches including pulled remotes</span><br><span class="line">git branch -d cool-new-branch          ~ delete local branch (to delete on the server see PUSH)</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-branch">https://git-scm.com/docs/git-branch</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging</a></li></ul><h3 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b cool-new-branch        ~ create new branch and switch to it </span><br><span class="line">git checkout cool-branch-name          ~ Switch to another branch</span><br><span class="line">git checkout -- *                      ~ Clear tracked modified files not committed</span><br><span class="line">git checkout -- foo/bar/file.cs        ~ Clear tracked modified `file.cs` not committed</span><br><span class="line">git checkout [revision]                ~ Fall back to revision (run &#x27;git log&#x27; to see commits)</span><br><span class="line">                                       ~ run `git switch -` to revert the head detachment</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-checkout">https://git-scm.com/docs/git-checkout</a> </li></ul><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clean -d --dry-run                 ~ Purge untracked files/dirs</span><br><span class="line">git clean -d -f                        ~ -f is required if clean.requireForce is not set to false</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-clean">https://git-scm.com/docs/git-clean</a></li></ul><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/carlpaton/RedisAdministrator.git</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-clone">https://git-scm.com/docs/git-clone</a></li></ul><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list                                                                                                        ~ useful things include: user.name= user.email=</span><br><span class="line">git config --global http.sslCAinfo &quot;c:/data/certs/certname.crt&quot;                                                          ~ update to self signed cert</span><br><span class="line">git config --global http.sslCAInfo &quot;C:\Program Files\Git\etc\pki\ca-trust\extracted\openssl\ca-bundle.trust.crt&quot;         ~ update to default cert</span><br></pre></td></tr></table></figure><h4 id="Personal-access-tokens"><a href="#Personal-access-tokens" class="headerlink" title="Personal access tokens"></a>Personal access tokens</h4><p>Generate Personal access tokens from GIT UI under <code>Settings</code> - <code>Developer settings</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store                  ~ he “store” mode saves the credentials to a plain-text file on disk, and they never expire.</span><br></pre></td></tr></table></figure><p>Then in a git repo make some changes and authenticate with the token instead of your password.</p><p>It will now be saved.</p><ul><li><a href="https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage">https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage</a></li><li><a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config</a></li></ul><h4 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h4><p>If you’re on a Windows machine, set it to true — this converts LF endings into CRLF when you check out code.</p><p>In <a href="/2019/09/ide-visual-studio-code/">Visual Studio Code</a> you can add the extension <code>render line endings</code> to see these characters.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf true</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration</a></li></ul><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p>Commit local changes after <code>add</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;commit message&quot;</span><br><span class="line">git commit -a                                      ~ automatically stage files that have been modified and deleted (excludes new files)</span><br></pre></td></tr></table></figure><p>If you are pushing to your own branch and made a silly mistake such a typo, this will create noise in the commits to fix, to get around this you can <code>amend</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ... hack hack hack ...</span><br><span class="line">git add .</span><br><span class="line">git commit --amend</span><br><span class="line">git push origin abc-123-feature-branch-name -f</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-commit">https://git-scm.com/docs/git-commit</a></li></ul><h3 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h3><p>View changes, press <code>Q</code> to quit.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-diff">https://git-scm.com/docs/git-diff</a></li></ul><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log -5                                   ~ shows last 5 logs</span><br><span class="line">git log --graph --decorate --oneline --all   ~ shows all log nicely</span><br><span class="line">git log --walk-reflogs cool-branch-name      ~ show logs for your branch only (Kindof works)            </span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-log">https://git-scm.com/docs/git-log</a></li></ul><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><ul><li><a href="https://git-scm.com/docs/git-merge">https://git-scm.com/docs/git-merge</a></li></ul><h4 id="No-remotes-Trunk-Based"><a href="#No-remotes-Trunk-Based" class="headerlink" title="No remotes (Trunk Based)"></a>No remotes (Trunk Based)</h4><p>If you need to merge <code>master</code> into your dev branch and you are not using remotes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br><span class="line">git checkout my-sweet-branch</span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>Now go resolve any conflicts manually, these files are marked as modified but not commited from the command above.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>The simplest way to do this is with VS Code.<br>Once conflicts are resolved then <code>add</code>, <code>commit</code> and <code>push</code>.</p><h4 id="With-remotes-Gitflow"><a href="#With-remotes-Gitflow" class="headerlink" title="With remotes (Gitflow)"></a>With remotes (Gitflow)</h4><p>If you need to update your fork <code>origin</code> with the latest changes from <code>upstream</code></p><p>From your local fork</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git fetch upstream</span><br><span class="line">git merge upstream/master</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull                               ~ Pull anything new from remote server (for origin)</span><br><span class="line">git pull upstream master               ~ Pull anything new from the remote name (upstream) on branch master</span><br><span class="line">git pull upstream master --rebase      ~ Rebase the current branch on top of the upstream branch after fetching.</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-pull">https://git-scm.com/docs/git-pull</a></li></ul><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push                               ~ Push staged and committed to remote (for origin)</span><br><span class="line">git push -d origin cool-branch-name    ~ Push and delete the branch</span><br><span class="line">git push origin master                 ~ Push changes to origin, you will do this if you have run `git pull upstream master`</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-push">https://git-scm.com/docs/git-push</a></li></ul><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p>Reapply commits on top of another base tip, normally master :D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master                   ~ switch to master branch</span><br><span class="line">git pull upstream master --rebase     ~ rebase your copy of master with any changes in `upstream`</span><br><span class="line">git checkout cool-branch-name         ~ switch to feature branch</span><br><span class="line">git rebase master                     ~ rebase your feature branch with master</span><br><span class="line">git push origin cool-branch-name -f   ~ when pushing you may need to force push if you are now changing history on pushed branches </span><br></pre></td></tr></table></figure><p>If there are conflicts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status                            ~ to see which files are unmerged</span><br><span class="line"># ... resolve conflict</span><br><span class="line">git add &lt;conflicted_files&gt;            ~ mark files as resolved, you could also `rm` if you dont want the file</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p>If this are totally sideways run <code>git rebase --abort</code></p><ul><li><a href="https://git-scm.com/docs/git-rebase">https://git-scm.com/docs/git-rebase</a></li></ul><h3 id="Restore"><a href="#Restore" class="headerlink" title="Restore"></a>Restore</h3><p>Restore working tree files (changes or deletes), simliar to <code>git clean -d -f</code> and <code>git checkout -- *</code> above.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore .</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-restore">https://git-scm.com/docs/git-restore</a></li></ul><h4 id="Update-commit-history"><a href="#Update-commit-history" class="headerlink" title="Update commit history"></a>Update commit history</h4><p>Change the commit message of older commits.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2               </span><br></pre></td></tr></table></figure><p>Displays the last 2 commit message in your configured editor, change <code>pick</code> for the line you wish to update to be <code>reword</code>, save and close.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 0e0e0e0 last commit</span><br><span class="line">pick 0e0e0e1 first commit</span><br></pre></td></tr></table></figure><p>That commit message will then open with the option for you to change it from <code>first commit</code> to <code>sweet first commit</code>. You then need to force the changes to the remote repository.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure><h3 id="Rm"><a href="#Rm" class="headerlink" title="Rm"></a>Rm</h3><p>If you have a file that is tracked by source control and you need it removed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm &#x27;foo/.vs/foo/v16/.suo&#x27;                 ~ after doing this update .gitignore to include *.suo</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;remove .suo tracking&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-rm">https://git-scm.com/docs/git-rm</a></li></ul><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p>You can jump any amount of heads below, example <code>HEAD~2</code> will jump back 2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1 --mixed              ~ Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated.</span><br><span class="line">git reset head --hard                 ~ clear the local changes that were reset above (that are now un-commited)</span><br><span class="line">git push origin cool-branch-name -f   ~ forces the changes you did with the above resets to origin</span><br></pre></td></tr></table></figure><p>This was useful when I had run <code>git commit --amend</code> on the wrong head</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD@&#123;1&#125;             ~ Undo git commit amend</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><h3 id="Reset-2"><a href="#Reset-2" class="headerlink" title="Reset 2"></a>Reset 2</h3><p>Revert to a previous commit and trash whats local</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 88039ae                    ~ revert to 88039ae</span><br><span class="line">git push origin cool-branch-name -f         ~ you can then update the remote repository</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-reset">https://git-scm.com/docs/git-reset</a></li></ul><h3 id="Remotes"><a href="#Remotes" class="headerlink" title="Remotes"></a>Remotes</h3><p><a href="https://www.git-tower.com/learn/git/glossary/remote#:~:text=A%20remote%20in%20Git%20is,of%20the%20project's%20current%20state.">A remote in Git is a common repository that all team members use to exchange their changes</a>. Generally the repository you forked from is called <code>upstream</code> and your copy in your namespace ie: <code>carlpaton</code> is the <code>origin</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                                                     ~ display remotes</span><br></pre></td></tr></table></figure><p>If you forked from for example from <a href="https://github.com/bradvin/SOLID">https://github.com/bradvin/SOLID</a> to your own repository  <a href="https://github.com/carlpaton/SOLID">https://github.com/carlpaton/SOLID</a> then <code>bradvin/SOLID</code> is <code>upstream</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/bradvin/SOLID.git</span><br></pre></td></tr></table></figure><p>You can then pull from this <code>upstream</code> source and push the changes to your own fork. (See push and pull above)</p><p>If you want to change your remote url you can use <code>git remote set-url</code>. I needed to do this when a code base was changed from gitflow (so with a fork) to trunk based (so no form)</p><p>So before the change</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">origin        https://github.com/carlpaton/SOLID (fetch)</span><br><span class="line">origin        https://github.com/carlpaton/SOLID (push)</span><br><span class="line">upstream      https://github.com/bradvin/SOLID (fetch)</span><br><span class="line">upstream      https://github.com/bradvin/SOLID (push)</span><br></pre></td></tr></table></figure><p>Then run the command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/bradvin/SOLID.git</span><br></pre></td></tr></table></figure><p>So now its the same for <code>origin</code> and <code>upstream</code> which means I will then just branch from master in <code>origin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">origin        https://github.com/bradvin/SOLID (fetch)</span><br><span class="line">origin        https://github.com/bradvin/SOLID (push)</span><br><span class="line">upstream      https://github.com/bradvin/SOLID (fetch)</span><br><span class="line">upstream      https://github.com/bradvin/SOLID (push)</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-remote">https://git-scm.com/docs/git-remote</a></li></ul><h3 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h3><p>Show local changes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-status">https://git-scm.com/docs/git-status</a></li></ul><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><p>Lets you stash local changes, keep them local and pop them back if you want them again</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash                    ~ stash anything that is not committed</span><br><span class="line">git stash list               ~ list stack-order of stashed file changes</span><br><span class="line">git stash apply 0            ~ 0,1,2 ect (on index)</span><br><span class="line">                             ~ Then just discard if you want to use another stash</span><br><span class="line"></span><br><span class="line">git stash pop                ~ pop stashed items back (at index 0)</span><br><span class="line">git stash drop               ~ discard the changes from top of stash stack</span><br></pre></td></tr></table></figure><ul><li><a href="https://git-scm.com/docs/git-stash">https://git-scm.com/docs/git-stash</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://git-scm.com/docs/">https://git-scm.com/docs/</a></li><li><a href="https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/">https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/</a></li><li><a href="https://education.github.com/git-cheat-sheet-education.pdf">https://education.github.com/git-cheat-sheet-education.pdf</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resolving GIT Merge Conflicts</title>
      <link href="/2018/04/resolving-git-merge-conflicts/"/>
      <url>/2018/04/resolving-git-merge-conflicts/</url>
      
        <content type="html"><![CDATA[<p>Merge conflicts are inevitable, they can easily be resolved using free tools such as <a href="https://download.tortoisegit.org/tgit/2.3.0.0/">Tortoise Git</a> and <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p><p>Example: Merging feature-branch → sprint-branch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout sprint-branch</span><br><span class="line">git fetch origin</span><br><span class="line">git merge origin/feature-branch</span><br><span class="line"></span><br><span class="line">(now resolve conflicts in VS Code)</span><br><span class="line">~ VS Code displays the conflicts for you and give you the option to select what you want.</span><br><span class="line">~ Sweet! Now save local file.</span><br><span class="line"></span><br><span class="line">git push origin sprint-branch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convert List to string with delimiter</title>
      <link href="/2018/04/convert-list-to-string-with-delimiter/"/>
      <url>/2018/04/convert-list-to-string-with-delimiter/</url>
      
        <content type="html"><![CDATA[<p><strong>*Convert List, string.</strong> Think of a sentence. It contains some words. We could represent a sentence as a single string—one with spaces. But a list of strings (of words) is sometimes better.*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EG1</span><br><span class="line">var dogCsv = string.Join(&quot;,&quot;, dogs.ToArray());</span><br><span class="line"></span><br><span class="line">EG2</span><br><span class="line">var names = new List&lt;string&gt;() &#123; &quot;John&quot;, &quot;Anna&quot;, &quot;Monica&quot; &#125;; </span><br><span class="line">var result = String.Join(&quot;, &quot;, names.ToArray());</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.dotnetperls.com/convert-list-string">https://www.dotnetperls.com/convert-list-string</a></li><li><a href="https://stackoverflow.com/questions/3575029/c-sharp-liststring-to-string-with-delimiter">https://stackoverflow.com/questions/3575029/c-sharp-liststring-to-string-with-delimiter</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCRUM, a subset of AGILE Software Development</title>
      <link href="/2018/04/scrum-a-subset-of-agile-software-development/"/>
      <url>/2018/04/scrum-a-subset-of-agile-software-development/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/scrum-a-subset/scrum-1.jpeg" alt="SCRUM, a subset of AGILE Software Development"></p><p>The Basic Life Cycle of any project generally follows the following steps: Requirements -&gt; Analysis -&gt; Design -&gt; Code -&gt; Test. This is the waterfall model which most companies are following without even knowing it is indeed a documented methodology.</p><p>Many software developers don’t even document their code, this is not an assumption on my part but rather an observation from working with several developers on separate projects though my career and also snorkeling though code examples online.</p><p>Generally if you ask a developer “What is software testing?” you will receive comments like “My code compiled… what more do you want from me?” or “Dude, I wrote some unit tests…” or even worse “I think we did some Agile”</p><p>Besides the last example, for general small projects this is normally enough, the requirements may have been scribbled on a piece of paper or white board and 5 minutes later the developer was frantically mashing his keyboard to meet a ridiculous deadline and building a solution he doesn’t really understand. For many of us this is the reality however you are not working smart, you will eventually burn out and your software will not be something you can be proud of.</p><p>If this sounds like your organization then you need to change. The first step is to take a step back and try understand what the software development life cycle is, how you are already managing it in your business and how you can improve things.</p><p><img src="/d/scrum-a-subset/scrum-2.jpeg" alt="Oh boy"></p><p>The seven most expensive words in business: are “<a href="https://www.linkedin.com/feed/update/urn:li:activity:6257351448409972736/">We have always done it that way.</a>”</p><p>The following is my understanding of SCRUM, a subset of AGILE software development methodologies to help promote a disciplined and collaborative working environment within a team.</p><h3 id="Stake-Holders"><a href="#Stake-Holders" class="headerlink" title="Stake Holders"></a>Stake Holders</h3><p>Stake holders in this context refers to anybody that the project or software touches. This includes Business owner(s), Project Manager(s), Development team even the end users.</p><h3 id="Sprint-Planning-and-Defining-Acceptance-Criteria"><a href="#Sprint-Planning-and-Defining-Acceptance-Criteria" class="headerlink" title="Sprint Planning and Defining Acceptance Criteria"></a>Sprint Planning and Defining Acceptance Criteria</h3><p>Few developers have the privilege to start a brand new project with a well-documented specification, for the bulk of us we will work on existing systems with a product backlog of features and known bugs. This is not a bad thing, detailed specification documents are not a requirement for quality software. Few companies can afford to document software as well as, <a href="https://msdn.microsoft.com/en-us/library/ms228593.aspx">for example the C# Language Specification</a>.</p><p>At the sprint planning meeting items from the product backlog are prioritized and a select number of items are included in the sprint based on the size of the team. Your sprints should be two weeks long and each developer have at least 60 hours’ worth of work for that sprint. This is around 6 hours a day which takes into account interruptions and cognitive load, remember if you are working smart you don’t have to work that hard. Never over load your best staff with all the workload – its very bad management to punish a hard worker simply because they are good at their job. Rather share the load and try upskill the rest of the team. This way after a few sprints you will a team of skilled staff.</p><p>The hours per sprint have to be attainable, if developers have to work overtime to meet the sprint deadline you need to go back to the drawing board in your planning meeting and probably acceptance criteria. Rather let them deliver quality code than poorly planned and buggy software.</p><p>The software does not have to be release at the end of each sprint, several sprints can make up a single release.</p><p>Before you begin doing anything your tasks requirements or “Acceptance Criteria” needs to as clear as possible written in plain English using the Ubiquitous Language for references as defined by your business. This should preferably be done by the Project Manager with input from all stakeholders at the sprint planning meeting.</p><p>The sprint planning meeting can unfortunately take up an entire day but as your team matures this meeting will shorten and the rewards will be very clear.</p><p>Once the Acceptance Criteria is defined this is what will be built by the developer, tested by the Quality Assurance testers, Tested by Business at User Acceptance and released into live. It cannot change during the sprint as this will cause development creep which is not agile.</p><h3 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h3><p>A story is the feature or module that the developer is going to build. It would include the acceptance criteria along with a brief description of the feature or bug fix. It’s a good idea to include testing data for both the developers and Quality Assurance teams – remember they may not have domain knowledge of the business / underlying business data so try give them all the information up front.</p><p>Example: Testing data can include database id’s to query, names to lookup on, date ranges ect. It will be determined by the story.</p><h3 id="Story-Points"><a href="#Story-Points" class="headerlink" title="Story Points"></a>Story Points</h3><p>Story points is an interesting measurement as it is determined by the team at sprint planning and is based on their understanding of the story, the team being all stake holders. Everybody has their say and often your story points can change based on others input when they motivate their “choice”.</p><blockquote><p><strong>*Story point</strong> is an arbitrary measure used by Scrum teams. This is used to measure the effort required to implement a <strong>story</strong>. In simple terms its a number that tells the team how hard the <strong>story</strong> is. Hard could be related to complexity, Unknowns and effort.*</p></blockquote><p>I have found that using the <a href="https://www.livescience.com/37470-fibonacci-sequence.html">fibonacci sequence</a> on que cards speeds up this process as it reduces guess work.</p><p>Printing que cards is rather silly as there are several apps for your smartphone that allow you to chooses these numbers. Example: <a href="https://play.google.com/store/apps/details?id=artarmin.android.scrum.poker&hl=en">Scrum Poker Cards (Agile)</a> by <a href="https://play.google.com/store/apps/dev?id=9135165741484938670&hl=en">artArmin</a></p><p>The format is very simple:</p><p><strong>Round 1</strong> – the team will be briefed on the story, everybody gets a vote using their que cards. The highest and lowest numbers need to then motivate their choice. For example a low point of 1 would then need to be motivated why they feel it’s a simple change or fix. Likewise a higher point of say 40 would need to motivate why the feel this is a difficult change or fix. This is extremely valuable as the team will learn from each other – business would understand the code domain better and developers will gain knowledge of the business domain.</p><p><strong>Round 2</strong> – repeat the votes based on what you have just heard. It’s important to take this seriously and not just vote random numbers. If you don’t have knowledge of the area rather abstain or better ask questions. Remember the only stupid question is the one you don’t ask.</p><p>The majority vote then carries and that is then used as the story point score for that story.</p><h3 id="Stand-Up"><a href="#Stand-Up" class="headerlink" title="Stand-Up!"></a>Stand-Up!</h3><p><em>WHO: Scrum team</em></p><p>Every day, preferably in the mornings the team need to have a stand-up, they each need to answer and ask some simple questions:</p><ul><li>What did you work on yesterday?</li><li>What are you working on today?</li><li>What obstacles are in your way?</li></ul><p>This will help the team work together and also assure business that their needs are indeed being worked on. All stakeholders need to be present or at very least have a proxy present to voice their concerns / progress ect.</p><h3 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h3><p>During development it is a good idea to produce release notes and send them out via email once a day, they don’t have to be overly complicated. A simple table showing the reference number linking back to your project tracking system, the story headline and its location or who its assigned to.</p><p><img src="/d/scrum-a-subset/scrum-3.jpeg" alt="Release Notes"></p><h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><p>This is helpful for managers to motivate for things like incentives, new team members or to simply justify a team’s size or even existence.</p><blockquote><p><em>The metric is calculated by reviewing work the team successfully completed during previous sprints; for example, if the team completed 10 stories during a two-week *<em>sprint</em></em> and each story was worth 3 story points, then the team’s <strong>velocity</strong> is 30 story points per <strong>sprint</strong>.*</p></blockquote><p>It also helps identify mental fatigue or when it’s time to move developers into another team or role.</p><h3 id="Sprint-Retrospective"><a href="#Sprint-Retrospective" class="headerlink" title="Sprint Retrospective"></a>Sprint Retrospective</h3><p><em>WHO: Scrum team</em></p><p>This is such an important meeting as it is an open form for the stakeholders to express how they felt the past sprint went. Simple questions to ask include:</p><ul><li>What worked in the sprint?</li><li>What did not work?</li><li>How can we improve for the next sprint?</li></ul><p>The idea is never to ostracize a staff member, if somebody constantly is not pulling their weight it is for their managers to deal with. Never judge a peer when they drop the ball, judge them by how quickly they pick it up again and run with the task.</p><h3 id="Sprint-Review"><a href="#Sprint-Review" class="headerlink" title="Sprint Review"></a>Sprint Review</h3><p><em>WHO: Scrum team &amp; Stakeholders</em></p><p>Opportunity for</p><ul><li>Product Owner to showcase what the team has been working on, highlight risks, what we will look at next and time lines in this quarter and the next quarter. This sets expectations.</li><li>Designers to showcase their visions and alignment to company wide copy.</li><li>Developers to demo technical things or functional product slices.</li></ul><p>Its common for large companys to combine these reviews by pods/squads that serve a common slice of the business. </p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Agile teams are constantly evolving, when something doesn’t work try change it for the better. This is a mind-set that needs to be achieved.</p><p>Research what other teams are doing but never try implement something for the sake of it – if your team is performing well even with antiquated techniques it’s not always a good idea to change things.</p><p>Never forget <strong>Product</strong> is a Team sport.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.agilenutshell.com/scrum">http://www.agilenutshell.com/scrum</a></li><li><a href="http://whatis.techtarget.com/definition/Agile-velocity">http://whatis.techtarget.com/definition/Agile-velocity</a></li><li><a href="https://agilefaq.wordpress.com/2007/11/13/what-is-a-story-point/">https://agilefaq.wordpress.com/2007/11/13/what-is-a-story-point/</a></li><li><a href="http://www.livescience.com/37470-fibonacci-sequence.html">http://www.livescience.com/37470-fibonacci-sequence.html</a></li><li><a href="https://www.cprime.com/resources/what-is-agile-what-is-scrum/">https://www.cprime.com/resources/what-is-agile-what-is-scrum/</a></li><li><a href="https://www.scrumalliance.org/why-scrum">https://www.scrumalliance.org/why-scrum</a></li><li><a href="http://www.tamingdata.com/2010/07/08/the-project-management-tree-swing-cartoon-past-and-present/">http://www.tamingdata.com/2010/07/08/the-project-management-tree-swing-cartoon-past-and-present/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stopwatch</title>
      <link href="/2018/04/stopwatch/"/>
      <url>/2018/04/stopwatch/</url>
      
        <content type="html"><![CDATA[<p>Stopwatch code to time some other code, the namespace is <em>System.Diagnostics</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var sw = new Stopwatch();</span><br><span class="line">sw.Start();</span><br></pre></td></tr></table></figure><p>Now allow your code to execute, you can test this with a loop or wait</p><p>Then stop and display the time taken:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sw.Stop();</span><br><span class="line">Console.WriteLine(sw.Elapsed);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Abstract Class</title>
      <link href="/2018/04/abstract-classes/"/>
      <url>/2018/04/abstract-classes/</url>
      
        <content type="html"><![CDATA[<p>An abstract class cannot be instantiated. The purpose of an abstract class is to provide a common definition of a base class that multiple derived classes can share. For example, a class library may define an abstract class that is used as a parameter to many of its functions, and require programmers using that library to provide their own implementation of the class by creating a derived class.</p><h3 id="How-does-an-Interface-differ-from-an-Abstract-Class"><a href="#How-does-an-Interface-differ-from-an-Abstract-Class" class="headerlink" title="How does an Interface differ from an Abstract Class?"></a>How does an Interface differ from an Abstract Class?</h3><p>An <a href="/2018/04/c-sharp-interfaces/">interface</a> is not a class, it has no implementation where an abstract class does have implementation that the inheriting class must use.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members</a></li><li><a href="https://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class">https://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add appsettings.json to a .Net Core Console Application</title>
      <link href="/2018/04/adding-appsettings-json-to-a-net-core-console-application/"/>
      <url>/2018/04/adding-appsettings-json-to-a-net-core-console-application/</url>
      
        <content type="html"><![CDATA[<p>Firstly add the appsettings.json file to the solution</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;AppSettings&quot;: &#123;</span><br><span class="line">   &quot;Key1&quot;: &quot;This is the value for Key1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set the .json file to copy to the output directory (this is the bin folder)</p><p><img src="/d/adding-appsettings-json-to-a-net-core-console-application/appsettings-1.png" alt="Copy if newer"></p><p>Add Microsoft.Extensions.Configuration.Json from Nuget</p><p><img src="/d/adding-appsettings-json-to-a-net-core-console-application/appsettings-2.png" alt="Microsoft.Extensions.Configuration.Json"></p><p>The read the file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IConfiguration config = new ConfigurationBuilder()</span><br><span class="line"> .AddJsonFile(&quot;appsettings.json&quot;, true, true)</span><br><span class="line"> .Build();</span><br><span class="line"></span><br><span class="line">var key1 = config[&quot;AppSettings:Key1&quot;];</span><br><span class="line">Console.WriteLine(key1);</span><br></pre></td></tr></table></figure><p>Run the code!</p><p><img src="/d/adding-appsettings-json-to-a-net-core-console-application/appsettings-3.png" alt="Run the code"></p>]]></content>
      
      
      
        <tags>
            
            <tag> net core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Docker on Linux</title>
      <link href="/2018/04/setup-docker-on-linux/"/>
      <url>/2018/04/setup-docker-on-linux/</url>
      
        <content type="html"><![CDATA[<p>NOTE – if you are going to run <a href="/2018/04/setup-kubernetes-local-machine-solutions/">kubernetes</a> then you will need Hyper-V which will fight with VMWare, rather use <a href="/2018/03/virtual-box/">virtual-box</a>.</p><p>Steps to install #docker on Ubuntu</p><ol><li>Download <a href="/2018/04/vmware-workstation-player/">VMWare Workstation Player</a></li><li>Download linux ISO<ol><li>ubuntu-17.10.1-desktop-amd64.iso</li><li>ubuntu-17.10.1-server-amd64.iso (GUIs face :D)</li></ol></li><li>Add to VMware-player<ol><li>(Docker VM) un/pw carl/carl</li><li>(PSQL VM) un/pw carl/carl</li></ol></li><li>After the install, allow Putty Session for remote management<ol><li><a href="http://linux-sys-adm.com/how-to-install-and-configure-ssh-on-ubuntu-server-14.04-lts-step-by-step/">How to install and configure SSH on Ubuntu (Server) 14.04 LTS Step-by-Step</a></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p><a href="https://help.ubuntu.com/lts/serverguide/ftp-server.html.en">** Also see other FTP Server Options **</a></p><ol start="5"><li><a href="/2018/04/putty/">Putty</a> to the server on the IP from the above command, then run the following commands</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#(1) Set up the docker repository</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#(2) Install Docker CE</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#(3) Verify the installation</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>If you have different flavors you may need to add different repository’s as seen below.</p><h3 id="Artful"><a href="#Artful" class="headerlink" title="Artful"></a>Artful</h3><p>If you are running ‘artful’ you will need to use this repository</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu artful stable&quot;</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic test&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><ul><li><a href="https://askubuntu.com/questions/1030179/package-docker-ce-has-no-installation-candidate-in-18-04">https://askubuntu.com/questions/1030179/package-docker-ce-has-no-installation-candidate-in-18-04</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Senior Telemaster</title>
      <link href="/2018/04/senior-telemaster/"/>
      <url>/2018/04/senior-telemaster/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/senior-telemaster/senior-telemaster.jpg" alt="Senior Telemaster"></p><p>Based on suggestions by domain experts the wing should be built with zero dihedral: <a href="https://en.wikipedia.org/wiki/Dihedral_(aeronautics)">https://en.wikipedia.org/wiki/Dihedral_(aeronautics)</a></p><p><em>Wing Construction (2 piece, removable spar):</em></p><ul><li>Wing ribs, stab ribs &amp; tips are 7~OF <a href="http://www.hangarone.co.nz/balsa-sheet-30mm-100mm-915mm-18-p-1746.html">3.0mm x 100mm x 915mm ~ 1/8”</a> </li><li>Spars are spruce/basswood 4~OF <a href="http://www.hangarone.co.nz/spruce-stick-95mm-125mm-915mm-38-12-p-5903.html">9.5mm x 12.5mm x 915mm (3/8” x 1/2”)</a></li><li>Center ribs where wings join 1~OF <a href="http://www.hangarone.co.nz/poplar-plywood-30mm-300mm-300mm-18-p-2942.html">Poplar Plywood 3.0mm x 300mm x 300mm (1/8”)</a></li></ul><p><em>Wing Construction (1 piece):</em></p><ul><li>Spar is balsa 1~OF <a href="http://www.hangarone.co.nz/balsa-sheet-125mm-100mm-915mm-12-p-1740.html">9.5mm x 12.7mm x 121.92cm (3/8” x 1/2” x 48”)</a> cut into strips 9.5mm x 19 mm (3/8” x 3/4”)</li></ul><p><em>Fuselage Construction:</em></p><ul><li>TBA</li></ul><h3 id="Size-Conversions"><a href="#Size-Conversions" class="headerlink" title="Size Conversions"></a>Size Conversions</h3><p><img src="/d/senior-telemaster/size-conversions.jpg" alt="Size Conversions, Inches upset me!"></p><h3 id="Downloaded-Plans-outerzone"><a href="#Downloaded-Plans-outerzone" class="headerlink" title="Downloaded Plans (outerzone)"></a>Downloaded Plans (outerzone)</h3><ul><li><a href="https://drive.google.com/open?id=1gU3CzGUCB7fbwq_sdx9nckl4LB4rSPy2">Senior_Telemaster_oz5044.pdf</a></li><li><a href="https://drive.google.com/open?id=1qr8jtGDC8Aga9VZYb8otmgPfkFqUfAr0">Senior_Telemaster_oz5044_review.pdf</a></li><li><a href="https://drive.google.com/open?id=1csRCnNbPrn07F1McOedZVvsDwcJVfU6L">Senior_Telemaster_oz5044_article.pdf</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.rcgroups.com/forums/showthread.php?1068781-senior-telemaster-2-piece-wing">https://www.rcgroups.com/forums/showthread.php?1068781-senior-telemaster-2-piece-wing</a></li><li><a href="https://outerzone.co.uk/plan_details.asp?ID=5044">https://outerzone.co.uk/plan_details.asp?ID=5044</a></li><li><a href="http://www.hangarone.co.nz/senior-telemaster-plan-94-span-60-size-by-alex-angel-p-6089.html">http://www.hangarone.co.nz/senior-telemaster-plan-94-span-60-size-by-alex-angel-p-6089.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wot 4</title>
      <link href="/2018/04/wot4/"/>
      <url>/2018/04/wot4/</url>
      
        <content type="html"><![CDATA[<ul><li>Wingspan 1205mm / 47.4’</li><li>Length 1050mm / 41’</li><li>3536 820kv motor with 40 amp ESC</li></ul><p><img src="/d/wot4/wot-1.jpg" alt="Wot4"></p><p><img src="/d/wot4/wot-2.jpg" alt="Wot4"></p><p><img src="/d/wot4/wot-3.jpg" alt="Wot4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> model airplanes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Enum</title>
      <link href="/2018/04/c-sharp-enum/"/>
      <url>/2018/04/c-sharp-enum/</url>
      
        <content type="html"><![CDATA[<h3 id="Enumeration-types"><a href="#Enumeration-types" class="headerlink" title="Enumeration types"></a>Enumeration types</h3><p>The <code>enum</code> keyword is used to declare an enumeration, a distinct type that consists of a set of named constants called the enumerator list.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static class GenericStatus</span><br><span class="line">&#123;</span><br><span class="line">   public enum GenStatusEnum</span><br><span class="line">   &#123;</span><br><span class="line">      Pending,</span><br><span class="line">      Approved,</span><br><span class="line">      Declined</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static string ReadStatus(int id)</span><br><span class="line">   &#123;</span><br><span class="line">      GenStatus s;</span><br><span class="line">      Enum.TryParse&lt;GenStatus&gt;(id.ToString(), out s);</span><br><span class="line">      return s.ToString();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum</a></li></ul><h3 id="Enumeration-types-as-bit-flags"><a href="#Enumeration-types-as-bit-flags" class="headerlink" title="Enumeration types as bit flags"></a>Enumeration types as bit flags</h3><ul><li><a href="https://github.com/carlpaton/EnumDemo">https://github.com/carlpaton/EnumDemo</a></li></ul><p>You can use an enumeration type to define bit flags</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace EnumDemo.Enum</span><br><span class="line">&#123;</span><br><span class="line">    [Flags]</span><br><span class="line">    public enum Days</span><br><span class="line">    &#123;</span><br><span class="line">        None = 0,</span><br><span class="line">        Sunday = 1,</span><br><span class="line">        Monday = 2,</span><br><span class="line">        Tuesday = 4,</span><br><span class="line">        Wednesday = 8,</span><br><span class="line">        Thursday = 16,</span><br><span class="line">        Friday = 32,</span><br><span class="line">        Saturday = 64</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You create a bit flags enum by applying the System.FlagsAttribute attribute and defining the values appropriately so that AND, OR, NOT and XOR <strong>bitwise operations</strong> can be performed on them.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using EnumDemo.Enum;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace EnumDemo</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // Initialize with two flags using bitwise OR.</span><br><span class="line">            var meetingDays = Days.Tuesday | Days.Thursday | Days.Friday;</span><br><span class="line">            Console.WriteLine($&quot;Meeting days are &#123;meetingDays&#125; with flag value &#123;(int)meetingDays&#125;&quot;);</span><br><span class="line">            // Meeting days are Tuesday, Thursday, Friday with flag value 52</span><br><span class="line"></span><br><span class="line">            // Toggle a flag using bitwise XOR, this will remove `Days.Tuesday` from `meetingDays`</span><br><span class="line">            meetingDays = meetingDays ^ Days.Tuesday;</span><br><span class="line">            Console.WriteLine($&quot;Meeting days are &#123;meetingDays&#125; with flag value &#123;(int)meetingDays&#125;&quot;);</span><br><span class="line">            // Meeting days are Thursday, Friday with flag value 48</span><br><span class="line"></span><br><span class="line">            // Test value of flags using bitwise AND, this is checking for the existance of `Days.Thursday` in `meetingDays`</span><br><span class="line">            bool test = (meetingDays &amp; Days.Thursday) == Days.Thursday;</span><br><span class="line">            Console.WriteLine($&quot;Thursday &#123;(test == true ? &quot;is&quot; : &quot;is not&quot;)&#125; a meeting day.&quot;);</span><br><span class="line">            // Thursday is a meeting day.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/enumeration-types#enumeration-types-as-bit-flags">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/enumeration-types#enumeration-types-as-bit-flags</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Interface</title>
      <link href="/2018/04/c-sharp-interfaces/"/>
      <url>/2018/04/c-sharp-interfaces/</url>
      
        <content type="html"><![CDATA[<p>An interface is a contract / empty shell containing only signatures of the methods or property’s the inheriting class must implement. The interface can’t do anything. It’s just a pattern.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Commands</title>
      <link href="/2018/04/docker-commands/"/>
      <url>/2018/04/docker-commands/</url>
      
        <content type="html"><![CDATA[<p>Prefix with sudo if the current user is not root (admin) ~ applicable to Linux environment.</p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker version ~ display version</span><br><span class="line">docker run hello-world ~ run hello-world test container</span><br><span class="line">docker logs [CONTAINER NAME] ~ works even if the container is stopped</span><br><span class="line">docker images</span><br><span class="line">docker ps –all ~ list containers</span><br><span class="line">docker network ls ~ list networks</span><br><span class="line"></span><br><span class="line">docker rm $(docker ps -a -q) ~ deletes all excited containers</span><br><span class="line">​first run sudo -i ~ switch to root</span><br></pre></td></tr></table></figure><h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p>Along with the linux memory usage command ~ sudo free -m you can also check each containers stats:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stats [CONTAINER NAME]</span><br><span class="line"></span><br><span class="line">(CTRL C to quit)</span><br></pre></td></tr></table></figure><h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><p>Copy from the logs dir to the host</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp [CONTAINER NAME]:/app/logs/ /home/carl/obfuscation/</span><br><span class="line">you can also specify the current dir with a period .</span><br></pre></td></tr></table></figure><p>Copy to container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp /path/on/host [CONTAINER NAME]:/path/on/container</span><br></pre></td></tr></table></figure><h3 id="EXEC-session-to-container"><a href="#EXEC-session-to-container" class="headerlink" title="EXEC session to container"></a>EXEC session to container</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it 279 sh (where 279 is the start of the container ID)</span><br></pre></td></tr></table></figure><ul><li><p>then you can PING [CONTAINER NAME] (note the container you ping needs to be on the same bridge, example golden-gate)</p></li><li><p>CRTL C ~ quit ping</p></li><li><p>CTRL PQ ~ quit EXEC session</p></li><li><p>Also see <a href="/2018/05/access-postgresql-database-command-line-terminal-in-a-container/">access-postgresql-database-command-line-terminal-in-a-container</a></p></li><li><p>For bash run</p><ul><li>sudo docker exec -it [CONTAINER-NAME] /bin/bash</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec compose-angular-web cat /etc/nginx/nginx.conf</span><br><span class="line">sudo docker exec compose-angular-web ls /usr/share/nginx/html</span><br></pre></td></tr></table></figure><h3 id="Interactive-processes-like-a-shell"><a href="#Interactive-processes-like-a-shell" class="headerlink" title="Interactive processes (like a shell)"></a>Interactive processes (like a shell)</h3><p>This was helpful when debugging pgDash when the container would not start and we needed to run in interactive mode, run from bash their command to start the app and then cat out the logs.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it –entrypoint /bin/bash pgdash_image    (note the – – before entrypoint)</span><br><span class="line">/usr/sbin/pgdashd</span><br><span class="line">cat /var/log/pgdash/pgdash.log</span><br></pre></td></tr></table></figure><p>&lt;* <a href="https://docs.docker.com/engine/reference/run/#operator-exclusive-options&gt;">https://docs.docker.com/engine/reference/run/#operator-exclusive-options&gt;</a></p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network connect golden-gate [CONTAINER NAME]</span><br><span class="line">sudo docker network connect bridge [CONTAINER NAME]</span><br><span class="line">sudo docker network disconnect golden-gate [CONTAINER NAME]</span><br></pre></td></tr></table></figure><h3 id="Inspect"><a href="#Inspect" class="headerlink" title="Inspect"></a>Inspect</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect [NETWORK NAME]</span><br><span class="line">docker container inspect [CONTAINER NAME]</span><br><span class="line">docker inspect -f “&#123;&#123; .NetworkSettings.Networks.nat.IPAddress &#125;&#125;” [CONTAINER NAME]</span><br><span class="line">~ shows its IP to get around the WinNAT plow</span><br></pre></td></tr></table></figure><h3 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br><span class="line">docker volume inspect my-vol</span><br><span class="line">sudo docker volume prune ~ deletes volumes not in use</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.docker.com/storage/volumes/">https://docs.docker.com/storage/volumes/</a></li></ul><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>Options are passed after commands, I can never rememeber what they all do :)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t                 ~ Name and optionally a tag in the ‘name:tag’ format</span><br><span class="line">                   ~ docker build -t docker101tutorial .</span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Statements</title>
      <link href="/2018/04/mysql-statements/"/>
      <url>/2018/04/mysql-statements/</url>
      
        <content type="html"><![CDATA[<ul><li>[identify-large-tables.sql](<a href="https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc">https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc</a> examples/identify-large-tables.sql)</li><li>[mysql.user.sql](<a href="https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc">https://github.com/carlpaton/SQLStatements/blob/master/mysql/misc</a> examples/mysql.user.sql)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Kubernetes Local-machine</title>
      <link href="/2018/04/setup-kubernetes-local-machine-solutions/"/>
      <url>/2018/04/setup-kubernetes-local-machine-solutions/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs/setup/learning-environment/minikube/">Minikube</a> is the recommended method for creating a local, single-node Kubernetes cluster for development and testing. Setup is completely automated and doesn’t require a cloud provider account.</p><h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><ol><li>Enable Hyper V in your BIOS and turn on the windows feature ‘Hyper-V’<ol><li><a href="https://docs.microsoft.com/en-gb/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v">Also see: Install Hyper-V on Windows 10</a></li></ol></li><li>Install <a href="/2018/03/chocolatey/">chocolatey</a> package manager</li><li>Install <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">choco install kubernetes-cli</span><br><span class="line">kubectl version</span><br><span class="line">cd C:\users\Carl (where Carl is your home dir)</span><br><span class="line">mkdir .kube</span><br><span class="line">cd .kube</span><br><span class="line">New-Item config -type file</span><br></pre></td></tr></table></figure><ol start="4"><li>Install <ol><li>minikube</li></ol></li><li>At the time of writing this the latest <a href="https://github.com/kubernetes/minikube/releases/tag/v0.28.0">version was v0.28.0</a></li></ol><blockquote><p><a href="/2017/06/work-in-progress/">WIP</a></p></blockquote><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://kubernetes.io/docs/setup/pick-right-solution/#local-machine-solutions">https://kubernetes.io/docs/setup/pick-right-solution/#local-machine-solutions</a></li><li><a href="https://kubernetes.io/docs/setup/minikube/">https://kubernetes.io/docs/setup/minikube/</a></li><li><a href="https://stackoverflow.com/questions/50053255/virtualbox-raw-mode-is-unavailable-courtesy-of-hyper-v-windows-10">https://stackoverflow.com/questions/50053255/virtualbox-raw-mode-is-unavailable-courtesy-of-hyper-v-windows-10</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL on a Linux VM</title>
      <link href="/2018/04/postgresql-on-a-linux-vm/"/>
      <url>/2018/04/postgresql-on-a-linux-vm/</url>
      
        <content type="html"><![CDATA[<p>You will need to install Ubuntu on your virtual host, I used <a href="https://carlpaton.co.za/vmware-workstation-player/">VMware Workstation Player</a> and ubuntu-17.10.1-server-amd64.iso</p><p>I called my instance ‘Ubuntu PSQL’ and used carl/carl username and password for authentication. Once the VM is running you can install postgresql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install postgresql postgresql-contrib</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p>You can then <a href="https://carlpaton.co.za/putty/">putty</a> to the server, this is easier as you can paste commands.</p><p>To check the PostgreSQL server is running you can query it with <em>psql –version</em></p><p>All of my examples below were on version 9.6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Check the PSQL version</span><br><span class="line">psql --version</span><br><span class="line"></span><br><span class="line">#Check status</span><br><span class="line">service --status-all</span><br><span class="line">sudo pg_lsclusters</span><br><span class="line"></span><br><span class="line">#Other service commands</span><br><span class="line">sudo service postgresql status</span><br><span class="line">sudo service postgresql restart</span><br><span class="line">sudo service postgresql stop</span><br><span class="line">sudo service postgresql start</span><br></pre></td></tr></table></figure><h3 id="Configuration-updates"><a href="#Configuration-updates" class="headerlink" title="Configuration updates"></a>Configuration updates</h3><p>The following configuration updates will be needed, I used nano to edit the files but you can use any other editor such as <a href="http://www.informit.com/articles/article.aspx?p=1670957&seqNum=3">vi</a></p><h4 id="pg-hba-conf"><a href="#pg-hba-conf" class="headerlink" title="pg_hba.conf"></a>pg_hba.conf</h4><p>Set the METHOD to ‘trust’ under ‘# Database administrative login by Unix domain socket’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/postgresql/9.6/main/pg_hba.conf</span><br><span class="line"></span><br><span class="line"># Database administrative login by Unix domain socket</span><br><span class="line">local all postgres trust</span><br></pre></td></tr></table></figure><p>You can also restrict access by IP or IP range:</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.254/32 = ip address of 192.168.0.254</span><br><span class="line">192.168.0.1/24 = range of ip&#x27;s from 192.168.0.1 to 192.168.0.1.255</span><br></pre></td></tr></table></figure><p>Also see <a href="https://en.wikipedia.org/wiki/Subnetwork">Subnet mask</a></p><p>Allow all connections:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- allow the lot</span><br><span class="line">host all all all md5</span><br><span class="line"></span><br><span class="line">-- allow by username</span><br><span class="line">host all USERNAME 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure><h4 id="postgresql-conf"><a href="#postgresql-conf" class="headerlink" title="postgresql.conf"></a>postgresql.conf</h4><p>Set the the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/postgresql/9.6/main/postgresql.conf</span><br><span class="line"></span><br><span class="line">listen_addresses = &#x27;*&#x27;</span><br><span class="line">log_statement = &#x27;all&#x27; </span><br><span class="line">log_hostname = on</span><br><span class="line">log_line_prefix = &#x27;%m [%p] [%r] %q%u@%d &#x27;</span><br></pre></td></tr></table></figure><h3 id="Update-password"><a href="#Update-password" class="headerlink" title="Update password"></a>Update password</h3><p>You can update the root password</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#set password</span><br><span class="line">sudo -u postgres psql postgres</span><br><span class="line">\password postgres</span><br><span class="line">[newpassword]</span><br><span class="line">\q</span><br><span class="line">#test user/pass </span><br><span class="line">(Requires pg_hba.conf change to trust)</span><br><span class="line"></span><br><span class="line">psql -U postgres -W</span><br><span class="line">[newpassword]</span><br></pre></td></tr></table></figure><h3 id="Tail-logs"><a href="#Tail-logs" class="headerlink" title="Tail logs"></a>Tail logs</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/postgresql/postgresql-9.6-main.log</span><br><span class="line">CRTL C ~ to quit</span><br></pre></td></tr></table></figure><h3 id="Backup-amp-Restore"><a href="#Backup-amp-Restore" class="headerlink" title="Backup &amp; Restore"></a>Backup &amp; Restore</h3><p>See <a href="https://carlpaton.co.za/putty/">putty</a> if you need to copy a dump file to the server from your windows PC.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//Create the dump file</span><br><span class="line">sudo -Su postgres PGCLUSTER=&quot;9.6/main&quot; pg_dump -v -Fc productiondbname -f /tmp/production20180503.dump</span><br><span class="line"></span><br><span class="line">//Create a new database</span><br><span class="line">sudo -u postgres psql -c &quot;CREATE DATABASE production20180503 OWNER = postgres TABLESPACE pg_default;&quot;</span><br><span class="line"></span><br><span class="line">//Restore</span><br><span class="line">sudo -u postgres pg_restore --dbname &quot;production20180503&quot; --verbose /tmp/production20180503.dump</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://suite.opengeo.org/docs/latest/dataadmin/pgGettingStarted/firstconnect.html">http://suite.opengeo.org/docs/latest/dataadmin/pgGettingStarted/firstconnect.html</a></li><li><a href="https://www.postgresql.org/docs/9.1/static/runtime-config-logging.html">https://www.postgresql.org/docs/9.1/static/runtime-config-logging.html</a></li><li><a href="https://www.cisco.com/c/en/us/about/press/internet-protocol-journal/back-issues/table-contents-12/ip-addresses.html">https://www.cisco.com/c/en/us/about/press/internet-protocol-journal/back-issues/table-contents-12/ip-addresses.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLog</title>
      <link href="/2018/03/nlog/"/>
      <url>/2018/03/nlog/</url>
      
        <content type="html"><![CDATA[<p>Creates and manages instances of <a href="https://nlog-project.org/documentation/v4.3.0/html/T_NLog_Logger.htm">Logger</a> objects.</p><p>Install from nuget: <code>NLog 4.7.0</code></p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol><li>Create <code>NLog.config</code> with default template data</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autoReload</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">throwExceptions</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogLevel</span>=<span class="string">&quot;Off&quot;</span> <span class="attr">internalLogFile</span>=<span class="string">&quot;c:\temp\nlog-internal.log&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- optional, add some variables</span></span><br><span class="line"><span class="comment">  https://github.com/nlog/NLog/wiki/Configuration-file#variables</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">&quot;myvar&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myvalue&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  See https://github.com/nlog/nlog/wiki/Configuration-file</span></span><br><span class="line"><span class="comment">  for information on customizing logging rules and outputs.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    add your targets here</span></span><br><span class="line"><span class="comment">    See https://github.com/nlog/NLog/wiki/Targets for possible targets.</span></span><br><span class="line"><span class="comment">    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Write events to a file with the date in the filename.</span></span><br><span class="line"><span class="comment">    &lt;target xsi:type=&quot;File&quot; name=&quot;f&quot; fileName=&quot;$&#123;basedir&#125;/logs/$&#123;shortdate&#125;.log&quot;</span></span><br><span class="line"><span class="comment">            layout=&quot;$&#123;longdate&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;message&#125;&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- add your logging rules here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to &quot;f&quot;</span></span><br><span class="line"><span class="comment">    &lt;logger name=&quot;*&quot; minlevel=&quot;Debug&quot; writeTo=&quot;f&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This came from: </p><ul><li><a href="https://raw.githubusercontent.com/NLog/NLog/dev/src/NuGet/NLog.Config/content/NLog.config">https://raw.githubusercontent.com/NLog/NLog/dev/src/NuGet/NLog.Config/content/NLog.config</a></li></ul><ol start="2"><li>Set the file to always copy</li></ol><p><img src="/d/nlog/always-copy.jpg" alt="Always Copy"></p><ol start="3"><li>Configure the file</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;logfile&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">archiveNumbering</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">archiveEvery</span>=<span class="string">&quot;Day&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bufferSize</span>=<span class="string">&quot;102400&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fileName</span>=<span class="string">&quot;appname.log&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;logfile&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Example-use"><a href="#Example-use" class="headerlink" title="Example use"></a>Example use</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = NLog.LogManager.GetCurrentClassLogger();</span><br><span class="line"></span><br><span class="line">logger.Debug(<span class="string">&quot;Some debug&quot;</span>);</span><br><span class="line">logger.Debug(<span class="string">&quot;Some other debug&quot;</span>); </span><br><span class="line">logger.Info(<span class="string">&quot;Some info.&quot;</span>);</span><br><span class="line"></span><br><span class="line">~ <span class="keyword">this</span> will then create `appname.log` <span class="keyword">in</span> your executing bin directory.</span><br></pre></td></tr></table></figure><h3 id="Configure-for-Dependency-Injection"><a href="#Configure-for-Dependency-Injection" class="headerlink" title="Configure for Dependency Injection"></a>Configure for Dependency Injection</h3><p>Install from nuget: <code>NLog.Web.AspNetCore 4.9.2</code></p><ol><li>Update <code>Program.cs</code></li></ol><p>BEFORE</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameUI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">                .UseStartup&lt;Startup&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AFTER</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> NLog.Web;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameUI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// NLog: setup the logger first to catch all errors</span></span><br><span class="line">            <span class="keyword">var</span> logger = NLog.Web.NLogBuilder.ConfigureNLog(<span class="string">&quot;nlog.config&quot;</span>).GetCurrentClassLogger();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                logger.Debug(<span class="string">&quot;init main&quot;</span>);</span><br><span class="line">                CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//NLog: catch setup errors</span></span><br><span class="line">                logger.Error(ex, <span class="string">&quot;Stopped program because of exception&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)</span></span><br><span class="line">                NLog.LogManager.Shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> WebHost.CreateDefaultBuilder(args)</span><br><span class="line">            .UseStartup&lt;Startup&gt;()</span><br><span class="line">            .ConfigureLogging(logging =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                logging.ClearProviders();</span><br><span class="line">                logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);</span><br><span class="line">            &#125;)</span><br><span class="line">            .UseNLog();  <span class="comment">// NLog: setup NLog for Dependency injection</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Configure appsettings.json</li></ol><p>If you are debugging locally make the changes in <code>appsettings.Development.json</code></p><blockquote><p>The Logging configuration specified in <code>appsettings.json</code> overrides any call to <code>SetMinimumLevel</code>. So either remove <code>&quot;Default&quot;:</code> or adjust it correctly to your needs.     - github.com/NLog</p></blockquote><p>BEFORE</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>AFTER</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Trace&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>           </span><br></pre></td></tr></table></figure><ol start="3"><li>Inject into your constructor</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerMoveHard</span> : <span class="title">IComputerMove</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ComputerMoveHard&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerMoveHard</span>(<span class="params">ILogger&lt;ComputerMoveHard&gt; logger</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SetPosition</span>(<span class="params">...</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogTrace(<span class="string">&quot;This is LogTrace&quot;</span>);</span><br><span class="line">        _logger.LogDebug(<span class="string">&quot;This is LogDebug&quot;</span>);</span><br><span class="line">        _logger.LogInformation(<span class="string">&quot;This is LogInformation&quot;</span>);</span><br><span class="line">        _logger.LogWarning(<span class="string">&quot;This is LogWarning&quot;</span>);</span><br><span class="line">        _logger.LogError(<span class="string">&quot;This is LogError&quot;</span>);</span><br><span class="line">        _logger.LogCritical(<span class="string">&quot;This is LogCritical&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-2">https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-2</a></li></ul><h3 id="Log-Levels"><a href="#Log-Levels" class="headerlink" title="Log Levels"></a>Log Levels</h3><p>These levels work from minimum (Trace) to maximum (Critical), so if you set your level to <code>Information</code> you will not get logs for <code>Trace</code> and <code>Debug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Trace - Very detailed log messages, potentially of a high frequency and volume</span><br><span class="line">Debug - Less detailed and/or less frequent debugging messages</span><br><span class="line">Information - Informational messages</span><br><span class="line">Warning - Warnings which don&#x27;t appear to the user of the application</span><br><span class="line">Error - Error messages</span><br><span class="line">Critical - Fatal error messages. After a fatal error, the application usually terminates.</span><br><span class="line">None - No logging</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.codeproject.com/Articles/10631/Introduction-to-NLog">https://www.codeproject.com/Articles/10631/Introduction-to-NLog</a></li></ul><h3 id="Logging-To-Different-Files"><a href="#Logging-To-Different-Files" class="headerlink" title="Logging To Different Files"></a>Logging To Different Files</h3><p>You can specify logging to files by class and wildcard, super useful for debugging code flows. For the below I needed only logs for <code>moverules</code> from the name space <code>GameEngine.Services.ComputerMove.MoveRules.*</code></p><p>So for the below I would include <code>_logger.LogTrace(&quot;This is LogTrace&quot;);</code> in the code for the <strong>MoveRules</strong> classes and this data will go into <code>moverules.log</code> </p><p>Note that appsettings needs to then be set to <code>Trace</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;moverules&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveNumbering</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveEvery</span>=<span class="string">&quot;Day&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bufferSize</span>=<span class="string">&quot;102400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fileName</span>=<span class="string">&quot;moverules.log&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;tictactoe&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveNumbering</span>=<span class="string">&quot;Date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">archiveEvery</span>=<span class="string">&quot;Day&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bufferSize</span>=<span class="string">&quot;102400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fileName</span>=<span class="string">&quot;tictactoe.log&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;GameEngine.Services.ComputerMove.MoveRules.*&quot;</span> <span class="attr">level</span>=<span class="string">&quot;Trace&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;moverules&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">minlevel</span>=<span class="string">&quot;Debug&quot;</span> <span class="attr">writeTo</span>=<span class="string">&quot;tictactoe&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/nlog/nlog/wiki/NLog-Install">https://github.com/nlog/nlog/wiki/NLog-Install</a></li><li><a href="https://nlog-project.org/documentation/v4.3.0/html/T_NLog_LogManager.htm">https://nlog-project.org/documentation/v4.3.0/html/T_NLog_LogManager.htm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simple text logging for a C# console application</title>
      <link href="/2018/03/simple-text-logging-for-a-c-console-application/"/>
      <url>/2018/03/simple-text-logging-for-a-c-console-application/</url>
      
        <content type="html"><![CDATA[<p>Simple logging to text file into a directory called ‘logs’ inside the directory of the executing image.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private static object objLock = new object();</span><br><span class="line"></span><br><span class="line">public static void LogInfo(string d)</span><br><span class="line">&#123;</span><br><span class="line">   var sb = new StringBuilder();</span><br><span class="line">   sb.AppendFormat(&quot;INFO : &#123;0&#125; &#123;1&#125;&quot;, DateTime.Now.ToString(&quot;dd/MM/yyyy hh:mm:ss&quot;), Environment.NewLine);</span><br><span class="line">   sb.Append(d);</span><br><span class="line">   Log(sb.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void LogError(Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">   var sb = new StringBuilder();</span><br><span class="line">   sb.AppendFormat(&quot;EXCEPTION : &#123;0&#125; &#123;1&#125;&quot;, DateTime.Now.ToString(&quot;dd/MM/yyyy hh:mm:ss&quot;), Environment.NewLine);</span><br><span class="line">   sb.AppendFormat(&quot;&#123;0&#125;&#123;1&#125;&quot;, ex.Message, Environment.NewLine);</span><br><span class="line">   sb.AppendFormat(&quot;&#123;0&#125;&#123;1&#125;&quot;, ex.StackTrace, Environment.NewLine);</span><br><span class="line">   Log(sb.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Log(string d)</span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine(d);</span><br><span class="line">   var _logsDir = &quot;logs&quot;;</span><br><span class="line"></span><br><span class="line">   if (!Directory.Exists(_logsDir))</span><br><span class="line">      Directory.CreateDirectory(_logsDir);</span><br><span class="line"></span><br><span class="line">   lock (objLock)</span><br><span class="line">   &#123;</span><br><span class="line">      var path = Path.Combine(&quot;logs&quot;, LogFileName());</span><br><span class="line">      using (StreamWriter sw = new StreamWriter(path, true))</span><br><span class="line">      &#123;</span><br><span class="line">         sw.WriteLine(d);</span><br><span class="line">         sw.WriteLine(&quot; &quot;);</span><br><span class="line">         sw.Close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static string LogFileName()</span><br><span class="line">&#123;</span><br><span class="line">   return DateTime.Now.ToString(&quot;ddMMyyyy&quot;) + &quot;.log&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Virtual Box</title>
      <link href="/2018/03/virtual-box/"/>
      <url>/2018/03/virtual-box/</url>
      
        <content type="html"><![CDATA[<p><em>VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use.</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/SHErR5NBqsc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress</title>
      <link href="/2018/03/wordpress/"/>
      <url>/2018/03/wordpress/</url>
      
        <content type="html"><![CDATA[<p>To display and debug error messages on the remote server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/wp-config.php</span><br><span class="line">define(&#x27;WP_DEBUG&#x27;, true);</span><br></pre></td></tr></table></figure><p>To disable a plugin that is misbehaving simply rename the folder it lives in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/public_html/wp-content/plugins/contact-form-7-backup</span><br></pre></td></tr></table></figure><h3 id="Sweet-Plugins"><a href="#Sweet-Plugins" class="headerlink" title="Sweet Plugins"></a>Sweet Plugins</h3><ul><li> WP Content Copy Protection &amp; No Right Click </li><li> Contact Form 7 </li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li> <a href="https://www.wpbeginner.com/wp-tutorials/how-to-set-up-wordpress-error-logs-in-wp-config/">https://www.wpbeginner.com/wp-tutorials/how-to-set-up-wordpress-error-logs-in-wp-config/</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillars Of Object Oriented Programming (OOP)</title>
      <link href="/2018/03/pillars-of-object-oriented-programming-oop/"/>
      <url>/2018/03/pillars-of-object-oriented-programming-oop/</url>
      
        <content type="html"><![CDATA[<ul><li>Encapsulation</li><li>Inheritance</li><li>Polymorphism</li><li>Abstraction</li></ul><p>Everything in life that is structured will follow a blue print or pattern that is based on proven design methods whether they are concept based or concrete. That is to say the result is tangible.</p><p>Software development regardless of language too has patterns and principles which if effectively applied to your solutions will result in code that is maintainable, testable and ultimately flexible enough to change as scope or business requirements evolve.</p><p>Always remember that software development is an iterative process, your job is never done.</p><p>These days we as software developers are spoilt with access to information on the internet detailing different design patterns and principles. It would be very presumptuous for any developer to assume they understand every pattern or principle however there are some foundational points that I personally feel every developer should be au fait with or at very least have a functional understanding thereof.</p><p><strong>Object-oriented programming</strong> (<strong>OOP</strong>) is a programming language model organized around objects rather than “actions” and data rather than logic.</p><h3 id="Pillars-of-OOP"><a href="#Pillars-of-OOP" class="headerlink" title="Pillars of OOP"></a>Pillars of OOP</h3><p>In all literature I have seen surrounding object orientated programming these 3 points always come up and are the foundation or “Pillars” of Object Orientated Programming. I share the personal view of <a href="https://app.pluralsight.com/profile/author/scott-allen">Scott Allen</a> that encapsulation is the primary pillar as without encapsulation we could never build applications on a large scale.</p><p><a href="https://app.pluralsight.com/profile/author/scott-allen">https://app.pluralsight.com/profile/author/scott-allen</a></p><p><em>Encapsulation is the primary pillar of object-oriented programming, and most classes and training tend to overemphasize inheritance and polymorphism as being more useful than they really in day to day programming. ~ Scott Allen</em></p><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>Encapsulation is simply data hiding where by your classes encapsulate their internal state and complexity, this means when building your solution you only need to know about your current cognitive load as the encapsulated state will look after itself. The only access to the state (the data) would be though well-defined functions on the class or property setters. The constructor is responsible for setting the property values on instantiation so they are in a useful state when you go looking for them.</p><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Class inheritance allows developers to create new classes that reuse behaviour (functions and properties) from their base classes. The class that is inheriting from a base class (or classes) is called a derived class.</p><p>Inheritance leverages re-use of existing code classes, this results in code that is easier to maintain and faster to develop.</p><ul><li><a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Note that it is however better to choose composition over inheritance</a>.</li></ul><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>If the word is broken in half; “Poly” – means many and “Morphism” – means to change. So “Polymorphism” means having many forms. In OOP polymorphism can be expressed as ‘One interface, multiple functions.’</p><h3 id="Building-on-the-Pillars"><a href="#Building-on-the-Pillars" class="headerlink" title="Building on the Pillars"></a>Building on the Pillars</h3><p>The following are key points that build on our Pillars of OOP and are of critical importance to produce solutions that are of high quality.</p><h4 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h4><p>Abstraction is not a pattern but rather a principle and many developers don’t consider abstraction a pillar however this is opinion based. I am of the opinion that it’s a pillar as classes with high cohesion are far simpler to test and maintain.</p><p><em>In computer programming, cohesion refers to the degree to which the elements inside a module belong together.</em></p><p>Abstraction in terms of class files is to simplify them to have a high level of cohesion. Simply put this means the properties and methods directly relate to the class you are building.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.c-sharpcorner.com/UploadFile/e6a07d/pillars-of-oop/">http://www.c-sharpcorner.com/UploadFile/e6a07d/pillars-of-oop/</a></li><li><a href="https://www.quora.com/What-are-the-4-pillars-of-OOPs">https://www.quora.com/What-are-the-4-pillars-of-OOPs</a></li><li><a href="http://mrbool.com/the-4-pillars-of-object-oriented-programming-in-java/33900">http://mrbool.com/the-4-pillars-of-object-oriented-programming-in-java/33900</a></li><li><a href="https://www.safaribooksonline.com/library/view/programming-visual-basic/0596004389/ch04s04.html">https://www.safaribooksonline.com/library/view/programming-visual-basic/0596004389/ch04s04.html</a></li><li><a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)">https://en.wikipedia.org/wiki/Cohesion_(computer_science)</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> patterns principles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chocolatey</title>
      <link href="/2018/03/chocolatey/"/>
      <url>/2018/03/chocolatey/</url>
      
        <content type="html"><![CDATA[<p>The <strong>package manager</strong> for Windows.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://chocolatey.org/">https://chocolatey.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netstat</title>
      <link href="/2018/03/netstat/"/>
      <url>/2018/03/netstat/</url>
      
        <content type="html"><![CDATA[<p>If you have heaps of things running locally in docker containers, node mocks and other development realted things you may run into port clashes. Often after I close a console running a node mock it still hangs around -_-</p><p>I use <code>netstat</code> which should be installed with Windows to identify used ports and then kill the process.</p><h2 id="Port-Known"><a href="#Port-Known" class="headerlink" title="Port Known"></a>Port Known</h2><p>When the process is running on port <code>53</code> you can filter in powershell by piping the response into <code>Select-String</code>. You could the pipe this into <code>taskkill</code> but that doesnt feel smart and Id rather do it manually.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | Select-String &quot;53&quot;</span><br></pre></td></tr></table></figure><p>Note that the above would also match on any PID matching 53.</p><h2 id="Search-Port-Unknown"><a href="#Search-Port-Unknown" class="headerlink" title="Search Port Unknown"></a>Search Port Unknown</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -a -n -o</span><br></pre></td></tr></table></figure><p>What do those switches mean?</p><ul><li><code>-a</code> displays all connections, including those that are listening for incoming connections.</li><li><code>-n</code> displays the IP addresses and port numbers in numerical form, rather than trying to resolve them to hostnames.</li><li><code>-o</code> displays the process ID (PID) of the process that created each connection.</li></ul><p>Example response</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Active Connections</span><br><span class="line"></span><br><span class="line">  Proto  Local Address          Foreign Address        State           PID</span><br><span class="line">  TCP    0.0.0.0:22             0.0.0.0:0              LISTENING       7860</span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       1908</span><br></pre></td></tr></table></figure><h2 id="Kill-process-by-PID"><a href="#Kill-process-by-PID" class="headerlink" title="Kill process by PID"></a>Kill process by PID</h2><p>Take the PID from the responses above and pass it below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 7860 /F</span><br><span class="line"></span><br><span class="line">SUCCESS: The process with PID 5688 has been terminated.</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoapUI and ASP.NET Web API</title>
      <link href="/2018/02/soapui-aspnet-web-api/"/>
      <url>/2018/02/soapui-aspnet-web-api/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/soapui-aspnet-web-api/soapui-aspnet-web-api-header.jpg" alt="SoapUI Rocks!"></p><p>In today’s software driven world life literately runs on code, from our smart phone alarm in the morning, coffee machine set to brew at 6am, to the drive to work where your Korean car intelligently reminds you its due for a service. Software is all around us and its here to stay.</p><p>While the above examples don’t need to communicate to the outside world, the manufacturers certainly did and there are many instances where cross platform communication is needed. It is possible for your smart phone to talk to your coffee machine or in-fact your car.</p><p>This compatibility can be achieved is numerous ways with the most common being an Application Programming Interface (API). Today every provider and his dog has an API exposing their services to be consumed by vendors and customers.</p><blockquote><p><em>In computer programming, an application programming interface is a set of subroutine definitions, protocols, and tools for building application software.</em> - <a href="https://en.wikipedia.org/wiki/Application_programming_interface">Wikipedia</a></p></blockquote><p>In software development it is common to develop microservices that run independently of other services. Instead of exposing functionality in code though a well defined class constructor the functionality is shared with an API.</p><p>I’m fond of RESTful services that accept and respond to JSON requests as this means a scripting language like PHP can consume and use a .NET Web API service. As long as the JSON request is documented and the authentication challenge is passed they can talk nicely.</p><p>The problem with the above scenario is software is not always segregated into LIVE, UAT, QA or stand box environments. A vendor could either only have a LIVE environment or in some cases the API is still being built. In this case the developer building the software to consume the API will only need to know a few things:</p><ol><li>The method signature to call, with Web API this can be as simple as</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain.com/api/saveorder</span><br></pre></td></tr></table></figure><ol start="2"><li>The class structure to be represented as JSON notation:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ProductId&quot;</span><span class="punctuation">:</span> <span class="number">91</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ClientId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;OrderCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ProductId&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ClientId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;OrderCount&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>This is simply a list of orders:</p><p>clientId 1 is placing an order for productId 91 (1 of) and productId 103 (2 of)</p><p>I created the above JSON online with <a href="https://codebeautify.org/jsonviewer">codebeautify.org</a></p><p>This service is awesome as it allowed me to generate a sample JSON request, update it based on my order parameters and verify the JSON is valid.</p><ol start="3"><li>The expected response:</li></ol><p>This can be the same list above with the id parameter now populated or simply a order list of id’s.</p><p>As long as the expected response is known (JSON in the body) and the response code is standard (200 ok, 404 not found, 500 error ect) the developer is good to go.</p><h3 id="Mock-API-with-SoapUI"><a href="#Mock-API-with-SoapUI" class="headerlink" title="Mock API with SoapUI"></a>Mock API with SoapUI</h3><p>If the API is not ready for testing or is not available due to other constraints the developer can create a mock API using software such as SoapUI. This is a great tool that can be used to test existing APIs or to simply Mock the API response on the developers local machine. There is a tutorial online at <a href="https://www.soapui.org/soap-mocking/getting-started.html#2-Creating-a-MockService">www.soapui.org</a></p><p>The steps using my ‘save order’ example are:</p><ol><li>Create a new dummy REST request to ‘domain.com/api/saveorder’</li></ol><p><img src="/d/soapui-aspnet-web-api/dummy-rest-request.jpg" alt="dummy REST request"></p><ol start="2"><li>If you run this request you will get 404 as ‘api/saveorder’ doesn’t exist but I see some clown is squatting on ‘domain.com’</li></ol><p>If it was a valid API the response would be shown. If you know the ‘LIVE to be’ details of your API you should rather use them as you can then use this test profile later.</p><p><img src="/d/soapui-aspnet-web-api/live-to-be-details.jpg" alt="&#39;LIVE to be&#39; details of your API"></p><ol start="3"><li>Now to mock the service to response with the JSON example simply right click and select ‘Generate REST Mock Service’ and give it a useful name such as </li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;api/saveorder&#x27;</span><br></pre></td></tr></table></figure><p><img src="/d/soapui-aspnet-web-api/generate-rest-mock-service.jpg" alt="Generate REST Mock Service"></p><ol start="4"><li>The mock service will start right away on an available port - my test used 8089</li></ol><p><img src="/d/soapui-aspnet-web-api/mock-service-running.jpg" alt="The mock service"></p><ol start="5"><li>You can then stop the service and update several of the response property’s such as the HTTP status code, add header values and the body content type and values.</li></ol><p><img src="/d/soapui-aspnet-web-api/update-response-propertys.jpg" alt="update response property&#39;s"></p><ol start="6"><li>You can now consume this service at <em><a href="http://localhost/api/saveorder">http://localhost/api/saveorder</a></em> using SoapUI</li></ol><p><img src="/d/soapui-aspnet-web-api/consume-with-soapui.jpg" alt="Consume with SoapUI"></p><ol start="7"><li>You can also consume this from code, for simplicity all my applications are grouped under the solution ‘WebApiDemo’</li></ol><p><img src="/d/soapui-aspnet-web-api/consume-with-code.jpg" alt="Consume with Code"></p><p>a. Simply run ‘WebAPI’ from the IDE, note the port ~ example <a href="http://localhost:53610/">http://localhost:53610/</a></p><p>b. Stop the application and update ConsoleApplication.Program API value with the port (remember to re-build)</p><p><img src="/d/soapui-aspnet-web-api/code-port-update.jpg" alt="Code port update"></p><p>c. Run ‘WebAPI’ again from the IDE</p><p>d. Run manually run ‘<em>\WebApiDemo\ConsoleApplication\bin\Debug\ConsoleApplication.exe</em>‘</p><p><img src="/d/soapui-aspnet-web-api/console-app-reads-api.jpg" alt="Console App Reads API"></p><h3 id="Web-API-Solution"><a href="#Web-API-Solution" class="headerlink" title="Web API Solution"></a><strong>Web API Solution</strong></h3><p>The above solution is made up of the following projects and the source code is <a href="https://github.com/charleyza/WebApiDemo">available from GitHub</a></p><h4 id="ConsoleApplication"><a href="#ConsoleApplication" class="headerlink" title="ConsoleApplication"></a>ConsoleApplication</h4><p>This is simply to demonstrate how to call the API from code. Changing the value of ‘var api’ switches between SoapUI and the WebAPI project.</p><h4 id="SharedModels"><a href="#SharedModels" class="headerlink" title="SharedModels"></a>SharedModels</h4><p>Still on the fence with shared data models! The data model is ‘OrderModel’ which has some dummy propertys Id, ProductId, ClientId and OrderCount.</p><h4 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h4><p>This is a .NET Web API project that has a ‘SaveOrderController’ which maps to ‘/api/saveorder/‘</p><p>The demo simply takes the posted ‘List<OrderModel> obj’ and updates the Id value to simulate a database persist.</p><p>It has the ‘ApiKeyValidationAttribute’ which validates against apiPassKey which was passed in the header of the request.</p><p>If the validation/challange failes the API will respond with HttpStatusCode.BadRequest</p><h4 id="WebAPI-Tests"><a href="#WebAPI-Tests" class="headerlink" title="WebAPI.Tests"></a>WebAPI.Tests</h4><p>Simple unit test project to test the public ‘Post’ method on the WebAPI controller</p><p><img src="/d/soapui-aspnet-web-api/integration-tests.jpg" alt="Integration tests"></p><h3 id="Other-API-Testing-tools"><a href="#Other-API-Testing-tools" class="headerlink" title="Other API Testing tools"></a>Other API Testing tools</h3><p>Another API development environment tool that works really well and has mocking abilities is POSTMAN - <a href="https://www.getpostman.com/postman">www.getpostman.com/postman</a></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/carlpaton/WebApiDemo">https://github.com/carlpaton/WebApiDemo</a></li><li><a href="https://en.wikipedia.org/wiki/Application_programming_interface">https://en.wikipedia.org/wiki/Application_programming_interface</a></li><li><a href="https://www.soapui.org/soap-mocking/getting-started.html#2-Creating-a-MockService">https://www.soapui.org/soap-mocking/getting-started.html#2-Creating-a-MockService</a></li><li><a href="https://codebeautify.org/jsonviewer">https://codebeautify.org/jsonviewer</a></li><li><a href="https://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx">https://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> web api </tag>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Excel with EPPlus (.NET library)</title>
      <link href="/2018/01/reading-excel-with-epplus-dot-net-library/"/>
      <url>/2018/01/reading-excel-with-epplus-dot-net-library/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/reading-excel-with-epplus-dot-net-library/epplus.jpg" alt="EPPlus"></p><p>Excel documents are popular in all forms of business as they can be used to manage and calculate just about every kind of business process. They are especially useful for data manipulation where the business domain expert can supply data in a state useful to the relevant developer - who we hope is an expert!</p><p>Manually capturing data is often cheaper than having a developer build import classes however it does remove a lot of the human error risk. Once an import procedure is well defined and tested it can be re-used so it depends on the budget and how complex the spreadsheets are.</p><p>My ‘<a href="https://github.com/carlpaton/ExcelDocumentDemo">ExcelDocumentDemo</a>‘ project is a simple console application that imports excel documents and maps them to sample class called <code>ExcelDataModel</code></p><h3 id="EPPlus-Excel-2007-2010"><a href="#EPPlus-Excel-2007-2010" class="headerlink" title="EPPlus (Excel 2007/2010+)"></a>EPPlus (Excel 2007/2010+)</h3><p>I am a massive fan of EPPlus as its very easy to manipulate .xlsx documents. </p><p>This is a great article on <a href="https://www.codeproject.com/Articles/680421/Create-Read-Edit-Advance-Excel-Report-in">codeproject.com by Debopam Pal</a> explaining how to get up and running with EPP.</p><p>My class ‘ReadXLSX’ is based on such articles and simply maps the excel data to a List of ‘ExcelDataModel’</p><h3 id="Microsoft-Office-Interop-Excel-legacy-office-97-2003"><a href="#Microsoft-Office-Interop-Excel-legacy-office-97-2003" class="headerlink" title="Microsoft.Office.Interop.Excel (legacy office 97/2003)"></a>Microsoft.Office.Interop.Excel (legacy office 97/2003)</h3><p>My class ‘ReadXLS’ is for legacy offce 97/2003 support AND OR stubborn users that remain fond of these older .xls excel documents, these should be migrated over to the newer .xlsx format.</p><p>Although older .xls files are widely depricated its not a bad idea to know how to at very least read from them. My class ReadXLS maps the excel data to a List of ‘ExcelDataModel’</p><h3 id="Example-Results"><a href="#Example-Results" class="headerlink" title="Example Results"></a>Example Results</h3><p>Both .xlsx and .xls sample files are included in my solution:</p><ul><li><a href="https://github.com/carlpaton/ExcelDocumentDemo/tree/master/ExcelDocumentDemo/Data">https://github.com/carlpaton/ExcelDocumentDemo/tree/master/ExcelDocumentDemo/Data</a></li></ul><p>This is the spreadsheet data viewed in excel</p><p><img src="/d/reading-excel-with-epplus-dot-net-library/excel-document.jpg" alt="Excel Document"></p><p>Once mapped this is the data as seen from Visual Studio</p><p><img src="/d/reading-excel-with-epplus-dot-net-library/excel-data.jpg" alt="Excel Data"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.codeproject.com/Articles/680421/Create-Read-Edit-Advance-Excel-2007-2010-Report-in">https://www.codeproject.com/Articles/680421/Create-Read-Edit-Advance-Excel-2007-2010-Report-in</a></li><li><a href="http://csharp.net-informations.com/excel/csharp-read-excel.htm">http://csharp.net-informations.com/excel/csharp-read-excel.htm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> .net library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Serializer</title>
      <link href="/2017/12/binary-serializer/"/>
      <url>/2017/12/binary-serializer/</url>
      
        <content type="html"><![CDATA[<p>Other <a href="/2017/12/serialization/">Serialization technologies</a> include <strong>XML</strong> and <strong>JSON</strong> Serialization.</p><h3 id="System-Runtime-Serialization-Formatters-Binary"><a href="#System-Runtime-Serialization-Formatters-Binary" class="headerlink" title="System.Runtime.Serialization.Formatters.Binary"></a>System.Runtime.Serialization.Formatters.Binary</h3><p>The <code>stream</code> should be wrapped in a <strong>using</strong> statement for production ready code.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="keyword">var</span> formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">formatter.Serialize(stream, someObject);</span><br><span class="line">stream.Seek(<span class="number">0</span>, SeekOrigin.Begin); <span class="comment">// Rewind the stream with offset of 0 from the begining</span></span><br><span class="line">stream.Close();</span><br></pre></td></tr></table></figure><h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>The object being serialized needs to have the <code>[Serializable]</code> attribute / annotation.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]">https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net">https://github.com/carlpaton/Boilerplate/tree/master/.Net</a> Core Console Application/Serialization)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/basic-serialization">https://docs.microsoft.com/en-us/dotnet/standard/serialization/basic-serialization</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/binary-serialization">https://docs.microsoft.com/en-us/dotnet/standard/serialization/binary-serialization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Calculate Percentage</title>
      <link href="/2017/12/c-sharp-calc-percentage/"/>
      <url>/2017/12/c-sharp-calc-percentage/</url>
      
        <content type="html"><![CDATA[<p>Simple percentage calculation as an <a href="/2018/04/dependency-inversion-principle-dip/">injectable</a> service. </p><p>Yeah I got tired of <a href="https://www.urbandictionary.com/define.php?term=google%27ling">Google’ling</a> which number number you divide by each time I needed to do this in code :)</p><p>Simply put this is: <code>(100 * scoreAchieved) / outOf</code> which is generally <code>(100 * small number) / big number</code>.</p><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Foo.Common.Maths.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPercentageCalculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Calculate the score achieved as a percentage out of the given value `outOf`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;scoreAchieved&quot;&gt;</span>Example: 73<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;outOf&quot;&gt;</span>Example: 100<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>73.00 as the default decimal spacing is .00 (2 digits)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Calculate the score achieved as a percentage out of the given value `outOf`</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;scoreAchieved&quot;&gt;</span>Example: 73<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;outOf&quot;&gt;</span>Example: 100<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;digits&quot;&gt;</span>Example: 3<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>73.000<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf, <span class="built_in">int</span> digits</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Foo.Common.Maths</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PercentageCalculator</span> : <span class="title">IPercentageCalculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> DIGITS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scoreAchieved == <span class="number">0</span> || outOf == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> GetPercentage(scoreAchieved, outOf, DIGITS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetPercentage</span>(<span class="params"><span class="built_in">int</span> scoreAchieved, <span class="built_in">int</span> outOf, <span class="built_in">int</span> digits</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (scoreAchieved == <span class="number">0</span> || outOf == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Math.Round((<span class="built_in">double</span>)(<span class="number">100</span> * scoreAchieved) / outOf, digits);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://helpingwithmath.com/calculating-percentages/">https://helpingwithmath.com/calculating-percentages/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> life-hacks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serialization</title>
      <link href="/2017/12/serialization/"/>
      <url>/2017/12/serialization/</url>
      
        <content type="html"><![CDATA[<p>Serialization is the process of converting the state of an object into a form that can be <strong>persisted</strong> or <strong>transported</strong>. The complement of serialization is <strong>deserialization</strong>, which converts a stream into an object. Together, these processes allow data to be stored and transferred.</p><h3 id="Serialization-technologies"><a href="#Serialization-technologies" class="headerlink" title="Serialization technologies"></a>Serialization technologies</h3><ul><li><a href="/2017/12/binary-serializer/">Binary</a></li><li><a href="/2020/01/json-serializers/">JSON</a></li><li><a href="/2017/12/xml-serializer/">XML &amp; SOAP</a></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/">https://docs.microsoft.com/en-us/dotnet/standard/serialization/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML Serializer</title>
      <link href="/2017/12/xml-serializer/"/>
      <url>/2017/12/xml-serializer/</url>
      
        <content type="html"><![CDATA[<p>Other <a href="/2017/12/serialization/">Serialization technologies</a> include <strong>Binary</strong> and <strong>JSON</strong> Serialization.</p><h3 id="System-Xml-Serialization"><a href="#System-Xml-Serialization" class="headerlink" title="System.Xml.Serialization"></a>System.Xml.Serialization</h3><p>The <code>stream</code> should be wrapped in a <strong>using</strong> statement for production ready code.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="keyword">var</span> xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(someObject));</span><br><span class="line">xmlSerializer.Serialize(stream, self);</span><br><span class="line">stream.Position = <span class="number">0</span>; <span class="comment">// same as `stream.Seek(0, SeekOrigin.Begin);`</span></span><br><span class="line">stream.Close();</span><br></pre></td></tr></table></figure><h3 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h3><p>The object being serialized needs to have a <strong>parameterless</strong> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors">constructor</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> Address Address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span> </span><br><span class="line">    &#123; </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>[<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]">https://github.com/carlpaton/Boilerplate/tree/master/.Net%20Core%20Console%20Application/Serialization]</a>(<a href="https://github.com/carlpaton/Boilerplate/tree/master/.Net">https://github.com/carlpaton/Boilerplate/tree/master/.Net</a> Core Console Application/Serialization)</li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer">https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-and-soap-serialization">https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-and-soap-serialization</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> serialization </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Event Logs</title>
      <link href="/2017/11/windows-event-logs/"/>
      <url>/2017/11/windows-event-logs/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/windows-event-logs/windows-event-logs.jpg" alt="Windows Event Logs"></p><p>Plain text files are most commonly used to log software application events such as exceptions, warnings, information or verbose data to try identify a specific problem. Although using text files can have a performance impact there are tools optimized to handle this kind of logging such as <a href="https://logging.apache.org/log4net/">log4net</a> or <a href="https://serilog.net/">serilog</a>. These work very well and many developers are fans of them.</p><ul><li><a href="https://www.codeproject.com/Articles/140911/log-net-Tutorial">This is a great read if you are interested in learning more about log4net</a>.</li></ul><p>I’m a fan of windows event logs as they are optimized by the operating system and I can view logs in the same place. That said, tools like <a href="https://www.elastic.co/products/logstash/">logstash</a> can parse and transform a variety of logs such as windows event logs or text logs to be viewed in once place, so it just depends on your organizations setup and maturity in terms of logging infrastructure.</p><blockquote><p><em>KIBANA is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster.</em></p></blockquote><p>Developers generally should not have access to production servers but the operations team can extract and provide the exported windows event viewer logs (.evtx files)</p><p>It is possible to open these logs with the built in windows “Event Viewer” but the ‘Find…’ function is in my opinion not very helpful when we are trying to identify a pattern and/or display records based on custom criteria.</p><p>I like to import the logs into a database and then run SQL querys to identify patterns or specific logs that are of importance to my problem domain. My ‘EventViewer’ solution was written in C# .NET and is made up of the following projects: EvtxImporter, LogViewWebApplication, Common, Repository, Sharedmodels and Tests.</p><ul><li><a href="https://github.com/carlpaton/EventViewer">The source code for my application can be found here.</a></li></ul><h3 id="EvtxImporter"><a href="#EvtxImporter" class="headerlink" title="EvtxImporter"></a>EvtxImporter</h3><p>This is a console application that simply reads the .evtx file to memory and bulk inserts the data to our database. The data is not <a href="http://www.studytonight.com/dbms/database-normalization.php">normalized </a>and really should be however for simplicity I’ve imported it ‘as is’ so the SQL columns matches the columns in the .evtx file and is mapped to <code>SharedModels.EventLogModel</code></p><p>The high level process flow is:</p><ol><li>Check file location ‘LogPath’ for ‘*.evtx’ files</li><li>Check if the files have been processed by looking at a watermark file <code>hamster.json</code>, this is stored in the location WaterMarkFile’</li><li>Read the file and map it to <code>SharedModels.EventLogModel</code></li><li>There was no count property so I manually counted the file records by looping twice using a <a href="/2020/04/c-sharp-delegates/">delegate </a>to either call my ‘Count’ or ‘Append’ methods</li><li>The data is then bulk inserted</li><li>The watermark is then updated</li></ol><h3 id="LogViewWebApplication"><a href="#LogViewWebApplication" class="headerlink" title="LogViewWebApplication"></a>LogViewWebApplication</h3><p>This is a simple MVC Web Application to read the log files, this could be used by your help desk as they will either not know how to construct SQL querys or care about them.</p><h3 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h3><p>This is a class library for common classes.</p><p>CategoryModel can be used to identify software events using the built in .NET ‘EventLog.WriteEntry’ method.</p><p>Short range -32,768 to 32,767 can be used to identify logs from parts of the application. This can be anything from the users Id to values representing classes withing the application.</p><p>In my class I have a ‘Categorys’ enum with values UserLogin=1, DebtorsCapture, CreditorsCapture which I use in my ‘Tests’ project. They can be anything really.</p><p>The ‘EventLogger’ class is used to write to the windows event log.</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>This is a normal repository pattern class library with a PostgreSQL implementation, <a href="/2017/10/sllite-with-repository-pattern/">for more information on a repository pattern see this article</a>.</p><h3 id="SharedModels"><a href="#SharedModels" class="headerlink" title="SharedModels"></a>SharedModels</h3><p>Im on the fence with sharing data models as this can be messy but I guess as long as your data models (repository) and view models (mvc models) are seprated you will be ok.</p><p>The big advanage for my application was to share ‘EventLogModel’ between ‘EvtxImporter’ and ‘Repository’ as this model exactly represents the .evtx file which is read and persisted to the database.</p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>The general rule is every class you write needs a unit test - this is often not done for several reasons including time, business requirements/policys and simply overkill. My import tool as 2 test groups.</p><p>‘EventLoggerTests’ to create ‘dummy’ event logs to test with. This is not a true unit test but the ability to quickly run specifc classes and insert some test data was very useful.</p><p>‘ReadEvtxFileTests’ to test reading .evtx files.</p><p>Tests for the ‘Repository’ and ‘EvtxImporter.CheckFileLocation’ are still to come! \ :D /</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.tutorialspoint.com/csharp/csharp_delegates.htm">https://www.tutorialspoint.com/csharp/csharp_delegates.htm</a></li><li><a href="https://stackoverflow.com/questions/30809133/read-event-log-file-from-path">https://stackoverflow.com/questions/30809133/read-event-log-file-from-path</a></li><li><a href="https://stackoverflow.com/questions/609533/how-do-you-open-the-event-log-programatically">https://stackoverflow.com/questions/609533/how-do-you-open-the-event-log-programatically</a></li><li><a href="https://en.wikipedia.org/wiki/Kibana">https://en.wikipedia.org/wiki/Kibana</a></li><li><a href="https://logging.apache.org/log4net/">https://logging.apache.org/log4net/</a></li><li><a href="https://serilog.net/">https://serilog.net/</a></li><li><a href="http://www.studytonight.com/dbms/database-normalization.php">http://www.studytonight.com/dbms/database-normalization.php</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite with a Repository Pattern - Dapper Example</title>
      <link href="/2017/10/sqlite-with-repository-pattern/"/>
      <url>/2017/10/sqlite-with-repository-pattern/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/sllite-with-repository-pattern/sllite-with-repository-pattern-header.jpg" alt="SQLite with a Repository Pattern"></p><p>For its size vs performance SQLite is perfect for mobile applications and simple standalone projects. It’s ideal for solutions that need to keep track of relatively small amounts of data and want to make use of a relational database.</p><ul><li><a href="https://www.nuget.org/packages/System.Data.SQLite/">The nuget package name is System.Data.SQLite</a></li></ul><blockquote><p><em>SQLite is an in-process library that implements a</em> <a href="https://www.sqlite.org/selfcontained.html">self-contained</a><em>,</em> <a href="https://www.sqlite.org/serverless.html">serverless</a><em>,</em> <a href="https://www.sqlite.org/zeroconf.html">zero-configuration</a><em>,</em> <a href="https://www.sqlite.org/transactional.html">transactional</a> <em>SQL database engine.</em> </p></blockquote><p>For the purpose of this article I will focus on my “Bunny App” which is an application that keeps track of Bunny Chows that my colleagues and I have enjoyed. It simply allows us to log the date and place we had a bunny and then rate the bunny with a simple “triple T” matrix being Temperature, Taste and Tomorrow…</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>In terms of the directory structures the most common sorting I have seen is to group classes by relevance or function within the business domain, this is a functional approach. That is to say anything to do with a user can be kept in a “Users” folder, anything to do with a financial account can be kept in a “debtors” or “creditors” folder. This is really open to preference so I’m pretty sure each developer will have their own idea on a “functional approach”.</p><p>Although setting up all these folders can be cumbersome its useful when new developers join. Maintenance is relatively low and simple providing you understand the business model.</p><p>As my Bunny App is very simple I have kept my folder structure to the bare minimum but still allowing for possible database migrations.</p><h3 id="Schema-Folder"><a href="#Schema-Folder" class="headerlink" title="Schema Folder"></a>Schema Folder</h3><p>This contains the schema of the database that our ORM (Object Relational Mapper) will map the database columns to. I am fan of Dapper for its speed and simplicity so have used this ORM in my Bunny.Repository project. The schema properties are generally represented by built in primitive types although none primitive such as DateTime are very common.</p><p><img src="/d/sllite-with-repository-pattern/schema-folder.jpg" alt="Schema folder"></p><h3 id="Interface-Folder"><a href="#Interface-Folder" class="headerlink" title="Interface Folder"></a>Interface Folder</h3><p>Each class file represents the interface (or contract) that repository must fulfill. Although <a href="https://en.wikipedia.org/wiki/Hungarian_notation">Hungarian Notation</a> has been widely deprecated I still prefix my class files with “I” as this is the way I was taught and although change is good, this is a last vested syntax I still enjoy.</p><p><img src="/d/sllite-with-repository-pattern/injterface-folder.jpg" alt="Schema folder"></p><h3 id="Implementation-Folder"><a href="#Implementation-Folder" class="headerlink" title="Implementation Folder"></a>Implementation Folder</h3><p>I like to group my implementations by database type, this is simply a sub folder within “Implementation” as the database name, in my example this is “SQLite” – there could be other folders such as “MySQL”, “PostgreSQL” or “MSSQL” to represent Microsoft SQL. The idea is that should Business decide to migrate to a new database your code is not heavily tied (or closely coupled) to that database. In the route of “Implementation” is IBaseContext.cs which caters for most of the database events:</p><ul><li>Open; Check the connection state and open it if its closed</li><li>Select; To return a single object</li><li>SelectList; to return a list of objects</li><li>Insert; to persist an object and return the new database auto Id</li><li>InsertBulk; to persist a list of data and return void</li><li>Update; to persist an update to the database, returns void</li><li>Delete; to delete a record from the database returns void</li><li>ExecuteNonQuery; I used this to drop, create and seed the database, generally I don’t use it for anything else or even include it in this interface. Its sometimes better to version your database with tools such as <a href="https://flywaydb.org/">flyway </a>or <a href="http://www.liquibase.org/">liquibase </a>but this depends on your business mandate for auditing and accountability.</li></ul><p>Then per database I have a ‘DBContext’ to cater for connection strings and database connections. In my example I have SQLiteContext.cs which implements system’s IDisposable and my custom IBaseContext.</p><p><img src="/d/sllite-with-repository-pattern/sql-lite-context.jpg" alt="SQL Lite Context"></p><p>This will then create BunnyDb.db in the given path, for the example above it will be in the application executing directory.</p><p><img src="/d/sllite-with-repository-pattern/bin-folder.jpg" alt="Bin Folder"></p><p>I like to then keep the repository methods the same as these base methods as this keeps things tidy and simple to understand.</p><p><img src="/d/sllite-with-repository-pattern/score-repository.jpg" alt="Score Repository"></p><p>It is a bit of extra work but I then manually remove the word “Implementation” from the repository’s namespace, ie: in the class file ‘UserRepository.cs’. This makes resolving the namespace simpler. Ie: <code>Bunny.Repository.Implementation.SQLite</code> is changed to <code>Bunny.Repository.SQLite</code></p><p><img src="/d/sllite-with-repository-pattern/sql-lite-new-old.jpg" alt="Namespace Fix"></p><h3 id="SQLite-Folder"><a href="#SQLite-Folder" class="headerlink" title="SQLite Folder"></a>SQLite Folder</h3><p>Each class file implements its corresponding Interface. If the database instance is installed on the operating system of a dedicated server then it’s a good idea to have the SQL commands stored as stored procedures, this will keep maintenance in one place and be language agnostic. However for SQLite this doesn’t make sense so I have kept the database command text inside the repository class files.</p><p><img src="/d/sllite-with-repository-pattern/sql-command-text.jpg" alt="Command Text"></p><p>The connection string should also be passed to the DbContext in its constructor or read from configuration, however for SQLite this is not necessary as there is no authentication needed and in my case there is no reason for the .db file name to change.</p><p><img src="/d/sllite-with-repository-pattern/sql-lite-context2.jpg" alt="SQL Lite Context"></p><h3 id="DBeaver"><a href="#DBeaver" class="headerlink" title="DBeaver"></a>DBeaver</h3><p><a href="https://dbeaver.io/">DBeaver</a> is a universal SQL Client that can be used to view your SQLite database file. Below is a screenshot visually showing the database my <code>Bunny.Tests.CreateRepositoryTest</code> create_structure/seed_db methods created.</p><blockquote><p><em>DBeaver is a free multi-platform database tool for developers, SQL programmers, database administrators and analysts. Supports all popular databases: MySQL, PostgreSQL, MariaDB, SQLite, Oracle, DB2, SQL Server, Sybase, MS Access, Teradata, Firebird, Derby, etc.</em></p></blockquote><p><img src="/d/sllite-with-repository-pattern/dbeaver.jpg" alt="DBeaver"></p><p>Our applications can now make use of the repository classes as shown in my test cases.</p><p><img src="/d/sllite-with-repository-pattern/integration-tests.jpg" alt="Integration Tests"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://sqlitebrowser.org/">http://sqlitebrowser.org/</a></li><li><a href="https://github.com/carlpaton/Bunny">https://github.com/carlpaton/Bunny</a></li><li><a href="https://app.pluralsight.com/library/courses/dotnet-micro-orms-introduction/table-of-contents">https://app.pluralsight.com/library/courses/dotnet-micro-orms-introduction/table-of-contents</a></li><li><a href="http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/">http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/</a></li><li><a href="http://passwordsgenerator.net/md5-hash-generator/">http://passwordsgenerator.net/md5-hash-generator/</a></li><li><a href="https://dbeaver.io/">https://dbeaver.io/</a></li><li><a href="https://en.wikipedia.org/wiki/Hungarian_notation">https://en.wikipedia.org/wiki/Hungarian_notation</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> orm </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loader - Client Side</title>
      <link href="/2017/08/loader-client-side/"/>
      <url>/2017/08/loader-client-side/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/loader-client-side/loader.jpg" alt="Loader - Client Side"></p><p>All cloud based software at some point has to wait for the database or web hosting instance to respond.</p><p>This can be for a number of reasons including slow mobile connections or finger trouble resulting in multiple requests. (Read: impatient user)</p><p>We need to always think of the users experience, if they click on something and it doesn’t respond right away they will click again or even close your application saying it’s broken. The simplest way is to prompt the user with a ‘please wait’ notice. This immediately tells the user that the software received the event and its busy doing something.</p><blockquote><p><em>‘Any product that needs a manual to work is broken’ - Elon Musk</em></p></blockquote><p>These ‘please wait’ events go by many names such as ‘wait model’, model, loader, ajax loader, spinner - all have merit and if something works leave it alone.</p><p>I like to call them a ‘loader’ as this is generally what I have found clients to understand them as and this helps with the vocabulary of their <a href="/2017/04/ubiquitous-language-ul/">Ubiquitous Language (UL)</a>.</p><p>Some code samples to follow.</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>Add this to /Views/Shared/_Layout.cshtml if you are using ASP.NET MVC. If you are using Web Forms you can add it to your xxx.Master page</p><p>Side Note: perhaps you should look at moving away from Web Forms :D</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Create-your-GIF-file"><a href="#Create-your-GIF-file" class="headerlink" title="Create your .GIF file"></a>Create your .GIF file</h3><p>Sites like <a href="http://www.ajaxload.info/">ajaxload.info</a> allow you to generate your ajax-loader.gif file.</p><blockquote><p><em>The Graphics Interchange Format (better known by its acronym GIF) is a bitmap image.</em></p></blockquote><p>Although you could use CSS (Cascading Style Sheets) to generate a <a href="https://www.w3schools.com/howto/howto_css_loader.asp">cool spinning loader</a> it may not work on all devices - it depends on your target audience.</p><p>You can also use a .PNG (Portable Network Graphics) file although I have had issues with these files on mobile devices.</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>The CSS (Cascading Style Sheet) snippet below was taken from <a href="https://stackoverflow.com/questions/1964839/how-can-i-create-a-please-wait-loading-animation-using-jquery">stackoverflow.com</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">modal</span> &#123; </span><br><span class="line"><span class="attr">display</span>:    none;</span><br><span class="line"><span class="attr">position</span>:   fixed;</span><br><span class="line">z-<span class="attr">index</span>:    <span class="number">1000</span>;</span><br><span class="line"><span class="attr">top</span>:        <span class="number">0</span>;</span><br><span class="line"><span class="attr">left</span>:       <span class="number">0</span>;</span><br><span class="line"><span class="attr">height</span>:     <span class="number">100</span>%;</span><br><span class="line"><span class="attr">width</span>:      <span class="number">100</span>%;</span><br><span class="line"><span class="attr">background</span>: <span class="title function_">rgba</span>( <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">.8</span> )</span><br><span class="line">            <span class="title function_">url</span>(<span class="string">&#x27;ajax-loader.gif&#x27;</span>)</span><br><span class="line">            <span class="number">50</span>% <span class="number">50</span>%</span><br><span class="line">            no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* When the body has the loading class, we turn</span></span><br><span class="line"><span class="comment">   the scrollbar off with overflow:hidden */</span></span><br><span class="line"> </span><br><span class="line">body.<span class="property">loading</span> &#123;</span><br><span class="line">    <span class="attr">overflow</span>: hidden;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Anytime the body has the loading class, our</span></span><br><span class="line"><span class="comment">   modal element will be visible */</span></span><br><span class="line"> </span><br><span class="line">body.<span class="property">loading</span> .<span class="property">modal</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trigger-jQuery-AJAX"><a href="#Trigger-jQuery-AJAX" class="headerlink" title="Trigger jQuery AJAX"></a>Trigger jQuery AJAX</h3><p>This will automatically trigger your loader when a jQuery AJAX request is done.)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$body = $(<span class="string">&quot;body&quot;</span>);</span><br><span class="line"> </span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">    <span class="attr">ajaxStart</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; $body.<span class="title function_">addClass</span>(<span class="string">&quot;loading&quot;</span>);    &#125;,</span><br><span class="line">     <span class="attr">ajaxStop</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; $body.<span class="title function_">removeClass</span>(<span class="string">&quot;loading&quot;</span>); &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><em>AJAX stands for Asynchronous JavaScript and XML.</em></p></blockquote><h3 id="Manual-Trigger"><a href="#Manual-Trigger" class="headerlink" title="Manual Trigger"></a>Manual Trigger</h3><p>You can manually trigger your loader with the below in any of your native Javascript methods.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;body&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;loading&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Trigger-if-you-are-using-System-Web-Mvc-Ajax-BeginForm"><a href="#Trigger-if-you-are-using-System-Web-Mvc-Ajax-BeginForm" class="headerlink" title="Trigger if you are using System.Web.Mvc.Ajax.BeginForm"></a>Trigger if you are using System.Web.Mvc.Ajax.BeginForm</h3><p>Simply Add the image to your page:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;ajax-loader&quot;</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/img/ajax-loader.gif&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Then set the LoadingElementId property when the form is created</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@using (<span class="title class_">Ajax</span>.<span class="title class_">BeginForm</span>(<span class="string">&quot;ActionName&quot;</span>, <span class="string">&quot;ControllerName&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AjaxOptions</span></span><br><span class="line">                &#123;</span><br><span class="line">                                <span class="title class_">HttpMethod</span> = <span class="string">&quot;Get&quot;</span>,</span><br><span class="line">                                <span class="title class_">InsertionMode</span> = <span class="title class_">InsertionMode</span>.<span class="property">Replace</span>,</span><br><span class="line">                                <span class="title class_">UpdateTargetId</span> = <span class="string">&quot;divResults&quot;</span>,</span><br><span class="line">                                <span class="title class_">LoadingElementId</span> = <span class="string">&quot;ajax-loader&quot;</span>                            </span><br><span class="line">                &#125;))</span><br></pre></td></tr></table></figure><p>The framework will then handle displaying and hiding your ajax-loader.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.ajaxload.info/">http://www.ajaxload.info/</a></li><li><a href="https://www.w3schools.com/howto/howto_css_loader.asp">https://www.w3schools.com/howto/howto_css_loader.asp</a></li><li><a href="https://stackoverflow.com/questions/1964839/how-can-i-create-a-please-wait-loading-animation-using-jquery">https://stackoverflow.com/questions/1964839/how-can-i-create-a-please-wait-loading-animation-using-jquery</a></li><li><a href="https://en.wikipedia.org/wiki/GIF">https://en.wikipedia.org/wiki/GIF</a></li><li><a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics">https://en.wikipedia.org/wiki/Portable_Network_Graphics</a></li><li><a href="https://www.w3schools.com/css/css_intro.asp">https://www.w3schools.com/css/css_intro.asp</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> client side </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csv Helper (.NET library)</title>
      <link href="/2017/06/csv-helper-dot-net-library/"/>
      <url>/2017/06/csv-helper-dot-net-library/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/csv-helper-dot-net-library/csv-helper.jpg" alt="Csv Helper"></p><p>If you have ever tried to manually read a CSV (Comma-separated values) file using the .NET Framework’s File and StreamReader classes you may have run into issues such as:</p><ul><li>Out of range exceptions</li><li>Encoding issues</li><li>Column order changes ect</li></ul><p>There are probably many more depending on the files size and complexity.</p><p>First prize is to read the CSV file and map the columns to a POCO object (Plain Old CLR) </p><blockquote><p><em>In software engineering, a plain old CLR object (POCO) is a simple object created in the Common Language Runtime (CLR) of the .NET Framework which is unencumbered by inheritance or attributes.</em></p></blockquote><p>Enter the CsvHelper library to help reading and writing CSV files by Josh Close.</p><blockquote><p><em>CsvHelper is a .NET library for reading and writing CSV files. Extremely fast, flexible and easy to use. Supports reading and writing of custom class objects.</em></p></blockquote><p>Consider the following CSV file with headings Internal Id,Activity,Project Name,Date,Time Spent In Hours,User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Internal Id,Activity,Project Name,Date,Time Spent In Hours,User</span><br><span class="line"></span><br><span class="line">123,Cloned repository and familiarize with code base,Accounts Project,01-01-2017,2,Joe Soap</span><br><span class="line"></span><br><span class="line">124,Refactor class a for xyz,Accounts Project,01-01-2017,1,Joe Soap</span><br><span class="line"></span><br><span class="line">89,Complete task xyz,Accounts Project,01-01-2017,4,Sue Skye</span><br><span class="line"></span><br><span class="line">55,Complete task abc,Accounts Project,01-01-2017,1,Sue Skye</span><br></pre></td></tr></table></figure><p><em>(You can check your system separator under ‘Region’ -&gt; ‘Additional settings…’ -&gt; ‘Numbers’ -&gt; ‘List separator’)</em></p><p>Create your POCO class:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CsvContentModel</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> InternalId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Activity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> ProjectName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> TimeSpentInHours&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** For simplicity I made all the properties of type string. You can use CsvHelper’s type converter if you want to convert the integer/dates automatically.*</p><p>Create a DefinitionMap to help map the columns with spaces in the names.</p><p>If you don’t supply a mapping file, auto mapping will be used. Auto mapping will map the properties in your class in the order they appear in.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">CsvContentModelDefinitionMap</span> : <span class="title">CsvClassMap</span>&lt;<span class="title">CsvContentModel</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CsvContentModelDefinitionMap</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Map(m =&gt; m.User).Name(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.InternalId).Name(<span class="string">&quot;Internal Id&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.Activity).Name(<span class="string">&quot;Activity&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.ProjectName).Name(<span class="string">&quot;Project Name&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.Date).Name(<span class="string">&quot;Date&quot;</span>);</span><br><span class="line">    Map(m =&gt; m.TimeSpentInHours).Name(<span class="string">&quot;Time Spent In Hours&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Organize your CsvHelper logic into a class.</p><p>Your catch blocks should do something more helpful with the Exceptions :)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReadFile</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> FilePath;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ReadFile</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    FilePath = filePath;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;CsvContentModel&gt; <span class="title">Get</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (FilePath == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> List&lt;CsvContentModel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FilePath == <span class="string">&quot;&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> List&lt;CsvContentModel&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;CsvContentModel&gt; records = <span class="keyword">new</span> List&lt;CsvContentModel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (TextReader reader = File.OpenText(FilePath))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader);</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;CsvContentModelDefinitionMap&gt;();</span><br><span class="line">        records = csv.GetRecords&lt;CsvContentModel&gt;().ToList();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (CsvMissingFieldException ex)</span><br><span class="line">      &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">        Console.WriteLine(ex.StackTrace);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">      &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">        Console.WriteLine(ex.StackTrace);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> records;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then call the class</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> ReadFile(<span class="string">&quot;sample.csv&quot;</span>).Get();</span><br></pre></td></tr></table></figure><p>The instance of data will now have a reference to a list of type CsvContentModel for your business logic.</p><p><img src="/d/csv-helper-dot-net-library/csv-helper-object.jpg" alt="Csv Helper"></p><p>CsvHelper has several other powerful features such as Type Converter and Configuration Delimiter.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://joshclose.github.io/CsvHelper/">https://joshclose.github.io/CsvHelper/</a></li><li><a href="https://en.wikipedia.org/wiki/Plain_old_CLR_object">https://en.wikipedia.org/wiki/Plain_old_CLR_object</a></li><li><a href="https://en.wikipedia.org/wiki/Comma-separated_values">https://en.wikipedia.org/wiki/Comma-separated_values</a></li><li><a href="https://github.com/carlpaton/CsvHelperDemo">https://github.com/carlpaton/CsvHelperDemo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> .net library </tag>
            
            <tag> csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json.NET (.NET library)</title>
      <link href="/2017/06/jsonnet-dot-net-library/"/>
      <url>/2017/06/jsonnet-dot-net-library/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/jsonnet-dot-net-library/jsonnet.jpg" alt="Json.NET"></p><p>Json.NET is a popular high-performance JSON framework for .NET available via Nuget as <code>Newtonsoft.Json</code></p><p>JSON (JavaScript Object Notation) is widely used and I find it easier to read than XML (eXtensible Markup Language.) I doubt XML is going anywhere and the differences will be opinion based so I have no intention to insinuate JSON is better.</p><blockquote><p><strong>JSON</strong> <em>is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999.</em></p></blockquote><p>Modern Web API projects can be configured to automatically return JSON with the JsonFormatter class however there are plenty legacy systems that will still follow the below structure so it’s good to understand them anyway.</p><p>In some cases your class instances need to be persisted to a log file or database, the simplest way to do this is with the JsonConvert class from Json.Net and it is faster than the JavaScriptSerializer class normally used in older .ASMX files.</p><blockquote><p><em>.ASMX is an abbreviation for Active Server Method File, a file with the</em> <strong>ASMX</strong> <em>file extension is an ASP.NET Web Service Source file.</em></p></blockquote><p>The below is a pre Web API example of web a web service called ‘AjaxServer.asmx’ that uses JavaScriptSerializer</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Web.Services;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JsonNetWebAppDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Summary description for AjaxServer</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">WebService(Namespace = <span class="string">&quot;http://tempuri.org/&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)</span>]</span><br><span class="line">    [<span class="meta">System.ComponentModel.ToolboxItem(false)</span>]</span><br><span class="line">    <span class="comment">// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. </span></span><br><span class="line">    <span class="comment">// [System.Web.Script.Services.ScriptService]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AjaxServer</span> : <span class="title">System.Web.Services.WebService</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">WebMethod(EnableSession = true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">DoSomething</span>(<span class="params"><span class="built_in">string</span> param1, <span class="built_in">string</span> param2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (param1 == <span class="string">&quot;&quot;</span> &amp;&amp; param2 == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            list.Add(<span class="string">&quot;some string value&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (Session[<span class="string">&quot;someSessionValue&quot;</span>] != <span class="literal">null</span>)</span><br><span class="line">                list.Add(Session[<span class="string">&quot;someSessionValue&quot;</span>].ToString());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//slower built in &#x27;JavaScriptSerializer&#x27;</span></span><br><span class="line">            <span class="keyword">var</span> json = <span class="keyword">new</span> JavaScriptSerializer().Serialize(list);</span><br><span class="line">            <span class="keyword">return</span> json;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//faster &#x27;JsonConvert&#x27;</span></span><br><span class="line">            <span class="comment">//var json2 = JsonConvert.SerializeObject(list);</span></span><br><span class="line">            <span class="comment">//return json2;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This can then be consumed from the client side. The simplest way is with jQuery’s $.ajax to post to the service and $.parseJSON to de-serialize the response. </p><blockquote><p><em>NOTE: As of jQuery 3.0, $.parseJSON is deprecated. To parse JSON strings use the native JSON.parse method instead.</em></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = jQuery.<span class="title function_">parseJSON</span>( <span class="string">&#x27;&#123; &quot;name&quot;: &quot;John&quot; &#125;&#x27;</span> );</span><br><span class="line"><span class="title function_">alert</span>( obj.<span class="property">name</span> === <span class="string">&quot;John&quot;</span> );</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>( <span class="string">&#x27;&#123; &quot;name&quot;: &quot;John&quot; &#125;&#x27;</span> );</span><br><span class="line"><span class="title function_">alert</span>( obj2.<span class="property">name</span> === <span class="string">&quot;John&quot;</span> );</span><br></pre></td></tr></table></figure><h3 id="Json-NET"><a href="#Json-NET" class="headerlink" title="Json.NET"></a>Json.NET</h3><p>The json object instance from the ‘AjaxServer.asmx’ example above can then be replaced with JsonConvert.SerializeObject(list)</p><p>JsonConvert.DeserializeAnonymousType is also very helpful for unit testing Web API projects.</p><p>The examples from newtonsoft.com are very simple and clearly show how to Serialize and Deserialize json notation.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//******* Serialize JSON</span></span><br><span class="line"> </span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.Name = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">product.Expiry = <span class="keyword">new</span> DateTime(<span class="number">2008</span>, <span class="number">12</span>, <span class="number">28</span>);</span><br><span class="line">product.Sizes = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Small&quot;</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> json = JsonConvert.SerializeObject(product);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;Name&quot;: &quot;Apple&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;Expiry&quot;: &quot;2008-12-28T00:00:00&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;Sizes&quot;: [</span></span><br><span class="line"><span class="comment">//     &quot;Small&quot;</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">﻿</span><br><span class="line"><span class="comment">//******* Deserialize JSON </span></span><br><span class="line"><span class="built_in">string</span> json = <span class="string">@&quot;&#123;</span></span><br><span class="line"><span class="string">  &#x27;Name&#x27;: &#x27;Bad Boys&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;ReleaseDate&#x27;: &#x27;1995-4-7T00:00:00&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Genres&#x27;: [</span></span><br><span class="line"><span class="string">    &#x27;Action&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;Comedy&#x27;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">Movie m = JsonConvert.DeserializeObject&lt;Movie&gt;(json);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> name = m.Name;</span><br><span class="line"><span class="comment">// Bad Boys</span></span><br></pre></td></tr></table></figure><p>Some humour instead of closing thoughts as I really enjoyed ‘The Transporter’ movies :D</p><p><img src="/d/jsonnet-dot-net-library/json-statham.jpg" alt="JSON Statham :D"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.newtonsoft.com/json">https://www.newtonsoft.com/json</a></li><li><a href="https://www.nuget.org/packages/Newtonsoft.Json/">https://www.nuget.org/packages/Newtonsoft.Json/</a></li><li><a href="https://github.com/JamesNK/Newtonsoft.Json">https://github.com/JamesNK/Newtonsoft.Json</a></li><li><a href="https://api.jquery.com/jquery.parsejson/">https://api.jquery.com/jquery.parsejson/</a></li><li><a href="http://www.json.org/">http://www.json.org/</a></li><li><a href="https://github.com/carlpaton/JsonNetWebAppDemo">https://github.com/carlpaton/JsonNetWebAppDemo</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> .net library </tag>
            
            <tag> serialization </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Work In Progress</title>
      <link href="/2017/06/work-in-progress/"/>
      <url>/2017/06/work-in-progress/</url>
      
        <content type="html"><![CDATA[<p><a href="/tags/wip/">See all WIP posts</a></p><p>Work In Progress (WIP) are posts that are currently… well work in progress. This could be an idea I have, something I have read about or heard about from a peer. While doing research and trying things out I work though the post and try flesh it out.</p><p><img src="/d/work-in-progress/work-in-progress.jpg" alt="WIP"></p><p>Sometimes I loose interest or it just gets lost in other posts. Im hoping this <a href="/tags/wip/">WIP Tag</a> will keep me honest!</p>]]></content>
      
      
      
        <tags>
            
            <tag> wip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log Parser</title>
      <link href="/2017/05/log-parser/"/>
      <url>/2017/05/log-parser/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/log-parser/log-parser.jpg" alt="Log Parser"></p><p>Log parser is a powerful tool by Microsoft that can be used to import log files from several applications. In the past I have found it extremely useful when debugging IIS (Internet Information Services) logs for an array of issues including slow web page response to memory leaks.</p><blockquote><p><em>Log parser is a powerful, versatile tool that provides universal query access to text-based data such as log files, XML files and CSV files, as well as key data sources on the Windows® operating system such as the Event Log, the Registry, the file system, and Active Directory®.</em></p></blockquote><p>For this article I will focus on importing and manipulating IIS logs. I assume you have access to the webserver, have installed Log Parser, SQL Server express and SQL Server Management studio. If you have not please see “References” below for download links.</p><h3 id="Locate-IIS-log-files"><a href="#Locate-IIS-log-files" class="headerlink" title="Locate IIS log files"></a>Locate IIS log files</h3><p>By default the IIS logs are stored on the webserver in W3C format in the location <code>%SystemDrive%\inetpub\logs\LogFiles\</code></p><p>This can be checked from IIS by selecting the “host instance” and then double clicking on “Logging”</p><p><img src="/d/log-parser/iis-logging.jpg" alt="IIS Logging"></p><p>The folders inside “LogFiles” correspond to the site instance ID which can be checked by selecting “Sites” then the “Site Name” and selecting “Advanced Settings…”</p><p><img src="/d/log-parser/iis-logging-1.jpg" alt="IIS Logging"></p><p>For the above example the folder would be “W3SVC3” where “VC3” matches the ID 3. The files inside the folder are then stored by date stamp yyMMdd</p><p><img src="/d/log-parser/iis-logging-2.jpg" alt="IIS Logging"></p><h3 id="Import-Logs"><a href="#Import-Logs" class="headerlink" title="Import Logs"></a>Import Logs</h3><p>Firstly create the SQL database <code>webLog</code> on your local instance, the import will automatically create the tables for you if you include the <code>-createTable:ON</code> parameter.</p><p><img src="/d/log-parser/sql.jpg" alt="SQL"></p><p>You can add Log Parser to your environmental variables or simply run it from “C:\Program Files (x86)\Log Parser 2.2”. I prefer to copy the files one at a time to the above location and run the import from command prompt. Once I’m done I delete the .log file to avoid confusion.</p><p>For the below example I copied “u_ex161129.log” to C:\Program Files (x86)\Log Parser 2.2” from the webserver at “C:\inetpub\logs\LogFiles\W3SVC3”</p><p>The import command would then be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOGPARSER &quot;SELECT * INTO webLog2 FROM u_ex161129.log&quot; </span><br><span class="line">-i:W3C </span><br><span class="line">-o:SQL </span><br><span class="line">-server: DESKTOP-EBV6Q8D </span><br><span class="line">-database:webLog </span><br><span class="line">-driver:&quot;SQL Server&quot; </span><br><span class="line">-createTable:ON </span><br><span class="line">-username:sa </span><br><span class="line">-password:sasa</span><br></pre></td></tr></table></figure><p>The successful import will then show statistics of elements processed and execution time.</p><p><img src="/d/log-parser/import.jpg" alt="Import"></p><p>The data can then be seen in SQL Management Studio</p><p><img src="/d/log-parser/sql-1.jpg" alt="SQL"></p><h3 id="Query-data-by-status-code"><a href="#Query-data-by-status-code" class="headerlink" title="Query data by status code"></a>Query data by status code</h3><p>From here you can check the status codes and their counts by date. This can help you determine pages or elements such as images that your site is having issues with.</p><p>Examples:</p><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p><em>The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.</em></p><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p><em>The server encountered an unexpected condition which prevented it from fulfilling the request.</em></p><p>Sample SQL statement to sort by status:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">count([csUriStem]) as cnt, [csUriStem]</span><br><span class="line">FROM [webLog].[dbo].[webLog2]</span><br><span class="line">where scStatus = 404</span><br><span class="line">and date = &#x27;2016-11-29 00:00:00.000&#x27;</span><br><span class="line">group by [csUriStem]</span><br><span class="line">order by cnt desc</span><br></pre></td></tr></table></figure><p>Sample results</p><p><img src="/d/log-parser/sql-2.jpg" alt="SQL"></p><p>This means the code looked for “/images/ui-bg_inset-soft_50_fff_1x100.png” 143 times and error 404 file not found was returned.</p><p>The above can be repeated for server error 500 but additional information such as the query string can be helpful</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">[csUriStem]</span><br><span class="line">,[csUriQuery]</span><br><span class="line">,[timeTaken]</span><br><span class="line">,[timeTaken] / 60000 as timeTakenInMin</span><br><span class="line">FROM [webLog].[dbo].[webLog2]</span><br><span class="line">where scStatus = 500</span><br><span class="line">and date = &#x27;2016-11-29 00:00:00.000&#x27;</span><br><span class="line">order by timeTaken desc</span><br></pre></td></tr></table></figure><p>This would then show pages that are broken or break under different conditions. You can also use the timeTaken field to understand how long a page is taking to break or even time out.</p><h3 id="Query-data-by-execution-time"><a href="#Query-data-by-execution-time" class="headerlink" title="Query data by execution time"></a>Query data by execution time</h3><p>As mentioned above you can query the logs to see how long pages are taking to respond, this is helpful for pages that work but users complain it takes a long time to respond. Often you will get tasks such as “The website is slow” which is not very helpful so you need to figure things out for yourself.</p><p>Sample SQL statement:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">[csUriStem]</span><br><span class="line">,[csUriQuery]</span><br><span class="line">,[timeTaken]</span><br><span class="line">,[timeTaken] / 60000 as timeTakenInMin</span><br><span class="line">FROM [webLog].[dbo].[webLog2]</span><br><span class="line">where scStatus = 200</span><br><span class="line">and date = &#x27;2016-11-29 00:00:00.000&#x27;</span><br><span class="line">order by timeTaken desc</span><br></pre></td></tr></table></figure><p>Sample results:</p><p><img src="/d/log-parser/sql-3.jpg" alt="SQL"></p><p>From the above results you can see that “/Payments.aspx” is the slowest page for the period taking 3 minutes to respond with status 200. It’s not broken, it’s just slow – so you may need to optimize your code or possibly index the database.</p><p>The second slowest page is <code>/PrintStatement.aspx</code> with the query string <code>type=43</code> this means you can debug this page with these parameters to see why it takes 3 minutes to respond.</p><p>I hope this article is useful to other software developers trying to make sense of their IIS logs. If anybody has other tips or advice on how to query the imported data please comment below.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">W3 Web Status codes</a></li><li><a href="https://technet.microsoft.com/en-us/scriptcenter/dd919274.aspx">Log Parser 2.2 (technet.microsoft.com)</a></li><li><a href="https://www.microsoft.com/en-za/download/details.aspx?id=24659">Download Log Parser 2.2</a></li><li><a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads">Download Microsoft SQL Server express</a></li><li><a href="https://www.microsoft.com/en-za/download/details.aspx?id=8961">Download Microsoft SQL Server Management</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fusion Charts</title>
      <link href="/2017/04/fusion-charts/"/>
      <url>/2017/04/fusion-charts/</url>
      
        <content type="html"><![CDATA[<p>Version: <code>3.12.1</code> examples.</p><ul><li><a href="https://docs.fusioncharts.com/archive/3.12.1/getting-started/list-of-charts.html">https://docs.fusioncharts.com/archive/3.12.1/getting-started/list-of-charts.html</a></li></ul><h3 id="Single-Series-Charts"><a href="#Single-Series-Charts" class="headerlink" title="Single Series Charts"></a>Single Series Charts</h3><p>Set as <code>ChartModel.type</code>, there are some <a href="/d/fusion-charts/3.12.1/single-series-charts.html">single series chart examples here</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">column3d,</span><br><span class="line">pie3d,</span><br><span class="line">bar3d</span><br></pre></td></tr></table></figure><h4 id="ChartModel"><a href="#ChartModel" class="headerlink" title="ChartModel"></a>ChartModel</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChartModel</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ChartModel</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      dataSource = <span class="keyword">new</span> dataSource();</span><br><span class="line">      dataSource.chart = <span class="keyword">new</span> chart();</span><br><span class="line">      dataSource.data = <span class="keyword">new</span> List&lt;data&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> renderAt &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> dataFormat &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> dataSource dataSource &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">dataSource</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> chart chart &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> List&lt;data&gt; data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">chart</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> caption &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> subCaption &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> xAxisName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> yAxisName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> theme &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> If set to 3 displays the value as x.xxx in the tool tip</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> decimals &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> showValues &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">data</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> label &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">value</span> &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Combination-Charts"><a href="#Combination-Charts" class="headerlink" title="Combination Charts"></a>Combination Charts</h3><p><a href="/d/fusion-charts/3.12.1/combination-charts.html">Combination charts examples here</a>.</p><ul><li><a href="https://www.fusioncharts.com/charts/combination-charts-single-y/same-axis-column-line-and-area-chart?framework=javascript">https://www.fusioncharts.com/charts/combination-charts-single-y/same-axis-column-line-and-area-chart?framework=javascript</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> utilities </tag>
            
            <tag> reporting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubiquitous Language (UL)</title>
      <link href="/2017/04/ubiquitous-language-ul/"/>
      <url>/2017/04/ubiquitous-language-ul/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/ubiquitous-language-ul/ubiquitous-language-ul-1.jpg" alt="Ubiquitous Language (UL)"></p><p>I have been interacting with clients for years and each client in their respective industry is always a learning curve. It would be an insult to your client if you assume you understand their industry as well as they do, they are running the business while you are simply there to facilitate automation based on their existing knowledge.</p><p>As Software Developers we must never forget that our clients are not interested in our software, the language its written in or which patterns &amp; principles we used. They are interested in what it can do for them and which problems it solves within their respective business domain.</p><p>The problem is always translating the business domain to the code domain in an effective manner and understanding what your client is talking about.</p><p>Enter the Ubiquitous Language (UL)…</p><blockquote><p><em>Ubiquitous Language is the term Eric Evans uses in Domain Driven Design for the practice of building up a common, rigorous language between developers and users.</em></p></blockquote><p>This is a common and business orientated language; the primary goal of the language is to mitigate misunderstandings and bad assumptions. Concretely the Ubiquitous Language (UL) is a vocabulary of domain-specific terms sharer by all parties involved in the project.</p><p>Domain specific terms translate the business domain to the code domain.</p><blockquote><p><em>“A simple definition of a ubiquitous language is to come up with terms that’ll be commonly used when discussing a particular subdomain.” – Steve Smith</em></p></blockquote><p>This includes but is not limited to nouns, verbs, adjectives, idiomatic expressions and even adverbs. Once defined the language should be used in all forms of written and spoken communication thus becoming the universal language of the business.</p><p>In other words a common terminology helps making sense of the user requirements and maintenance of the software. This UL is not static and is continuously updated and refined as the project matures.</p><p>It would be advisable to add an “APPENDIX x, Ubiquitous Language” to your specification document or the client’s collaborations tool, such as their wiki or intranet.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://blog.carbonfive.com/2016/10/04/ubiquitous-language-the-joy-of-naming/">Ubiquitous-language-the-joy-of-naming (Andrew Hao)</a></li><li><a href="https://www.linkedin.com/pulse/ubiquitous-language-serpent-many-heads-javier-hern%C3%A1ndez?articleId=6227452220296691712">Ubiquitous language, a serpent of many heads (Javier Hernández)</a></li><li><a href="https://app.pluralsight.com/player?course=domain-driven-design-fundamentals&author=julie-lerman&name=domain-driven-design-fundamentals-m1&clip=11&mode=live&start=108.236">Domain-Driven Design Fundamentals (Julie Lerman and Steve Smith)</a></li><li><a href="https://www.pluralsight.com/courses/modern-software-architecture-domain-models-cqrs-event-sourcing">Modern-software-architecture-domain-models-cqrs-event-sourcing</a></li><li><a href="https://www.pluralsight.com/courses/domain-driven-design-fundamentals">Domain-driven-design-fundamentals</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ddd </tag>
            
            <tag> agile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Custom Authentication</title>
      <link href="/2015/05/custom-authentication/"/>
      <url>/2015/05/custom-authentication/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Disclaimer, this example uses a static API Key. Rather look at <a href="/2020/12/oauth2-client-credentials-flow/">OAuth 2.0 Client Credentials Flow</a> to request access tokens that would expire.</p></blockquote><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>We needed a simple way to secure an internal Notifications API. It needed to act as a message broker &amp; queue. The flow would be to have actions like</p><ol><li>Queue email to be sent, this would just database it in a queue.</li><li>Process email queue, this would read the queue table and send the emails / updating a <code>done</code> flag. </li></ol><p>The simplest way to secure this is to add an <code>Api-Key</code> to the request header and check its existance and equality in a filter.</p><h3 id="Setup-NotificationApi"><a href="#Setup-NotificationApi" class="headerlink" title="Setup: NotificationApi"></a>Setup: NotificationApi</h3><h4 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NotificationApi.Filters</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiKeyValidationAttribute</span> : <span class="title">FilterAttribute</span>, <span class="title">IAuthorizationFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task&lt;HttpResponseMessage&gt; <span class="title">ExecuteAuthorizationFilterAsync</span>(<span class="params">HttpActionContext actionContext, CancellationToken cancellationToken, Func&lt;Task&lt;HttpResponseMessage&gt;&gt; continuation</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> expected = ConfigurationManager.AppSettings.Get(<span class="string">&quot;apikey&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> actual = actionContext.Request.Headers.GetValues(<span class="string">&quot;Api-Key&quot;</span>).FirstOrDefault();</span><br><span class="line">                <span class="keyword">if</span> (String.IsNullOrWhiteSpace(actual) || actual != expected)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// some logging would be sweet</span></span><br><span class="line"></span><br><span class="line">                actionContext.Response = actionContext.Request.CreateErrorResponse(HttpStatusCode.Unauthorized, <span class="string">&quot;Missing or invalid Api-Key&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> source = <span class="keyword">new</span> TaskCompletionSource&lt;HttpResponseMessage&gt;();</span><br><span class="line">                source.SetResult(actionContext.Response);</span><br><span class="line">                <span class="keyword">return</span> source.Task;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> continuation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="App-start"><a href="#App-start" class="headerlink" title="App start"></a>App start</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NotificationApi.Filters;</span><br><span class="line"><span class="keyword">using</span> System.Web.Http;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http.Headers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NotificationApi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WebApiConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">HttpConfiguration config</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            config.Routes.MapHttpRoute(</span><br><span class="line">                name: <span class="string">&quot;DefaultApi&quot;</span>,</span><br><span class="line">                routeTemplate: <span class="string">&quot;api/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;</span>,</span><br><span class="line">                defaults: <span class="keyword">new</span> &#123; id = RouteParameter.Optional &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// JSON responses please</span></span><br><span class="line">            config.Formatters.JsonFormatter.SupportedMediaTypes</span><br><span class="line">                .Add(<span class="keyword">new</span> MediaTypeHeaderValue(<span class="string">&quot;text/html&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add the filter to check the APIKEY</span></span><br><span class="line">            config.Filters.Add(<span class="keyword">new</span> ApiKeyValidationAttribute());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h4><p>No <code>Authorize</code> attribute/annotation is required on the controllers.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SelectList - view whats in the Queue table. (email_queue.processed = false)        </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> http://localhost:50829/api/email/selectlist</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">SelectList</span>()</span></span><br><span class="line">&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Insert a new Email into the Queue (dbo.email_queue)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">Insert</span>(<span class="params">[FromBody] EmailModel obj</span>)</span></span><br><span class="line">&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Process whats in the Queue table</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> http://localhost:50829/api/email/process</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="comment">// [HttpPut] - not really a PUT as nothing is sent &#x27;TO&#x27; &#x27;Process()&#x27; to be persisted</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">Process</span>()</span></span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="Setup-Consumer"><a href="#Setup-Consumer" class="headerlink" title="Setup: Consumer"></a>Setup: Consumer</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://localhost:50829/api/email/insert&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = (HttpWebRequest)WebRequest.Create(<span class="keyword">new</span> Uri(url));</span><br><span class="line">http.Accept = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">http.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">http.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">http.Headers.Add(<span class="string">&quot;Api-Key&quot;</span>, ConfigurationManager.AppSettings[<span class="string">&quot;apiKey&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/aspnet/hh944103(v=vs.108)">https://docs.microsoft.com/en-us/previous-versions/aspnet/hh944103(v=vs.108)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zucchini</title>
      <link href="/1970/01/zucchini/"/>
      <url>/1970/01/zucchini/</url>
      
        <content type="html"><![CDATA[<p><img src="/d/zucchini/zucchini.jpg" alt="Ya Zucchini"></p>]]></content>
      
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
